
Nucleo575_Display_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027e08  08000240  08000240  00010240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023b7  08028048  08028048  00038048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000004c2  0802a400  0802a400  0003a400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802a8c4  0802a8c4  0003a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00017700  0802a8dc  0802a8dc  0003a8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000028  08041fdc  08041fdc  00051fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  08042004  08042004  00052004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000018  0804200c  0804200c  0005200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   0000000c  08042024  08042024  00052024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000104  20000000  08042030  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000fec0  20000104  08042134  00060104  2**2
                  ALLOC
 12 ._user_heap_stack 00004404  2000ffc4  08042134  0006ffc4  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  00060104  2**0
                  CONTENTS, READONLY
 14 .comment      000000c2  00000000  00000000  0006013a  2**0
                  CONTENTS, READONLY
 15 .debug_info   00085e0b  00000000  00000000  000601fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00010668  00000000  00000000  000e6007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003d10  00000000  00000000  000f6670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002dd7  00000000  00000000  000fa380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004548d  00000000  00000000  000fd157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004a60c  00000000  00000000  001425e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001989bc  00000000  00000000  0018cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00010b7c  00000000  00000000  003255ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  00336128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	; (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000104 	.word	0x20000104
 800025c:	00000000 	.word	0x00000000
 8000260:	08028030 	.word	0x08028030

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	; (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000108 	.word	0x20000108
 800027c:	08028030 	.word	0x08028030

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b982 	b.w	800059c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d146      	bne.n	800034e <__udivmoddi4+0x9e>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d95e      	bls.n	8000384 <__udivmoddi4+0xd4>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	409c      	lsls	r4, r3
 80002d8:	fa20 f202 	lsr.w	r2, r0, r2
 80002dc:	4317      	orrs	r7, r2
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	0c22      	lsrs	r2, r4, #16
 80002e8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	fb01 f005 	mul.w	r0, r1, r5
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x5e>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x5c>
 8000306:	4290      	cmp	r0, r2
 8000308:	f200 8134 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 800030c:	4639      	mov	r1, r7
 800030e:	1a12      	subs	r2, r2, r0
 8000310:	b2a4      	uxth	r4, r4
 8000312:	fbb2 f0fe 	udiv	r0, r2, lr
 8000316:	fb0e 2210 	mls	r2, lr, r0, r2
 800031a:	fb00 f505 	mul.w	r5, r0, r5
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	42a5      	cmp	r5, r4
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x88>
 8000326:	eb1c 0404 	adds.w	r4, ip, r4
 800032a:	f100 32ff 	add.w	r2, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x86>
 8000330:	42a5      	cmp	r5, r4
 8000332:	f200 8119 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 8000336:	4610      	mov	r0, r2
 8000338:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	2100      	movs	r1, #0
 8000340:	b11e      	cbz	r6, 800034a <__udivmoddi4+0x9a>
 8000342:	40dc      	lsrs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	e9c6 4300 	strd	r4, r3, [r6]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0xb4>
 8000352:	2e00      	cmp	r6, #0
 8000354:	f000 80fc 	beq.w	8000550 <__udivmoddi4+0x2a0>
 8000358:	2100      	movs	r1, #0
 800035a:	e9c6 0500 	strd	r0, r5, [r6]
 800035e:	4608      	mov	r0, r1
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	fab3 f183 	clz	r1, r3
 8000368:	2900      	cmp	r1, #0
 800036a:	d14c      	bne.n	8000406 <__udivmoddi4+0x156>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f0c0 80f2 	bcc.w	8000556 <__udivmoddi4+0x2a6>
 8000372:	4282      	cmp	r2, r0
 8000374:	f240 80ef 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000378:	4608      	mov	r0, r1
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e5      	beq.n	800034a <__udivmoddi4+0x9a>
 800037e:	e9c6 4700 	strd	r4, r7, [r6]
 8000382:	e7e2      	b.n	800034a <__udivmoddi4+0x9a>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xd8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f382 	clz	r3, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	f040 809f 	bne.w	80004d0 <__udivmoddi4+0x220>
 8000392:	1a8a      	subs	r2, r1, r2
 8000394:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000398:	fa1f f78c 	uxth.w	r7, ip
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 f5fe 	udiv	r5, r2, lr
 80003a2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003a6:	0c22      	lsrs	r2, r4, #16
 80003a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ac:	fb07 f005 	mul.w	r0, r7, r5
 80003b0:	4290      	cmp	r0, r2
 80003b2:	d90f      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003b4:	eb1c 0202 	adds.w	r2, ip, r2
 80003b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003bc:	bf2c      	ite	cs
 80003be:	f04f 0901 	movcs.w	r9, #1
 80003c2:	f04f 0900 	movcc.w	r9, #0
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d903      	bls.n	80003d2 <__udivmoddi4+0x122>
 80003ca:	f1b9 0f00 	cmp.w	r9, #0
 80003ce:	f000 80ce 	beq.w	800056e <__udivmoddi4+0x2be>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003dc:	fb0e 2210 	mls	r2, lr, r0, r2
 80003e0:	fb00 f707 	mul.w	r7, r0, r7
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	f200 80b3 	bhi.w	8000562 <__udivmoddi4+0x2b2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	1be4      	subs	r4, r4, r7
 8000400:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000404:	e79c      	b.n	8000340 <__udivmoddi4+0x90>
 8000406:	f1c1 0420 	rsb	r4, r1, #32
 800040a:	408b      	lsls	r3, r1
 800040c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000410:	fa22 f704 	lsr.w	r7, r2, r4
 8000414:	40e5      	lsrs	r5, r4
 8000416:	408a      	lsls	r2, r1
 8000418:	431f      	orrs	r7, r3
 800041a:	fa20 f304 	lsr.w	r3, r0, r4
 800041e:	4088      	lsls	r0, r1
 8000420:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb5 fef8 	udiv	lr, r5, r8
 8000434:	fb08 551e 	mls	r5, r8, lr, r5
 8000438:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800043c:	fb0e f90c 	mul.w	r9, lr, ip
 8000440:	45a9      	cmp	r9, r5
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1b2>
 8000444:	197d      	adds	r5, r7, r5
 8000446:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a9      	cmp	r9, r5
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 808d 	beq.w	800057a <__udivmoddi4+0x2ca>
 8000460:	46d6      	mov	lr, sl
 8000462:	eba5 0509 	sub.w	r5, r5, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb5 f3f8 	udiv	r3, r5, r8
 800046e:	fb08 5513 	mls	r5, r8, r3, r5
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800047a:	45ac      	cmp	ip, r5
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1dc>
 800047e:	197d      	adds	r5, r7, r5
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1da>
 8000486:	45ac      	cmp	ip, r5
 8000488:	d87e      	bhi.n	8000588 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000490:	eba5 050c 	sub.w	r5, r5, ip
 8000494:	fba3 9802 	umull	r9, r8, r3, r2
 8000498:	4545      	cmp	r5, r8
 800049a:	46ce      	mov	lr, r9
 800049c:	46c4      	mov	ip, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1f6>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x200>
 80004a2:	4548      	cmp	r0, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x200>
 80004a6:	3b01      	subs	r3, #1
 80004a8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ac:	eb68 0c07 	sbc.w	ip, r8, r7
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d06f      	beq.n	8000594 <__udivmoddi4+0x2e4>
 80004b4:	ebb0 020e 	subs.w	r2, r0, lr
 80004b8:	eb65 050c 	sbc.w	r5, r5, ip
 80004bc:	40ca      	lsrs	r2, r1
 80004be:	fa05 f404 	lsl.w	r4, r5, r4
 80004c2:	40cd      	lsrs	r5, r1
 80004c4:	4618      	mov	r0, r3
 80004c6:	4314      	orrs	r4, r2
 80004c8:	2100      	movs	r1, #0
 80004ca:	e9c6 4500 	strd	r4, r5, [r6]
 80004ce:	e73c      	b.n	800034a <__udivmoddi4+0x9a>
 80004d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d4:	f1c3 0220 	rsb	r2, r3, #32
 80004d8:	4099      	lsls	r1, r3
 80004da:	409c      	lsls	r4, r3
 80004dc:	40d5      	lsrs	r5, r2
 80004de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004e2:	fa20 f202 	lsr.w	r2, r0, r2
 80004e6:	fa1f f78c 	uxth.w	r7, ip
 80004ea:	fbb5 f0fe 	udiv	r0, r5, lr
 80004ee:	430a      	orrs	r2, r1
 80004f0:	fb0e 5510 	mls	r5, lr, r0, r5
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f507 	mul.w	r5, r0, r7
 80004fe:	428d      	cmp	r5, r1
 8000500:	d90e      	bls.n	8000520 <__udivmoddi4+0x270>
 8000502:	eb1c 0101 	adds.w	r1, ip, r1
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	bf2c      	ite	cs
 800050c:	f04f 0901 	movcs.w	r9, #1
 8000510:	f04f 0900 	movcc.w	r9, #0
 8000514:	428d      	cmp	r5, r1
 8000516:	d902      	bls.n	800051e <__udivmoddi4+0x26e>
 8000518:	f1b9 0f00 	cmp.w	r9, #0
 800051c:	d031      	beq.n	8000582 <__udivmoddi4+0x2d2>
 800051e:	4640      	mov	r0, r8
 8000520:	1b49      	subs	r1, r1, r5
 8000522:	b292      	uxth	r2, r2
 8000524:	fbb1 f5fe 	udiv	r5, r1, lr
 8000528:	fb0e 1115 	mls	r1, lr, r5, r1
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	fb05 f107 	mul.w	r1, r5, r7
 8000534:	4291      	cmp	r1, r2
 8000536:	d907      	bls.n	8000548 <__udivmoddi4+0x298>
 8000538:	eb1c 0202 	adds.w	r2, ip, r2
 800053c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x296>
 8000542:	4291      	cmp	r1, r2
 8000544:	d823      	bhi.n	800058e <__udivmoddi4+0x2de>
 8000546:	4645      	mov	r5, r8
 8000548:	1a52      	subs	r2, r2, r1
 800054a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800054e:	e726      	b.n	800039e <__udivmoddi4+0xee>
 8000550:	4631      	mov	r1, r6
 8000552:	4630      	mov	r0, r6
 8000554:	e6f9      	b.n	800034a <__udivmoddi4+0x9a>
 8000556:	1a84      	subs	r4, r0, r2
 8000558:	eb65 0203 	sbc.w	r2, r5, r3
 800055c:	2001      	movs	r0, #1
 800055e:	4617      	mov	r7, r2
 8000560:	e70b      	b.n	800037a <__udivmoddi4+0xca>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14e>
 8000568:	4464      	add	r4, ip
 800056a:	3802      	subs	r0, #2
 800056c:	e6e4      	b.n	8000338 <__udivmoddi4+0x88>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	3902      	subs	r1, #2
 8000576:	4462      	add	r2, ip
 8000578:	e6c9      	b.n	800030e <__udivmoddi4+0x5e>
 800057a:	f1ae 0e02 	sub.w	lr, lr, #2
 800057e:	443d      	add	r5, r7
 8000580:	e76f      	b.n	8000462 <__udivmoddi4+0x1b2>
 8000582:	3802      	subs	r0, #2
 8000584:	4461      	add	r1, ip
 8000586:	e7cb      	b.n	8000520 <__udivmoddi4+0x270>
 8000588:	3b02      	subs	r3, #2
 800058a:	443d      	add	r5, r7
 800058c:	e77e      	b.n	800048c <__udivmoddi4+0x1dc>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7d9      	b.n	8000548 <__udivmoddi4+0x298>
 8000594:	4618      	mov	r0, r3
 8000596:	4631      	mov	r1, r6
 8000598:	e6d7      	b.n	800034a <__udivmoddi4+0x9a>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <MX_FREERTOS_Init+0x38>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_FREERTOS_Init+0x3c>)
 80005aa:	f00c f8c1 	bl	800c730 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <MX_FREERTOS_Init+0x40>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <MX_FREERTOS_Init+0x44>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <MX_FREERTOS_Init+0x48>)
 80005ba:	f00c f8b9 	bl	800c730 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <MX_FREERTOS_Init+0x4c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Displ_Init(Displ_Orientat_90);			// (mandatory) initialize display controller - set orientation parameter as per TouchGFX setup
 80005c4:	2001      	movs	r0, #1
 80005c6:	f001 fa0f 	bl	80019e8 <Displ_Init>
  touchgfxSignalVSync();					// ask display syncronization
 80005ca:	f013 f8cf 	bl	801376c <touchgfxSignalVSync>
  Displ_BackLight('F');
 80005ce:	2046      	movs	r0, #70	; 0x46
 80005d0:	f001 fab0 	bl	8001b34 <Displ_BackLight>

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	0802921c 	.word	0x0802921c
 80005dc:	080005f1 	.word	0x080005f1
 80005e0:	20000120 	.word	0x20000120
 80005e4:	08029240 	.word	0x08029240
 80005e8:	0800fc3f 	.word	0x0800fc3f
 80005ec:	20000124 	.word	0x20000124

080005f0 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
	  touchgfxSignalVSync();
 80005f8:	f013 f8b8 	bl	801376c <touchgfxSignalVSync>
    osDelay(1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f00c f928 	bl	800c852 <osDelay>
	  touchgfxSignalVSync();
 8000602:	e7f9      	b.n	80005f8 <StartDefaultTask+0x8>

08000604 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <LL_AHB2_GRP1_EnableClock+0x34>)
 800060e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000612:	4909      	ldr	r1, [pc, #36]	; (8000638 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <LL_AHB2_GRP1_EnableClock+0x34>)
 800061e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4013      	ands	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000628:	68fb      	ldr	r3, [r7, #12]
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	46020c00 	.word	0x46020c00

0800063c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <LL_APB1_GRP2_EnableClock+0x34>)
 8000646:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <LL_APB1_GRP2_EnableClock+0x34>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LL_APB1_GRP2_EnableClock+0x34>)
 8000656:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000660:	68fb      	ldr	r3, [r7, #12]
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	46020c00 	.word	0x46020c00

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f001 fb32 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f822 	bl	80006c4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000680:	f000 f8b2 	bl	80007e8 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 faf4 	bl	8000c70 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000688:	f000 f922 	bl	80008d0 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 800068c:	f000 f8ba 	bl	8000804 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000690:	f000 f93e 	bl	8000910 <MX_ICACHE_Init>
  MX_SPI1_Init();
 8000694:	f000 f976 	bl	8000984 <MX_SPI1_Init>
  MX_UCPD1_Init();
 8000698:	f000 fa36 	bl	8000b08 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 800069c:	f000 fa6a 	bl	8000b74 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a0:	f000 fab4 	bl	8000c0c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM15_Init();
 80006a4:	f000 f9de 	bl	8000a64 <MX_TIM15_Init>
  MX_CRC_Init();
 80006a8:	f000 f8f0 	bl	800088c <MX_CRC_Init>
  MX_TouchGFX_Init();
 80006ac:	f00f fabf 	bl	800fc2e <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80006b0:	f00f fab6 	bl	800fc20 <MX_TouchGFX_PreOSInit>
  /* add events, ... */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b4:	f00b ffec 	bl	800c690 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006b8:	f7ff ff72 	bl	80005a0 <MX_FREERTOS_Init>


  /* Start scheduler */
  osKernelStart();
 80006bc:	f00c f80e 	bl	800c6dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0x4c>
	...

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0a6      	sub	sp, #152	; 0x98
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ce:	2260      	movs	r2, #96	; 0x60
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f026 fe23 	bl	802731e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
 80006fa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006fc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000700:	f004 fb42 	bl	8004d88 <HAL_PWREx_ControlVoltageScaling>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800070a:	f000 fbcd 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800070e:	2322      	movs	r3, #34	; 0x22
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2310      	movs	r3, #16
 8000720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000726:	2302      	movs	r3, #2
 8000728:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000732:	2314      	movs	r3, #20
 8000734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800074a:	230c      	movs	r3, #12
 800074c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800075a:	4618      	mov	r0, r3
 800075c:	f004 fc20 	bl	8004fa0 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000766:	f000 fb9f 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	231f      	movs	r3, #31
 800076c:	623b      	str	r3, [r7, #32]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2303      	movs	r3, #3
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2104      	movs	r1, #4
 8000788:	4618      	mov	r0, r3
 800078a:	f005 fae5 	bl	8005d58 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000794:	f000 fb88 	bl	8000ea8 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <SystemClock_Config+0x120>)
 800079a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800079e:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <SystemClock_Config+0x120>)
 80007a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007a4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <SystemClock_Config+0x120>)
 80007aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80007ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80007c4:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80007ca:	2322      	movs	r3, #34	; 0x22
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80007ce:	2320      	movs	r3, #32
 80007d0:	61fb      	str	r3, [r7, #28]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4618      	mov	r0, r3
 80007d8:	f008 fa2e 	bl	8008c38 <HAL_RCCEx_CRSConfig>
}
 80007dc:	bf00      	nop
 80007de:	3798      	adds	r7, #152	; 0x98
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	46020c00 	.word	0x46020c00

080007e8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80007ec:	f004 fbb8 	bl	8004f60 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80007f0:	2002      	movs	r0, #2
 80007f2:	f004 fb55 	bl	8004ea0 <HAL_PWREx_ConfigSupply>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80007fc:	f000 fb54 	bl	8000ea8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_ADC1_Init+0x80>)
 800080a:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <MX_ADC1_Init+0x84>)
 800080c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_ADC1_Init+0x80>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_ADC1_Init+0x80>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_ADC1_Init+0x80>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_ADC1_Init+0x80>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_ADC1_Init+0x80>)
 8000828:	2204      	movs	r2, #4
 800082a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_ADC1_Init+0x80>)
 800082e:	2200      	movs	r2, #0
 8000830:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_ADC1_Init+0x80>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_ADC1_Init+0x80>)
 800083c:	2201      	movs	r2, #1
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_ADC1_Init+0x80>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_ADC1_Init+0x80>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_ADC1_Init+0x80>)
 8000852:	2200      	movs	r2, #0
 8000854:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_ADC1_Init+0x80>)
 8000858:	2200      	movs	r2, #0
 800085a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_ADC1_Init+0x80>)
 800085e:	2200      	movs	r2, #0
 8000860:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_ADC1_Init+0x80>)
 8000864:	2200      	movs	r2, #0
 8000866:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_ADC1_Init+0x80>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_ADC1_Init+0x80>)
 8000872:	f001 fba5 	bl	8001fc0 <HAL_ADC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800087c:	f000 fb14 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000128 	.word	0x20000128
 8000888:	42028000 	.word	0x42028000

0800088c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_CRC_Init+0x3c>)
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <MX_CRC_Init+0x40>)
 8000894:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_CRC_Init+0x3c>)
 8000898:	2200      	movs	r2, #0
 800089a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_CRC_Init+0x3c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_CRC_Init+0x3c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_CRC_Init+0x3c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_CRC_Init+0x3c>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_CRC_Init+0x3c>)
 80008b6:	f001 ff2d 	bl	8002714 <HAL_CRC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008c0:	f000 faf2 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001b4 	.word	0x200001b4
 80008cc:	40023000 	.word	0x40023000

080008d0 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_GPDMA1_Init+0x3c>)
 80008d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <MX_GPDMA1_Init+0x3c>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_GPDMA1_Init+0x3c>)
 80008e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2105      	movs	r1, #5
 80008f8:	201d      	movs	r0, #29
 80008fa:	f001 fee3 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80008fe:	201d      	movs	r0, #29
 8000900:	f001 fefa 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	46020c00 	.word	0x46020c00

08000910 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000924:	f003 f92c 	bl	8003b80 <HAL_ICACHE_Disable>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800092e:	f000 fabb 	bl	8000ea8 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000932:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000938:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800093c:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 800093e:	2301      	movs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	2000      	movs	r0, #0
 8000950:	f003 f946 	bl	8003be0 <HAL_ICACHE_EnableRemapRegion>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 800095a:	f000 faa5 	bl	8000ea8 <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800095e:	2000      	movs	r0, #0
 8000960:	f003 f8de 	bl	8003b20 <HAL_ICACHE_ConfigAssociativityMode>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ICACHE_Init+0x5e>
  {
    Error_Handler();
 800096a:	f000 fa9d 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800096e:	f003 f8f7 	bl	8003b60 <HAL_ICACHE_Enable>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ICACHE_Init+0x6c>
  {
    Error_Handler();
 8000978:	f000 fa96 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000994:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000996:	4a32      	ldr	r2, [pc, #200]	; (8000a60 <MX_SPI1_Init+0xdc>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <MX_SPI1_Init+0xd8>)
 800099c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a8:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009aa:	2203      	movs	r2, #3
 80009ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009c4:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80009c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009de:	2207      	movs	r2, #7
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_SPI1_Init+0xd8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a20:	480e      	ldr	r0, [pc, #56]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000a22:	f008 fa7b 	bl	8008f1c <HAL_SPI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000a2c:	f000 fa3c 	bl	8000ea8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000a34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000a44:	f009 fac7 	bl	8009fd6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000a4e:	f000 fa2b 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001d8 	.word	0x200001d8
 8000a60:	40013000 	.word	0x40013000

08000a64 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a84:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <MX_TIM15_Init+0xa0>)
 8000a86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 160;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a8a:	22a0      	movs	r2, #160	; 0xa0
 8000a8c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000ab2:	f009 fad1 	bl	800a058 <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 f9f4 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000ace:	f009 fd0b 	bl	800a4e8 <HAL_TIM_ConfigClockSource>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000ad8:	f000 f9e6 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000aea:	f009 ffbd 	bl	800aa68 <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000af4:	f000 f9d8 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200002e0 	.word	0x200002e0
 8000b04:	40014000 	.word	0x40014000

08000b08 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000b1e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b22:	f7ff fd8b 	bl	800063c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff fd6c 	bl	8000604 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff fd69 	bl	8000604 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b36:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <MX_UCPD1_Init+0x64>)
 8000b46:	f00a fef0 	bl	800b92a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b4e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b50:	2303      	movs	r3, #3
 8000b52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_UCPD1_Init+0x68>)
 8000b5e:	f00a fee4 	bl	800b92a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	42020400 	.word	0x42020400
 8000b70:	42020000 	.word	0x42020000

08000b74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b7a:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <MX_USART1_UART_Init+0x94>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bbe:	f00a f85b 	bl	800ac78 <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bc8:	f000 f96e 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bd0:	f00a fc96 	bl	800b500 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bda:	f000 f965 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000be2:	f00a fccb 	bl	800b57c <HAL_UARTEx_SetRxFifoThreshold>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f000 f95c 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bf2:	f00a fc4c 	bl	800b48e <HAL_UARTEx_DisableFifoMode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f954 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000032c 	.word	0x2000032c
 8000c08:	40013800 	.word	0x40013800

08000c0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c12:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c18:	2206      	movs	r2, #6
 8000c1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c54:	f003 f816 	bl	8003c84 <HAL_PCD_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c5e:	f000 f923 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200003c0 	.word	0x200003c0
 8000c6c:	42040000 	.word	0x42040000

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b79      	ldr	r3, [pc, #484]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c8c:	4a77      	ldr	r2, [pc, #476]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c96:	4b75      	ldr	r3, [pc, #468]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b71      	ldr	r3, [pc, #452]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000caa:	4a70      	ldr	r2, [pc, #448]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cb4:	4b6d      	ldr	r3, [pc, #436]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b6a      	ldr	r3, [pc, #424]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cc8:	4a68      	ldr	r2, [pc, #416]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cd2:	4b66      	ldr	r3, [pc, #408]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce0:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ce6:	4a61      	ldr	r2, [pc, #388]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cf0:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cf6:	f003 0320 	and.w	r3, r3, #32
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfe:	4b5b      	ldr	r3, [pc, #364]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d04:	4a59      	ldr	r2, [pc, #356]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d0e:	4b57      	ldr	r3, [pc, #348]	; (8000e6c <MX_GPIO_Init+0x1fc>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4853      	ldr	r0, [pc, #332]	; (8000e70 <MX_GPIO_Init+0x200>)
 8000d22:	f002 febf 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|DISPL_DC_Pin|UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	21a6      	movs	r1, #166	; 0xa6
 8000d2a:	4851      	ldr	r0, [pc, #324]	; (8000e70 <MX_GPIO_Init+0x200>)
 8000d2c:	f002 feba 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d36:	484f      	ldr	r0, [pc, #316]	; (8000e74 <MX_GPIO_Init+0x204>)
 8000d38:	f002 feb4 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d42:	484c      	ldr	r0, [pc, #304]	; (8000e74 <MX_GPIO_Init+0x204>)
 8000d44:	f002 feae 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	484a      	ldr	r0, [pc, #296]	; (8000e78 <MX_GPIO_Init+0x208>)
 8000d4e:	f002 fea9 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	4849      	ldr	r0, [pc, #292]	; (8000e7c <MX_GPIO_Init+0x20c>)
 8000d58:	f002 fea4 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d62:	4b47      	ldr	r3, [pc, #284]	; (8000e80 <MX_GPIO_Init+0x210>)
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4842      	ldr	r0, [pc, #264]	; (8000e7c <MX_GPIO_Init+0x20c>)
 8000d72:	f002 fca7 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4838      	ldr	r0, [pc, #224]	; (8000e70 <MX_GPIO_Init+0x200>)
 8000d8e:	f002 fc99 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin DISPL_DC_Pin UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|DISPL_DC_Pin|UCPD_DBn_Pin;
 8000d92:	2326      	movs	r3, #38	; 0x26
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4831      	ldr	r0, [pc, #196]	; (8000e70 <MX_GPIO_Init+0x200>)
 8000daa:	f002 fc8b 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_CS_Pin DISPL_LED_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|DISPL_LED_Pin;
 8000dae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	482b      	ldr	r0, [pc, #172]	; (8000e74 <MX_GPIO_Init+0x204>)
 8000dc8:	f002 fc7c 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8000dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <MX_GPIO_Init+0x210>)
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4824      	ldr	r0, [pc, #144]	; (8000e74 <MX_GPIO_Init+0x204>)
 8000de2:	f002 fc6f 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000de6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	481d      	ldr	r0, [pc, #116]	; (8000e70 <MX_GPIO_Init+0x200>)
 8000dfc:	f002 fc62 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000e00:	2304      	movs	r3, #4
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4818      	ldr	r0, [pc, #96]	; (8000e78 <MX_GPIO_Init+0x208>)
 8000e18:	f002 fc54 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4812      	ldr	r0, [pc, #72]	; (8000e7c <MX_GPIO_Init+0x20c>)
 8000e34:	f002 fc46 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <MX_GPIO_Init+0x200>)
 8000e50:	f002 fc38 	bl	80036c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI14_IRQn, 5, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2105      	movs	r1, #5
 8000e58:	2019      	movs	r0, #25
 8000e5a:	f001 fc33 	bl	80026c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000e5e:	2019      	movs	r0, #25
 8000e60:	f001 fc4a 	bl	80026f8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	46020c00 	.word	0x46020c00
 8000e70:	42020400 	.word	0x42020400
 8000e74:	42021400 	.word	0x42021400
 8000e78:	42021800 	.word	0x42021800
 8000e7c:	42020800 	.word	0x42020800
 8000e80:	10210000 	.word	0x10210000

08000e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e96:	f000 ff51 	bl	8001d3c <HAL_IncTick>
  if (htim==&TGFX_T){
//  		touchgfxSignalVSync();
    }

  /* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40001400 	.word	0x40001400

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_MspInit+0x3c>)
 8000ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_MspInit+0x3c>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_MspInit+0x3c>)
 8000ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000ed8:	f004 f852 	bl	8004f80 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f06f 0001 	mvn.w	r0, #1
 8000ee4:	f001 fbee 	bl	80026c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	46020c00 	.word	0x46020c00

08000ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0ba      	sub	sp, #232	; 0xe8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	22c0      	movs	r2, #192	; 0xc0
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f026 fa02 	bl	802731e <memset>
  if(hadc->Instance==ADC1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <HAL_ADC_MspInit+0xbc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d140      	bne.n	8000fa6 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000f24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000f30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fb13 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000f48:	f7ff ffae 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_ADC_MspInit+0xc0>)
 8000f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <HAL_ADC_MspInit+0xc0>)
 8000f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_ADC_MspInit+0xc0>)
 8000f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_ADC_MspInit+0xc0>)
 8000f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_ADC_MspInit+0xc0>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_ADC_MspInit+0xc0>)
 8000f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xc4>)
 8000fa2:	f002 fb8f 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	37e8      	adds	r7, #232	; 0xe8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	42028000 	.word	0x42028000
 8000fb4:	46020c00 	.word	0x46020c00
 8000fb8:	42020800 	.word	0x42020800

08000fbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_CRC_MspInit+0x3c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10e      	bne.n	8000fec <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd4:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40023000 	.word	0x40023000
 8000ffc:	46020c00 	.word	0x46020c00

08001000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ba      	sub	sp, #232	; 0xe8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	22c0      	movs	r2, #192	; 0xc0
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f026 f97c 	bl	802731e <memset>
  if(hspi->Instance==SPI1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a4d      	ldr	r2, [pc, #308]	; (8001160 <HAL_SPI_MspInit+0x160>)
 800102c:	4293      	cmp	r3, r2
 800102e:	f040 8092 	bne.w	8001156 <HAL_SPI_MspInit+0x156>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001032:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800103e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4618      	mov	r0, r3
 800104c:	f005 fa8c 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_SPI_MspInit+0x5a>
    {
      Error_Handler();
 8001056:	f7ff ff27 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	4b42      	ldr	r3, [pc, #264]	; (8001164 <HAL_SPI_MspInit+0x164>)
 800105c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001060:	4a40      	ldr	r2, [pc, #256]	; (8001164 <HAL_SPI_MspInit+0x164>)
 8001062:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001066:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <HAL_SPI_MspInit+0x164>)
 800106c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <HAL_SPI_MspInit+0x164>)
 800107a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800107e:	4a39      	ldr	r2, [pc, #228]	; (8001164 <HAL_SPI_MspInit+0x164>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_SPI_MspInit+0x164>)
 800108a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8001096:	23c2      	movs	r3, #194	; 0xc2
 8001098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ae:	2305      	movs	r3, #5
 80010b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b8:	4619      	mov	r1, r3
 80010ba:	482b      	ldr	r0, [pc, #172]	; (8001168 <HAL_SPI_MspInit+0x168>)
 80010bc:	f002 fb02 	bl	80036c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010c2:	4a2b      	ldr	r2, [pc, #172]	; (8001170 <HAL_SPI_MspInit+0x170>)
 80010c4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_SPI_MspInit+0x16c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_SPI_MspInit+0x16c>)
 8001100:	2201      	movs	r2, #1
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_SPI_MspInit+0x16c>)
 8001106:	2200      	movs	r2, #0
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_SPI_MspInit+0x16c>)
 800110c:	2200      	movs	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_SPI_MspInit+0x16c>)
 8001112:	2200      	movs	r2, #0
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001116:	4815      	ldr	r0, [pc, #84]	; (800116c <HAL_SPI_MspInit+0x16c>)
 8001118:	f001 fbee 	bl	80028f8 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8001122:	f7ff fec1 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel0);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_SPI_MspInit+0x16c>)
 800112a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_SPI_MspInit+0x16c>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001134:	2110      	movs	r1, #16
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <HAL_SPI_MspInit+0x16c>)
 8001138:	f001 ff1f 	bl	8002f7a <HAL_DMA_ConfigChannelAttributes>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 8001142:	f7ff feb1 	bl	8000ea8 <Error_Handler>
    }

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	203b      	movs	r0, #59	; 0x3b
 800114c:	f001 faba 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001150:	203b      	movs	r0, #59	; 0x3b
 8001152:	f001 fad1 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	37e8      	adds	r7, #232	; 0xe8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40013000 	.word	0x40013000
 8001164:	46020c00 	.word	0x46020c00
 8001168:	42020000 	.word	0x42020000
 800116c:	20000268 	.word	0x20000268
 8001170:	40020050 	.word	0x40020050

08001174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_TIM_Base_MspInit+0x48>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d116      	bne.n	80011b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_TIM_Base_MspInit+0x4c>)
 8001188:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_TIM_Base_MspInit+0x4c>)
 800118e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001192:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_TIM_Base_MspInit+0x4c>)
 8001198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 5, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2105      	movs	r1, #5
 80011a8:	2045      	movs	r0, #69	; 0x45
 80011aa:	f001 fa8b 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80011ae:	2045      	movs	r0, #69	; 0x45
 80011b0:	f001 faa2 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40014000 	.word	0x40014000
 80011c0:	46020c00 	.word	0x46020c00

080011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ba      	sub	sp, #232	; 0xe8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	22c0      	movs	r2, #192	; 0xc0
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f026 f89a 	bl	802731e <memset>
  if(huart->Instance==USART1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_UART_MspInit+0xc4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d145      	bne.n	8001280 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011f4:	f04f 0201 	mov.w	r2, #1
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001200:	2300      	movs	r3, #0
 8001202:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4618      	mov	r0, r3
 800120a:	f005 f9ad 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001214:	f7ff fe48 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_UART_MspInit+0xc8>)
 800121a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_UART_MspInit+0xc8>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_UART_MspInit+0xc8>)
 800122a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_UART_MspInit+0xc8>)
 8001238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <HAL_UART_MspInit+0xc8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_UART_MspInit+0xc8>)
 8001248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001254:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001258:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800126e:	2307      	movs	r3, #7
 8001270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_UART_MspInit+0xcc>)
 800127c:	f002 fa22 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	37e8      	adds	r7, #232	; 0xe8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40013800 	.word	0x40013800
 800128c:	46020c00 	.word	0x46020c00
 8001290:	42020000 	.word	0x42020000

08001294 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0bc      	sub	sp, #240	; 0xf0
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	22c0      	movs	r2, #192	; 0xc0
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f026 f832 	bl	802731e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <HAL_PCD_MspInit+0x11c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d171      	bne.n	80013a8 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 f944 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80012e6:	f7ff fddf 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 80012ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012f0:	4a30      	ldr	r2, [pc, #192]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 80012fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001308:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800130c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001322:	230a      	movs	r3, #10
 8001324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800132c:	4619      	mov	r1, r3
 800132e:	4822      	ldr	r0, [pc, #136]	; (80013b8 <HAL_PCD_MspInit+0x124>)
 8001330:	f002 f9c8 	bl	80036c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 8001336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800133a:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 8001346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 8001354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d119      	bne.n	8001394 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 8001362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001366:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 8001372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800137e:	f003 fddf 	bl	8004f40 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 8001384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_PCD_MspInit+0x120>)
 800138a:	f023 0304 	bic.w	r3, r3, #4
 800138e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001392:	e001      	b.n	8001398 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001394:	f003 fdd4 	bl	8004f40 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2105      	movs	r1, #5
 800139c:	2049      	movs	r0, #73	; 0x49
 800139e:	f001 f991 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80013a2:	2049      	movs	r0, #73	; 0x49
 80013a4:	f001 f9a8 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	37f0      	adds	r7, #240	; 0xf0
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	42040000 	.word	0x42040000
 80013b4:	46020c00 	.word	0x46020c00
 80013b8:	42020000 	.word	0x42020000

080013bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	; 0x38
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80013cc:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <HAL_InitTick+0xcc>)
 80013ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013d2:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <HAL_InitTick+0xcc>)
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <HAL_InitTick+0xcc>)
 80013de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ea:	f107 0210 	add.w	r2, r7, #16
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 fff9 	bl	80063ec <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fa:	f004 ffbb 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 80013fe:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001402:	4a22      	ldr	r2, [pc, #136]	; (800148c <HAL_InitTick+0xd0>)
 8001404:	fba2 2303 	umull	r2, r3, r2, r3
 8001408:	0c9b      	lsrs	r3, r3, #18
 800140a:	3b01      	subs	r3, #1
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_InitTick+0xd4>)
 8001410:	4a20      	ldr	r2, [pc, #128]	; (8001494 <HAL_InitTick+0xd8>)
 8001412:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_InitTick+0xd4>)
 8001416:	f240 32e7 	movw	r2, #999	; 0x3e7
 800141a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800141c:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <HAL_InitTick+0xd4>)
 800141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001420:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_InitTick+0xd4>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_InitTick+0xd4>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <HAL_InitTick+0xd4>)
 8001430:	f008 fe12 	bl	800a058 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800143a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001442:	4813      	ldr	r0, [pc, #76]	; (8001490 <HAL_InitTick+0xd4>)
 8001444:	f008 fe60 	bl	800a108 <HAL_TIM_Base_Start_IT>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800144e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10e      	bne.n	8001474 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d808      	bhi.n	800146e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM7 global Interrupt */
        HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2032      	movs	r0, #50	; 0x32
 8001462:	f001 f92f 	bl	80026c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <HAL_InitTick+0xdc>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e002      	b.n	8001474 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001474:	2032      	movs	r0, #50	; 0x32
 8001476:	f001 f93f 	bl	80026f8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800147a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800147e:	4618      	mov	r0, r3
 8001480:	3738      	adds	r7, #56	; 0x38
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	46020c00 	.word	0x46020c00
 800148c:	431bde83 	.word	0x431bde83
 8001490:	200008cc 	.word	0x200008cc
 8001494:	40001400 	.word	0x40001400
 8001498:	2000000c 	.word	0x2000000c

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 80014cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014d0:	f002 fb00 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <GPDMA1_Channel0_IRQHandler+0x10>)
 80014de:	f001 fbc4 	bl	8002c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000268 	.word	0x20000268

080014ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM7_IRQHandler+0x10>)
 80014f2:	f008 fea9 	bl	800a248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200008cc 	.word	0x200008cc

08001500 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <SPI1_IRQHandler+0x10>)
 8001506:	f008 fa13 	bl	8009930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001d8 	.word	0x200001d8

08001514 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM15_IRQHandler+0x10>)
 800151a:	f008 fe95 	bl	800a248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002e0 	.word	0x200002e0

08001528 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <OTG_FS_IRQHandler+0x10>)
 800152e:	f002 fccd 	bl	8003ecc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200003c0 	.word	0x200003c0

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001556:	f025 ffdb 	bl	8027510 <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
  while (1) {}    /* Make sure we hang here */
 800157e:	e7fe      	b.n	800157e <_exit+0x12>

08001580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e00a      	b.n	80015a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001592:	f3af 8000 	nop.w
 8001596:	4601      	mov	r1, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf0      	blt.n	8001592 <_read+0x12>
  }

  return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e009      	b.n	80015e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf1      	blt.n	80015cc <_write+0x12>
  }
  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_close>:

int _close(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	605a      	str	r2, [r3, #4]
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f025 ff40 	bl	8027510 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200c0000 	.word	0x200c0000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	20000918 	.word	0x20000918
 80016c4:	2000ffc8 	.word	0x2000ffc8

080016c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <SystemInit+0x68>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <SystemInit+0x68>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <SystemInit+0x6c>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <SystemInit+0x6c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <SystemInit+0x6c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <SystemInit+0x6c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <SystemInit+0x6c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <SystemInit+0x6c>)
 80016fa:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016fe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001702:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <SystemInit+0x6c>)
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <SystemInit+0x6c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <SystemInit+0x6c>)
 8001710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001714:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <SystemInit+0x6c>)
 8001718:	2200      	movs	r2, #0
 800171a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SystemInit+0x68>)
 800171e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001722:	609a      	str	r2, [r3, #8]
  #endif
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00
 8001734:	46020c00 	.word	0x46020c00

08001738 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 800173c:	2101      	movs	r1, #1
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <Displ_Select+0x2c>)
 8001740:	f002 f998 	bl	8003a74 <HAL_GPIO_ReadPin>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00a      	beq.n	8001760 <Displ_Select+0x28>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <Displ_Select+0x30>)
 8001752:	f002 f9a7 	bl	8003aa4 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8001756:	2200      	movs	r2, #0
 8001758:	2101      	movs	r1, #1
 800175a:	4802      	ldr	r0, [pc, #8]	; (8001764 <Displ_Select+0x2c>)
 800175c:	f002 f9a2 	bl	8003aa4 <HAL_GPIO_WritePin>
		}
	}
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	42020400 	.word	0x42020400
 8001768:	42021400 	.word	0x42021400

0800176c <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6039      	str	r1, [r7, #0]
 8001774:	4611      	mov	r1, r2
 8001776:	461a      	mov	r2, r3
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	460b      	mov	r3, r1
 800177e:	80bb      	strh	r3, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8001784:	bf00      	nop
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <Displ_Transmit+0x10c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0fa      	beq.n	8001786 <Displ_Transmit+0x1a>

	Displ_Select();
 8001790:	f7ff ffd2 	bl	8001738 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	461a      	mov	r2, r3
 8001798:	2104      	movs	r1, #4
 800179a:	4838      	ldr	r0, [pc, #224]	; (800187c <Displ_Transmit+0x110>)
 800179c:	f002 f982 	bl	8003aa4 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <Displ_Transmit+0xc4>
			*data32=__REV16(*data32);
		}
#else
//if display color format is RGB666: convert RGB565 received by TouchGFX and swap bytes

		uint8_t *buf8Pos=dispBuffer1; 							//using a local pointer
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <Displ_Transmit+0x114>)
 80017a8:	617b      	str	r3, [r7, #20]

		uint16_t *limit=(uint16_t*)(data+dataSize);
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e020      	b.n	80017fa <Displ_Transmit+0x8e>

			*(buf8Pos++)=((*data16 & 0xF800)>>8);  // R color
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	121b      	asrs	r3, r3, #8
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	1c59      	adds	r1, r3, #1
 80017c4:	6179      	str	r1, [r7, #20]
 80017c6:	f022 0207 	bic.w	r2, r2, #7
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x07E0)>>3);  // G color
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	10db      	asrs	r3, r3, #3
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	1c59      	adds	r1, r3, #1
 80017da:	6179      	str	r1, [r7, #20]
 80017dc:	f022 0203 	bic.w	r2, r2, #3
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x001F)<<3);  // B color
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	00d9      	lsls	r1, r3, #3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	617a      	str	r2, [r7, #20]
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	3302      	adds	r3, #2
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	429a      	cmp	r2, r3
 8001800:	bf34      	ite	cc
 8001802:	2301      	movcc	r3, #1
 8001804:	2300      	movcs	r3, #0
 8001806:	b2da      	uxtb	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	491d      	ldr	r1, [pc, #116]	; (8001880 <Displ_Transmit+0x114>)
 800180c:	1a5b      	subs	r3, r3, r1
 800180e:	f643 71fc 	movw	r1, #16380	; 0x3ffc
 8001812:	428b      	cmp	r3, r1
 8001814:	bfd4      	ite	le
 8001816:	2301      	movle	r3, #1
 8001818:	2300      	movgt	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4013      	ands	r3, r2
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1c9      	bne.n	80017b8 <Displ_Transmit+0x4c>
		}

		data=dispBuffer1; 				//data (pointer to data to transfer via SPI) has to point to converted buffer
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <Displ_Transmit+0x114>)
 8001826:	603b      	str	r3, [r7, #0]
		dataSize=(buf8Pos-dispBuffer1);	//and dataSize has to contain the converted buffer size
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <Displ_Transmit+0x114>)
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	80bb      	strh	r3, [r7, #4]
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	2b13      	cmp	r3, #19
 8001834:	d812      	bhi.n	800185c <Displ_Transmit+0xf0>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <Displ_Transmit+0x10c>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 800183c:	88ba      	ldrh	r2, [r7, #4]
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	6839      	ldr	r1, [r7, #0]
 8001844:	480f      	ldr	r0, [pc, #60]	; (8001884 <Displ_Transmit+0x118>)
 8001846:	f007 fc7f 	bl	8009148 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <Displ_Transmit+0x10c>)
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
#ifdef DISPLAY_USING_TOUCHGFX
			if (isTouchGFXBuffer){
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <Displ_Transmit+0x102>
				DisplayDriver_TransferCompleteCallback();
 8001856:	f011 ff83 	bl	8013760 <DisplayDriver_TransferCompleteCallback>
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 800185a:	e008      	b.n	800186e <Displ_Transmit+0x102>
			Displ_SpiAvailable=0;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <Displ_Transmit+0x10c>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	461a      	mov	r2, r3
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <Displ_Transmit+0x118>)
 800186a:	f007 fe8b 	bl	8009584 <HAL_SPI_Transmit_DMA>
	}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008
 800187c:	42020400 	.word	0x42020400
 8001880:	20000924 	.word	0x20000924
 8001884:	200001d8 	.word	0x200001d8

08001888 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8001892:	1df9      	adds	r1, r7, #7
 8001894:	2300      	movs	r3, #0
 8001896:	2201      	movs	r2, #1
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff ff67 	bl	800176c <Displ_Transmit>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	4613      	mov	r3, r2
 80018b2:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff ff52 	bl	800176c <Displ_Transmit>
 80018c8:	e000      	b.n	80018cc <Displ_WriteData+0x26>
	if (buff_size==0) return;
 80018ca:	bf00      	nop
}
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	Displ_Select();
 80018d8:	f7ff ff2e 	bl	8001738 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	2102      	movs	r1, #2
 80018e0:	4819      	ldr	r0, [pc, #100]	; (8001948 <ILI9XXX_Init+0x74>)
 80018e2:	f002 f8df 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f000 fa48 	bl	8001d7c <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2102      	movs	r1, #2
 80018f0:	4815      	ldr	r0, [pc, #84]	; (8001948 <ILI9XXX_Init+0x74>)
 80018f2:	f002 f8d7 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80018f6:	2096      	movs	r0, #150	; 0x96
 80018f8:	f000 fa40 	bl	8001d7c <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 80018fc:	203a      	movs	r0, #58	; 0x3a
 80018fe:	f7ff ffc3 	bl	8001888 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
 8001902:	2200      	movs	r2, #0
 8001904:	2101      	movs	r1, #1
 8001906:	4811      	ldr	r0, [pc, #68]	; (800194c <ILI9XXX_Init+0x78>)
 8001908:	f7ff ffcd 	bl	80018a6 <Displ_WriteData>
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 800190c:	20b0      	movs	r0, #176	; 0xb0
 800190e:	f7ff ffbb 	bl	8001888 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8001912:	2200      	movs	r2, #0
 8001914:	2101      	movs	r1, #1
 8001916:	480e      	ldr	r0, [pc, #56]	; (8001950 <ILI9XXX_Init+0x7c>)
 8001918:	f7ff ffc5 	bl	80018a6 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 800191c:	20b0      	movs	r0, #176	; 0xb0
 800191e:	f7ff ffb3 	bl	8001888 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8001922:	2200      	movs	r2, #0
 8001924:	2101      	movs	r1, #1
 8001926:	480a      	ldr	r0, [pc, #40]	; (8001950 <ILI9XXX_Init+0x7c>)
 8001928:	f7ff ffbd 	bl	80018a6 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 800192c:	2011      	movs	r0, #17
 800192e:	f7ff ffab 	bl	8001888 <Displ_WriteCommand>
	HAL_Delay(120);
 8001932:	2078      	movs	r0, #120	; 0x78
 8001934:	f000 fa22 	bl	8001d7c <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8001938:	2029      	movs	r0, #41	; 0x29
 800193a:	f7ff ffa5 	bl	8001888 <Displ_WriteCommand>
	HAL_Delay(5);
 800193e:	2005      	movs	r0, #5
 8001940:	f000 fa1c 	bl	8001d7c <HAL_Delay>

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	42020400 	.word	0x42020400
 800194c:	08028064 	.word	0x08028064
 8001950:	08028068 	.word	0x08028068

08001954 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4623      	mov	r3, r4
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	4603      	mov	r3, r0
 8001968:	80bb      	strh	r3, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	061a      	lsls	r2, r3, #24
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800197e:	431a      	orrs	r2, r3
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	b29b      	uxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	0a12      	lsrs	r2, r2, #8
 800198c:	b292      	uxth	r2, r2
 800198e:	431a      	orrs	r2, r3
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <Displ_SetAddressWindow+0x90>)
 8001992:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8001994:	202a      	movs	r0, #42	; 0x2a
 8001996:	f7ff ff77 	bl	8001888 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 800199a:	2200      	movs	r2, #0
 800199c:	2104      	movs	r1, #4
 800199e:	4811      	ldr	r0, [pc, #68]	; (80019e4 <Displ_SetAddressWindow+0x90>)
 80019a0:	f7ff ff81 	bl	80018a6 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80019a4:	883b      	ldrh	r3, [r7, #0]
 80019a6:	061a      	lsls	r2, r3, #24
 80019a8:	883b      	ldrh	r3, [r7, #0]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019b0:	431a      	orrs	r2, r3
 80019b2:	88bb      	ldrh	r3, [r7, #4]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	88ba      	ldrh	r2, [r7, #4]
 80019bc:	0a12      	lsrs	r2, r2, #8
 80019be:	b292      	uxth	r2, r2
 80019c0:	431a      	orrs	r2, r3
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <Displ_SetAddressWindow+0x90>)
 80019c4:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 80019c6:	202b      	movs	r0, #43	; 0x2b
 80019c8:	f7ff ff5e 	bl	8001888 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2104      	movs	r1, #4
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <Displ_SetAddressWindow+0x90>)
 80019d2:	f7ff ff68 	bl	80018a6 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 80019d6:	202c      	movs	r0, #44	; 0x2c
 80019d8:	f7ff ff56 	bl	8001888 <Displ_WriteCommand>
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	20004924 	.word	0x20004924

080019e8 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 80019f2:	2201      	movs	r2, #1
 80019f4:	2101      	movs	r1, #1
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <Displ_Init+0x34>)
 80019f8:	f002 f854 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <Displ_Init+0x38>)
 8001a04:	f002 f84e 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8001a08:	f7ff ff64 	bl	80018d4 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f808 	bl	8001a24 <Displ_Orientation>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	42020400 	.word	0x42020400
 8001a20:	42021400 	.word	0x42021400

08001a24 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d83b      	bhi.n	8001aac <Displ_Orientation+0x88>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <Displ_Orientation+0x18>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a65 	.word	0x08001a65
 8001a44:	08001a7d 	.word	0x08001a7d
 8001a48:	08001a95 	.word	0x08001a95
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <Displ_Orientation+0xa8>)
 8001a4e:	2288      	movs	r2, #136	; 0x88
 8001a50:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <Displ_Orientation+0xac>)
 8001a54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a58:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <Displ_Orientation+0xb0>)
 8001a5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a60:	801a      	strh	r2, [r3, #0]
			break;
 8001a62:	e023      	b.n	8001aac <Displ_Orientation+0x88>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <Displ_Orientation+0xa8>)
 8001a66:	22e8      	movs	r2, #232	; 0xe8
 8001a68:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <Displ_Orientation+0xac>)
 8001a6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a70:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <Displ_Orientation+0xb0>)
 8001a74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a78:	801a      	strh	r2, [r3, #0]
			break;
 8001a7a:	e017      	b.n	8001aac <Displ_Orientation+0x88>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <Displ_Orientation+0xa8>)
 8001a7e:	2248      	movs	r2, #72	; 0x48
 8001a80:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <Displ_Orientation+0xac>)
 8001a84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a88:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <Displ_Orientation+0xb0>)
 8001a8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a90:	801a      	strh	r2, [r3, #0]
			break;
 8001a92:	e00b      	b.n	8001aac <Displ_Orientation+0x88>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <Displ_Orientation+0xa8>)
 8001a96:	2228      	movs	r2, #40	; 0x28
 8001a98:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <Displ_Orientation+0xac>)
 8001a9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001aa0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <Displ_Orientation+0xb0>)
 8001aa4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001aa8:	801a      	strh	r2, [r3, #0]
			break;
 8001aaa:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8001aac:	2036      	movs	r0, #54	; 0x36
 8001aae:	f7ff feeb 	bl	8001888 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <Displ_Orientation+0xa8>)
 8001ab8:	f7ff fef5 	bl	80018a6 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <Displ_Orientation+0xb4>)
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	7013      	strb	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20004928 	.word	0x20004928
 8001ad0:	20000920 	.word	0x20000920
 8001ad4:	2000091e 	.word	0x2000091e
 8001ad8:	2000091c 	.word	0x2000091c

08001adc <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_SPI_ErrorCallback+0x24>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d102      	bne.n	8001af4 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_SPI_ErrorCallback+0x28>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
	}
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40013000 	.word	0x40013000
 8001b04:	20000008 	.word	0x20000008

08001b08 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_SPI_TxCpltCallback+0x24>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d104      	bne.n	8001b24 <HAL_SPI_TxCpltCallback+0x1c>
		Displ_SpiAvailable=1;
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_SPI_TxCpltCallback+0x28>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]

	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
 8001b20:	f011 fe1e 	bl	8013760 <DisplayDriver_TransferCompleteCallback>
	#endif

	}
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40013000 	.word	0x40013000
 8001b30:	20000008 	.word	0x20000008

08001b34 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b51      	cmp	r3, #81	; 0x51
 8001b42:	d00a      	beq.n	8001b5a <Displ_BackLight+0x26>
 8001b44:	2b51      	cmp	r3, #81	; 0x51
 8001b46:	dc18      	bgt.n	8001b7a <Displ_BackLight+0x46>
 8001b48:	2b46      	cmp	r3, #70	; 0x46
 8001b4a:	d008      	beq.n	8001b5e <Displ_BackLight+0x2a>
 8001b4c:	2b46      	cmp	r3, #70	; 0x46
 8001b4e:	dc14      	bgt.n	8001b7a <Displ_BackLight+0x46>
 8001b50:	2b30      	cmp	r3, #48	; 0x30
 8001b52:	d00b      	beq.n	8001b6c <Displ_BackLight+0x38>
 8001b54:	2b31      	cmp	r3, #49	; 0x31
 8001b56:	d002      	beq.n	8001b5e <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8001b58:	e00f      	b.n	8001b7a <Displ_BackLight+0x46>
		__NOP();
 8001b5a:	bf00      	nop
		break;
 8001b5c:	e00e      	b.n	8001b7c <Displ_BackLight+0x48>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b64:	480a      	ldr	r0, [pc, #40]	; (8001b90 <Displ_BackLight+0x5c>)
 8001b66:	f001 ff9d 	bl	8003aa4 <HAL_GPIO_WritePin>
		break;
 8001b6a:	e007      	b.n	8001b7c <Displ_BackLight+0x48>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <Displ_BackLight+0x5c>)
 8001b74:	f001 ff96 	bl	8003aa4 <HAL_GPIO_WritePin>
		break;
 8001b78:	e000      	b.n	8001b7c <Displ_BackLight+0x48>
		break;
 8001b7a:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8001b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <Displ_BackLight+0x5c>)
 8001b82:	f001 ff77 	bl	8003a74 <HAL_GPIO_ReadPin>
 8001b86:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	42021400 	.word	0x42021400

08001b94 <touchgfxDisplayDriverTransmitActive>:
 * @brief	TouchGFX integration: returns status of
 * 			communication to the display
 * @return	1 = there is a transmission running
 * 			0 = no transmission
 *********************************************************/
int touchgfxDisplayDriverTransmitActive(){
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
	// using the flag indicating SPI port availability
	// already used to drive communication via DMA
	return (!Displ_SpiAvailable);
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <touchgfxDisplayDriverTransmitActive+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <touchgfxDisplayDriverTransmitBlock>:

/*********************************************************
 * @brief	TouchGFX integration: write to display the
 * 			block indicated by parameters
 *********************************************************/
void touchgfxDisplayDriverTransmitBlock(const uint8_t* pixels, uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	817b      	strh	r3, [r7, #10]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	813b      	strh	r3, [r7, #8]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	80fb      	strh	r3, [r7, #6]
	//START WRITING TO DISPLAY
		Displ_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001bd2:	897a      	ldrh	r2, [r7, #10]
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29c      	uxth	r4, r3
 8001bde:	893a      	ldrh	r2, [r7, #8]
 8001be0:	8c3b      	ldrh	r3, [r7, #32]
 8001be2:	4413      	add	r3, r2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	8939      	ldrh	r1, [r7, #8]
 8001bec:	8978      	ldrh	r0, [r7, #10]
 8001bee:	4622      	mov	r2, r4
 8001bf0:	f7ff feb0 	bl	8001954 <Displ_SetAddressWindow>
		Displ_WriteData((uint8_t* )pixels,((w*h)<<1),1);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	8c3a      	ldrh	r2, [r7, #32]
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4619      	mov	r1, r3
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff fe4f 	bl	80018a6 <Displ_WriteData>
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <Touch_HandlePenDownInterrupt>:
volatile uint8_t Touch_PenDown=0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled=1;					// while reading touch sensor touch interrupt handling is disabled through this flag



void Touch_HandlePenDownInterrupt (){
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <Touch_HandlePenDownInterrupt+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown=1;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <Touch_HandlePenDownInterrupt+0x24>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
	}
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000009 	.word	0x20000009
 8001c34:	20004929 	.word	0x20004929

08001c38 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==TOUCH_INT_Pin){
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c48:	d101      	bne.n	8001c4e <HAL_GPIO_EXTI_Callback+0x16>
		Touch_HandlePenDownInterrupt();
 8001c4a:	f7ff ffe1 	bl	8001c10 <Touch_HandlePenDownInterrupt>
	}
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_GPIO_EXTI_Falling_Callback>:



void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ffe8 	bl	8001c38 <HAL_GPIO_EXTI_Callback>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ffdb 	bl	8001c38 <HAL_GPIO_EXTI_Callback>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c90:	f7ff fd1a 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c96:	e003      	b.n	8001ca0 <LoopCopyDataInit>

08001c98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c9e:	3104      	adds	r1, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ca0:	480a      	ldr	r0, [pc, #40]	; (8001ccc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ca4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ca6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ca8:	d3f6      	bcc.n	8001c98 <CopyDataInit>
	ldr	r2, =_sbss
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cac:	e002      	b.n	8001cb4 <LoopFillZerobss>

08001cae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cb0:	f842 3b04 	str.w	r3, [r2], #4

08001cb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <LoopForever+0x16>)
	cmp	r2, r3
 8001cb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cb8:	d3f9      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cba:	f025 fc2f 	bl	802751c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cbe:	f7fe fcd9 	bl	8000674 <main>

08001cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cc2:	e7fe      	b.n	8001cc2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001cc4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001cc8:	08042030 	.word	0x08042030
	ldr	r0, =_sdata
 8001ccc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cd0:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 8001cd4:	20000104 	.word	0x20000104
	ldr	r3, = _ebss
 8001cd8:	2000ffc4 	.word	0x2000ffc4

08001cdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_Init+0x4c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_Init+0x4c>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 fcdc 	bl	80026ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cf6:	f004 fa21 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_Init+0x50>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	490b      	ldr	r1, [pc, #44]	; (8001d34 <HAL_Init+0x54>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_Init+0x58>)
 8001d0e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d10:	200f      	movs	r0, #15
 8001d12:	f7ff fb53 	bl	80013bc <HAL_InitTick>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e002      	b.n	8001d26 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff f8c8 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	46020c00 	.word	0x46020c00
 8001d34:	08029264 	.word	0x08029264
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	2000492c 	.word	0x2000492c

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000492c 	.word	0x2000492c

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000010 	.word	0x20000010

08001dc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <LL_ADC_SetResolution+0x3c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d104      	bne.n	8001e0c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f023 020c 	bic.w	r2, r3, #12
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	46021000 	.word	0x46021000

08001e2c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d002      	beq.n	8001e5e <LL_ADC_SetGainCompensation+0x32>
 8001e58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e5c:	e000      	b.n	8001e60 <LL_ADC_SetGainCompensation+0x34>
 8001e5e:	2200      	movs	r2, #0
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2107      	movs	r1, #7
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	401a      	ands	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6093      	str	r3, [r2, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee8:	d101      	bne.n	8001eee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	609a      	str	r2, [r3, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <LL_ADC_IsEnabled+0x18>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <LL_ADC_IsEnabled+0x1a>
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d101      	bne.n	8001f8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d101      	bne.n	8001fb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e2b3      	b.n	8002548 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a8b      	ldr	r2, [pc, #556]	; (800221c <HAL_ADC_Init+0x25c>)
 8001fee:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7fe ff7b 	bl	8000ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5f 	bl	8001ed4 <LL_ADC_IsDeepPowerDownEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff45 	bl	8001eb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff7a 	bl	8001f24 <LL_ADC_IsInternalRegulatorEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff5e 	bl	8001efc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002040:	4b77      	ldr	r3, [pc, #476]	; (8002220 <HAL_ADC_Init+0x260>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	4a77      	ldr	r2, [pc, #476]	; (8002224 <HAL_ADC_Init+0x264>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002054:	e002      	b.n	800205c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b01      	subs	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff5c 	bl	8001f24 <LL_ADC_IsInternalRegulatorEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10e      	bne.n	8002090 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff6c 	bl	8001f72 <LL_ADC_REG_IsConversionOngoing>
 800209a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 8244 	bne.w	8002532 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f040 8240 	bne.w	8002532 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff40 	bl	8001f4c <LL_ADC_IsEnabled>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d140      	bne.n	8002154 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_ADC_Init+0x25c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d028      	beq.n	800212e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a51      	ldr	r2, [pc, #324]	; (8002228 <HAL_ADC_Init+0x268>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d109      	bne.n	80020fa <HAL_ADC_Init+0x13a>
 80020e6:	4850      	ldr	r0, [pc, #320]	; (8002228 <HAL_ADC_Init+0x268>)
 80020e8:	f7ff ff30 	bl	8001f4c <LL_ADC_IsEnabled>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf0c      	ite	eq
 80020f2:	2301      	moveq	r3, #1
 80020f4:	2300      	movne	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	e008      	b.n	800210c <HAL_ADC_Init+0x14c>
 80020fa:	4848      	ldr	r0, [pc, #288]	; (800221c <HAL_ADC_Init+0x25c>)
 80020fc:	f7ff ff26 	bl	8001f4c <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d021      	beq.n	8002154 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a44      	ldr	r2, [pc, #272]	; (8002228 <HAL_ADC_Init+0x268>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x15e>
 800211a:	4a44      	ldr	r2, [pc, #272]	; (800222c <HAL_ADC_Init+0x26c>)
 800211c:	e000      	b.n	8002120 <HAL_ADC_Init+0x160>
 800211e:	4a44      	ldr	r2, [pc, #272]	; (8002230 <HAL_ADC_Init+0x270>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f7ff fe4c 	bl	8001dc4 <LL_ADC_SetCommonClock>
 800212c:	e012      	b.n	8002154 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4619      	mov	r1, r3
 8002138:	4610      	mov	r0, r2
 800213a:	f7ff fe57 	bl	8001dec <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800213e:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <HAL_ADC_Init+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800214e:	4938      	ldr	r1, [pc, #224]	; (8002230 <HAL_ADC_Init+0x270>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a30      	ldr	r2, [pc, #192]	; (800221c <HAL_ADC_Init+0x25c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d010      	beq.n	8002180 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002164:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800216a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002170:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002178:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800217a:	4313      	orrs	r3, r2
 800217c:	623b      	str	r3, [r7, #32]
 800217e:	e030      	b.n	80021e2 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7f1b      	ldrb	r3, [r3, #28]
 8002184:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800218c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800218e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002194:	2a00      	cmp	r2, #0
 8002196:	d002      	beq.n	800219e <HAL_ADC_Init+0x1de>
 8002198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800219c:	e000      	b.n	80021a0 <HAL_ADC_Init+0x1e0>
 800219e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021a0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80021a6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da04      	bge.n	80021ba <HAL_ADC_Init+0x1fa>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021b8:	e001      	b.n	80021be <HAL_ADC_Init+0x1fe>
 80021ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80021be:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4918      	ldr	r1, [pc, #96]	; (8002228 <HAL_ADC_Init+0x268>)
 80021c6:	428b      	cmp	r3, r1
 80021c8:	d103      	bne.n	80021d2 <HAL_ADC_Init+0x212>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d0:	e003      	b.n	80021da <HAL_ADC_Init+0x21a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80021da:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021dc:	6a3a      	ldr	r2, [r7, #32]
 80021de:	4313      	orrs	r3, r2
 80021e0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d12f      	bne.n	800224c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_ADC_Init+0x25c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	3b01      	subs	r3, #1
 80021fc:	045b      	lsls	r3, r3, #17
 80021fe:	6a3a      	ldr	r2, [r7, #32]
 8002200:	4313      	orrs	r3, r2
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	e022      	b.n	800224c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	623b      	str	r3, [r7, #32]
 8002218:	e018      	b.n	800224c <HAL_ADC_Init+0x28c>
 800221a:	bf00      	nop
 800221c:	46021000 	.word	0x46021000
 8002220:	20000004 	.word	0x20000004
 8002224:	053e2d63 	.word	0x053e2d63
 8002228:	42028000 	.word	0x42028000
 800222c:	42028308 	.word	0x42028308
 8002230:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a92      	ldr	r2, [pc, #584]	; (800249c <HAL_ADC_Init+0x4dc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d018      	beq.n	8002288 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	4313      	orrs	r3, r2
 800226c:	6a3a      	ldr	r2, [r7, #32]
 800226e:	4313      	orrs	r3, r2
 8002270:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <HAL_ADC_Init+0x4e0>)
 800227a:	4013      	ands	r3, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	6a39      	ldr	r1, [r7, #32]
 8002282:	430b      	orrs	r3, r1
 8002284:	60d3      	str	r3, [r2, #12]
 8002286:	e031      	b.n	80022ec <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	4313      	orrs	r3, r2
 800229e:	6a3a      	ldr	r2, [r7, #32]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b7e      	ldr	r3, [pc, #504]	; (80024a4 <HAL_ADC_Init+0x4e4>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	6a39      	ldr	r1, [r7, #32]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1a      	ldr	r2, [r3, #32]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a6a      	ldr	r2, [pc, #424]	; (800249c <HAL_ADC_Init+0x4dc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	f000 8093 	beq.w	800241e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe38 	bl	8001f72 <LL_ADC_REG_IsConversionOngoing>
 8002302:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fe45 	bl	8001f98 <LL_ADC_INJ_IsConversionOngoing>
 800230e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d161      	bne.n	80023da <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d15e      	bne.n	80023da <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f1b      	ldrb	r3, [r3, #28]
 8002320:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4960      	ldr	r1, [pc, #384]	; (80024a8 <HAL_ADC_Init+0x4e8>)
 8002328:	428b      	cmp	r3, r1
 800232a:	d102      	bne.n	8002332 <HAL_ADC_Init+0x372>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	e002      	b.n	8002338 <HAL_ADC_Init+0x378>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002338:	4313      	orrs	r3, r2
 800233a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	6a39      	ldr	r1, [r7, #32]
 8002350:	430b      	orrs	r3, r1
 8002352:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4619      	mov	r1, r3
 8002366:	4610      	mov	r0, r2
 8002368:	f7ff fd60 	bl	8001e2c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002372:	2b01      	cmp	r3, #1
 8002374:	d11e      	bne.n	80023b4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_ADC_Init+0x4ec>)
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800238a:	0411      	lsls	r1, r2, #16
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002390:	4311      	orrs	r1, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023a2:	0892      	lsrs	r2, r2, #2
 80023a4:	430a      	orrs	r2, r1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	e007      	b.n	80023c4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10c      	bne.n	80023fc <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f023 010f 	bic.w	r1, r3, #15
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
 80023fa:	e007      	b.n	800240c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 020f 	bic.w	r2, r2, #15
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002410:	f023 0303 	bic.w	r3, r3, #3
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800241c:	e092      	b.n	8002544 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002424:	2b01      	cmp	r3, #1
 8002426:	d111      	bne.n	800244c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002430:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002436:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800243c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	4313      	orrs	r3, r2
 8002442:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <HAL_ADC_Init+0x4f0>)
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	69f9      	ldr	r1, [r7, #28]
 800245c:	430b      	orrs	r3, r1
 800245e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	461a      	mov	r2, r3
 800246a:	2100      	movs	r1, #0
 800246c:	f7ff fd01 	bl	8001e72 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	461a      	mov	r2, r3
 800247a:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800247e:	f7ff fcf8 	bl	8001e72 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d114      	bne.n	80024b4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f062 020f 	orn	r2, r2, #15
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
 800249a:	e024      	b.n	80024e6 <HAL_ADC_Init+0x526>
 800249c:	46021000 	.word	0x46021000
 80024a0:	fff0c013 	.word	0xfff0c013
 80024a4:	ffde800d 	.word	0xffde800d
 80024a8:	42028000 	.word	0x42028000
 80024ac:	fc00f81e 	.word	0xfc00f81e
 80024b0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024bc:	d113      	bne.n	80024e6 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f003 031c 	and.w	r3, r3, #28
 80024d0:	f06f 020f 	mvn.w	r2, #15
 80024d4:	fa02 f103 	lsl.w	r1, r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_ADC_Init+0x590>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10b      	bne.n	800250e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002500:	f023 0303 	bic.w	r3, r3, #3
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800250c:	e01a      	b.n	8002544 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002512:	f023 0312 	bic.w	r3, r3, #18
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002530:	e008      	b.n	8002544 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002536:	f043 0210 	orr.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002548:	4618      	mov	r0, r3
 800254a:	3728      	adds	r7, #40	; 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	833ffff3 	.word	0x833ffff3

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ff4c 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d2:	f7ff ff63 	bl	800259c <__NVIC_GetPriorityGrouping>
 80026d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	6978      	ldr	r0, [r7, #20]
 80026de:	f7ff ffb3 	bl	8002648 <NVIC_EncodePriority>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff82 	bl	80025f4 <__NVIC_SetPriority>
}
 80026f0:	bf00      	nop
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff56 	bl	80025b8 <__NVIC_EnableIRQ>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e054      	b.n	80027d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7f5b      	ldrb	r3, [r3, #29]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fc40 	bl	8000fbc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	791b      	ldrb	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_CRC_Init+0xc4>)
 8002750:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0218 	bic.w	r2, r2, #24
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	e00c      	b.n	800277e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	461a      	mov	r2, r3
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f834 	bl	80027dc <HAL_CRCEx_Polynomial_Set>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e028      	b.n	80027d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	795b      	ldrb	r3, [r3, #5]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f04f 32ff 	mov.w	r2, #4294967295
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	e004      	b.n	800279c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6912      	ldr	r2, [r2, #16]
 800279a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	04c11db7 	.word	0x04c11db7

080027dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80027ec:	231f      	movs	r3, #31
 80027ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
 80027fe:	e063      	b.n	80028c8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002800:	bf00      	nop
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1e5a      	subs	r2, r3, #1
 8002806:	613a      	str	r2, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <HAL_CRCEx_Polynomial_Set+0x44>
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b18      	cmp	r3, #24
 8002824:	d846      	bhi.n	80028b4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002826:	a201      	add	r2, pc, #4	; (adr r2, 800282c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	080028bb 	.word	0x080028bb
 8002830:	080028b5 	.word	0x080028b5
 8002834:	080028b5 	.word	0x080028b5
 8002838:	080028b5 	.word	0x080028b5
 800283c:	080028b5 	.word	0x080028b5
 8002840:	080028b5 	.word	0x080028b5
 8002844:	080028b5 	.word	0x080028b5
 8002848:	080028b5 	.word	0x080028b5
 800284c:	080028a9 	.word	0x080028a9
 8002850:	080028b5 	.word	0x080028b5
 8002854:	080028b5 	.word	0x080028b5
 8002858:	080028b5 	.word	0x080028b5
 800285c:	080028b5 	.word	0x080028b5
 8002860:	080028b5 	.word	0x080028b5
 8002864:	080028b5 	.word	0x080028b5
 8002868:	080028b5 	.word	0x080028b5
 800286c:	0800289d 	.word	0x0800289d
 8002870:	080028b5 	.word	0x080028b5
 8002874:	080028b5 	.word	0x080028b5
 8002878:	080028b5 	.word	0x080028b5
 800287c:	080028b5 	.word	0x080028b5
 8002880:	080028b5 	.word	0x080028b5
 8002884:	080028b5 	.word	0x080028b5
 8002888:	080028b5 	.word	0x080028b5
 800288c:	08002891 	.word	0x08002891
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b06      	cmp	r3, #6
 8002894:	d913      	bls.n	80028be <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800289a:	e010      	b.n	80028be <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b07      	cmp	r3, #7
 80028a0:	d90f      	bls.n	80028c2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80028a6:	e00c      	b.n	80028c2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	d90b      	bls.n	80028c6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80028b2:	e008      	b.n	80028c6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
        break;
 80028b8:	e006      	b.n	80028c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028ba:	bf00      	nop
 80028bc:	e004      	b.n	80028c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028be:	bf00      	nop
 80028c0:	e002      	b.n	80028c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028c6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 0118 	bic.w	r1, r3, #24
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002900:	f7ff fa30 	bl	8001d64 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0df      	b.n	8002ad0 <HAL_DMA_Init+0x1d8>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <HAL_DMA_Init+0x1e0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	f000 809f 	beq.w	8002a62 <HAL_DMA_Init+0x16a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a6c      	ldr	r2, [pc, #432]	; (8002adc <HAL_DMA_Init+0x1e4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	f000 8099 	beq.w	8002a62 <HAL_DMA_Init+0x16a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6a      	ldr	r2, [pc, #424]	; (8002ae0 <HAL_DMA_Init+0x1e8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	f000 8093 	beq.w	8002a62 <HAL_DMA_Init+0x16a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a68      	ldr	r2, [pc, #416]	; (8002ae4 <HAL_DMA_Init+0x1ec>)
 8002942:	4293      	cmp	r3, r2
 8002944:	f000 808d 	beq.w	8002a62 <HAL_DMA_Init+0x16a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a66      	ldr	r2, [pc, #408]	; (8002ae8 <HAL_DMA_Init+0x1f0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	f000 8087 	beq.w	8002a62 <HAL_DMA_Init+0x16a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a64      	ldr	r2, [pc, #400]	; (8002aec <HAL_DMA_Init+0x1f4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	f000 8081 	beq.w	8002a62 <HAL_DMA_Init+0x16a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a62      	ldr	r2, [pc, #392]	; (8002af0 <HAL_DMA_Init+0x1f8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d07b      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a61      	ldr	r2, [pc, #388]	; (8002af4 <HAL_DMA_Init+0x1fc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d076      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5f      	ldr	r2, [pc, #380]	; (8002af8 <HAL_DMA_Init+0x200>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d071      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5e      	ldr	r2, [pc, #376]	; (8002afc <HAL_DMA_Init+0x204>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d06c      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5c      	ldr	r2, [pc, #368]	; (8002b00 <HAL_DMA_Init+0x208>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d067      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <HAL_DMA_Init+0x20c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d062      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a59      	ldr	r2, [pc, #356]	; (8002b08 <HAL_DMA_Init+0x210>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d05d      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_DMA_Init+0x214>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d058      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a56      	ldr	r2, [pc, #344]	; (8002b10 <HAL_DMA_Init+0x218>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d053      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a55      	ldr	r2, [pc, #340]	; (8002b14 <HAL_DMA_Init+0x21c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d04e      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a53      	ldr	r2, [pc, #332]	; (8002b18 <HAL_DMA_Init+0x220>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d049      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_DMA_Init+0x224>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d044      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a50      	ldr	r2, [pc, #320]	; (8002b20 <HAL_DMA_Init+0x228>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d03f      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a4f      	ldr	r2, [pc, #316]	; (8002b24 <HAL_DMA_Init+0x22c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d03a      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4d      	ldr	r2, [pc, #308]	; (8002b28 <HAL_DMA_Init+0x230>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d035      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a4c      	ldr	r2, [pc, #304]	; (8002b2c <HAL_DMA_Init+0x234>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d030      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a4a      	ldr	r2, [pc, #296]	; (8002b30 <HAL_DMA_Init+0x238>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d02b      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a49      	ldr	r2, [pc, #292]	; (8002b34 <HAL_DMA_Init+0x23c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d026      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a47      	ldr	r2, [pc, #284]	; (8002b38 <HAL_DMA_Init+0x240>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d021      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a46      	ldr	r2, [pc, #280]	; (8002b3c <HAL_DMA_Init+0x244>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d01c      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a44      	ldr	r2, [pc, #272]	; (8002b40 <HAL_DMA_Init+0x248>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d017      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a43      	ldr	r2, [pc, #268]	; (8002b44 <HAL_DMA_Init+0x24c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d012      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a41      	ldr	r2, [pc, #260]	; (8002b48 <HAL_DMA_Init+0x250>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00d      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a40      	ldr	r2, [pc, #256]	; (8002b4c <HAL_DMA_Init+0x254>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d008      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3e      	ldr	r2, [pc, #248]	; (8002b50 <HAL_DMA_Init+0x258>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d003      	beq.n	8002a62 <HAL_DMA_Init+0x16a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <HAL_DMA_Init+0x25c>)
 8002a60:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0206 	orr.w	r2, r2, #6
 8002a80:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002a82:	e00f      	b.n	8002aa4 <HAL_DMA_Init+0x1ac>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002a84:	f7ff f96e 	bl	8001d64 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d908      	bls.n	8002aa4 <HAL_DMA_Init+0x1ac>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2210      	movs	r2, #16
 8002a96:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e015      	b.n	8002ad0 <HAL_DMA_Init+0x1d8>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e8      	bne.n	8002a84 <HAL_DMA_Init+0x18c>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fac2 	bl	800303c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40020050 	.word	0x40020050
 8002adc:	50020050 	.word	0x50020050
 8002ae0:	400200d0 	.word	0x400200d0
 8002ae4:	500200d0 	.word	0x500200d0
 8002ae8:	40020150 	.word	0x40020150
 8002aec:	50020150 	.word	0x50020150
 8002af0:	400201d0 	.word	0x400201d0
 8002af4:	500201d0 	.word	0x500201d0
 8002af8:	40020250 	.word	0x40020250
 8002afc:	50020250 	.word	0x50020250
 8002b00:	400202d0 	.word	0x400202d0
 8002b04:	500202d0 	.word	0x500202d0
 8002b08:	40020350 	.word	0x40020350
 8002b0c:	50020350 	.word	0x50020350
 8002b10:	400203d0 	.word	0x400203d0
 8002b14:	500203d0 	.word	0x500203d0
 8002b18:	40020450 	.word	0x40020450
 8002b1c:	50020450 	.word	0x50020450
 8002b20:	400204d0 	.word	0x400204d0
 8002b24:	500204d0 	.word	0x500204d0
 8002b28:	40020550 	.word	0x40020550
 8002b2c:	50020550 	.word	0x50020550
 8002b30:	400205d0 	.word	0x400205d0
 8002b34:	500205d0 	.word	0x500205d0
 8002b38:	40020650 	.word	0x40020650
 8002b3c:	50020650 	.word	0x50020650
 8002b40:	400206d0 	.word	0x400206d0
 8002b44:	500206d0 	.word	0x500206d0
 8002b48:	40020750 	.word	0x40020750
 8002b4c:	50020750 	.word	0x50020750
 8002b50:	400207d0 	.word	0x400207d0
 8002b54:	500207d0 	.word	0x500207d0

08002b58 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04f      	b.n	8002c10 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_DMA_Start_IT+0x26>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e048      	b.n	8002c10 <HAL_DMA_Start_IT+0xb8>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d136      	bne.n	8002c00 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fa23 	bl	8002ff2 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8002bba:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bea:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e007      	b.n	8002c10 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e019      	b.n	8002c5e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d004      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e00e      	b.n	8002c5e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2204      	movs	r2, #4
 8002c44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c7a:	f023 030f 	bic.w	r3, r3, #15
 8002c7e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	3b50      	subs	r3, #80	; 0x50
 8002c8a:	09db      	lsrs	r3, r3, #7
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	2201      	movs	r2, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8156 	beq.w	8002f56 <HAL_DMA_IRQHandler+0x2ec>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d011      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cce:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d011      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d00:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f043 0202 	orr.w	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d011      	beq.n	8002d40 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d32:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	f043 0204 	orr.w	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d011      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d64:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	f043 0208 	orr.w	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d96:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d05a      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x202>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d053      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x202>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dcc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d13c      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x1ea>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0202 	orr.w	r2, r2, #2
 8002df8:	615a      	str	r2, [r3, #20]

        /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
        __NOP();
 8002dfa:	bf00      	nop

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1aa>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002e12:	e003      	b.n	8002e1c <HAL_DMA_IRQHandler+0x1b2>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x1ce>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8088 	beq.w	8002f5a <HAL_DMA_IRQHandler+0x2f0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
        }

        return;
 8002e52:	e082      	b.n	8002f5a <HAL_DMA_IRQHandler+0x2f0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2205      	movs	r2, #5
 8002e58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x202>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d039      	beq.n	8002eee <HAL_DMA_IRQHandler+0x284>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d032      	beq.n	8002eee <HAL_DMA_IRQHandler+0x284>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d012      	beq.n	8002eba <HAL_DMA_IRQHandler+0x250>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x262>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d111      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x262>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	731a      	strb	r2, [r3, #12]
 8002eb8:	e008      	b.n	8002ecc <HAL_DMA_IRQHandler+0x262>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x262>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ed4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_DMA_IRQHandler+0x284>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d032      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2f2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0202 	orr.w	r2, r2, #2
 8002f04:	615a      	str	r2, [r3, #20]

    /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
    __NOP();
 8002f06:	bf00      	nop

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x2b6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002f1e:	e003      	b.n	8002f28 <HAL_DMA_IRQHandler+0x2be>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x2d2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	2201      	movs	r2, #1
 8002f3a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2f2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
 8002f54:	e002      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2f2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2f2>
        return;
 8002f5a:	bf00      	nop
    }
  }
}
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e02b      	b.n	8002fe6 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002f96:	f023 030f 	bic.w	r3, r3, #15
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	3b50      	subs	r3, #80	; 0x50
 8002fa6:	09db      	lsrs	r3, r3, #7
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2201      	movs	r2, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f003 0311 	and.w	r3, r3, #17
 8002fc4:	2b11      	cmp	r3, #17
 8002fc6:	d106      	bne.n	8002fd6 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	e006      	b.n	8002fe4 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	401a      	ands	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	b291      	uxth	r1, r2
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	430b      	orrs	r3, r1
 8003014:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800301e:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	430a      	orrs	r2, r1
 800305c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a53      	ldr	r2, [pc, #332]	; (80031c8 <DMA_Init+0x18c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	f000 80a0 	beq.w	80031c2 <DMA_Init+0x186>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a51      	ldr	r2, [pc, #324]	; (80031cc <DMA_Init+0x190>)
 8003088:	4293      	cmp	r3, r2
 800308a:	f000 809a 	beq.w	80031c2 <DMA_Init+0x186>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a4f      	ldr	r2, [pc, #316]	; (80031d0 <DMA_Init+0x194>)
 8003094:	4293      	cmp	r3, r2
 8003096:	f000 8094 	beq.w	80031c2 <DMA_Init+0x186>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a4d      	ldr	r2, [pc, #308]	; (80031d4 <DMA_Init+0x198>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f000 808e 	beq.w	80031c2 <DMA_Init+0x186>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4b      	ldr	r2, [pc, #300]	; (80031d8 <DMA_Init+0x19c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f000 8088 	beq.w	80031c2 <DMA_Init+0x186>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a49      	ldr	r2, [pc, #292]	; (80031dc <DMA_Init+0x1a0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 8082 	beq.w	80031c2 <DMA_Init+0x186>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a47      	ldr	r2, [pc, #284]	; (80031e0 <DMA_Init+0x1a4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d07c      	beq.n	80031c2 <DMA_Init+0x186>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a45      	ldr	r2, [pc, #276]	; (80031e4 <DMA_Init+0x1a8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d077      	beq.n	80031c2 <DMA_Init+0x186>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a44      	ldr	r2, [pc, #272]	; (80031e8 <DMA_Init+0x1ac>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d072      	beq.n	80031c2 <DMA_Init+0x186>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a42      	ldr	r2, [pc, #264]	; (80031ec <DMA_Init+0x1b0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d06d      	beq.n	80031c2 <DMA_Init+0x186>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a41      	ldr	r2, [pc, #260]	; (80031f0 <DMA_Init+0x1b4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d068      	beq.n	80031c2 <DMA_Init+0x186>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3f      	ldr	r2, [pc, #252]	; (80031f4 <DMA_Init+0x1b8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d063      	beq.n	80031c2 <DMA_Init+0x186>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a3e      	ldr	r2, [pc, #248]	; (80031f8 <DMA_Init+0x1bc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d05e      	beq.n	80031c2 <DMA_Init+0x186>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a3c      	ldr	r2, [pc, #240]	; (80031fc <DMA_Init+0x1c0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d059      	beq.n	80031c2 <DMA_Init+0x186>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a3b      	ldr	r2, [pc, #236]	; (8003200 <DMA_Init+0x1c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d054      	beq.n	80031c2 <DMA_Init+0x186>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a39      	ldr	r2, [pc, #228]	; (8003204 <DMA_Init+0x1c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d04f      	beq.n	80031c2 <DMA_Init+0x186>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a38      	ldr	r2, [pc, #224]	; (8003208 <DMA_Init+0x1cc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d04a      	beq.n	80031c2 <DMA_Init+0x186>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a36      	ldr	r2, [pc, #216]	; (800320c <DMA_Init+0x1d0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d045      	beq.n	80031c2 <DMA_Init+0x186>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a35      	ldr	r2, [pc, #212]	; (8003210 <DMA_Init+0x1d4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d040      	beq.n	80031c2 <DMA_Init+0x186>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a33      	ldr	r2, [pc, #204]	; (8003214 <DMA_Init+0x1d8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d03b      	beq.n	80031c2 <DMA_Init+0x186>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a32      	ldr	r2, [pc, #200]	; (8003218 <DMA_Init+0x1dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d036      	beq.n	80031c2 <DMA_Init+0x186>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a30      	ldr	r2, [pc, #192]	; (800321c <DMA_Init+0x1e0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d031      	beq.n	80031c2 <DMA_Init+0x186>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2f      	ldr	r2, [pc, #188]	; (8003220 <DMA_Init+0x1e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d02c      	beq.n	80031c2 <DMA_Init+0x186>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <DMA_Init+0x1e8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d027      	beq.n	80031c2 <DMA_Init+0x186>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <DMA_Init+0x1ec>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <DMA_Init+0x186>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2a      	ldr	r2, [pc, #168]	; (800322c <DMA_Init+0x1f0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01d      	beq.n	80031c2 <DMA_Init+0x186>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a29      	ldr	r2, [pc, #164]	; (8003230 <DMA_Init+0x1f4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d018      	beq.n	80031c2 <DMA_Init+0x186>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a27      	ldr	r2, [pc, #156]	; (8003234 <DMA_Init+0x1f8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <DMA_Init+0x186>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a26      	ldr	r2, [pc, #152]	; (8003238 <DMA_Init+0x1fc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <DMA_Init+0x186>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <DMA_Init+0x200>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d009      	beq.n	80031c2 <DMA_Init+0x186>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a23      	ldr	r2, [pc, #140]	; (8003240 <DMA_Init+0x204>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <DMA_Init+0x186>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a21      	ldr	r2, [pc, #132]	; (8003244 <DMA_Init+0x208>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d142      	bne.n	8003248 <DMA_Init+0x20c>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e041      	b.n	800324a <DMA_Init+0x20e>
 80031c6:	bf00      	nop
 80031c8:	40020050 	.word	0x40020050
 80031cc:	50020050 	.word	0x50020050
 80031d0:	400200d0 	.word	0x400200d0
 80031d4:	500200d0 	.word	0x500200d0
 80031d8:	40020150 	.word	0x40020150
 80031dc:	50020150 	.word	0x50020150
 80031e0:	400201d0 	.word	0x400201d0
 80031e4:	500201d0 	.word	0x500201d0
 80031e8:	40020250 	.word	0x40020250
 80031ec:	50020250 	.word	0x50020250
 80031f0:	400202d0 	.word	0x400202d0
 80031f4:	500202d0 	.word	0x500202d0
 80031f8:	40020350 	.word	0x40020350
 80031fc:	50020350 	.word	0x50020350
 8003200:	400203d0 	.word	0x400203d0
 8003204:	500203d0 	.word	0x500203d0
 8003208:	40020450 	.word	0x40020450
 800320c:	50020450 	.word	0x50020450
 8003210:	400204d0 	.word	0x400204d0
 8003214:	500204d0 	.word	0x500204d0
 8003218:	40020550 	.word	0x40020550
 800321c:	50020550 	.word	0x50020550
 8003220:	400205d0 	.word	0x400205d0
 8003224:	500205d0 	.word	0x500205d0
 8003228:	40020650 	.word	0x40020650
 800322c:	50020650 	.word	0x50020650
 8003230:	400206d0 	.word	0x400206d0
 8003234:	500206d0 	.word	0x500206d0
 8003238:	40020750 	.word	0x40020750
 800323c:	50020750 	.word	0x50020750
 8003240:	400207d0 	.word	0x400207d0
 8003244:	500207d0 	.word	0x500207d0
 8003248:	2300      	movs	r3, #0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	051b      	lsls	r3, r3, #20
 800325a:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800325e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	3b01      	subs	r3, #1
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800326c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	430a      	orrs	r2, r1
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	f040 80b0 	bne.w	800340a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a82      	ldr	r2, [pc, #520]	; (80034b8 <DMA_Init+0x47c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	f000 80a0 	beq.w	80033f6 <DMA_Init+0x3ba>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a80      	ldr	r2, [pc, #512]	; (80034bc <DMA_Init+0x480>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	f000 809a 	beq.w	80033f6 <DMA_Init+0x3ba>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7e      	ldr	r2, [pc, #504]	; (80034c0 <DMA_Init+0x484>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	f000 8094 	beq.w	80033f6 <DMA_Init+0x3ba>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7c      	ldr	r2, [pc, #496]	; (80034c4 <DMA_Init+0x488>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	f000 808e 	beq.w	80033f6 <DMA_Init+0x3ba>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <DMA_Init+0x48c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f000 8088 	beq.w	80033f6 <DMA_Init+0x3ba>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a78      	ldr	r2, [pc, #480]	; (80034cc <DMA_Init+0x490>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	f000 8082 	beq.w	80033f6 <DMA_Init+0x3ba>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a76      	ldr	r2, [pc, #472]	; (80034d0 <DMA_Init+0x494>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d07c      	beq.n	80033f6 <DMA_Init+0x3ba>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a74      	ldr	r2, [pc, #464]	; (80034d4 <DMA_Init+0x498>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d077      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a73      	ldr	r2, [pc, #460]	; (80034d8 <DMA_Init+0x49c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d072      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a71      	ldr	r2, [pc, #452]	; (80034dc <DMA_Init+0x4a0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d06d      	beq.n	80033f6 <DMA_Init+0x3ba>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a70      	ldr	r2, [pc, #448]	; (80034e0 <DMA_Init+0x4a4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d068      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6e      	ldr	r2, [pc, #440]	; (80034e4 <DMA_Init+0x4a8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d063      	beq.n	80033f6 <DMA_Init+0x3ba>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6d      	ldr	r2, [pc, #436]	; (80034e8 <DMA_Init+0x4ac>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d05e      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6b      	ldr	r2, [pc, #428]	; (80034ec <DMA_Init+0x4b0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d059      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6a      	ldr	r2, [pc, #424]	; (80034f0 <DMA_Init+0x4b4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d054      	beq.n	80033f6 <DMA_Init+0x3ba>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <DMA_Init+0x4b8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04f      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a67      	ldr	r2, [pc, #412]	; (80034f8 <DMA_Init+0x4bc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d04a      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a65      	ldr	r2, [pc, #404]	; (80034fc <DMA_Init+0x4c0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d045      	beq.n	80033f6 <DMA_Init+0x3ba>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a64      	ldr	r2, [pc, #400]	; (8003500 <DMA_Init+0x4c4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d040      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a62      	ldr	r2, [pc, #392]	; (8003504 <DMA_Init+0x4c8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d03b      	beq.n	80033f6 <DMA_Init+0x3ba>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a61      	ldr	r2, [pc, #388]	; (8003508 <DMA_Init+0x4cc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d036      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5f      	ldr	r2, [pc, #380]	; (800350c <DMA_Init+0x4d0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d031      	beq.n	80033f6 <DMA_Init+0x3ba>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5e      	ldr	r2, [pc, #376]	; (8003510 <DMA_Init+0x4d4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d02c      	beq.n	80033f6 <DMA_Init+0x3ba>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a5c      	ldr	r2, [pc, #368]	; (8003514 <DMA_Init+0x4d8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d027      	beq.n	80033f6 <DMA_Init+0x3ba>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a5b      	ldr	r2, [pc, #364]	; (8003518 <DMA_Init+0x4dc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <DMA_Init+0x3ba>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a59      	ldr	r2, [pc, #356]	; (800351c <DMA_Init+0x4e0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01d      	beq.n	80033f6 <DMA_Init+0x3ba>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a58      	ldr	r2, [pc, #352]	; (8003520 <DMA_Init+0x4e4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d018      	beq.n	80033f6 <DMA_Init+0x3ba>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a56      	ldr	r2, [pc, #344]	; (8003524 <DMA_Init+0x4e8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <DMA_Init+0x3ba>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a55      	ldr	r2, [pc, #340]	; (8003528 <DMA_Init+0x4ec>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <DMA_Init+0x3ba>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a53      	ldr	r2, [pc, #332]	; (800352c <DMA_Init+0x4f0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <DMA_Init+0x3ba>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a52      	ldr	r2, [pc, #328]	; (8003530 <DMA_Init+0x4f4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <DMA_Init+0x3ba>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a50      	ldr	r2, [pc, #320]	; (8003534 <DMA_Init+0x4f8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <DMA_Init+0x3be>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <DMA_Init+0x3c0>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e008      	b.n	800341c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003412:	d103      	bne.n	800341c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800341a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003422:	4b45      	ldr	r3, [pc, #276]	; (8003538 <DMA_Init+0x4fc>)
 8003424:	4013      	ands	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	430b      	orrs	r3, r1
 800342e:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	649a      	str	r2, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a36      	ldr	r2, [pc, #216]	; (8003518 <DMA_Init+0x4dc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d022      	beq.n	8003488 <DMA_Init+0x44c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <DMA_Init+0x4e0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01d      	beq.n	8003488 <DMA_Init+0x44c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a33      	ldr	r2, [pc, #204]	; (8003520 <DMA_Init+0x4e4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d018      	beq.n	8003488 <DMA_Init+0x44c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a32      	ldr	r2, [pc, #200]	; (8003524 <DMA_Init+0x4e8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <DMA_Init+0x44c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a30      	ldr	r2, [pc, #192]	; (8003528 <DMA_Init+0x4ec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <DMA_Init+0x44c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2f      	ldr	r2, [pc, #188]	; (800352c <DMA_Init+0x4f0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <DMA_Init+0x44c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <DMA_Init+0x4f4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <DMA_Init+0x44c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2c      	ldr	r2, [pc, #176]	; (8003534 <DMA_Init+0x4f8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <DMA_Init+0x450>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <DMA_Init+0x452>
 800348c:	2300      	movs	r3, #0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40020050 	.word	0x40020050
 80034bc:	50020050 	.word	0x50020050
 80034c0:	400200d0 	.word	0x400200d0
 80034c4:	500200d0 	.word	0x500200d0
 80034c8:	40020150 	.word	0x40020150
 80034cc:	50020150 	.word	0x50020150
 80034d0:	400201d0 	.word	0x400201d0
 80034d4:	500201d0 	.word	0x500201d0
 80034d8:	40020250 	.word	0x40020250
 80034dc:	50020250 	.word	0x50020250
 80034e0:	400202d0 	.word	0x400202d0
 80034e4:	500202d0 	.word	0x500202d0
 80034e8:	40020350 	.word	0x40020350
 80034ec:	50020350 	.word	0x50020350
 80034f0:	400203d0 	.word	0x400203d0
 80034f4:	500203d0 	.word	0x500203d0
 80034f8:	40020450 	.word	0x40020450
 80034fc:	50020450 	.word	0x50020450
 8003500:	400204d0 	.word	0x400204d0
 8003504:	500204d0 	.word	0x500204d0
 8003508:	40020550 	.word	0x40020550
 800350c:	50020550 	.word	0x50020550
 8003510:	400205d0 	.word	0x400205d0
 8003514:	500205d0 	.word	0x500205d0
 8003518:	40020650 	.word	0x40020650
 800351c:	50020650 	.word	0x50020650
 8003520:	400206d0 	.word	0x400206d0
 8003524:	500206d0 	.word	0x500206d0
 8003528:	40020750 	.word	0x40020750
 800352c:	50020750 	.word	0x50020750
 8003530:	400207d0 	.word	0x400207d0
 8003534:	500207d0 	.word	0x500207d0
 8003538:	3cc03180 	.word	0x3cc03180

0800353c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_DMAEx_List_Start_IT+0x16>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e082      	b.n	800365c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800355c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d005      	beq.n	800357c <HAL_DMAEx_List_Start_IT+0x40>
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d16a      	bne.n	800364c <HAL_DMAEx_List_Start_IT+0x110>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d067      	beq.n	800364c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d157      	bne.n	8003638 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_DMAEx_List_Start_IT+0x5a>
 8003592:	2302      	movs	r3, #2
 8003594:	e062      	b.n	800365c <HAL_DMAEx_List_Start_IT+0x120>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	2202      	movs	r2, #2
 80035ac:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80035ca:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035fa:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f107 010c 	add.w	r1, r7, #12
 8003606:	2200      	movs	r2, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f82b 	bl	8003664 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4619      	mov	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	0c0b      	lsrs	r3, r1, #16
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800362c:	4013      	ands	r3, r2
 800362e:	68f9      	ldr	r1, [r7, #12]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	430b      	orrs	r3, r1
 8003636:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e007      	b.n	800365c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00c      	beq.n	8003696 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <DMA_List_GetCLLRNodeInfo+0x58>)
 8003686:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00f      	beq.n	80036ae <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003694:	e00b      	b.n	80036ae <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80036a0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2205      	movs	r2, #5
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	fe010000 	.word	0xfe010000
 80036c0:	f8010000 	.word	0xf8010000

080036c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80036d6:	e1ba      	b.n	8003a4e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 81aa 	beq.w	8003a48 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a55      	ldr	r2, [pc, #340]	; (800384c <HAL_GPIO_Init+0x188>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d15d      	bne.n	80037b8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003702:	2201      	movs	r2, #1
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	4013      	ands	r3, r2
 8003710:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0201 	and.w	r2, r3, #1
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	4313      	orrs	r3, r2
 8003724:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800372c:	4a48      	ldr	r2, [pc, #288]	; (8003850 <HAL_GPIO_Init+0x18c>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003734:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003736:	4a46      	ldr	r2, [pc, #280]	; (8003850 <HAL_GPIO_Init+0x18c>)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	08da      	lsrs	r2, r3, #3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	3208      	adds	r2, #8
 800374a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	220f      	movs	r2, #15
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	4013      	ands	r3, r2
 8003764:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	220b      	movs	r2, #11
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	4313      	orrs	r3, r2
 8003778:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3208      	adds	r2, #8
 8003782:	69f9      	ldr	r1, [r7, #28]
 8003784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	4013      	ands	r3, r2
 800379e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2202      	movs	r2, #2
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e067      	b.n	8003888 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x104>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b12      	cmp	r3, #18
 80037c6:	d145      	bne.n	8003854 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	08da      	lsrs	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3208      	adds	r2, #8
 80037d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	220f      	movs	r2, #15
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 020f 	and.w	r2, r3, #15
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	4313      	orrs	r3, r2
 8003804:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	69f9      	ldr	r1, [r7, #28]
 8003810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	4013      	ands	r3, r2
 800382a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0203 	and.w	r2, r3, #3
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	4313      	orrs	r3, r2
 8003840:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e01e      	b.n	8003888 <HAL_GPIO_Init+0x1c4>
 800384a:	bf00      	nop
 800384c:	46020000 	.word	0x46020000
 8003850:	080292bc 	.word	0x080292bc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	4013      	ands	r3, r2
 800386a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	4313      	orrs	r3, r2
 8003880:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d00b      	beq.n	80038a8 <HAL_GPIO_Init+0x1e4>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d007      	beq.n	80038a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800389c:	2b11      	cmp	r3, #17
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b12      	cmp	r3, #18
 80038a6:	d130      	bne.n	800390a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	4013      	ands	r3, r2
 80038be:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80038de:	2201      	movs	r2, #1
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	f003 0201 	and.w	r2, r3, #1
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	4313      	orrs	r3, r2
 8003902:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d017      	beq.n	8003942 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	4013      	ands	r3, r2
 8003928:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	4313      	orrs	r3, r2
 800393a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d07c      	beq.n	8003a48 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800394e:	4a47      	ldr	r2, [pc, #284]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	3318      	adds	r3, #24
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	220f      	movs	r2, #15
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	4013      	ands	r3, r2
 8003970:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0a9a      	lsrs	r2, r3, #10
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <HAL_GPIO_Init+0x3ac>)
 8003978:	4013      	ands	r3, r2
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	f002 0203 	and.w	r2, r2, #3
 8003980:	00d2      	lsls	r2, r2, #3
 8003982:	4093      	lsls	r3, r2
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	4313      	orrs	r3, r2
 8003988:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800398a:	4938      	ldr	r1, [pc, #224]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3318      	adds	r3, #24
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003998:	4b34      	ldr	r3, [pc, #208]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80039bc:	4a2b      	ldr	r2, [pc, #172]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80039c2:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80039ec:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 80039ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 8003a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a20:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003a40:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <HAL_GPIO_Init+0x3a8>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f47f ae3d 	bne.w	80036d8 <HAL_GPIO_Init+0x14>
  }
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	3724      	adds	r7, #36	; 0x24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	46022000 	.word	0x46022000
 8003a70:	002f7f7f 	.word	0x002f7f7f

08003a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	887b      	ldrh	r3, [r7, #2]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e001      	b.n	8003a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003aea:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe f8bc 	bl	8001c70 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003af8:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d006      	beq.n	8003b12 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003b04:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe f8a2 	bl	8001c56 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	46022000 	.word	0x46022000

08003b20 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e007      	b.n	8003b4e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 0204 	bic.w	r2, r3, #4
 8003b46:	4905      	ldr	r1, [pc, #20]	; (8003b5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40030400 	.word	0x40030400

08003b60 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_ICACHE_Enable+0x1c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_ICACHE_Enable+0x1c>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40030400 	.word	0x40030400

08003b80 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8003b8a:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_ICACHE_Disable+0x5c>)
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003b90:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_ICACHE_Disable+0x5c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <HAL_ICACHE_Disable+0x5c>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b9c:	f7fe f8e2 	bl	8001d64 <HAL_GetTick>
 8003ba0:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003ba2:	e00f      	b.n	8003bc4 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8003ba4:	f7fe f8de 	bl	8001d64 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d908      	bls.n	8003bc4 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_ICACHE_Disable+0x5c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	71fb      	strb	r3, [r7, #7]
        break;
 8003bc2:	e005      	b.n	8003bd0 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_ICACHE_Disable+0x5c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e9      	bne.n	8003ba4 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40030400 	.word	0x40030400

08003be0 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
 8003bfe:	e034      	b.n	8003c6a <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	009a      	lsls	r2, r3, #2
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8003c06:	4413      	add	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
 8003c1a:	e026      	b.n	8003c6a <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	425b      	negs	r3, r3
 8003c3a:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8003c3c:	401a      	ands	r2, r3
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	025a      	lsls	r2, r3, #9
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40030400 	.word	0x40030400
 8003c7c:	40030420 	.word	0x40030420
 8003c80:	07ff0000 	.word	0x07ff0000

08003c84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c86:	b08f      	sub	sp, #60	; 0x3c
 8003c88:	af0a      	add	r7, sp, #40	; 0x28
 8003c8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e116      	b.n	8003ec4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fd faef 	bl	8001294 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f007 ff75 	bl	800bbc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	687e      	ldr	r6, [r7, #4]
 8003ce2:	466d      	mov	r5, sp
 8003ce4:	f106 0410 	add.w	r4, r6, #16
 8003ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cf8:	1d33      	adds	r3, r6, #4
 8003cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f007 fe92 	bl	800ba26 <USB_CoreInit>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0d7      	b.n	8003ec4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f007 ff63 	bl	800bbe6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	e04a      	b.n	8003dbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	333d      	adds	r3, #61	; 0x3d
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	333c      	adds	r3, #60	; 0x3c
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	b298      	uxth	r0, r3
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3356      	adds	r3, #86	; 0x56
 8003d62:	4602      	mov	r2, r0
 8003d64:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3340      	adds	r3, #64	; 0x40
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	3344      	adds	r3, #68	; 0x44
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3348      	adds	r3, #72	; 0x48
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334c      	adds	r3, #76	; 0x4c
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	3301      	adds	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d3af      	bcc.n	8003d26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	e044      	b.n	8003e56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	3301      	adds	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3b5      	bcc.n	8003dcc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	687e      	ldr	r6, [r7, #4]
 8003e68:	466d      	mov	r5, sp
 8003e6a:	f106 0410 	add.w	r4, r6, #16
 8003e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e7e:	1d33      	adds	r3, r6, #4
 8003e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e82:	6838      	ldr	r0, [r7, #0]
 8003e84:	f007 fefc 	bl	800bc80 <USB_DevInit>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e014      	b.n	8003ec4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 ff38 	bl	8004d28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f008 fa05 	bl	800c2cc <USB_DevDisconnect>

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ecc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b08d      	sub	sp, #52	; 0x34
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f008 faa6 	bl	800c434 <USB_GetMode>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 84b7 	bne.w	800485e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f008 fa0a 	bl	800c30e <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 84ad 	beq.w	800485c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f008 f9f7 	bl	800c30e <USB_ReadInterrupts>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d107      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f002 0202 	and.w	r2, r2, #2
 8003f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f008 f9e5 	bl	800c30e <USB_ReadInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d161      	bne.n	8004012 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0210 	bic.w	r2, r2, #16
 8003f5c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 020f 	and.w	r2, r3, #15
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	0c5b      	lsrs	r3, r3, #17
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d124      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d035      	beq.n	8004002 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	6a38      	ldr	r0, [r7, #32]
 8003faa:	f008 f937 	bl	800c21c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fba:	441a      	add	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fcc:	441a      	add	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	615a      	str	r2, [r3, #20]
 8003fd2:	e016      	b.n	8004002 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	0c5b      	lsrs	r3, r3, #17
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2b06      	cmp	r3, #6
 8003fde:	d110      	bne.n	8004002 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6a38      	ldr	r0, [r7, #32]
 8003fec:	f008 f916 	bl	800c21c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ffc:	441a      	add	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0210 	orr.w	r2, r2, #16
 8004010:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f008 f979 	bl	800c30e <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004022:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004026:	f040 80a7 	bne.w	8004178 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f008 f97e 	bl	800c334 <USB_ReadDevAllOutEpInterrupt>
 8004038:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800403a:	e099      	b.n	8004170 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 808e 	beq.w	8004164 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f008 f9a2 	bl	800c39c <USB_ReadDevOutEPInterrupt>
 8004058:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	461a      	mov	r2, r3
 8004072:	2301      	movs	r3, #1
 8004074:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fd27 	bl	8004acc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	2308      	movs	r3, #8
 8004098:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800409a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fdfd 	bl	8004c9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2310      	movs	r3, #16
 80040bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d030      	beq.n	800412a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b80      	cmp	r3, #128	; 0x80
 80040d2:	d109      	bne.n	80040e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	78db      	ldrb	r3, [r3, #3]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d108      	bne.n	8004118 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4619      	mov	r1, r3
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fbf0 	bl	80048f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004124:	461a      	mov	r2, r3
 8004126:	2302      	movs	r3, #2
 8004128:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	2320      	movs	r3, #32
 8004144:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	461a      	mov	r2, r3
 800415e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004162:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	3301      	adds	r3, #1
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	f47f af62 	bne.w	800403c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f008 f8c6 	bl	800c30e <USB_ReadInterrupts>
 8004182:	4603      	mov	r3, r0
 8004184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800418c:	f040 80db 	bne.w	8004346 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f008 f8e7 	bl	800c368 <USB_ReadDevAllInEpInterrupt>
 800419a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041a0:	e0cd      	b.n	800433e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80c2 	beq.w	8004332 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f008 f90d 	bl	800c3d8 <USB_ReadDevInEPInterrupt>
 80041be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d057      	beq.n	800427a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	2201      	movs	r2, #1
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69f9      	ldr	r1, [r7, #28]
 80041e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ea:	4013      	ands	r3, r2
 80041ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	461a      	mov	r2, r3
 80041fc:	2301      	movs	r3, #1
 80041fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d132      	bne.n	800426e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	3348      	adds	r3, #72	; 0x48
 8004218:	6819      	ldr	r1, [r3, #0]
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4403      	add	r3, r0
 8004228:	3344      	adds	r3, #68	; 0x44
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4419      	add	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4403      	add	r3, r0
 800423c:	3348      	adds	r3, #72	; 0x48
 800423e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <HAL_PCD_IRQHandler+0x3a2>
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	334c      	adds	r3, #76	; 0x4c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d108      	bne.n	800426e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004266:	461a      	mov	r2, r3
 8004268:	2101      	movs	r1, #1
 800426a:	f008 f915 	bl	800c498 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	b2db      	uxtb	r3, r3
 8004272:	4619      	mov	r1, r3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fb01 	bl	800487c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004290:	461a      	mov	r2, r3
 8004292:	2308      	movs	r3, #8
 8004294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	461a      	mov	r2, r3
 80042ae:	2310      	movs	r3, #16
 80042b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	461a      	mov	r2, r3
 80042ca:	2340      	movs	r3, #64	; 0x40
 80042cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d023      	beq.n	8004320 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80042d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042da:	6a38      	ldr	r0, [r7, #32]
 80042dc:	f007 fe14 	bl	800bf08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80042e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	3338      	adds	r3, #56	; 0x38
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	4413      	add	r3, r2
 80042f0:	3304      	adds	r3, #4
 80042f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	78db      	ldrb	r3, [r3, #3]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d108      	bne.n	800430e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	b2db      	uxtb	r3, r3
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fb01 	bl	8004910 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	461a      	mov	r2, r3
 800431c:	2302      	movs	r3, #2
 800431e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800432a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb40 	bl	80049b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	3301      	adds	r3, #1
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f af2e 	bne.w	80041a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f007 ffdf 	bl	800c30e <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435a:	d122      	bne.n	80043a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004382:	2100      	movs	r1, #0
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fcf3 	bl	8004d70 <HAL_PCDEx_LPM_Callback>
 800438a:	e002      	b.n	8004392 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 faa9 	bl	80048e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f007 ffb1 	bl	800c30e <USB_ReadInterrupts>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b6:	d112      	bne.n	80043de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d102      	bne.n	80043ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fa81 	bl	80048d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f007 ff93 	bl	800c30e <USB_ReadInterrupts>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f2:	d121      	bne.n	8004438 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004402:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d111      	bne.n	8004432 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	f003 020f 	and.w	r2, r3, #15
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004428:	2101      	movs	r1, #1
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fca0 	bl	8004d70 <HAL_PCDEx_LPM_Callback>
 8004430:	e002      	b.n	8004438 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fa4c 	bl	80048d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f007 ff66 	bl	800c30e <USB_ReadInterrupts>
 8004442:	4603      	mov	r3, r0
 8004444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	f040 80b7 	bne.w	80045be <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2110      	movs	r1, #16
 800446a:	4618      	mov	r0, r3
 800446c:	f007 fd4c 	bl	800bf08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004474:	e046      	b.n	8004504 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004482:	461a      	mov	r2, r3
 8004484:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004488:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	461a      	mov	r2, r3
 80044b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	3301      	adds	r3, #1
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800450a:	429a      	cmp	r2, r3
 800450c:	d3b3      	bcc.n	8004476 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004520:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453a:	f043 030b 	orr.w	r3, r3, #11
 800453e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004550:	f043 030b 	orr.w	r3, r3, #11
 8004554:	6453      	str	r3, [r2, #68]	; 0x44
 8004556:	e015      	b.n	8004584 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800456a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800456e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800457e:	f043 030b 	orr.w	r3, r3, #11
 8004582:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004592:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004596:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045a8:	461a      	mov	r2, r3
 80045aa:	f007 ff75 	bl	800c498 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f007 fea3 	bl	800c30e <USB_ReadInterrupts>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d2:	d124      	bne.n	800461e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f007 ff39 	bl	800c450 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f007 fd0d 	bl	800c002 <USB_GetDevSpeed>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681c      	ldr	r4, [r3, #0]
 80045f4:	f001 fea4 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 80045f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	4620      	mov	r0, r4
 8004604:	f007 fa3c 	bl	800ba80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f957 	bl	80048bc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800461c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f007 fe73 	bl	800c30e <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b08      	cmp	r3, #8
 8004630:	d10a      	bne.n	8004648 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f938 	bl	80048a8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f002 0208 	and.w	r2, r2, #8
 8004646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f007 fe5e 	bl	800c30e <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d122      	bne.n	80046a2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004668:	2301      	movs	r3, #1
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	e014      	b.n	8004698 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d105      	bne.n	8004692 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	b2db      	uxtb	r3, r3
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f95f 	bl	8004950 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	3301      	adds	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	429a      	cmp	r2, r3
 80046a0:	d3e5      	bcc.n	800466e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f007 fe31 	bl	800c30e <USB_ReadInterrupts>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b6:	d13b      	bne.n	8004730 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046b8:	2301      	movs	r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
 80046bc:	e02b      	b.n	8004716 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3340      	adds	r3, #64	; 0x40
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d115      	bne.n	8004710 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80046e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	da12      	bge.n	8004710 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	333f      	adds	r3, #63	; 0x3f
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f920 	bl	8004950 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	3301      	adds	r3, #1
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	429a      	cmp	r2, r3
 800471e:	d3ce      	bcc.n	80046be <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800472e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f007 fdea 	bl	800c30e <USB_ReadInterrupts>
 800473a:	4603      	mov	r3, r0
 800473c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004744:	d155      	bne.n	80047f2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004746:	2301      	movs	r3, #1
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
 800474a:	e045      	b.n	80047d8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d12e      	bne.n	80047d2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004774:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004776:	2b00      	cmp	r3, #0
 8004778:	da2b      	bge.n	80047d2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004786:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800478a:	429a      	cmp	r2, r3
 800478c:	d121      	bne.n	80047d2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ce:	6053      	str	r3, [r2, #4]
            break;
 80047d0:	e007      	b.n	80047e2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3301      	adds	r3, #1
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	429a      	cmp	r2, r3
 80047e0:	d3b4      	bcc.n	800474c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80047f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f007 fd89 	bl	800c30e <USB_ReadInterrupts>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d10a      	bne.n	800481e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f88d 	bl	8004928 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800481c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f007 fd73 	bl	800c30e <USB_ReadInterrupts>
 8004828:	4603      	mov	r3, r0
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b04      	cmp	r3, #4
 8004830:	d115      	bne.n	800485e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f879 	bl	800493c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	e000      	b.n	800485e <HAL_PCD_IRQHandler+0x992>
      return;
 800485c:	bf00      	nop
    }
  }
}
 800485e:	3734      	adds	r7, #52	; 0x34
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}

08004864 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800495c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004960:	2b00      	cmp	r3, #0
 8004962:	da0c      	bge.n	800497e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	f003 020f 	and.w	r2, r3, #15
 800496a:	4613      	mov	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	3338      	adds	r3, #56	; 0x38
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	3304      	adds	r3, #4
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e00c      	b.n	8004998 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	f003 020f 	and.w	r2, r3, #15
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	3304      	adds	r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68f9      	ldr	r1, [r7, #12]
 800499e:	4618      	mov	r0, r3
 80049a0:	f007 fb54 	bl	800c04c <USB_EPStopXfer>
 80049a4:	4603      	mov	r3, r0
 80049a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049a8:	7afb      	ldrb	r3, [r7, #11]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b08a      	sub	sp, #40	; 0x28
 80049b6:	af02      	add	r7, sp, #8
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	3338      	adds	r3, #56	; 0x38
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	3304      	adds	r3, #4
 80049d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d901      	bls.n	80049ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06c      	b.n	8004ac4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d902      	bls.n	8004a06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3303      	adds	r3, #3
 8004a0a:	089b      	lsrs	r3, r3, #2
 8004a0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a0e:	e02b      	b.n	8004a68 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d902      	bls.n	8004a2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3303      	adds	r3, #3
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68d9      	ldr	r1, [r3, #12]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	4603      	mov	r3, r0
 8004a4a:	6978      	ldr	r0, [r7, #20]
 8004a4c:	f007 fba8 	bl	800c1a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	441a      	add	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	441a      	add	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d809      	bhi.n	8004a92 <PCD_WriteEmptyTxFifo+0xe0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d203      	bcs.n	8004a92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1be      	bne.n	8004a10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d811      	bhi.n	8004ac2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	6939      	ldr	r1, [r7, #16]
 8004aba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004abe:	4013      	ands	r3, r2
 8004ac0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	333c      	adds	r3, #60	; 0x3c
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d17b      	bne.n	8004bfa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d015      	beq.n	8004b38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4a61      	ldr	r2, [pc, #388]	; (8004c94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	f240 80b9 	bls.w	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80b3 	beq.w	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b34:	6093      	str	r3, [r2, #8]
 8004b36:	e0a7      	b.n	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2320      	movs	r3, #32
 8004b52:	6093      	str	r3, [r2, #8]
 8004b54:	e098      	b.n	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 8093 	bne.w	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4a4b      	ldr	r2, [pc, #300]	; (8004c94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d90f      	bls.n	8004b8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	461a      	mov	r2, r3
 8004b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b86:	6093      	str	r3, [r2, #8]
 8004b88:	e07e      	b.n	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	0159      	lsls	r1, r3, #5
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	440b      	add	r3, r1
 8004bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	1ad2      	subs	r2, r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d114      	bne.n	8004bec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	f007 fc5e 	bl	800c498 <USB_EP0_OutStart>
 8004bdc:	e006      	b.n	8004bec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	441a      	add	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff fe36 	bl	8004864 <HAL_PCD_DataOutStageCallback>
 8004bf8:	e046      	b.n	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d124      	bne.n	8004c4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1e:	6093      	str	r3, [r2, #8]
 8004c20:	e032      	b.n	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2320      	movs	r3, #32
 8004c3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe0d 	bl	8004864 <HAL_PCD_DataOutStageCallback>
 8004c4a:	e01d      	b.n	8004c88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d114      	bne.n	8004c7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d108      	bne.n	8004c7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c74:	461a      	mov	r2, r3
 8004c76:	2100      	movs	r1, #0
 8004c78:	f007 fc0e 	bl	800c498 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff fdee 	bl	8004864 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	4f54300a 	.word	0x4f54300a
 8004c98:	4f54310a 	.word	0x4f54310a

08004c9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	333c      	adds	r3, #60	; 0x3c
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <PCD_EP_OutSetupPacket_int+0x88>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d90e      	bls.n	8004cf0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fdcf 	bl	8004894 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a0a      	ldr	r2, [pc, #40]	; (8004d24 <PCD_EP_OutSetupPacket_int+0x88>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d90c      	bls.n	8004d18 <PCD_EP_OutSetupPacket_int+0x7c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d108      	bne.n	8004d18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d10:	461a      	mov	r2, r3
 8004d12:	2101      	movs	r1, #1
 8004d14:	f007 fbc0 	bl	800c498 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	4f54300a 	.word	0x4f54300a

08004d28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	f043 0303 	orr.w	r3, r3, #3
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004d90:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d98:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d10b      	bne.n	8004dba <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da8:	d905      	bls.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004daa:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	4a32      	ldr	r2, [pc, #200]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e057      	b.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d90a      	bls.n	8004dd8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd4:	60d3      	str	r3, [r2, #12]
 8004dd6:	e007      	b.n	8004de8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004dd8:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004de0:	4925      	ldr	r1, [pc, #148]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004de8:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	2232      	movs	r2, #50	; 0x32
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	099b      	lsrs	r3, r3, #6
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e06:	e002      	b.n	8004e0e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f3      	bne.n	8004e08 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e26:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	099b      	lsrs	r3, r3, #6
 8004e32:	2232      	movs	r2, #50	; 0x32
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	4a11      	ldr	r2, [pc, #68]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	3301      	adds	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004e44:	e002      	b.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f3      	bne.n	8004e46 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e000      	b.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	46020800 	.word	0x46020800
 8004e7c:	20000004 	.word	0x20000004
 8004e80:	10624dd3 	.word	0x10624dd3

08004e84 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004e88:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <HAL_PWREx_GetVoltageRange+0x18>)
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	46020800 	.word	0x46020800

08004ea0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ea8:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <HAL_PWREx_ConfigSupply+0x94>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a22      	ldr	r2, [pc, #136]	; (8004f38 <HAL_PWREx_ConfigSupply+0x98>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	2232      	movs	r2, #50	; 0x32
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <HAL_PWREx_ConfigSupply+0x98>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d113      	bne.n	8004ef4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_PWREx_ConfigSupply+0x9c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <HAL_PWREx_ConfigSupply+0x9c>)
 8004ed2:	f023 0302 	bic.w	r3, r3, #2
 8004ed6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004ed8:	e002      	b.n	8004ee0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004ee0:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <HAL_PWREx_ConfigSupply+0x9c>)
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d116      	bne.n	8004f1a <HAL_PWREx_ConfigSupply+0x7a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f3      	bne.n	8004eda <HAL_PWREx_ConfigSupply+0x3a>
 8004ef2:	e012      	b.n	8004f1a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_PWREx_ConfigSupply+0x9c>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <HAL_PWREx_ConfigSupply+0x9c>)
 8004efa:	f043 0302 	orr.w	r3, r3, #2
 8004efe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f00:	e002      	b.n	8004f08 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <HAL_PWREx_ConfigSupply+0x9c>)
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <HAL_PWREx_ConfigSupply+0x7a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f3      	bne.n	8004f02 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e000      	b.n	8004f26 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000004 	.word	0x20000004
 8004f38:	10624dd3 	.word	0x10624dd3
 8004f3c:	46020800 	.word	0x46020800

08004f40 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	6113      	str	r3, [r2, #16]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	46020800 	.word	0x46020800

08004f60 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f6e:	6113      	str	r3, [r2, #16]
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	46020800 	.word	0x46020800

08004f80 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_PWREx_EnableVddA+0x1c>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <HAL_PWREx_EnableVddA+0x1c>)
 8004f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f8e:	6113      	str	r3, [r2, #16]
}
 8004f90:	bf00      	nop
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	46020800 	.word	0x46020800

08004fa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08e      	sub	sp, #56	; 0x38
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f000 bec8 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fba:	4b99      	ldr	r3, [pc, #612]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc4:	4b96      	ldr	r3, [pc, #600]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 816c 	beq.w	80052b4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x52>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	2b0c      	cmp	r3, #12
 8004fe6:	f040 80de 	bne.w	80051a6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 80da 	bne.w	80051a6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f000 bea5 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005004:	4b86      	ldr	r3, [pc, #536]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d004      	beq.n	800501a <HAL_RCC_OscConfig+0x7a>
 8005010:	4b83      	ldr	r3, [pc, #524]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005018:	e005      	b.n	8005026 <HAL_RCC_OscConfig+0x86>
 800501a:	4b81      	ldr	r3, [pc, #516]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800501c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005026:	4293      	cmp	r3, r2
 8005028:	d255      	bcs.n	80050d6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	4618      	mov	r0, r3
 8005036:	f001 fa11 	bl	800645c <RCC_SetFlashLatencyFromMSIRange>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f000 be82 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005046:	4b76      	ldr	r3, [pc, #472]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4a75      	ldr	r2, [pc, #468]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800504c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005050:	6093      	str	r3, [r2, #8]
 8005052:	4b73      	ldr	r3, [pc, #460]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	4970      	ldr	r1, [pc, #448]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005060:	4313      	orrs	r3, r2
 8005062:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800506c:	d309      	bcc.n	8005082 <HAL_RCC_OscConfig+0xe2>
 800506e:	4b6c      	ldr	r3, [pc, #432]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f023 021f 	bic.w	r2, r3, #31
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	4969      	ldr	r1, [pc, #420]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800507c:	4313      	orrs	r3, r2
 800507e:	60cb      	str	r3, [r1, #12]
 8005080:	e07e      	b.n	8005180 <HAL_RCC_OscConfig+0x1e0>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	da0a      	bge.n	80050a0 <HAL_RCC_OscConfig+0x100>
 800508a:	4b65      	ldr	r3, [pc, #404]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	015b      	lsls	r3, r3, #5
 8005098:	4961      	ldr	r1, [pc, #388]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800509a:	4313      	orrs	r3, r2
 800509c:	60cb      	str	r3, [r1, #12]
 800509e:	e06f      	b.n	8005180 <HAL_RCC_OscConfig+0x1e0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d30a      	bcc.n	80050c0 <HAL_RCC_OscConfig+0x120>
 80050aa:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	029b      	lsls	r3, r3, #10
 80050b8:	4959      	ldr	r1, [pc, #356]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60cb      	str	r3, [r1, #12]
 80050be:	e05f      	b.n	8005180 <HAL_RCC_OscConfig+0x1e0>
 80050c0:	4b57      	ldr	r3, [pc, #348]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	03db      	lsls	r3, r3, #15
 80050ce:	4954      	ldr	r1, [pc, #336]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60cb      	str	r3, [r1, #12]
 80050d4:	e054      	b.n	8005180 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80050d6:	4b52      	ldr	r3, [pc, #328]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	4a51      	ldr	r2, [pc, #324]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80050dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050e0:	6093      	str	r3, [r2, #8]
 80050e2:	4b4f      	ldr	r3, [pc, #316]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	494c      	ldr	r1, [pc, #304]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80050fc:	d309      	bcc.n	8005112 <HAL_RCC_OscConfig+0x172>
 80050fe:	4b48      	ldr	r3, [pc, #288]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 021f 	bic.w	r2, r3, #31
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4945      	ldr	r1, [pc, #276]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800510c:	4313      	orrs	r3, r2
 800510e:	60cb      	str	r3, [r1, #12]
 8005110:	e028      	b.n	8005164 <HAL_RCC_OscConfig+0x1c4>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b00      	cmp	r3, #0
 8005118:	da0a      	bge.n	8005130 <HAL_RCC_OscConfig+0x190>
 800511a:	4b41      	ldr	r3, [pc, #260]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	015b      	lsls	r3, r3, #5
 8005128:	493d      	ldr	r1, [pc, #244]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800512a:	4313      	orrs	r3, r2
 800512c:	60cb      	str	r3, [r1, #12]
 800512e:	e019      	b.n	8005164 <HAL_RCC_OscConfig+0x1c4>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005138:	d30a      	bcc.n	8005150 <HAL_RCC_OscConfig+0x1b0>
 800513a:	4b39      	ldr	r3, [pc, #228]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	029b      	lsls	r3, r3, #10
 8005148:	4935      	ldr	r1, [pc, #212]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800514a:	4313      	orrs	r3, r2
 800514c:	60cb      	str	r3, [r1, #12]
 800514e:	e009      	b.n	8005164 <HAL_RCC_OscConfig+0x1c4>
 8005150:	4b33      	ldr	r3, [pc, #204]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	03db      	lsls	r3, r3, #15
 800515e:	4930      	ldr	r1, [pc, #192]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005160:	4313      	orrs	r3, r2
 8005162:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	4618      	mov	r0, r3
 8005170:	f001 f974 	bl	800645c <RCC_SetFlashLatencyFromMSIRange>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f000 bde5 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005180:	f001 f8de 	bl	8006340 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <HAL_RCC_OscConfig+0x284>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fc f917 	bl	80013bc <HAL_InitTick>
 800518e:	4603      	mov	r3, r0
 8005190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8005194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 808a 	beq.w	80052b2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800519e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051a2:	f000 bdd2 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d066      	beq.n	800527c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051ba:	f7fc fdd3 	bl	8001d64 <HAL_GetTick>
 80051be:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80051c0:	e009      	b.n	80051d6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051c2:	f7fc fdcf 	bl	8001d64 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d902      	bls.n	80051d6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	f000 bdba 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0ef      	beq.n	80051c2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80051e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051ec:	6093      	str	r3, [r2, #8]
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	4909      	ldr	r1, [pc, #36]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005208:	d30e      	bcc.n	8005228 <HAL_RCC_OscConfig+0x288>
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f023 021f 	bic.w	r2, r3, #31
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4902      	ldr	r1, [pc, #8]	; (8005220 <HAL_RCC_OscConfig+0x280>)
 8005218:	4313      	orrs	r3, r2
 800521a:	60cb      	str	r3, [r1, #12]
 800521c:	e04a      	b.n	80052b4 <HAL_RCC_OscConfig+0x314>
 800521e:	bf00      	nop
 8005220:	46020c00 	.word	0x46020c00
 8005224:	2000000c 	.word	0x2000000c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	da0a      	bge.n	8005246 <HAL_RCC_OscConfig+0x2a6>
 8005230:	4b98      	ldr	r3, [pc, #608]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	015b      	lsls	r3, r3, #5
 800523e:	4995      	ldr	r1, [pc, #596]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005240:	4313      	orrs	r3, r2
 8005242:	60cb      	str	r3, [r1, #12]
 8005244:	e036      	b.n	80052b4 <HAL_RCC_OscConfig+0x314>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d30a      	bcc.n	8005266 <HAL_RCC_OscConfig+0x2c6>
 8005250:	4b90      	ldr	r3, [pc, #576]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	029b      	lsls	r3, r3, #10
 800525e:	498d      	ldr	r1, [pc, #564]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005260:	4313      	orrs	r3, r2
 8005262:	60cb      	str	r3, [r1, #12]
 8005264:	e026      	b.n	80052b4 <HAL_RCC_OscConfig+0x314>
 8005266:	4b8b      	ldr	r3, [pc, #556]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	03db      	lsls	r3, r3, #15
 8005274:	4987      	ldr	r1, [pc, #540]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005276:	4313      	orrs	r3, r2
 8005278:	60cb      	str	r3, [r1, #12]
 800527a:	e01b      	b.n	80052b4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800527c:	4b85      	ldr	r3, [pc, #532]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a84      	ldr	r2, [pc, #528]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005288:	f7fc fd6c 	bl	8001d64 <HAL_GetTick>
 800528c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800528e:	e009      	b.n	80052a4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005290:	f7fc fd68 	bl	8001d64 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d902      	bls.n	80052a4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	f000 bd53 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80052a4:	4b7b      	ldr	r3, [pc, #492]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ef      	bne.n	8005290 <HAL_RCC_OscConfig+0x2f0>
 80052b0:	e000      	b.n	80052b4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 808b 	beq.w	80053d8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_OscConfig+0x334>
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	d109      	bne.n	80052e2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d17d      	bne.n	80053d8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f000 bd34 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ea:	d106      	bne.n	80052fa <HAL_RCC_OscConfig+0x35a>
 80052ec:	4b69      	ldr	r3, [pc, #420]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a68      	ldr	r2, [pc, #416]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 80052f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	e041      	b.n	800537e <HAL_RCC_OscConfig+0x3de>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005302:	d112      	bne.n	800532a <HAL_RCC_OscConfig+0x38a>
 8005304:	4b63      	ldr	r3, [pc, #396]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a62      	ldr	r2, [pc, #392]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800530a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b60      	ldr	r3, [pc, #384]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5f      	ldr	r2, [pc, #380]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005316:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b5d      	ldr	r3, [pc, #372]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a5c      	ldr	r2, [pc, #368]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e029      	b.n	800537e <HAL_RCC_OscConfig+0x3de>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005332:	d112      	bne.n	800535a <HAL_RCC_OscConfig+0x3ba>
 8005334:	4b57      	ldr	r3, [pc, #348]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a56      	ldr	r2, [pc, #344]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800533a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4b54      	ldr	r3, [pc, #336]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a53      	ldr	r2, [pc, #332]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	4b51      	ldr	r3, [pc, #324]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a50      	ldr	r2, [pc, #320]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e011      	b.n	800537e <HAL_RCC_OscConfig+0x3de>
 800535a:	4b4e      	ldr	r3, [pc, #312]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a4d      	ldr	r2, [pc, #308]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4b4b      	ldr	r3, [pc, #300]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800536c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	4b48      	ldr	r3, [pc, #288]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a47      	ldr	r2, [pc, #284]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005378:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800537c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d014      	beq.n	80053b0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005386:	f7fc fced 	bl	8001d64 <HAL_GetTick>
 800538a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800538c:	e009      	b.n	80053a2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800538e:	f7fc fce9 	bl	8001d64 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b64      	cmp	r3, #100	; 0x64
 800539a:	d902      	bls.n	80053a2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	f000 bcd4 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053a2:	4b3c      	ldr	r3, [pc, #240]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0ef      	beq.n	800538e <HAL_RCC_OscConfig+0x3ee>
 80053ae:	e013      	b.n	80053d8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80053b0:	f7fc fcd8 	bl	8001d64 <HAL_GetTick>
 80053b4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053b6:	e009      	b.n	80053cc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b8:	f7fc fcd4 	bl	8001d64 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d902      	bls.n	80053cc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	f000 bcbf 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053cc:	4b31      	ldr	r3, [pc, #196]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1ef      	bne.n	80053b8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05f      	beq.n	80054a4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d005      	beq.n	80053f6 <HAL_RCC_OscConfig+0x456>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d114      	bne.n	800541a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d111      	bne.n	800541a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f000 bca3 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005404:	4b23      	ldr	r3, [pc, #140]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	4920      	ldr	r1, [pc, #128]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005414:	4313      	orrs	r3, r2
 8005416:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005418:	e044      	b.n	80054a4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d024      	beq.n	800546c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800542e:	f7fc fc99 	bl	8001d64 <HAL_GetTick>
 8005432:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005434:	e009      	b.n	800544a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005436:	f7fc fc95 	bl	8001d64 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d902      	bls.n	800544a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	f000 bc80 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0ef      	beq.n	8005436 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005456:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	490b      	ldr	r1, [pc, #44]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005466:	4313      	orrs	r3, r2
 8005468:	610b      	str	r3, [r1, #16]
 800546a:	e01b      	b.n	80054a4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a08      	ldr	r2, [pc, #32]	; (8005494 <HAL_RCC_OscConfig+0x4f4>)
 8005472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005476:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005478:	f7fc fc74 	bl	8001d64 <HAL_GetTick>
 800547c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800547e:	e00b      	b.n	8005498 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005480:	f7fc fc70 	bl	8001d64 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d904      	bls.n	8005498 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	f000 bc5b 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
 8005494:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005498:	4baf      	ldr	r3, [pc, #700]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1ed      	bne.n	8005480 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80c8 	beq.w	8005642 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b8:	4ba7      	ldr	r3, [pc, #668]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80054ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d111      	bne.n	80054ea <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	4ba4      	ldr	r3, [pc, #656]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80054c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054cc:	4aa2      	ldr	r2, [pc, #648]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80054d6:	4ba0      	ldr	r3, [pc, #640]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054ea:	4b9c      	ldr	r3, [pc, #624]	; (800575c <HAL_RCC_OscConfig+0x7bc>)
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d119      	bne.n	800552a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80054f6:	4b99      	ldr	r3, [pc, #612]	; (800575c <HAL_RCC_OscConfig+0x7bc>)
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	4a98      	ldr	r2, [pc, #608]	; (800575c <HAL_RCC_OscConfig+0x7bc>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005502:	f7fc fc2f 	bl	8001d64 <HAL_GetTick>
 8005506:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005508:	e009      	b.n	800551e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550a:	f7fc fc2b 	bl	8001d64 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d902      	bls.n	800551e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	f000 bc16 	b.w	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800551e:	4b8f      	ldr	r3, [pc, #572]	; (800575c <HAL_RCC_OscConfig+0x7bc>)
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ef      	beq.n	800550a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d05f      	beq.n	80055f2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005532:	4b89      	ldr	r3, [pc, #548]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005538:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005544:	429a      	cmp	r2, r3
 8005546:	d037      	beq.n	80055b8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e3f4      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01b      	beq.n	80055a2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800556a:	4b7b      	ldr	r3, [pc, #492]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 800556c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005570:	4a79      	ldr	r2, [pc, #484]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005572:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005576:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800557a:	f7fc fbf3 	bl	8001d64 <HAL_GetTick>
 800557e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005582:	f7fc fbef 	bl	8001d64 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b05      	cmp	r3, #5
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e3da      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005594:	4b70      	ldr	r3, [pc, #448]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800559a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1ef      	bne.n	8005582 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80055a2:	4b6d      	ldr	r3, [pc, #436]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80055a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	4969      	ldr	r1, [pc, #420]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80055b8:	4b67      	ldr	r3, [pc, #412]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80055ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055be:	4a66      	ldr	r2, [pc, #408]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80055c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80055c8:	f7fc fbcc 	bl	8001d64 <HAL_GetTick>
 80055cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d0:	f7fc fbc8 	bl	8001d64 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e3b3      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80055e2:	4b5d      	ldr	r3, [pc, #372]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80055e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ef      	beq.n	80055d0 <HAL_RCC_OscConfig+0x630>
 80055f0:	e01b      	b.n	800562a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80055f2:	4b59      	ldr	r3, [pc, #356]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80055f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f8:	4a57      	ldr	r2, [pc, #348]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80055fa:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80055fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005602:	f7fc fbaf 	bl	8001d64 <HAL_GetTick>
 8005606:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800560a:	f7fc fbab 	bl	8001d64 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b05      	cmp	r3, #5
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e396      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800561c:	4b4e      	ldr	r3, [pc, #312]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 800561e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ef      	bne.n	800560a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800562a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800562e:	2b01      	cmp	r3, #1
 8005630:	d107      	bne.n	8005642 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005632:	4b49      	ldr	r3, [pc, #292]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005638:	4a47      	ldr	r2, [pc, #284]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 800563a:	f023 0304 	bic.w	r3, r3, #4
 800563e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8111 	beq.w	8005872 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005650:	2300      	movs	r3, #0
 8005652:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005656:	4b40      	ldr	r3, [pc, #256]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d111      	bne.n	8005688 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005664:	4b3c      	ldr	r3, [pc, #240]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566a:	4a3b      	ldr	r2, [pc, #236]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 800566c:	f043 0304 	orr.w	r3, r3, #4
 8005670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005674:	4b38      	ldr	r3, [pc, #224]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005688:	4b34      	ldr	r3, [pc, #208]	; (800575c <HAL_RCC_OscConfig+0x7bc>)
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d118      	bne.n	80056c6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005694:	4b31      	ldr	r3, [pc, #196]	; (800575c <HAL_RCC_OscConfig+0x7bc>)
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	4a30      	ldr	r2, [pc, #192]	; (800575c <HAL_RCC_OscConfig+0x7bc>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a0:	f7fc fb60 	bl	8001d64 <HAL_GetTick>
 80056a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a8:	f7fc fb5c 	bl	8001d64 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e347      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056ba:	4b28      	ldr	r3, [pc, #160]	; (800575c <HAL_RCC_OscConfig+0x7bc>)
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01f      	beq.n	8005712 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80056de:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80056e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056e4:	4a1c      	ldr	r2, [pc, #112]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056ee:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80056f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056f4:	4a18      	ldr	r2, [pc, #96]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056fe:	e018      	b.n	8005732 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005700:	4b15      	ldr	r3, [pc, #84]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005706:	4a14      	ldr	r2, [pc, #80]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005710:	e00f      	b.n	8005732 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005718:	4a0f      	ldr	r2, [pc, #60]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 8005724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005728:	4a0b      	ldr	r2, [pc, #44]	; (8005758 <HAL_RCC_OscConfig+0x7b8>)
 800572a:	f023 0304 	bic.w	r3, r3, #4
 800572e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d057      	beq.n	80057ea <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800573a:	f7fc fb13 	bl	8001d64 <HAL_GetTick>
 800573e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005740:	e00e      	b.n	8005760 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fc fb0f 	bl	8001d64 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005750:	4293      	cmp	r3, r2
 8005752:	d905      	bls.n	8005760 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e2f8      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
 8005758:	46020c00 	.word	0x46020c00
 800575c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005760:	4b9c      	ldr	r3, [pc, #624]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0e9      	beq.n	8005742 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01b      	beq.n	80057b2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800577a:	4b96      	ldr	r3, [pc, #600]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800577c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005780:	4a94      	ldr	r2, [pc, #592]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800578a:	e00a      	b.n	80057a2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578c:	f7fc faea 	bl	8001d64 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f241 3288 	movw	r2, #5000	; 0x1388
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e2d3      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80057a2:	4b8c      	ldr	r3, [pc, #560]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80057a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0ed      	beq.n	800578c <HAL_RCC_OscConfig+0x7ec>
 80057b0:	e053      	b.n	800585a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057b2:	4b88      	ldr	r3, [pc, #544]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80057b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057b8:	4a86      	ldr	r2, [pc, #536]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80057ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057c2:	e00a      	b.n	80057da <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c4:	f7fc face 	bl	8001d64 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e2b7      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057da:	4b7e      	ldr	r3, [pc, #504]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80057dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1ed      	bne.n	80057c4 <HAL_RCC_OscConfig+0x824>
 80057e8:	e037      	b.n	800585a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80057ea:	f7fc fabb 	bl	8001d64 <HAL_GetTick>
 80057ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057f0:	e00a      	b.n	8005808 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f2:	f7fc fab7 	bl	8001d64 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005800:	4293      	cmp	r3, r2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e2a0      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005808:	4b72      	ldr	r3, [pc, #456]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800580a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1ed      	bne.n	80057f2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005816:	4b6f      	ldr	r3, [pc, #444]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800581c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01a      	beq.n	800585a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005824:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800582a:	4a6a      	ldr	r2, [pc, #424]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800582c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005830:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005834:	e00a      	b.n	800584c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f7fc fa95 	bl	8001d64 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e27e      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800584c:	4b61      	ldr	r3, [pc, #388]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800584e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1ed      	bne.n	8005836 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800585a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800585e:	2b01      	cmp	r3, #1
 8005860:	d107      	bne.n	8005872 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4b5c      	ldr	r3, [pc, #368]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005868:	4a5a      	ldr	r2, [pc, #360]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800586a:	f023 0304 	bic.w	r3, r3, #4
 800586e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d036      	beq.n	80058ec <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d019      	beq.n	80058ba <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005886:	4b53      	ldr	r3, [pc, #332]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a52      	ldr	r2, [pc, #328]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800588c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005890:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005892:	f7fc fa67 	bl	8001d64 <HAL_GetTick>
 8005896:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800589a:	f7fc fa63 	bl	8001d64 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e24e      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80058ac:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x8fa>
 80058b8:	e018      	b.n	80058ec <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80058ba:	4b46      	ldr	r3, [pc, #280]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a45      	ldr	r2, [pc, #276]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80058c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80058c6:	f7fc fa4d 	bl	8001d64 <HAL_GetTick>
 80058ca:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058ce:	f7fc fa49 	bl	8001d64 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e234      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058e0:	4b3c      	ldr	r3, [pc, #240]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d036      	beq.n	8005966 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005900:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a33      	ldr	r2, [pc, #204]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800590a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800590c:	f7fc fa2a 	bl	8001d64 <HAL_GetTick>
 8005910:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005914:	f7fc fa26 	bl	8001d64 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e211      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005926:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0x974>
 8005932:	e018      	b.n	8005966 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005934:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a26      	ldr	r2, [pc, #152]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800593a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005940:	f7fc fa10 	bl	8001d64 <HAL_GetTick>
 8005944:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005948:	f7fc fa0c 	bl	8001d64 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e1f7      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800595a:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d07f      	beq.n	8005a72 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	2b00      	cmp	r3, #0
 8005978:	d062      	beq.n	8005a40 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800597a:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	4910      	ldr	r1, [pc, #64]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80059a0:	d309      	bcc.n	80059b6 <HAL_RCC_OscConfig+0xa16>
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f023 021f 	bic.w	r2, r3, #31
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	4909      	ldr	r1, [pc, #36]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60cb      	str	r3, [r1, #12]
 80059b4:	e02a      	b.n	8005a0c <HAL_RCC_OscConfig+0xa6c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da0c      	bge.n	80059d8 <HAL_RCC_OscConfig+0xa38>
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	015b      	lsls	r3, r3, #5
 80059cc:	4901      	ldr	r1, [pc, #4]	; (80059d4 <HAL_RCC_OscConfig+0xa34>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60cb      	str	r3, [r1, #12]
 80059d2:	e01b      	b.n	8005a0c <HAL_RCC_OscConfig+0xa6c>
 80059d4:	46020c00 	.word	0x46020c00
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e0:	d30a      	bcc.n	80059f8 <HAL_RCC_OscConfig+0xa58>
 80059e2:	4ba1      	ldr	r3, [pc, #644]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	029b      	lsls	r3, r3, #10
 80059f0:	499d      	ldr	r1, [pc, #628]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60cb      	str	r3, [r1, #12]
 80059f6:	e009      	b.n	8005a0c <HAL_RCC_OscConfig+0xa6c>
 80059f8:	4b9b      	ldr	r3, [pc, #620]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	03db      	lsls	r3, r3, #15
 8005a06:	4998      	ldr	r1, [pc, #608]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005a0c:	4b96      	ldr	r3, [pc, #600]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a95      	ldr	r2, [pc, #596]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a12:	f043 0310 	orr.w	r3, r3, #16
 8005a16:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a18:	f7fc f9a4 	bl	8001d64 <HAL_GetTick>
 8005a1c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005a20:	f7fc f9a0 	bl	8001d64 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e18b      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005a32:	4b8d      	ldr	r3, [pc, #564]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0xa80>
 8005a3e:	e018      	b.n	8005a72 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005a40:	4b89      	ldr	r3, [pc, #548]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a88      	ldr	r2, [pc, #544]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a46:	f023 0310 	bic.w	r3, r3, #16
 8005a4a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a4c:	f7fc f98a 	bl	8001d64 <HAL_GetTick>
 8005a50:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005a54:	f7fc f986 	bl	8001d64 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e171      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005a66:	4b80      	ldr	r3, [pc, #512]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8166 	beq.w	8005d48 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a82:	4b79      	ldr	r3, [pc, #484]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	2b0c      	cmp	r3, #12
 8005a8c:	f000 80f2 	beq.w	8005c74 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	f040 80c5 	bne.w	8005c24 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005a9a:	4b73      	ldr	r3, [pc, #460]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a72      	ldr	r2, [pc, #456]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005aa6:	f7fc f95d 	bl	8001d64 <HAL_GetTick>
 8005aaa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aae:	f7fc f959 	bl	8001d64 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e144      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ac0:	4b69      	ldr	r3, [pc, #420]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f0      	bne.n	8005aae <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005acc:	4b66      	ldr	r3, [pc, #408]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d111      	bne.n	8005afe <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005ada:	4b63      	ldr	r3, [pc, #396]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae0:	4a61      	ldr	r2, [pc, #388]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005ae2:	f043 0304 	orr.w	r3, r3, #4
 8005ae6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005aea:	4b5f      	ldr	r3, [pc, #380]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005afe:	4b5b      	ldr	r3, [pc, #364]	; (8005c6c <HAL_RCC_OscConfig+0xccc>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b0a:	d102      	bne.n	8005b12 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b12:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <HAL_RCC_OscConfig+0xccc>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	4a55      	ldr	r2, [pc, #340]	; (8005c6c <HAL_RCC_OscConfig+0xccc>)
 8005b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b1c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005b1e:	4b52      	ldr	r3, [pc, #328]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b32:	3a01      	subs	r2, #1
 8005b34:	0212      	lsls	r2, r2, #8
 8005b36:	4311      	orrs	r1, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	494a      	ldr	r1, [pc, #296]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	628b      	str	r3, [r1, #40]	; 0x28
 8005b44:	4b48      	ldr	r3, [pc, #288]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b48:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <HAL_RCC_OscConfig+0xcd0>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b50:	3a01      	subs	r2, #1
 8005b52:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b5a:	3a01      	subs	r2, #1
 8005b5c:	0252      	lsls	r2, r2, #9
 8005b5e:	b292      	uxth	r2, r2
 8005b60:	4311      	orrs	r1, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005b66:	3a01      	subs	r2, #1
 8005b68:	0412      	lsls	r2, r2, #16
 8005b6a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b74:	3a01      	subs	r2, #1
 8005b76:	0612      	lsls	r2, r2, #24
 8005b78:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	493a      	ldr	r1, [pc, #232]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005b84:	4b38      	ldr	r3, [pc, #224]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	4a37      	ldr	r2, [pc, #220]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	4a34      	ldr	r2, [pc, #208]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005b9a:	4b33      	ldr	r3, [pc, #204]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	4a32      	ldr	r2, [pc, #200]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005ba0:	f043 0310 	orr.w	r3, r3, #16
 8005ba4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005ba6:	4b30      	ldr	r3, [pc, #192]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	f023 020c 	bic.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb2:	492d      	ldr	r1, [pc, #180]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005bc0:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <HAL_RCC_OscConfig+0xccc>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	4a29      	ldr	r2, [pc, #164]	; (8005c6c <HAL_RCC_OscConfig+0xccc>)
 8005bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bca:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005bcc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d107      	bne.n	8005be4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bda:	4a23      	ldr	r2, [pc, #140]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005bdc:	f023 0304 	bic.w	r3, r3, #4
 8005be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005be4:	4b20      	ldr	r3, [pc, #128]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bee:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1c      	ldr	r2, [pc, #112]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bfa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005bfc:	f7fc f8b2 	bl	8001d64 <HAL_GetTick>
 8005c00:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c04:	f7fc f8ae 	bl	8001d64 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e099      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c16:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0xc64>
 8005c22:	e091      	b.n	8005d48 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005c24:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a0f      	ldr	r2, [pc, #60]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c2e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005c30:	f7fc f898 	bl	8001d64 <HAL_GetTick>
 8005c34:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c38:	f7fc f894 	bl	8001d64 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e07f      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c4a:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f0      	bne.n	8005c38 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005c56:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	4a03      	ldr	r2, [pc, #12]	; (8005c68 <HAL_RCC_OscConfig+0xcc8>)
 8005c5c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005c60:	f023 0303 	bic.w	r3, r3, #3
 8005c64:	6293      	str	r3, [r2, #40]	; 0x28
 8005c66:	e06f      	b.n	8005d48 <HAL_RCC_OscConfig+0xda8>
 8005c68:	46020c00 	.word	0x46020c00
 8005c6c:	46020800 	.word	0x46020800
 8005c70:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005c74:	4b37      	ldr	r3, [pc, #220]	; (8005d54 <HAL_RCC_OscConfig+0xdb4>)
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c7a:	4b36      	ldr	r3, [pc, #216]	; (8005d54 <HAL_RCC_OscConfig+0xdb4>)
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d039      	beq.n	8005cfc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f003 0203 	and.w	r2, r3, #3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d132      	bne.n	8005cfc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d129      	bne.n	8005cfc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d122      	bne.n	8005cfc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d11a      	bne.n	8005cfc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	0a5b      	lsrs	r3, r3, #9
 8005cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d111      	bne.n	8005cfc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d108      	bne.n	8005cfc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	0e1b      	lsrs	r3, r3, #24
 8005cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d001      	beq.n	8005d00 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e024      	b.n	8005d4a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d00:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <HAL_RCC_OscConfig+0xdb4>)
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	08db      	lsrs	r3, r3, #3
 8005d06:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d01a      	beq.n	8005d48 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005d12:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <HAL_RCC_OscConfig+0xdb4>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	4a0f      	ldr	r2, [pc, #60]	; (8005d54 <HAL_RCC_OscConfig+0xdb4>)
 8005d18:	f023 0310 	bic.w	r3, r3, #16
 8005d1c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1e:	f7fc f821 	bl	8001d64 <HAL_GetTick>
 8005d22:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005d24:	bf00      	nop
 8005d26:	f7fc f81d 	bl	8001d64 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d0f9      	beq.n	8005d26 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d36:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <HAL_RCC_OscConfig+0xdb4>)
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <HAL_RCC_OscConfig+0xdb4>)
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <HAL_RCC_OscConfig+0xdb4>)
 8005d42:	f043 0310 	orr.w	r3, r3, #16
 8005d46:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3738      	adds	r7, #56	; 0x38
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	46020c00 	.word	0x46020c00

08005d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e1d9      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d6c:	4b9b      	ldr	r3, [pc, #620]	; (8005fdc <HAL_RCC_ClockConfig+0x284>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d910      	bls.n	8005d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7a:	4b98      	ldr	r3, [pc, #608]	; (8005fdc <HAL_RCC_ClockConfig+0x284>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f023 020f 	bic.w	r2, r3, #15
 8005d82:	4996      	ldr	r1, [pc, #600]	; (8005fdc <HAL_RCC_ClockConfig+0x284>)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	4b94      	ldr	r3, [pc, #592]	; (8005fdc <HAL_RCC_ClockConfig+0x284>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d001      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e1c1      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d010      	beq.n	8005dca <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	695a      	ldr	r2, [r3, #20]
 8005dac:	4b8c      	ldr	r3, [pc, #560]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d908      	bls.n	8005dca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005db8:	4b89      	ldr	r3, [pc, #548]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	4986      	ldr	r1, [pc, #536]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d012      	beq.n	8005dfc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	4b81      	ldr	r3, [pc, #516]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d909      	bls.n	8005dfc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005de8:	4b7d      	ldr	r3, [pc, #500]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	497a      	ldr	r1, [pc, #488]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d010      	beq.n	8005e2a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d908      	bls.n	8005e2a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005e18:	4b71      	ldr	r3, [pc, #452]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	496e      	ldr	r1, [pc, #440]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	4b69      	ldr	r3, [pc, #420]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d908      	bls.n	8005e58 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005e46:	4b66      	ldr	r3, [pc, #408]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 020f 	bic.w	r2, r3, #15
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4963      	ldr	r1, [pc, #396]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80d2 	beq.w	800600a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d143      	bne.n	8005efa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e72:	4b5b      	ldr	r3, [pc, #364]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d110      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005e80:	4b57      	ldr	r3, [pc, #348]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e86:	4a56      	ldr	r2, [pc, #344]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e88:	f043 0304 	orr.w	r3, r3, #4
 8005e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005e90:	4b53      	ldr	r3, [pc, #332]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005ea2:	f7fb ff5f 	bl	8001d64 <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005ea8:	4b4e      	ldr	r3, [pc, #312]	; (8005fe4 <HAL_RCC_ClockConfig+0x28c>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00f      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005eb6:	f7fb ff55 	bl	8001d64 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e12b      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005ec8:	4b46      	ldr	r3, [pc, #280]	; (8005fe4 <HAL_RCC_ClockConfig+0x28c>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d107      	bne.n	8005eea <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005eda:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ee0:	4a3f      	ldr	r2, [pc, #252]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005ee2:	f023 0304 	bic.w	r3, r3, #4
 8005ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005eea:	4b3d      	ldr	r3, [pc, #244]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d121      	bne.n	8005f3a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e112      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d107      	bne.n	8005f12 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f02:	4b37      	ldr	r3, [pc, #220]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d115      	bne.n	8005f3a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e106      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005f1a:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e0fa      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f2a:	4b2d      	ldr	r3, [pc, #180]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e0f2      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005f3a:	4b29      	ldr	r3, [pc, #164]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f023 0203 	bic.w	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4926      	ldr	r1, [pc, #152]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005f4c:	f7fb ff0a 	bl	8001d64 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d112      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f5c:	f7fb ff02 	bl	8001d64 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e0d6      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f72:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d1ee      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x204>
 8005f7e:	e044      	b.n	800600a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d112      	bne.n	8005fae <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f88:	e00a      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f8a:	f7fb feeb 	bl	8001d64 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e0bf      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f003 030c 	and.w	r3, r3, #12
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d1ee      	bne.n	8005f8a <HAL_RCC_ClockConfig+0x232>
 8005fac:	e02d      	b.n	800600a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d123      	bne.n	8005ffe <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fb6:	e00a      	b.n	8005fce <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb8:	f7fb fed4 	bl	8001d64 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e0a8      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fce:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <HAL_RCC_ClockConfig+0x288>)
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 030c 	and.w	r3, r3, #12
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1ee      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x260>
 8005fda:	e016      	b.n	800600a <HAL_RCC_ClockConfig+0x2b2>
 8005fdc:	40022000 	.word	0x40022000
 8005fe0:	46020c00 	.word	0x46020c00
 8005fe4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe8:	f7fb febc 	bl	8001d64 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e090      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f003 030c 	and.w	r3, r3, #12
 8006006:	2b04      	cmp	r3, #4
 8006008:	d1ee      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d010      	beq.n	8006038 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	4b43      	ldr	r3, [pc, #268]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	429a      	cmp	r2, r3
 8006024:	d208      	bcs.n	8006038 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006026:	4b40      	ldr	r3, [pc, #256]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 020f 	bic.w	r2, r3, #15
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	493d      	ldr	r1, [pc, #244]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 8006034:	4313      	orrs	r3, r2
 8006036:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006038:	4b3c      	ldr	r3, [pc, #240]	; (800612c <HAL_RCC_ClockConfig+0x3d4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d210      	bcs.n	8006068 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006046:	4b39      	ldr	r3, [pc, #228]	; (800612c <HAL_RCC_ClockConfig+0x3d4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f023 020f 	bic.w	r2, r3, #15
 800604e:	4937      	ldr	r1, [pc, #220]	; (800612c <HAL_RCC_ClockConfig+0x3d4>)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006056:	4b35      	ldr	r3, [pc, #212]	; (800612c <HAL_RCC_ClockConfig+0x3d4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e05b      	b.n	8006120 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006080:	429a      	cmp	r2, r3
 8006082:	d208      	bcs.n	8006096 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006084:	4b28      	ldr	r3, [pc, #160]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4925      	ldr	r1, [pc, #148]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 8006092:	4313      	orrs	r3, r2
 8006094:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d012      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	4b20      	ldr	r3, [pc, #128]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d209      	bcs.n	80060c8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80060b4:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	4919      	ldr	r1, [pc, #100]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d010      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	4b13      	ldr	r3, [pc, #76]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d208      	bcs.n	80060f6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80060e4:	4b10      	ldr	r3, [pc, #64]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	490d      	ldr	r1, [pc, #52]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80060f6:	f000 f821 	bl	800613c <HAL_RCC_GetSysClockFreq>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <HAL_RCC_ClockConfig+0x3d0>)
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	490a      	ldr	r1, [pc, #40]	; (8006130 <HAL_RCC_ClockConfig+0x3d8>)
 8006106:	5ccb      	ldrb	r3, [r1, r3]
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <HAL_RCC_ClockConfig+0x3dc>)
 800610e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006110:	4b09      	ldr	r3, [pc, #36]	; (8006138 <HAL_RCC_ClockConfig+0x3e0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7fb f951 	bl	80013bc <HAL_InitTick>
 800611a:	4603      	mov	r3, r0
 800611c:	73fb      	strb	r3, [r7, #15]

  return status;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	46020c00 	.word	0x46020c00
 800612c:	40022000 	.word	0x40022000
 8006130:	08029264 	.word	0x08029264
 8006134:	20000004 	.word	0x20000004
 8006138:	2000000c 	.word	0x2000000c

0800613c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800613c:	b480      	push	{r7}
 800613e:	b08b      	sub	sp, #44	; 0x2c
 8006140:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800614a:	4b78      	ldr	r3, [pc, #480]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f003 030c 	and.w	r3, r3, #12
 8006152:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006154:	4b75      	ldr	r3, [pc, #468]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <HAL_RCC_GetSysClockFreq+0x34>
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d121      	bne.n	80061ae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d11e      	bne.n	80061ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006170:	4b6e      	ldr	r3, [pc, #440]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d107      	bne.n	800618c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800617c:	4b6b      	ldr	r3, [pc, #428]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800617e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006182:	0b1b      	lsrs	r3, r3, #12
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
 800618a:	e005      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800618c:	4b67      	ldr	r3, [pc, #412]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	0f1b      	lsrs	r3, r3, #28
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006198:	4a65      	ldr	r2, [pc, #404]	; (8006330 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d110      	bne.n	80061ca <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061ac:	e00d      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061ae:	4b5f      	ldr	r3, [pc, #380]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 030c 	and.w	r3, r3, #12
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d102      	bne.n	80061c0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061ba:	4b5e      	ldr	r3, [pc, #376]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80061bc:	623b      	str	r3, [r7, #32]
 80061be:	e004      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d101      	bne.n	80061ca <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061c6:	4b5b      	ldr	r3, [pc, #364]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80061c8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	f040 80a5 	bne.w	800631c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061d2:	4b56      	ldr	r3, [pc, #344]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80061dc:	4b53      	ldr	r3, [pc, #332]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	0a1b      	lsrs	r3, r3, #8
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061ea:	4b50      	ldr	r3, [pc, #320]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	091b      	lsrs	r3, r3, #4
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061f6:	4b4d      	ldr	r3, [pc, #308]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	08db      	lsrs	r3, r3, #3
 80061fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	fb02 f303 	mul.w	r3, r2, r3
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d003      	beq.n	8006220 <HAL_RCC_GetSysClockFreq+0xe4>
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b03      	cmp	r3, #3
 800621c:	d022      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x128>
 800621e:	e043      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8006338 <HAL_RCC_GetSysClockFreq+0x1fc>
 800622e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006232:	4b3e      	ldr	r3, [pc, #248]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006242:	ed97 6a01 	vldr	s12, [r7, #4]
 8006246:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800633c <HAL_RCC_GetSysClockFreq+0x200>
 800624a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800624e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006256:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800625a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006262:	e046      	b.n	80062f2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006338 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006276:	4b2d      	ldr	r3, [pc, #180]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006286:	ed97 6a01 	vldr	s12, [r7, #4]
 800628a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800633c <HAL_RCC_GetSysClockFreq+0x200>
 800628e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006292:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800629e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062a6:	e024      	b.n	80062f2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	ee07 3a90 	vmov	s15, r3
 80062b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c8:	ee07 3a90 	vmov	s15, r3
 80062cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80062d0:	ed97 6a01 	vldr	s12, [r7, #4]
 80062d4:	eddf 5a19 	vldr	s11, [pc, #100]	; 800633c <HAL_RCC_GetSysClockFreq+0x200>
 80062d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80062e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062f0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80062f2:	4b0e      	ldr	r3, [pc, #56]	; (800632c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	0e1b      	lsrs	r3, r3, #24
 80062f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fc:	3301      	adds	r3, #1
 80062fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800630a:	edd7 6a07 	vldr	s13, [r7, #28]
 800630e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006316:	ee17 3a90 	vmov	r3, s15
 800631a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800631c:	6a3b      	ldr	r3, [r7, #32]
}
 800631e:	4618      	mov	r0, r3
 8006320:	372c      	adds	r7, #44	; 0x2c
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	46020c00 	.word	0x46020c00
 8006330:	0802927c 	.word	0x0802927c
 8006334:	00f42400 	.word	0x00f42400
 8006338:	4b742400 	.word	0x4b742400
 800633c:	46000000 	.word	0x46000000

08006340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006344:	f7ff fefa 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8006348:	4602      	mov	r2, r0
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <HAL_RCC_GetHCLKFreq+0x28>)
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	4906      	ldr	r1, [pc, #24]	; (800636c <HAL_RCC_GetHCLKFreq+0x2c>)
 8006354:	5ccb      	ldrb	r3, [r1, r3]
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	4a05      	ldr	r2, [pc, #20]	; (8006370 <HAL_RCC_GetHCLKFreq+0x30>)
 800635c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800635e:	4b04      	ldr	r3, [pc, #16]	; (8006370 <HAL_RCC_GetHCLKFreq+0x30>)
 8006360:	681b      	ldr	r3, [r3, #0]
}
 8006362:	4618      	mov	r0, r3
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	46020c00 	.word	0x46020c00
 800636c:	08029264 	.word	0x08029264
 8006370:	20000004 	.word	0x20000004

08006374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006378:	f7ff ffe2 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 800637c:	4602      	mov	r2, r0
 800637e:	4b05      	ldr	r3, [pc, #20]	; (8006394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	091b      	lsrs	r3, r3, #4
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	4903      	ldr	r1, [pc, #12]	; (8006398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800638a:	5ccb      	ldrb	r3, [r1, r3]
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006390:	4618      	mov	r0, r3
 8006392:	bd80      	pop	{r7, pc}
 8006394:	46020c00 	.word	0x46020c00
 8006398:	08029274 	.word	0x08029274

0800639c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80063a0:	f7ff ffce 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 80063a4:	4602      	mov	r2, r0
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	0a1b      	lsrs	r3, r3, #8
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	4903      	ldr	r1, [pc, #12]	; (80063c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063b2:	5ccb      	ldrb	r3, [r1, r3]
 80063b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	46020c00 	.word	0x46020c00
 80063c0:	08029274 	.word	0x08029274

080063c4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80063c8:	f7ff ffba 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 80063cc:	4602      	mov	r2, r0
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	4903      	ldr	r1, [pc, #12]	; (80063e8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80063da:	5ccb      	ldrb	r3, [r1, r3]
 80063dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	46020c00 	.word	0x46020c00
 80063e8:	08029274 	.word	0x08029274

080063ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	221f      	movs	r2, #31
 80063fa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80063fc:	4b15      	ldr	r3, [pc, #84]	; (8006454 <HAL_RCC_GetClockConfig+0x68>)
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f003 0203 	and.w	r2, r3, #3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006408:	4b12      	ldr	r3, [pc, #72]	; (8006454 <HAL_RCC_GetClockConfig+0x68>)
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006414:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <HAL_RCC_GetClockConfig+0x68>)
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006420:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <HAL_RCC_GetClockConfig+0x68>)
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	091b      	lsrs	r3, r3, #4
 8006426:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <HAL_RCC_GetClockConfig+0x68>)
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <HAL_RCC_GetClockConfig+0x6c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	601a      	str	r2, [r3, #0]
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	46020c00 	.word	0x46020c00
 8006458:	40022000 	.word	0x40022000

0800645c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006464:	4b3e      	ldr	r3, [pc, #248]	; (8006560 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006472:	f7fe fd07 	bl	8004e84 <HAL_PWREx_GetVoltageRange>
 8006476:	6178      	str	r0, [r7, #20]
 8006478:	e019      	b.n	80064ae <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800647a:	4b39      	ldr	r3, [pc, #228]	; (8006560 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800647c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006480:	4a37      	ldr	r2, [pc, #220]	; (8006560 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006482:	f043 0304 	orr.w	r3, r3, #4
 8006486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800648a:	4b35      	ldr	r3, [pc, #212]	; (8006560 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800648c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006498:	f7fe fcf4 	bl	8004e84 <HAL_PWREx_GetVoltageRange>
 800649c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800649e:	4b30      	ldr	r3, [pc, #192]	; (8006560 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a4:	4a2e      	ldr	r2, [pc, #184]	; (8006560 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064a6:	f023 0304 	bic.w	r3, r3, #4
 80064aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064b4:	d003      	beq.n	80064be <RCC_SetFlashLatencyFromMSIRange+0x62>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064bc:	d109      	bne.n	80064d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c4:	d202      	bcs.n	80064cc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80064c6:	2301      	movs	r3, #1
 80064c8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80064ca:	e033      	b.n	8006534 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80064cc:	2300      	movs	r3, #0
 80064ce:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80064d0:	e030      	b.n	8006534 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064d8:	d208      	bcs.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e0:	d102      	bne.n	80064e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80064e2:	2303      	movs	r3, #3
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	e025      	b.n	8006534 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e035      	b.n	8006558 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f2:	d90f      	bls.n	8006514 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006500:	d902      	bls.n	8006508 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	e015      	b.n	8006534 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006508:	2301      	movs	r3, #1
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e012      	b.n	8006534 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800650e:	2300      	movs	r3, #0
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	e00f      	b.n	8006534 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800651a:	d109      	bne.n	8006530 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006522:	d102      	bne.n	800652a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006524:	2301      	movs	r3, #1
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	e004      	b.n	8006534 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800652a:	2302      	movs	r3, #2
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	e001      	b.n	8006534 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006530:	2301      	movs	r3, #1
 8006532:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f023 020f 	bic.w	r2, r3, #15
 800653c:	4909      	ldr	r1, [pc, #36]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006544:	4b07      	ldr	r3, [pc, #28]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	429a      	cmp	r2, r3
 8006550:	d001      	beq.n	8006556 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	46020c00 	.word	0x46020c00
 8006564:	40022000 	.word	0x40022000

08006568 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800656c:	b0b8      	sub	sp, #224	; 0xe0
 800656e:	af00      	add	r7, sp, #0
 8006570:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006574:	2300      	movs	r3, #0
 8006576:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800657a:	2300      	movs	r3, #0
 800657c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f002 0401 	and.w	r4, r2, #1
 800658c:	2500      	movs	r5, #0
 800658e:	ea54 0305 	orrs.w	r3, r4, r5
 8006592:	d00b      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006594:	4bca      	ldr	r3, [pc, #808]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800659a:	f023 0103 	bic.w	r1, r3, #3
 800659e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a4:	4ac6      	ldr	r2, [pc, #792]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f002 0802 	and.w	r8, r2, #2
 80065b8:	f04f 0900 	mov.w	r9, #0
 80065bc:	ea58 0309 	orrs.w	r3, r8, r9
 80065c0:	d00b      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80065c2:	4bbf      	ldr	r3, [pc, #764]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065c8:	f023 010c 	bic.w	r1, r3, #12
 80065cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d2:	4abb      	ldr	r2, [pc, #748]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065d4:	430b      	orrs	r3, r1
 80065d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f002 0a04 	and.w	sl, r2, #4
 80065e6:	f04f 0b00 	mov.w	fp, #0
 80065ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80065ee:	d00b      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80065f0:	4bb3      	ldr	r3, [pc, #716]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065f6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80065fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006600:	4aaf      	ldr	r2, [pc, #700]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006602:	430b      	orrs	r3, r1
 8006604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f002 0308 	and.w	r3, r2, #8
 8006614:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006618:	2300      	movs	r3, #0
 800661a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800661e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006622:	460b      	mov	r3, r1
 8006624:	4313      	orrs	r3, r2
 8006626:	d00b      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006628:	4ba5      	ldr	r3, [pc, #660]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800662a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800662e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006632:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006638:	4aa1      	ldr	r2, [pc, #644]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800663a:	430b      	orrs	r3, r1
 800663c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f002 0310 	and.w	r3, r2, #16
 800664c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006656:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d00b      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006660:	4b97      	ldr	r3, [pc, #604]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006666:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800666a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	4a93      	ldr	r2, [pc, #588]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006672:	430b      	orrs	r3, r1
 8006674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f002 0320 	and.w	r3, r2, #32
 8006684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800668e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006692:	460b      	mov	r3, r1
 8006694:	4313      	orrs	r3, r2
 8006696:	d00b      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006698:	4b89      	ldr	r3, [pc, #548]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800669a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800669e:	f023 0107 	bic.w	r1, r3, #7
 80066a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066a8:	4a85      	ldr	r2, [pc, #532]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066aa:	430b      	orrs	r3, r1
 80066ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80066bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066c0:	2300      	movs	r3, #0
 80066c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066ca:	460b      	mov	r3, r1
 80066cc:	4313      	orrs	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80066d0:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066d6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80066da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e0:	4a77      	ldr	r2, [pc, #476]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066e2:	430b      	orrs	r3, r1
 80066e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80066f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066f8:	2300      	movs	r3, #0
 80066fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066fe:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006702:	460b      	mov	r3, r1
 8006704:	4313      	orrs	r3, r2
 8006706:	d00b      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006708:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800670a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800670e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006718:	4a69      	ldr	r2, [pc, #420]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800671a:	430b      	orrs	r3, r1
 800671c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800672c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006730:	2300      	movs	r3, #0
 8006732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006736:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800673a:	460b      	mov	r3, r1
 800673c:	4313      	orrs	r3, r2
 800673e:	d00b      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006740:	4b5f      	ldr	r3, [pc, #380]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800674a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006750:	4a5b      	ldr	r2, [pc, #364]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006752:	430b      	orrs	r3, r1
 8006754:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800676e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d00b      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006778:	4b51      	ldr	r3, [pc, #324]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800677a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800677e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8006782:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006788:	4a4d      	ldr	r2, [pc, #308]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800678a:	430b      	orrs	r3, r1
 800678c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800679c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	d00b      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80067b0:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067b6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80067ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c0:	4a3f      	ldr	r2, [pc, #252]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067c2:	430b      	orrs	r3, r1
 80067c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80067d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067d8:	2300      	movs	r3, #0
 80067da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80067e2:	460b      	mov	r3, r1
 80067e4:	4313      	orrs	r3, r2
 80067e6:	d00b      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80067e8:	4b35      	ldr	r3, [pc, #212]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067ee:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80067f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067f8:	4a31      	ldr	r2, [pc, #196]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067fa:	430b      	orrs	r3, r1
 80067fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800680c:	67bb      	str	r3, [r7, #120]	; 0x78
 800680e:	2300      	movs	r3, #0
 8006810:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006812:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006816:	460b      	mov	r3, r1
 8006818:	4313      	orrs	r3, r2
 800681a:	d00c      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800681c:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800681e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800682a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800682e:	4a24      	ldr	r2, [pc, #144]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006830:	430b      	orrs	r3, r1
 8006832:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006836:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006842:	673b      	str	r3, [r7, #112]	; 0x70
 8006844:	2300      	movs	r3, #0
 8006846:	677b      	str	r3, [r7, #116]	; 0x74
 8006848:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d04f      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d02d      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x352>
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d827      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006862:	2b60      	cmp	r3, #96	; 0x60
 8006864:	d02e      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006866:	2b60      	cmp	r3, #96	; 0x60
 8006868:	d823      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d006      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d81f      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d011      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800687a:	e01a      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	4a0f      	ldr	r2, [pc, #60]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006886:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006888:	e01d      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800688a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800688e:	3308      	adds	r3, #8
 8006890:	4618      	mov	r0, r3
 8006892:	f002 fa13 	bl	8008cbc <RCCEx_PLL2_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800689c:	e013      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800689e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068a2:	332c      	adds	r3, #44	; 0x2c
 80068a4:	4618      	mov	r0, r3
 80068a6:	f002 faa1 	bl	8008dec <RCCEx_PLL3_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80068b0:	e009      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80068b8:	e005      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80068ba:	bf00      	nop
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80068be:	bf00      	nop
 80068c0:	46020c00 	.word	0x46020c00
        break;
 80068c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10d      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80068ce:	4bb6      	ldr	r3, [pc, #728]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068d4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80068d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e0:	4ab1      	ldr	r2, [pc, #708]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068e2:	430b      	orrs	r3, r1
 80068e4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80068e8:	e003      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ea:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80068ee:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80068f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80068fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006900:	2300      	movs	r3, #0
 8006902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006904:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006908:	460b      	mov	r3, r1
 800690a:	4313      	orrs	r3, r2
 800690c:	d053      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800690e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691a:	d033      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800691c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006920:	d82c      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006926:	d02f      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800692c:	d826      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800692e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006932:	d008      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006938:	d820      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800693e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006942:	d011      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006944:	e01a      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006946:	4b98      	ldr	r3, [pc, #608]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	4a97      	ldr	r2, [pc, #604]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006950:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006952:	e01a      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006958:	3308      	adds	r3, #8
 800695a:	4618      	mov	r0, r3
 800695c:	f002 f9ae 	bl	8008cbc <RCCEx_PLL2_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006966:	e010      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800696c:	332c      	adds	r3, #44	; 0x2c
 800696e:	4618      	mov	r0, r3
 8006970:	f002 fa3c 	bl	8008dec <RCCEx_PLL3_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800697a:	e006      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006982:	e002      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006984:	bf00      	nop
 8006986:	e000      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10d      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006992:	4b85      	ldr	r3, [pc, #532]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006994:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006998:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800699c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a4:	4a80      	ldr	r2, [pc, #512]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069a6:	430b      	orrs	r3, r1
 80069a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80069b2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80069b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80069c2:	663b      	str	r3, [r7, #96]	; 0x60
 80069c4:	2300      	movs	r3, #0
 80069c6:	667b      	str	r3, [r7, #100]	; 0x64
 80069c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80069cc:	460b      	mov	r3, r1
 80069ce:	4313      	orrs	r3, r2
 80069d0:	d046      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80069d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80069de:	d028      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80069e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80069e4:	d821      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80069e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ea:	d022      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80069ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f0:	d81b      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80069f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069f6:	d01c      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80069f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069fc:	d815      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80069fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a02:	d008      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a08:	d80f      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a12:	d00e      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a14:	e009      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 f94d 	bl	8008cbc <RCCEx_PLL2_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006a28:	e004      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006a30:	e000      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8006a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a34:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10d      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006a3c:	4b5a      	ldr	r3, [pc, #360]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a42:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a4e:	4a56      	ldr	r2, [pc, #344]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a5c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a6e:	2300      	movs	r3, #0
 8006a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	d03f      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d81e      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006a88:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006acf 	.word	0x08006acf
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006ab3 	.word	0x08006ab3
 8006a9c:	08006acf 	.word	0x08006acf
 8006aa0:	08006acf 	.word	0x08006acf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006aa4:	4b40      	ldr	r3, [pc, #256]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	4a3f      	ldr	r2, [pc, #252]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aae:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006ab0:	e00e      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ab6:	332c      	adds	r3, #44	; 0x2c
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f002 f997 	bl	8008dec <RCCEx_PLL3_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006ac4:	e004      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006acc:	e000      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006ace:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ad0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10d      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006ad8:	4b33      	ldr	r3, [pc, #204]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ada:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ade:	f023 0107 	bic.w	r1, r3, #7
 8006ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aea:	4a2f      	ldr	r2, [pc, #188]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006aec:	430b      	orrs	r3, r1
 8006aee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006af2:	e003      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006af8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006b08:	653b      	str	r3, [r7, #80]	; 0x50
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	657b      	str	r3, [r7, #84]	; 0x54
 8006b0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006b12:	460b      	mov	r3, r1
 8006b14:	4313      	orrs	r3, r2
 8006b16:	d04d      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006b18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b24:	d028      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006b26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b2a:	d821      	bhi.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006b2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b30:	d024      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006b32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b36:	d81b      	bhi.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b3c:	d00e      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006b3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b42:	d815      	bhi.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01b      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4c:	d110      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b4e:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b58:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006b5a:	e012      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b60:	332c      	adds	r3, #44	; 0x2c
 8006b62:	4618      	mov	r0, r3
 8006b64:	f002 f942 	bl	8008dec <RCCEx_PLL3_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006b6e:	e008      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006b76:	e004      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006b78:	bf00      	nop
 8006b7a:	e002      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006b7c:	bf00      	nop
 8006b7e:	e000      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006b80:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b82:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d110      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b90:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9c:	4a02      	ldr	r2, [pc, #8]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ba4:	e006      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006ba6:	bf00      	nop
 8006ba8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bac:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006bb0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f000 80b5 	beq.w	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd8:	4b9d      	ldr	r3, [pc, #628]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d113      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	4b9a      	ldr	r3, [pc, #616]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bec:	4a98      	ldr	r2, [pc, #608]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bee:	f043 0304 	orr.w	r3, r3, #4
 8006bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006bf6:	4b96      	ldr	r3, [pc, #600]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c0e:	4b91      	ldr	r3, [pc, #580]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	4a90      	ldr	r2, [pc, #576]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c1a:	f7fb f8a3 	bl	8001d64 <HAL_GetTick>
 8006c1e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c22:	e00b      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c24:	f7fb f89e 	bl	8001d64 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d903      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006c3a:	e005      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c3c:	4b85      	ldr	r3, [pc, #532]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ed      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006c48:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d165      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c50:	4b7f      	ldr	r3, [pc, #508]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d023      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006c66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c6a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d01b      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c76:	4b76      	ldr	r3, [pc, #472]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c84:	4b72      	ldr	r3, [pc, #456]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c8a:	4a71      	ldr	r2, [pc, #452]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c94:	4b6e      	ldr	r3, [pc, #440]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c9a:	4a6d      	ldr	r2, [pc, #436]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ca4:	4a6a      	ldr	r2, [pc, #424]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006caa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d019      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cba:	f7fb f853 	bl	8001d64 <HAL_GetTick>
 8006cbe:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cc2:	e00d      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cc4:	f7fb f84e 	bl	8001d64 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d903      	bls.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 8006cde:	e006      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ce0:	4b5b      	ldr	r3, [pc, #364]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0ea      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006cee:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10d      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006cf6:	4b56      	ldr	r3, [pc, #344]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cfc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d08:	4a51      	ldr	r2, [pc, #324]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d10:	e008      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d12:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006d16:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8006d1a:	e003      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006d20:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d24:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d107      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2c:	4b48      	ldr	r3, [pc, #288]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d32:	4a47      	ldr	r2, [pc, #284]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d34:	f023 0304 	bic.w	r3, r3, #4
 8006d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006d3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006d48:	643b      	str	r3, [r7, #64]	; 0x40
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d4e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006d52:	460b      	mov	r3, r1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	d042      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d64:	d022      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006d66:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d6a:	d81b      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d70:	d011      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d76:	d815      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d019      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d80:	d110      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d86:	3308      	adds	r3, #8
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 ff97 	bl	8008cbc <RCCEx_PLL2_Config>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006d94:	e00d      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d96:	4b2e      	ldr	r3, [pc, #184]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	4a2d      	ldr	r2, [pc, #180]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006da2:	e006      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006daa:	e002      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006db0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006db2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006dba:	4b25      	ldr	r3, [pc, #148]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dc0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dcc:	4a20      	ldr	r2, [pc, #128]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dd4:	e003      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006dda:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dec:	2300      	movs	r3, #0
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006df4:	460b      	mov	r3, r1
 8006df6:	4313      	orrs	r3, r2
 8006df8:	d032      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006dfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e06:	d00b      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e0c:	d804      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d008      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e16:	d007      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006e1e:	e004      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006e20:	bf00      	nop
 8006e22:	e002      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006e28:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e2a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d112      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006e32:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006e34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e44:	4a02      	ldr	r2, [pc, #8]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006e46:	430b      	orrs	r3, r1
 8006e48:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006e4c:	e008      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006e4e:	bf00      	nop
 8006e50:	46020c00 	.word	0x46020c00
 8006e54:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e58:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006e5c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e6e:	2300      	movs	r3, #0
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
 8006e72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d019      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e88:	d105      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e8a:	4b88      	ldr	r3, [pc, #544]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	4a87      	ldr	r2, [pc, #540]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e94:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006e96:	4b85      	ldr	r3, [pc, #532]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e9c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ea4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ea8:	4a80      	ldr	r2, [pc, #512]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	d00c      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006ecc:	4b77      	ldr	r3, [pc, #476]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ed6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ede:	4973      	ldr	r1, [pc, #460]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006ef2:	623b      	str	r3, [r7, #32]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006efc:	460b      	mov	r3, r1
 8006efe:	4313      	orrs	r3, r2
 8006f00:	d00c      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006f02:	4b6a      	ldr	r3, [pc, #424]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f14:	4965      	ldr	r1, [pc, #404]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006f1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]
 8006f2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f32:	460b      	mov	r3, r1
 8006f34:	4313      	orrs	r3, r2
 8006f36:	d00c      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006f38:	4b5c      	ldr	r3, [pc, #368]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f3e:	f023 0218 	bic.w	r2, r3, #24
 8006f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f4a:	4958      	ldr	r1, [pc, #352]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	d032      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f7a:	d105      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7c:	4b4b      	ldr	r3, [pc, #300]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f80:	4a4a      	ldr	r2, [pc, #296]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f86:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f94:	d108      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 fe8d 	bl	8008cbc <RCCEx_PLL2_Config>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 8006fa8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10d      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006fb0:	4b3e      	ldr	r3, [pc, #248]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006fbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fc2:	493a      	ldr	r1, [pc, #232]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006fca:	e003      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006fd0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fea:	460b      	mov	r3, r1
 8006fec:	4313      	orrs	r3, r2
 8006fee:	d03a      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ffc:	d00e      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007002:	d815      	bhi.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d017      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8007008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800700c:	d110      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800700e:	4b27      	ldr	r3, [pc, #156]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	4a26      	ldr	r2, [pc, #152]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007018:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800701a:	e00e      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800701c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007020:	3308      	adds	r3, #8
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fe4a 	bl	8008cbc <RCCEx_PLL2_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800702e:	e004      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8007036:	e000      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8007038:	bf00      	nop
    }
    if (ret == HAL_OK)
 800703a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007042:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007048:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800704c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007054:	4915      	ldr	r1, [pc, #84]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800705c:	e003      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8007062:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007066:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	607b      	str	r3, [r7, #4]
 8007078:	e9d7 1200 	ldrd	r1, r2, [r7]
 800707c:	460b      	mov	r3, r1
 800707e:	4313      	orrs	r3, r2
 8007080:	d00c      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007082:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007088:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800708c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007090:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007094:	4905      	ldr	r1, [pc, #20]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800709c:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	37e0      	adds	r7, #224	; 0xe0
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070aa:	bf00      	nop
 80070ac:	46020c00 	.word	0x46020c00

080070b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b089      	sub	sp, #36	; 0x24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80070b8:	4ba6      	ldr	r3, [pc, #664]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80070c2:	4ba4      	ldr	r3, [pc, #656]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80070cc:	4ba1      	ldr	r3, [pc, #644]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	3301      	adds	r3, #1
 80070d8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80070da:	4b9e      	ldr	r3, [pc, #632]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	091b      	lsrs	r3, r3, #4
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80070e6:	4b9b      	ldr	r3, [pc, #620]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b03      	cmp	r3, #3
 8007106:	d062      	beq.n	80071ce <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b03      	cmp	r3, #3
 800710c:	f200 8081 	bhi.w	8007212 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d024      	beq.n	8007160 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d17a      	bne.n	8007212 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007126:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8007358 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800712a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712e:	4b89      	ldr	r3, [pc, #548]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800713e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007142:	eddf 5a86 	vldr	s11, [pc, #536]	; 800735c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007146:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800714a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800714e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007152:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800715e:	e08f      	b.n	8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007160:	4b7c      	ldr	r3, [pc, #496]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800716c:	4b79      	ldr	r3, [pc, #484]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	0f1b      	lsrs	r3, r3, #28
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	e006      	b.n	8007186 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007178:	4b76      	ldr	r3, [pc, #472]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800717a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	0f1b      	lsrs	r3, r3, #28
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	4a76      	ldr	r2, [pc, #472]	; (8007360 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800735c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80071b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80071c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071cc:	e058      	b.n	8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007358 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80071dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e0:	4b5c      	ldr	r3, [pc, #368]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80071f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800735c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80071f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007204:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007210:	e036      	b.n	8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007212:	4b50      	ldr	r3, [pc, #320]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800721e:	4b4d      	ldr	r3, [pc, #308]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	0f1b      	lsrs	r3, r3, #28
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	e006      	b.n	8007238 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800722a:	4b4a      	ldr	r3, [pc, #296]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800722c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	0f1b      	lsrs	r3, r3, #28
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	4a49      	ldr	r2, [pc, #292]	; (8007360 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800723a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007262:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800735c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800727e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007280:	4b34      	ldr	r3, [pc, #208]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d017      	beq.n	80072bc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800728c:	4b31      	ldr	r3, [pc, #196]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	0a5b      	lsrs	r3, r3, #9
 8007292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800729e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b2:	ee17 2a90 	vmov	r2, s15
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d017      	beq.n	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072ce:	4b21      	ldr	r3, [pc, #132]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f4:	ee17 2a90 	vmov	r2, s15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]
 80072fc:	e002      	b.n	8007304 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007304:	4b13      	ldr	r3, [pc, #76]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d017      	beq.n	8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007310:	4b10      	ldr	r3, [pc, #64]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007326:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800732a:	edd7 6a07 	vldr	s13, [r7, #28]
 800732e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800733e:	e002      	b.n	8007346 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	609a      	str	r2, [r3, #8]
}
 8007346:	bf00      	nop
 8007348:	3724      	adds	r7, #36	; 0x24
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	46020c00 	.word	0x46020c00
 8007358:	4b742400 	.word	0x4b742400
 800735c:	46000000 	.word	0x46000000
 8007360:	0802927c 	.word	0x0802927c

08007364 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007364:	b480      	push	{r7}
 8007366:	b089      	sub	sp, #36	; 0x24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800736c:	4ba6      	ldr	r3, [pc, #664]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800736e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007374:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007376:	4ba4      	ldr	r3, [pc, #656]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007380:	4ba1      	ldr	r3, [pc, #644]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	3301      	adds	r3, #1
 800738c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800738e:	4b9e      	ldr	r3, [pc, #632]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	091b      	lsrs	r3, r3, #4
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800739a:	4b9b      	ldr	r3, [pc, #620]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d062      	beq.n	8007482 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	f200 8081 	bhi.w	80074c6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d024      	beq.n	8007414 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d17a      	bne.n	80074c6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073da:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80073de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e2:	4b89      	ldr	r3, [pc, #548]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80073f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80073f6:	eddf 5a86 	vldr	s11, [pc, #536]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80073fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007406:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800740a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007412:	e08f      	b.n	8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007414:	4b7c      	ldr	r3, [pc, #496]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007420:	4b79      	ldr	r3, [pc, #484]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	0f1b      	lsrs	r3, r3, #28
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	e006      	b.n	800743a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800742c:	4b76      	ldr	r3, [pc, #472]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800742e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	0f1b      	lsrs	r3, r3, #28
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	4a76      	ldr	r2, [pc, #472]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800743c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007440:	ee07 3a90 	vmov	s15, r3
 8007444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	ee07 3a90 	vmov	s15, r3
 800745c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007460:	ed97 6a02 	vldr	s12, [r7, #8]
 8007464:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007474:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007480:	e058      	b.n	8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	ee07 3a90 	vmov	s15, r3
 8007488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007494:	4b5c      	ldr	r3, [pc, #368]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80074a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a8:	eddf 5a59 	vldr	s11, [pc, #356]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80074ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80074b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80074b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80074bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074c4:	e036      	b.n	8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80074c6:	4b50      	ldr	r3, [pc, #320]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80074d2:	4b4d      	ldr	r3, [pc, #308]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	0f1b      	lsrs	r3, r3, #28
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	e006      	b.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80074de:	4b4a      	ldr	r3, [pc, #296]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	0f1b      	lsrs	r3, r3, #28
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	4a49      	ldr	r2, [pc, #292]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80074ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007512:	ed97 6a02 	vldr	s12, [r7, #8]
 8007516:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800751a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007526:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800752a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007532:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007534:	4b34      	ldr	r3, [pc, #208]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d017      	beq.n	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007540:	4b31      	ldr	r3, [pc, #196]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007544:	0a5b      	lsrs	r3, r3, #9
 8007546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007556:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800755a:	edd7 6a07 	vldr	s13, [r7, #28]
 800755e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007566:	ee17 2a90 	vmov	r2, s15
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	e002      	b.n	8007576 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007576:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d017      	beq.n	80075b2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007582:	4b21      	ldr	r3, [pc, #132]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	0c1b      	lsrs	r3, r3, #16
 8007588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007598:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800759c:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a8:	ee17 2a90 	vmov	r2, s15
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	605a      	str	r2, [r3, #4]
 80075b0:	e002      	b.n	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80075b8:	4b13      	ldr	r3, [pc, #76]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d017      	beq.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075c4:	4b10      	ldr	r3, [pc, #64]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	0e1b      	lsrs	r3, r3, #24
 80075ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80075d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075de:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ea:	ee17 2a90 	vmov	r2, s15
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075f2:	e002      	b.n	80075fa <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	609a      	str	r2, [r3, #8]
}
 80075fa:	bf00      	nop
 80075fc:	3724      	adds	r7, #36	; 0x24
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	46020c00 	.word	0x46020c00
 800760c:	4b742400 	.word	0x4b742400
 8007610:	46000000 	.word	0x46000000
 8007614:	0802927c 	.word	0x0802927c

08007618 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	; 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007620:	4ba6      	ldr	r3, [pc, #664]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007628:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800762a:	4ba4      	ldr	r3, [pc, #656]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007634:	4ba1      	ldr	r3, [pc, #644]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	0a1b      	lsrs	r3, r3, #8
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	3301      	adds	r3, #1
 8007640:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007642:	4b9e      	ldr	r3, [pc, #632]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007646:	091b      	lsrs	r3, r3, #4
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800764e:	4b9b      	ldr	r3, [pc, #620]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007652:	08db      	lsrs	r3, r3, #3
 8007654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d062      	beq.n	8007736 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b03      	cmp	r3, #3
 8007674:	f200 8081 	bhi.w	800777a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d024      	beq.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d17a      	bne.n	800777a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80078c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b89      	ldr	r3, [pc, #548]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80076a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076aa:	eddf 5a86 	vldr	s11, [pc, #536]	; 80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80076c6:	e08f      	b.n	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80076c8:	4b7c      	ldr	r3, [pc, #496]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80076d4:	4b79      	ldr	r3, [pc, #484]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	0f1b      	lsrs	r3, r3, #28
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	e006      	b.n	80076ee <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80076e0:	4b76      	ldr	r3, [pc, #472]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	0f1b      	lsrs	r3, r3, #28
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	4a76      	ldr	r2, [pc, #472]	; (80078c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80076f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	ee07 3a90 	vmov	s15, r3
 8007710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007714:	ed97 6a02 	vldr	s12, [r7, #8]
 8007718:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800771c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007728:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800772c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007730:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007734:	e058      	b.n	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007740:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007748:	4b5c      	ldr	r3, [pc, #368]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800774a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007758:	ed97 6a02 	vldr	s12, [r7, #8]
 800775c:	eddf 5a59 	vldr	s11, [pc, #356]	; 80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007760:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007764:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800776c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007774:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007778:	e036      	b.n	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800777a:	4b50      	ldr	r3, [pc, #320]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007786:	4b4d      	ldr	r3, [pc, #308]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	0f1b      	lsrs	r3, r3, #28
 800778c:	f003 030f 	and.w	r3, r3, #15
 8007790:	e006      	b.n	80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8007792:	4b4a      	ldr	r3, [pc, #296]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007798:	041b      	lsls	r3, r3, #16
 800779a:	0f1b      	lsrs	r3, r3, #28
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	4a49      	ldr	r2, [pc, #292]	; (80078c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80077a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ca:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80077e8:	4b34      	ldr	r3, [pc, #208]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d017      	beq.n	8007824 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077f4:	4b31      	ldr	r3, [pc, #196]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f8:	0a5b      	lsrs	r3, r3, #9
 80077fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800780a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800780e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781a:	ee17 2a90 	vmov	r2, s15
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	e002      	b.n	800782a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800782a:	4b24      	ldr	r3, [pc, #144]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d017      	beq.n	8007866 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007836:	4b21      	ldr	r3, [pc, #132]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783a:	0c1b      	lsrs	r3, r3, #16
 800783c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800784c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007850:	edd7 6a07 	vldr	s13, [r7, #28]
 8007854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785c:	ee17 2a90 	vmov	r2, s15
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	605a      	str	r2, [r3, #4]
 8007864:	e002      	b.n	800786c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800786c:	4b13      	ldr	r3, [pc, #76]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d017      	beq.n	80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007878:	4b10      	ldr	r3, [pc, #64]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800787a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787c:	0e1b      	lsrs	r3, r3, #24
 800787e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800788a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800788e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007892:	edd7 6a07 	vldr	s13, [r7, #28]
 8007896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800789a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800789e:	ee17 2a90 	vmov	r2, s15
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078a6:	e002      	b.n	80078ae <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	609a      	str	r2, [r3, #8]
}
 80078ae:	bf00      	nop
 80078b0:	3724      	adds	r7, #36	; 0x24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	46020c00 	.word	0x46020c00
 80078c0:	4b742400 	.word	0x4b742400
 80078c4:	46000000 	.word	0x46000000
 80078c8:	0802927c 	.word	0x0802927c

080078cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08e      	sub	sp, #56	; 0x38
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80078d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078da:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80078de:	430b      	orrs	r3, r1
 80078e0:	d145      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80078e2:	4baa      	ldr	r3, [pc, #680]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80078ee:	4ba7      	ldr	r3, [pc, #668]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d108      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007902:	d104      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
 800790a:	f001 b987 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800790e:	4b9f      	ldr	r3, [pc, #636]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800791c:	d114      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007924:	d110      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007926:	4b99      	ldr	r3, [pc, #612]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800792c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007934:	d103      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007936:	23fa      	movs	r3, #250	; 0xfa
 8007938:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800793a:	f001 b96f 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800793e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007942:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007944:	f001 b96a 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007948:	4b90      	ldr	r3, [pc, #576]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007954:	d107      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800795c:	d103      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800795e:	4b8c      	ldr	r3, [pc, #560]	; (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
 8007962:	f001 b95b 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
 800796a:	f001 b957 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800796e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007972:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007976:	430b      	orrs	r3, r1
 8007978:	d151      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800797a:	4b84      	ldr	r3, [pc, #528]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800797c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007980:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007984:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	2b80      	cmp	r3, #128	; 0x80
 800798a:	d035      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	2b80      	cmp	r3, #128	; 0x80
 8007990:	d841      	bhi.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2b60      	cmp	r3, #96	; 0x60
 8007996:	d02a      	beq.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	2b60      	cmp	r3, #96	; 0x60
 800799c:	d83b      	bhi.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2b40      	cmp	r3, #64	; 0x40
 80079a2:	d009      	beq.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	2b40      	cmp	r3, #64	; 0x40
 80079a8:	d835      	bhi.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00c      	beq.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	d012      	beq.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80079b6:	e02e      	b.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fb77 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079c6:	f001 b929 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ca:	f107 0318 	add.w	r3, r7, #24
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff fcc8 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079d8:	f001 b920 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079dc:	f107 030c 	add.w	r3, r7, #12
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fe19 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ea:	f001 b917 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80079f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079f4:	f001 b912 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079f8:	4b64      	ldr	r3, [pc, #400]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a04:	d103      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007a06:	4b63      	ldr	r3, [pc, #396]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a0a:	f001 b907 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a12:	f001 b903 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a1a:	f001 b8ff 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a22:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007a26:	430b      	orrs	r3, r1
 8007a28:	d158      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007a2a:	4b58      	ldr	r3, [pc, #352]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a3c:	d03b      	beq.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a44:	d846      	bhi.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a4c:	d02e      	beq.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a54:	d83e      	bhi.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a5c:	d00b      	beq.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a64:	d836      	bhi.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00d      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a72:	d012      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007a74:	e02e      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fb18 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a84:	f001 b8ca 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a88:	f107 0318 	add.w	r3, r7, #24
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff fc69 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a96:	f001 b8c1 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a9a:	f107 030c 	add.w	r3, r7, #12
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff fdba 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aa8:	f001 b8b8 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007aac:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ab0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ab2:	f001 b8b3 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ab6:	4b35      	ldr	r3, [pc, #212]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac2:	d103      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007ac4:	4b33      	ldr	r3, [pc, #204]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007ac6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ac8:	f001 b8a8 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ad0:	f001 b8a4 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ad8:	f001 b8a0 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae0:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8007ae4:	430b      	orrs	r3, r1
 8007ae6:	d16e      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007ae8:	4b28      	ldr	r3, [pc, #160]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aee:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007af2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007afa:	d034      	beq.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b02:	d85c      	bhi.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b0a:	d00b      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b12:	d854      	bhi.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d016      	beq.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b20:	d009      	beq.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007b22:	e04c      	b.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fac1 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b32:	f001 b873 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b36:	f107 0318 	add.w	r3, r7, #24
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff fc12 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b44:	f001 b86a 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007b48:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b54:	d103      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8007b56:	4b10      	ldr	r3, [pc, #64]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b5a:	f001 b85f 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b62:	f001 b85b 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d121      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b72:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007b7e:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	0e1b      	lsrs	r3, r3, #24
 8007b84:	f003 030f 	and.w	r3, r3, #15
 8007b88:	e00f      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007b8a:	bf00      	nop
 8007b8c:	46020c00 	.word	0x46020c00
 8007b90:	0007a120 	.word	0x0007a120
 8007b94:	00f42400 	.word	0x00f42400
 8007b98:	02dc6c00 	.word	0x02dc6c00
 8007b9c:	4ba7      	ldr	r3, [pc, #668]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	0e1b      	lsrs	r3, r3, #24
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	4aa5      	ldr	r2, [pc, #660]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bb2:	f001 b833 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bba:	f001 b82f 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bc2:	f001 b82b 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bca:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	d17f      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007bd2:	4b9a      	ldr	r3, [pc, #616]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bdc:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d165      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007be4:	4b95      	ldr	r3, [pc, #596]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007bee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007bf6:	d034      	beq.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007bfe:	d853      	bhi.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c06:	d00b      	beq.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c0e:	d84b      	bhi.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d016      	beq.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c1c:	d009      	beq.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007c1e:	e043      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fa43 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c2e:	f000 bff5 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c32:	f107 0318 	add.w	r3, r7, #24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff fb94 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c40:	f000 bfec 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007c44:	4b7d      	ldr	r3, [pc, #500]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c50:	d103      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8007c52:	4b7c      	ldr	r3, [pc, #496]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007c56:	f000 bfe1 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c5e:	f000 bfdd 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c62:	4b76      	ldr	r3, [pc, #472]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d118      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c6e:	4b73      	ldr	r3, [pc, #460]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007c7a:	4b70      	ldr	r3, [pc, #448]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	0e1b      	lsrs	r3, r3, #24
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	e006      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8007c86:	4b6d      	ldr	r3, [pc, #436]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c8c:	041b      	lsls	r3, r3, #16
 8007c8e:	0e1b      	lsrs	r3, r3, #24
 8007c90:	f003 030f 	and.w	r3, r3, #15
 8007c94:	4a6a      	ldr	r2, [pc, #424]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007c9c:	f000 bfbe 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007ca4:	f000 bfba 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007cac:	f000 bfb6 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb6:	d108      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff f9f7 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc6:	f000 bfa9 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cce:	f000 bfa5 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd6:	1e51      	subs	r1, r2, #1
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	d136      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007cdc:	4b57      	ldr	r3, [pc, #348]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007cee:	f7fe fb55 	bl	800639c <HAL_RCC_GetPCLK2Freq>
 8007cf2:	6378      	str	r0, [r7, #52]	; 0x34
 8007cf4:	f000 bf92 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d104      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cfe:	f7fe fa1d 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8007d02:	6378      	str	r0, [r7, #52]	; 0x34
 8007d04:	f000 bf8a 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007d08:	4b4c      	ldr	r3, [pc, #304]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d14:	d106      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d103      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007d1c:	4b4a      	ldr	r3, [pc, #296]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d20:	f000 bf7c 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007d24:	4b45      	ldr	r3, [pc, #276]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d107      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d104      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3e:	f000 bf6d 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
 8007d46:	f000 bf69 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d4e:	1e91      	subs	r1, r2, #2
 8007d50:	430b      	orrs	r3, r1
 8007d52:	d136      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007d54:	4b39      	ldr	r3, [pc, #228]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d5a:	f003 030c 	and.w	r3, r3, #12
 8007d5e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d104      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d66:	f7fe fb05 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 8007d6a:	6378      	str	r0, [r7, #52]	; 0x34
 8007d6c:	f000 bf56 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d104      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d76:	f7fe f9e1 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8007d7a:	6378      	str	r0, [r7, #52]	; 0x34
 8007d7c:	f000 bf4e 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007d80:	4b2e      	ldr	r3, [pc, #184]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8c:	d106      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d103      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007d94:	4b2c      	ldr	r3, [pc, #176]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007d96:	637b      	str	r3, [r7, #52]	; 0x34
 8007d98:	f000 bf40 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007d9c:	4b27      	ldr	r3, [pc, #156]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d107      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d104      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
 8007db6:	f000 bf31 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dbe:	f000 bf2d 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc6:	1f11      	subs	r1, r2, #4
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	d13f      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007dcc:	4b1b      	ldr	r3, [pc, #108]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007dd6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dde:	f7fe fac9 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 8007de2:	6378      	str	r0, [r7, #52]	; 0x34
 8007de4:	f000 bf1a 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	2b10      	cmp	r3, #16
 8007dec:	d104      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dee:	f7fe f9a5 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8007df2:	6378      	str	r0, [r7, #52]	; 0x34
 8007df4:	f000 bf12 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007df8:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e04:	d106      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d103      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e10:	f000 bf04 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007e14:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d107      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	2b30      	cmp	r3, #48	; 0x30
 8007e26:	d104      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2e:	f000 bef5 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34
 8007e36:	f000 bef1 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007e3a:	bf00      	nop
 8007e3c:	46020c00 	.word	0x46020c00
 8007e40:	0802927c 	.word	0x0802927c
 8007e44:	02dc6c00 	.word	0x02dc6c00
 8007e48:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e50:	f1a2 0108 	sub.w	r1, r2, #8
 8007e54:	430b      	orrs	r3, r1
 8007e56:	d136      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007e58:	4ba4      	ldr	r3, [pc, #656]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e62:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d104      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e6a:	f7fe fa83 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 8007e6e:	6378      	str	r0, [r7, #52]	; 0x34
 8007e70:	f000 bed4 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	d104      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e7a:	f7fe f95f 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8007e7e:	6378      	str	r0, [r7, #52]	; 0x34
 8007e80:	f000 becc 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007e84:	4b99      	ldr	r3, [pc, #612]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e90:	d106      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d103      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007e98:	4b95      	ldr	r3, [pc, #596]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9c:	f000 bebe 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007ea0:	4b92      	ldr	r3, [pc, #584]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d107      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8007eb2:	d104      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eba:	f000 beaf 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec2:	f000 beab 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eca:	f1a2 0110 	sub.w	r1, r2, #16
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	d139      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007ed2:	4b86      	ldr	r3, [pc, #536]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007edc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ee4:	f7fe fa46 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 8007ee8:	6378      	str	r0, [r7, #52]	; 0x34
 8007eea:	f000 be97 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef4:	d104      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ef6:	f7fe f921 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8007efa:	6378      	str	r0, [r7, #52]	; 0x34
 8007efc:	f000 be8e 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007f00:	4b7a      	ldr	r3, [pc, #488]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0c:	d107      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f14:	d103      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8007f16:	4b76      	ldr	r3, [pc, #472]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1a:	f000 be7f 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f1e:	4b73      	ldr	r3, [pc, #460]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d108      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f32:	d104      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3a:	f000 be6f 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	637b      	str	r3, [r7, #52]	; 0x34
 8007f42:	f000 be6b 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4a:	f1a2 0120 	sub.w	r1, r2, #32
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	d158      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007f52:	4b66      	ldr	r3, [pc, #408]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007f64:	f7fe fa2e 	bl	80063c4 <HAL_RCC_GetPCLK3Freq>
 8007f68:	6378      	str	r0, [r7, #52]	; 0x34
 8007f6a:	f000 be57 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d104      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f74:	f7fe f8e2 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8007f78:	6378      	str	r0, [r7, #52]	; 0x34
 8007f7a:	f000 be4f 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007f7e:	4b5b      	ldr	r3, [pc, #364]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f8a:	d106      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d103      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007f92:	4b57      	ldr	r3, [pc, #348]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
 8007f96:	f000 be41 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007f9a:	4b54      	ldr	r3, [pc, #336]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d107      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d104      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb4:	f000 be32 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007fb8:	4b4c      	ldr	r3, [pc, #304]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b20      	cmp	r3, #32
 8007fc2:	d11b      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d118      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fca:	4b48      	ldr	r3, [pc, #288]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8007fd6:	4b45      	ldr	r3, [pc, #276]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	0e1b      	lsrs	r3, r3, #24
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	e006      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007fe2:	4b42      	ldr	r3, [pc, #264]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	0e1b      	lsrs	r3, r3, #24
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	4a40      	ldr	r2, [pc, #256]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff8:	f000 be10 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8008000:	f000 be0c 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008008:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800800c:	430b      	orrs	r3, r1
 800800e:	d173      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008010:	4b36      	ldr	r3, [pc, #216]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008016:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800801a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008022:	d104      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008024:	f7fe f88a 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8008028:	6378      	str	r0, [r7, #52]	; 0x34
 800802a:	f000 bdf7 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008034:	d108      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008036:	f107 0318 	add.w	r3, r7, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff f992 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	637b      	str	r3, [r7, #52]	; 0x34
 8008044:	f000 bdea 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	2b00      	cmp	r3, #0
 800804c:	d104      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800804e:	f7fe f977 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 8008052:	6378      	str	r0, [r7, #52]	; 0x34
 8008054:	f000 bde2 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800805e:	d122      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008060:	4b22      	ldr	r3, [pc, #136]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0320 	and.w	r3, r3, #32
 8008068:	2b20      	cmp	r3, #32
 800806a:	d118      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800806c:	4b1f      	ldr	r3, [pc, #124]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8008078:	4b1c      	ldr	r3, [pc, #112]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	0e1b      	lsrs	r3, r3, #24
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	e006      	b.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8008084:	4b19      	ldr	r3, [pc, #100]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800808a:	041b      	lsls	r3, r3, #16
 800808c:	0e1b      	lsrs	r3, r3, #24
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	4a18      	ldr	r2, [pc, #96]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8008094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
 800809a:	f000 bdbf 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	637b      	str	r3, [r7, #52]	; 0x34
 80080a2:	f000 bdbb 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80080a6:	4b11      	ldr	r3, [pc, #68]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b2:	d107      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ba:	d103      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80080bc:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
 80080c0:	f000 bdac 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d0:	d107      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d8:	d103      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80080dc:	637b      	str	r3, [r7, #52]	; 0x34
 80080de:	f000 bd9d 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
 80080e6:	f000 bd99 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80080ea:	bf00      	nop
 80080ec:	46020c00 	.word	0x46020c00
 80080f0:	00f42400 	.word	0x00f42400
 80080f4:	0802927c 	.word	0x0802927c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80080f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080fc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008100:	430b      	orrs	r3, r1
 8008102:	d158      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008104:	4bad      	ldr	r3, [pc, #692]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008106:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	2b04      	cmp	r3, #4
 8008114:	d84b      	bhi.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008116:	a201      	add	r2, pc, #4	; (adr r2, 800811c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811c:	08008155 	.word	0x08008155
 8008120:	08008131 	.word	0x08008131
 8008124:	08008143 	.word	0x08008143
 8008128:	0800815f 	.word	0x0800815f
 800812c:	08008169 	.word	0x08008169
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe ffbb 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800813e:	f000 bd6d 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008142:	f107 030c 	add.w	r3, r7, #12
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fa66 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008150:	f000 bd64 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008154:	f7fe f8f4 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 8008158:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800815a:	f000 bd5f 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800815e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008164:	f000 bd5a 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008168:	4b94      	ldr	r3, [pc, #592]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	2b20      	cmp	r3, #32
 8008172:	d118      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008174:	4b91      	ldr	r3, [pc, #580]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8008180:	4b8e      	ldr	r3, [pc, #568]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	0e1b      	lsrs	r3, r3, #24
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	e006      	b.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800818c:	4b8b      	ldr	r3, [pc, #556]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800818e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008192:	041b      	lsls	r3, r3, #16
 8008194:	0e1b      	lsrs	r3, r3, #24
 8008196:	f003 030f 	and.w	r3, r3, #15
 800819a:	4a89      	ldr	r2, [pc, #548]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800819c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081a2:	f000 bd3b 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081aa:	f000 bd37 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80081ae:	2300      	movs	r3, #0
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081b2:	f000 bd33 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80081b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ba:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80081be:	430b      	orrs	r3, r1
 80081c0:	d167      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80081c2:	4b7e      	ldr	r3, [pc, #504]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081c8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80081cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081d4:	d036      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081dc:	d855      	bhi.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081e4:	d029      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081ec:	d84d      	bhi.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f4:	d013      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081fc:	d845      	bhi.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2b00      	cmp	r3, #0
 8008202:	d015      	beq.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800820a:	d13e      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800820c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe ff4d 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800821a:	f000 bcff 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800821e:	f107 030c 	add.w	r3, r7, #12
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff f9f8 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800822c:	f000 bcf6 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008230:	f7fe f886 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 8008234:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008236:	f000 bcf1 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800823a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008240:	f000 bcec 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008244:	4b5d      	ldr	r3, [pc, #372]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0320 	and.w	r3, r3, #32
 800824c:	2b20      	cmp	r3, #32
 800824e:	d118      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008250:	4b5a      	ldr	r3, [pc, #360]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800825c:	4b57      	ldr	r3, [pc, #348]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	0e1b      	lsrs	r3, r3, #24
 8008262:	f003 030f 	and.w	r3, r3, #15
 8008266:	e006      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8008268:	4b54      	ldr	r3, [pc, #336]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800826a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800826e:	041b      	lsls	r3, r3, #16
 8008270:	0e1b      	lsrs	r3, r3, #24
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	4a52      	ldr	r2, [pc, #328]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800827e:	f000 bccd 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008286:	f000 bcc9 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800828e:	f000 bcc5 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008296:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800829a:	430b      	orrs	r3, r1
 800829c:	d14c      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800829e:	4b47      	ldr	r3, [pc, #284]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80082b0:	f7fe f860 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 80082b4:	6378      	str	r0, [r7, #52]	; 0x34
 80082b6:	f000 bcb1 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c0:	d104      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80082c2:	f7fd ff3b 	bl	800613c <HAL_RCC_GetSysClockFreq>
 80082c6:	6378      	str	r0, [r7, #52]	; 0x34
 80082c8:	f000 bca8 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80082cc:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d8:	d107      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e0:	d103      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80082e2:	4b38      	ldr	r3, [pc, #224]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082e4:	637b      	str	r3, [r7, #52]	; 0x34
 80082e6:	f000 bc99 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80082ea:	4b34      	ldr	r3, [pc, #208]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d11c      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082fc:	d118      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082fe:	4b2f      	ldr	r3, [pc, #188]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800830a:	4b2c      	ldr	r3, [pc, #176]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	0e1b      	lsrs	r3, r3, #24
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	e006      	b.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8008316:	4b29      	ldr	r3, [pc, #164]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800831c:	041b      	lsls	r3, r3, #16
 800831e:	0e1b      	lsrs	r3, r3, #24
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	4a26      	ldr	r2, [pc, #152]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832a:	637b      	str	r3, [r7, #52]	; 0x34
 800832c:	f000 bc76 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
 8008334:	f000 bc72 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800833c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8008340:	430b      	orrs	r3, r1
 8008342:	d152      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008344:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800834a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800834e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	2b00      	cmp	r3, #0
 8008354:	d104      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008356:	f7fe f80d 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 800835a:	6378      	str	r0, [r7, #52]	; 0x34
 800835c:	f000 bc5e 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008366:	d104      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008368:	f7fd fee8 	bl	800613c <HAL_RCC_GetSysClockFreq>
 800836c:	6378      	str	r0, [r7, #52]	; 0x34
 800836e:	f000 bc55 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800837a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837e:	d107      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008386:	d103      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8008388:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800838a:	637b      	str	r3, [r7, #52]	; 0x34
 800838c:	f000 bc46 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0320 	and.w	r3, r3, #32
 8008398:	2b20      	cmp	r3, #32
 800839a:	d122      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083a2:	d11e      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083a4:	4b05      	ldr	r3, [pc, #20]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	0e1b      	lsrs	r3, r3, #24
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	e00c      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80083bc:	46020c00 	.word	0x46020c00
 80083c0:	0802927c 	.word	0x0802927c
 80083c4:	00f42400 	.word	0x00f42400
 80083c8:	4ba1      	ldr	r3, [pc, #644]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ce:	041b      	lsls	r3, r3, #16
 80083d0:	0e1b      	lsrs	r3, r3, #24
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	4a9f      	ldr	r2, [pc, #636]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
 80083de:	f000 bc1d 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
 80083e6:	f000 bc19 	b.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80083ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80083f2:	430b      	orrs	r3, r1
 80083f4:	d151      	bne.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80083f6:	4b96      	ldr	r3, [pc, #600]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008400:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	2bc0      	cmp	r3, #192	; 0xc0
 8008406:	d024      	beq.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	2bc0      	cmp	r3, #192	; 0xc0
 800840c:	d842      	bhi.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	2b80      	cmp	r3, #128	; 0x80
 8008412:	d00d      	beq.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d83c      	bhi.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d011      	beq.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8008426:	e035      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008428:	f7fd ffcc 	bl	80063c4 <HAL_RCC_GetPCLK3Freq>
 800842c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800842e:	e3f5      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008430:	4b87      	ldr	r3, [pc, #540]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843c:	d102      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800843e:	4b86      	ldr	r3, [pc, #536]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008442:	e3eb      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008448:	e3e8      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800844a:	f7fd fe77 	bl	800613c <HAL_RCC_GetSysClockFreq>
 800844e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008450:	e3e4      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008452:	4b7f      	ldr	r3, [pc, #508]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b20      	cmp	r3, #32
 800845c:	d117      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800845e:	4b7c      	ldr	r3, [pc, #496]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800846a:	4b79      	ldr	r3, [pc, #484]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	0e1b      	lsrs	r3, r3, #24
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	e006      	b.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8008476:	4b76      	ldr	r3, [pc, #472]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800847c:	041b      	lsls	r3, r3, #16
 800847e:	0e1b      	lsrs	r3, r3, #24
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	4a73      	ldr	r2, [pc, #460]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800848c:	e3c6      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008492:	e3c3      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008498:	e3c0      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800849a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800849e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80084a2:	430b      	orrs	r3, r1
 80084a4:	d147      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80084a6:	4b6a      	ldr	r3, [pc, #424]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80084b8:	f7fd ff5c 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 80084bc:	6378      	str	r0, [r7, #52]	; 0x34
 80084be:	e3ad      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084c6:	d103      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80084c8:	f7fd fe38 	bl	800613c <HAL_RCC_GetSysClockFreq>
 80084cc:	6378      	str	r0, [r7, #52]	; 0x34
 80084ce:	e3a5      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80084d0:	4b5f      	ldr	r3, [pc, #380]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084dc:	d106      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e4:	d102      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80084e6:	4b5c      	ldr	r3, [pc, #368]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
 80084ea:	e397      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80084ec:	4b58      	ldr	r3, [pc, #352]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d11b      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084fe:	d117      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008500:	4b53      	ldr	r3, [pc, #332]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 800850c:	4b50      	ldr	r3, [pc, #320]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	0e1b      	lsrs	r3, r3, #24
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	e006      	b.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8008518:	4b4d      	ldr	r3, [pc, #308]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800851a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800851e:	041b      	lsls	r3, r3, #16
 8008520:	0e1b      	lsrs	r3, r3, #24
 8008522:	f003 030f 	and.w	r3, r3, #15
 8008526:	4a4b      	ldr	r2, [pc, #300]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800852c:	637b      	str	r3, [r7, #52]	; 0x34
 800852e:	e375      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	637b      	str	r3, [r7, #52]	; 0x34
 8008534:	e372      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800853e:	430b      	orrs	r3, r1
 8008540:	d164      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008542:	4b43      	ldr	r3, [pc, #268]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800854c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	d120      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008554:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b20      	cmp	r3, #32
 800855e:	d117      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008560:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800856c:	4b38      	ldr	r3, [pc, #224]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	0e1b      	lsrs	r3, r3, #24
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	e006      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8008578:	4b35      	ldr	r3, [pc, #212]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800857a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800857e:	041b      	lsls	r3, r3, #16
 8008580:	0e1b      	lsrs	r3, r3, #24
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	4a33      	ldr	r2, [pc, #204]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
 800858e:	e345      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	637b      	str	r3, [r7, #52]	; 0x34
 8008594:	e342      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008596:	4b2e      	ldr	r3, [pc, #184]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800859c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a4:	d112      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ac:	d10e      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085ae:	4b28      	ldr	r3, [pc, #160]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085bc:	d102      	bne.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80085be:	23fa      	movs	r3, #250	; 0xfa
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085c2:	e32b      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80085c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085ca:	e327      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80085cc:	4b20      	ldr	r3, [pc, #128]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d8:	d106      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e0:	d102      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80085e2:	4b1d      	ldr	r3, [pc, #116]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
 80085e6:	e319      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80085e8:	4b19      	ldr	r3, [pc, #100]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d107      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085fc:	d103      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80085fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008602:	637b      	str	r3, [r7, #52]	; 0x34
 8008604:	e30a      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
 800860a:	e307      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800860c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008610:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008614:	430b      	orrs	r3, r1
 8008616:	d16b      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008618:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800861a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800861e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008622:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	2b00      	cmp	r3, #0
 8008628:	d127      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b20      	cmp	r3, #32
 8008634:	d11e      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008636:	4b06      	ldr	r3, [pc, #24]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8008642:	4b03      	ldr	r3, [pc, #12]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	0e1b      	lsrs	r3, r3, #24
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	e00d      	b.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800864e:	bf00      	nop
 8008650:	46020c00 	.word	0x46020c00
 8008654:	0802927c 	.word	0x0802927c
 8008658:	00f42400 	.word	0x00f42400
 800865c:	4b94      	ldr	r3, [pc, #592]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800865e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	0e1b      	lsrs	r3, r3, #24
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	4a92      	ldr	r2, [pc, #584]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800866c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
 8008672:	e2d3      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	637b      	str	r3, [r7, #52]	; 0x34
 8008678:	e2d0      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800867a:	4b8d      	ldr	r3, [pc, #564]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800867c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008688:	d112      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008690:	d10e      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008692:	4b87      	ldr	r3, [pc, #540]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800869c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086a0:	d102      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80086a2:	23fa      	movs	r3, #250	; 0xfa
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086a6:	e2b9      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80086a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086ae:	e2b5      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80086b0:	4b7f      	ldr	r3, [pc, #508]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086bc:	d106      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c4:	d102      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80086c6:	4b7c      	ldr	r3, [pc, #496]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086c8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ca:	e2a7      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80086cc:	4b78      	ldr	r3, [pc, #480]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d107      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086e0:	d103      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80086e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34
 80086e8:	e298      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	637b      	str	r3, [r7, #52]	; 0x34
 80086ee:	e295      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80086f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80086f8:	430b      	orrs	r3, r1
 80086fa:	d147      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80086fc:	4b6c      	ldr	r3, [pc, #432]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008702:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008706:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800870e:	f7fd fe31 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 8008712:	6378      	str	r0, [r7, #52]	; 0x34
 8008714:	e282      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008716:	4b66      	ldr	r3, [pc, #408]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800871c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008724:	d112      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800872c:	d10e      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800872e:	4b60      	ldr	r3, [pc, #384]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800873c:	d102      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800873e:	23fa      	movs	r3, #250	; 0xfa
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008742:	e26b      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008744:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800874a:	e267      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800874c:	4b58      	ldr	r3, [pc, #352]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008758:	d106      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008760:	d102      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8008762:	4b55      	ldr	r3, [pc, #340]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
 8008766:	e259      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008768:	4b51      	ldr	r3, [pc, #324]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800876a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b02      	cmp	r3, #2
 8008774:	d107      	bne.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800877c:	d103      	bne.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800877e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008782:	637b      	str	r3, [r7, #52]	; 0x34
 8008784:	e24a      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
 800878a:	e247      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800878c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008790:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008794:	430b      	orrs	r3, r1
 8008796:	d12d      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008798:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800879a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800879e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80087a2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80087a4:	4b42      	ldr	r3, [pc, #264]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087b0:	d105      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80087b8:	4b3f      	ldr	r3, [pc, #252]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
 80087bc:	e22e      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087c4:	d107      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fc70 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	637b      	str	r3, [r7, #52]	; 0x34
 80087d4:	e222      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087dc:	d107      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087de:	f107 0318 	add.w	r3, r7, #24
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fdbe 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	637b      	str	r3, [r7, #52]	; 0x34
 80087ec:	e216      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	637b      	str	r3, [r7, #52]	; 0x34
 80087f2:	e213      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80087f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80087fc:	430b      	orrs	r3, r1
 80087fe:	d15d      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008800:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008806:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800880a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008812:	d028      	beq.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8008814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800881a:	d845      	bhi.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008822:	d013      	beq.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800882a:	d83d      	bhi.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	2b00      	cmp	r3, #0
 8008830:	d004      	beq.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008838:	d004      	beq.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800883a:	e035      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800883c:	f7fd fdae 	bl	800639c <HAL_RCC_GetPCLK2Freq>
 8008840:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008842:	e1eb      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008844:	f7fd fc7a 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8008848:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800884a:	e1e7      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800884c:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008858:	d102      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800885a:	4b17      	ldr	r3, [pc, #92]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800885e:	e1dd      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008864:	e1da      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008866:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0320 	and.w	r3, r3, #32
 800886e:	2b20      	cmp	r3, #32
 8008870:	d117      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008872:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	0e1b      	lsrs	r3, r3, #24
 8008884:	f003 030f 	and.w	r3, r3, #15
 8008888:	e006      	b.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800888c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008890:	041b      	lsls	r3, r3, #16
 8008892:	0e1b      	lsrs	r3, r3, #24
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	4a06      	ldr	r2, [pc, #24]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800889a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800889e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088a0:	e1bc      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088a6:	e1b9      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088ac:	e1b6      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80088ae:	bf00      	nop
 80088b0:	46020c00 	.word	0x46020c00
 80088b4:	0802927c 	.word	0x0802927c
 80088b8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80088bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80088c4:	430b      	orrs	r3, r1
 80088c6:	d156      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80088c8:	4ba5      	ldr	r3, [pc, #660]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088d2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088da:	d028      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088e2:	d845      	bhi.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ea:	d013      	beq.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f2:	d83d      	bhi.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008900:	d004      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8008902:	e035      	b.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008904:	f7fd fd36 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 8008908:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800890a:	e187      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800890c:	f7fd fc16 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8008910:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008912:	e183      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008914:	4b92      	ldr	r3, [pc, #584]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800891c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008920:	d102      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8008922:	4b90      	ldr	r3, [pc, #576]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008926:	e179      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800892c:	e176      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800892e:	4b8c      	ldr	r3, [pc, #560]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b20      	cmp	r3, #32
 8008938:	d117      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800893a:	4b89      	ldr	r3, [pc, #548]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8008946:	4b86      	ldr	r3, [pc, #536]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	0e1b      	lsrs	r3, r3, #24
 800894c:	f003 030f 	and.w	r3, r3, #15
 8008950:	e006      	b.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8008952:	4b83      	ldr	r3, [pc, #524]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008958:	041b      	lsls	r3, r3, #16
 800895a:	0e1b      	lsrs	r3, r3, #24
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	4a81      	ldr	r2, [pc, #516]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008966:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008968:	e158      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800896e:	e155      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008974:	e152      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800897e:	430b      	orrs	r3, r1
 8008980:	d177      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008982:	4b77      	ldr	r3, [pc, #476]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008988:	f003 0318 	and.w	r3, r3, #24
 800898c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	2b18      	cmp	r3, #24
 8008992:	d86b      	bhi.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8008994:	a201      	add	r2, pc, #4	; (adr r2, 800899c <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	08008a01 	.word	0x08008a01
 80089a0:	08008a6d 	.word	0x08008a6d
 80089a4:	08008a6d 	.word	0x08008a6d
 80089a8:	08008a6d 	.word	0x08008a6d
 80089ac:	08008a6d 	.word	0x08008a6d
 80089b0:	08008a6d 	.word	0x08008a6d
 80089b4:	08008a6d 	.word	0x08008a6d
 80089b8:	08008a6d 	.word	0x08008a6d
 80089bc:	08008a09 	.word	0x08008a09
 80089c0:	08008a6d 	.word	0x08008a6d
 80089c4:	08008a6d 	.word	0x08008a6d
 80089c8:	08008a6d 	.word	0x08008a6d
 80089cc:	08008a6d 	.word	0x08008a6d
 80089d0:	08008a6d 	.word	0x08008a6d
 80089d4:	08008a6d 	.word	0x08008a6d
 80089d8:	08008a6d 	.word	0x08008a6d
 80089dc:	08008a11 	.word	0x08008a11
 80089e0:	08008a6d 	.word	0x08008a6d
 80089e4:	08008a6d 	.word	0x08008a6d
 80089e8:	08008a6d 	.word	0x08008a6d
 80089ec:	08008a6d 	.word	0x08008a6d
 80089f0:	08008a6d 	.word	0x08008a6d
 80089f4:	08008a6d 	.word	0x08008a6d
 80089f8:	08008a6d 	.word	0x08008a6d
 80089fc:	08008a2b 	.word	0x08008a2b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008a00:	f7fd fce0 	bl	80063c4 <HAL_RCC_GetPCLK3Freq>
 8008a04:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008a06:	e109      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008a08:	f7fd fb98 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8008a0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008a0e:	e105      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a10:	4b53      	ldr	r3, [pc, #332]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a1c:	d102      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8008a1e:	4b51      	ldr	r3, [pc, #324]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008a20:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a22:	e0fb      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a28:	e0f8      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a2a:	4b4d      	ldr	r3, [pc, #308]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d117      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a36:	4b4a      	ldr	r3, [pc, #296]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8008a42:	4b47      	ldr	r3, [pc, #284]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	0e1b      	lsrs	r3, r3, #24
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	e006      	b.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008a4e:	4b44      	ldr	r3, [pc, #272]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a54:	041b      	lsls	r3, r3, #16
 8008a56:	0e1b      	lsrs	r3, r3, #24
 8008a58:	f003 030f 	and.w	r3, r3, #15
 8008a5c:	4a42      	ldr	r2, [pc, #264]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a62:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a64:	e0da      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a6a:	e0d7      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a70:	e0d4      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a76:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008a7a:	430b      	orrs	r3, r1
 8008a7c:	d155      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008a7e:	4b38      	ldr	r3, [pc, #224]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008a88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a90:	d013      	beq.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a98:	d844      	bhi.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aa0:	d013      	beq.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aa8:	d83c      	bhi.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d014      	beq.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab6:	d014      	beq.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8008ab8:	e034      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aba:	f107 0318 	add.w	r3, r7, #24
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fc50 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ac8:	e0a8      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe faee 	bl	80070b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ad8:	e0a0      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008ada:	f7fd fb2f 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8008ade:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008ae0:	e09c      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008ae2:	4b1f      	ldr	r3, [pc, #124]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	d117      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008aee:	4b1c      	ldr	r3, [pc, #112]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008afa:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	0e1b      	lsrs	r3, r3, #24
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	e006      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8008b06:	4b16      	ldr	r3, [pc, #88]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	0e1b      	lsrs	r3, r3, #24
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	4a14      	ldr	r2, [pc, #80]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b1c:	e07e      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b22:	e07b      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b28:	e078      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008b32:	430b      	orrs	r3, r1
 8008b34:	d138      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008b36:	4b0a      	ldr	r3, [pc, #40]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b40:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d10d      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8008b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5c:	e05e      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008b5e:	bf00      	nop
 8008b60:	46020c00 	.word	0x46020c00
 8008b64:	00f42400 	.word	0x00f42400
 8008b68:	0802927c 	.word	0x0802927c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008b6c:	4b2e      	ldr	r3, [pc, #184]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b7a:	d112      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b82:	d10e      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008b84:	4b28      	ldr	r3, [pc, #160]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b92:	d102      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008b94:	23fa      	movs	r3, #250	; 0xfa
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008b98:	e040      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008b9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008b9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ba0:	e03c      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba6:	e039      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bac:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	d131      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008bb4:	4b1c      	ldr	r3, [pc, #112]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008bb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008bba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008bbe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008bc0:	4b19      	ldr	r3, [pc, #100]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bcc:	d105      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8008bd4:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8008bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd8:	e020      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008bda:	4b13      	ldr	r3, [pc, #76]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be6:	d106      	bne.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bee:	d102      	bne.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008bf0:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8008bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf4:	e012      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c02:	d106      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0a:	d102      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8008c0c:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c10:	e004      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	637b      	str	r3, [r7, #52]	; 0x34
 8008c16:	e001      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3738      	adds	r7, #56	; 0x38
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	46020c00 	.word	0x46020c00
 8008c2c:	02dc6c00 	.word	0x02dc6c00
 8008c30:	016e3600 	.word	0x016e3600
 8008c34:	00f42400 	.word	0x00f42400

08008c38 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8008c40:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <HAL_RCCEx_CRSConfig+0x7c>)
 8008c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c44:	4a1b      	ldr	r2, [pc, #108]	; (8008cb4 <HAL_RCCEx_CRSConfig+0x7c>)
 8008c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c4a:	6753      	str	r3, [r2, #116]	; 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 8008c4c:	4b19      	ldr	r3, [pc, #100]	; (8008cb4 <HAL_RCCEx_CRSConfig+0x7c>)
 8008c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c50:	4a18      	ldr	r2, [pc, #96]	; (8008cb4 <HAL_RCCEx_CRSConfig+0x7c>)
 8008c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c56:	6753      	str	r3, [r2, #116]	; 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	431a      	orrs	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	041b      	lsls	r3, r3, #16
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8008c80:	4a0d      	ldr	r2, [pc, #52]	; (8008cb8 <HAL_RCCEx_CRSConfig+0x80>)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8008c86:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <HAL_RCCEx_CRSConfig+0x80>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	4908      	ldr	r1, [pc, #32]	; (8008cb8 <HAL_RCCEx_CRSConfig+0x80>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8008c9a:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <HAL_RCCEx_CRSConfig+0x80>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a06      	ldr	r2, [pc, #24]	; (8008cb8 <HAL_RCCEx_CRSConfig+0x80>)
 8008ca0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ca4:	6013      	str	r3, [r2, #0]
}
 8008ca6:	bf00      	nop
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	46020c00 	.word	0x46020c00
 8008cb8:	40006000 	.word	0x40006000

08008cbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008cc4:	4b47      	ldr	r3, [pc, #284]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a46      	ldr	r2, [pc, #280]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008cce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cd0:	f7f9 f848 	bl	8001d64 <HAL_GetTick>
 8008cd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cd6:	e008      	b.n	8008cea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cd8:	f7f9 f844 	bl	8001d64 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e077      	b.n	8008dda <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cea:	4b3e      	ldr	r3, [pc, #248]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1f0      	bne.n	8008cd8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008cf6:	4b3b      	ldr	r3, [pc, #236]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cfe:	f023 0303 	bic.w	r3, r3, #3
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6811      	ldr	r1, [r2, #0]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6852      	ldr	r2, [r2, #4]
 8008d0a:	3a01      	subs	r2, #1
 8008d0c:	0212      	lsls	r2, r2, #8
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	4934      	ldr	r1, [pc, #208]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008d16:	4b33      	ldr	r3, [pc, #204]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d1a:	4b33      	ldr	r3, [pc, #204]	; (8008de8 <RCCEx_PLL2_Config+0x12c>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6892      	ldr	r2, [r2, #8]
 8008d22:	3a01      	subs	r2, #1
 8008d24:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	68d2      	ldr	r2, [r2, #12]
 8008d2c:	3a01      	subs	r2, #1
 8008d2e:	0252      	lsls	r2, r2, #9
 8008d30:	b292      	uxth	r2, r2
 8008d32:	4311      	orrs	r1, r2
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6912      	ldr	r2, [r2, #16]
 8008d38:	3a01      	subs	r2, #1
 8008d3a:	0412      	lsls	r2, r2, #16
 8008d3c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008d40:	4311      	orrs	r1, r2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	6952      	ldr	r2, [r2, #20]
 8008d46:	3a01      	subs	r2, #1
 8008d48:	0612      	lsls	r2, r2, #24
 8008d4a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	4924      	ldr	r1, [pc, #144]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008d56:	4b23      	ldr	r3, [pc, #140]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	f023 020c 	bic.w	r2, r3, #12
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	4920      	ldr	r1, [pc, #128]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d64:	4313      	orrs	r3, r2
 8008d66:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008d68:	4b1e      	ldr	r3, [pc, #120]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	491c      	ldr	r1, [pc, #112]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008d76:	4b1b      	ldr	r3, [pc, #108]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	4a1a      	ldr	r2, [pc, #104]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d7c:	f023 0310 	bic.w	r3, r3, #16
 8008d80:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d82:	4b18      	ldr	r3, [pc, #96]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	69d2      	ldr	r2, [r2, #28]
 8008d92:	00d2      	lsls	r2, r2, #3
 8008d94:	4913      	ldr	r1, [pc, #76]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008d9a:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	4a11      	ldr	r2, [pc, #68]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008da0:	f043 0310 	orr.w	r3, r3, #16
 8008da4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a0e      	ldr	r2, [pc, #56]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008db0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008db2:	f7f8 ffd7 	bl	8001d64 <HAL_GetTick>
 8008db6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008db8:	e008      	b.n	8008dcc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008dba:	f7f8 ffd3 	bl	8001d64 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d901      	bls.n	8008dcc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e006      	b.n	8008dda <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dcc:	4b05      	ldr	r3, [pc, #20]	; (8008de4 <RCCEx_PLL2_Config+0x128>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d0f0      	beq.n	8008dba <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0

}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	46020c00 	.word	0x46020c00
 8008de8:	80800000 	.word	0x80800000

08008dec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008df4:	4b47      	ldr	r3, [pc, #284]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a46      	ldr	r2, [pc, #280]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e00:	f7f8 ffb0 	bl	8001d64 <HAL_GetTick>
 8008e04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e06:	e008      	b.n	8008e1a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e08:	f7f8 ffac 	bl	8001d64 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d901      	bls.n	8008e1a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e077      	b.n	8008f0a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e1a:	4b3e      	ldr	r3, [pc, #248]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f0      	bne.n	8008e08 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008e26:	4b3b      	ldr	r3, [pc, #236]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008e2e:	f023 0303 	bic.w	r3, r3, #3
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6811      	ldr	r1, [r2, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6852      	ldr	r2, [r2, #4]
 8008e3a:	3a01      	subs	r2, #1
 8008e3c:	0212      	lsls	r2, r2, #8
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	4934      	ldr	r1, [pc, #208]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	630b      	str	r3, [r1, #48]	; 0x30
 8008e46:	4b33      	ldr	r3, [pc, #204]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e4a:	4b33      	ldr	r3, [pc, #204]	; (8008f18 <RCCEx_PLL3_Config+0x12c>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6892      	ldr	r2, [r2, #8]
 8008e52:	3a01      	subs	r2, #1
 8008e54:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	68d2      	ldr	r2, [r2, #12]
 8008e5c:	3a01      	subs	r2, #1
 8008e5e:	0252      	lsls	r2, r2, #9
 8008e60:	b292      	uxth	r2, r2
 8008e62:	4311      	orrs	r1, r2
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6912      	ldr	r2, [r2, #16]
 8008e68:	3a01      	subs	r2, #1
 8008e6a:	0412      	lsls	r2, r2, #16
 8008e6c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008e70:	4311      	orrs	r1, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6952      	ldr	r2, [r2, #20]
 8008e76:	3a01      	subs	r2, #1
 8008e78:	0612      	lsls	r2, r2, #24
 8008e7a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	4924      	ldr	r1, [pc, #144]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008e86:	4b23      	ldr	r3, [pc, #140]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8a:	f023 020c 	bic.w	r2, r3, #12
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	4920      	ldr	r1, [pc, #128]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008e98:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	491c      	ldr	r1, [pc, #112]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008ea6:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eaa:	4a1a      	ldr	r2, [pc, #104]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008eac:	f023 0310 	bic.w	r3, r3, #16
 8008eb0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008eb2:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008eba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	69d2      	ldr	r2, [r2, #28]
 8008ec2:	00d2      	lsls	r2, r2, #3
 8008ec4:	4913      	ldr	r1, [pc, #76]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	4a11      	ldr	r2, [pc, #68]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008ed0:	f043 0310 	orr.w	r3, r3, #16
 8008ed4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a0e      	ldr	r2, [pc, #56]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ee0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ee2:	f7f8 ff3f 	bl	8001d64 <HAL_GetTick>
 8008ee6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ee8:	e008      	b.n	8008efc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008eea:	f7f8 ff3b 	bl	8001d64 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d901      	bls.n	8008efc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e006      	b.n	8008f0a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008efc:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <RCCEx_PLL3_Config+0x128>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0f0      	beq.n	8008eea <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	46020c00 	.word	0x46020c00
 8008f18:	80800000 	.word	0x80800000

08008f1c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e0fb      	b.n	8009126 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a7f      	ldr	r2, [pc, #508]	; (8009130 <HAL_SPI_Init+0x214>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d004      	beq.n	8008f42 <HAL_SPI_Init+0x26>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a7d      	ldr	r2, [pc, #500]	; (8009134 <HAL_SPI_Init+0x218>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	e000      	b.n	8008f44 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008f42:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a78      	ldr	r2, [pc, #480]	; (8009130 <HAL_SPI_Init+0x214>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d004      	beq.n	8008f5e <HAL_SPI_Init+0x42>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a76      	ldr	r2, [pc, #472]	; (8009134 <HAL_SPI_Init+0x218>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d105      	bne.n	8008f6a <HAL_SPI_Init+0x4e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2b0f      	cmp	r3, #15
 8008f64:	d901      	bls.n	8008f6a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e0dd      	b.n	8009126 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f001 f818 	bl	8009fa0 <SPI_GetPacketSize>
 8008f70:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a6e      	ldr	r2, [pc, #440]	; (8009130 <HAL_SPI_Init+0x214>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d004      	beq.n	8008f86 <HAL_SPI_Init+0x6a>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a6c      	ldr	r2, [pc, #432]	; (8009134 <HAL_SPI_Init+0x218>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d102      	bne.n	8008f8c <HAL_SPI_Init+0x70>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d816      	bhi.n	8008fba <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f90:	4a69      	ldr	r2, [pc, #420]	; (8009138 <HAL_SPI_Init+0x21c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d00e      	beq.n	8008fb4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a68      	ldr	r2, [pc, #416]	; (800913c <HAL_SPI_Init+0x220>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d009      	beq.n	8008fb4 <HAL_SPI_Init+0x98>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a66      	ldr	r2, [pc, #408]	; (8009140 <HAL_SPI_Init+0x224>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d004      	beq.n	8008fb4 <HAL_SPI_Init+0x98>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a65      	ldr	r2, [pc, #404]	; (8009144 <HAL_SPI_Init+0x228>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d104      	bne.n	8008fbe <HAL_SPI_Init+0xa2>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b10      	cmp	r3, #16
 8008fb8:	d901      	bls.n	8008fbe <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e0b3      	b.n	8009126 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7f8 f814 	bl	8001000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0201 	bic.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008ffa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009004:	d119      	bne.n	800903a <HAL_SPI_Init+0x11e>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800900e:	d103      	bne.n	8009018 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009014:	2b00      	cmp	r3, #0
 8009016:	d008      	beq.n	800902a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10c      	bne.n	800903a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009028:	d107      	bne.n	800903a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009038:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00f      	beq.n	8009066 <HAL_SPI_Init+0x14a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	2b06      	cmp	r3, #6
 800904c:	d90b      	bls.n	8009066 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e007      	b.n	8009076 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009074:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	69da      	ldr	r2, [r3, #28]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	431a      	orrs	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009088:	ea42 0103 	orr.w	r1, r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	431a      	orrs	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e2:	ea42 0103 	orr.w	r1, r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	46002000 	.word	0x46002000
 8009134:	56002000 	.word	0x56002000
 8009138:	40013000 	.word	0x40013000
 800913c:	50013000 	.word	0x50013000
 8009140:	40003800 	.word	0x40003800
 8009144:	50003800 	.word	0x50003800

08009148 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08a      	sub	sp, #40	; 0x28
 800914c:	af02      	add	r7, sp, #8
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	4613      	mov	r3, r2
 8009156:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3320      	adds	r3, #32
 800915e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_SPI_Transmit+0x2a>
 800916e:	2302      	movs	r3, #2
 8009170:	e203      	b.n	800957a <HAL_SPI_Transmit+0x432>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800917a:	f7f8 fdf3 	bl	8001d64 <HAL_GetTick>
 800917e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b01      	cmp	r3, #1
 800918a:	d007      	beq.n	800919c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800918c:	2302      	movs	r3, #2
 800918e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009198:	7efb      	ldrb	r3, [r7, #27]
 800919a:	e1ee      	b.n	800957a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <HAL_SPI_Transmit+0x60>
 80091a2:	88fb      	ldrh	r3, [r7, #6]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d107      	bne.n	80091b8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80091b4:	7efb      	ldrb	r3, [r7, #27]
 80091b6:	e1e0      	b.n	800957a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2203      	movs	r2, #3
 80091bc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	88fa      	ldrh	r2, [r7, #6]
 80091d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	88fa      	ldrh	r2, [r7, #6]
 80091da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009208:	d108      	bne.n	800921c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e009      	b.n	8009230 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800922e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	0c1b      	lsrs	r3, r3, #16
 8009238:	041b      	lsls	r3, r3, #16
 800923a:	88f9      	ldrh	r1, [r7, #6]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	6812      	ldr	r2, [r2, #0]
 8009240:	430b      	orrs	r3, r1
 8009242:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10c      	bne.n	800927c <HAL_SPI_Transmit+0x134>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800926a:	d107      	bne.n	800927c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	2b0f      	cmp	r3, #15
 8009282:	d95b      	bls.n	800933c <HAL_SPI_Transmit+0x1f4>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a8f      	ldr	r2, [pc, #572]	; (80094c8 <HAL_SPI_Transmit+0x380>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d04f      	beq.n	800932e <HAL_SPI_Transmit+0x1e6>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a8e      	ldr	r2, [pc, #568]	; (80094cc <HAL_SPI_Transmit+0x384>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d04a      	beq.n	800932e <HAL_SPI_Transmit+0x1e6>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a8c      	ldr	r2, [pc, #560]	; (80094d0 <HAL_SPI_Transmit+0x388>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d045      	beq.n	800932e <HAL_SPI_Transmit+0x1e6>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a8b      	ldr	r2, [pc, #556]	; (80094d4 <HAL_SPI_Transmit+0x38c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d147      	bne.n	800933c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80092ac:	e03f      	b.n	800932e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d114      	bne.n	80092e6 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092cc:	1d1a      	adds	r2, r3, #4
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092d8:	b29b      	uxth	r3, r3
 80092da:	3b01      	subs	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80092e4:	e023      	b.n	800932e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092e6:	f7f8 fd3d 	bl	8001d64 <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d803      	bhi.n	80092fe <HAL_SPI_Transmit+0x1b6>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fc:	d102      	bne.n	8009304 <HAL_SPI_Transmit+0x1bc>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d114      	bne.n	800932e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 fd7d 	bl	8009e04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009318:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e125      	b.n	800957a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009334:	b29b      	uxth	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1b9      	bne.n	80092ae <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800933a:	e0f8      	b.n	800952e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	2b07      	cmp	r3, #7
 8009342:	f240 80ed 	bls.w	8009520 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009346:	e05d      	b.n	8009404 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b02      	cmp	r3, #2
 8009354:	d132      	bne.n	80093bc <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b01      	cmp	r3, #1
 8009360:	d918      	bls.n	8009394 <HAL_SPI_Transmit+0x24c>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d014      	beq.n	8009394 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6812      	ldr	r2, [r2, #0]
 8009374:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800937a:	1d1a      	adds	r2, r3, #4
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009386:	b29b      	uxth	r3, r3
 8009388:	3b02      	subs	r3, #2
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009392:	e037      	b.n	8009404 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009398:	881a      	ldrh	r2, [r3, #0]
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a2:	1c9a      	adds	r2, r3, #2
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80093ba:	e023      	b.n	8009404 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093bc:	f7f8 fcd2 	bl	8001d64 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d803      	bhi.n	80093d4 <HAL_SPI_Transmit+0x28c>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d2:	d102      	bne.n	80093da <HAL_SPI_Transmit+0x292>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d114      	bne.n	8009404 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 fd12 	bl	8009e04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e0ba      	b.n	800957a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d19b      	bne.n	8009348 <HAL_SPI_Transmit+0x200>
 8009410:	e08d      	b.n	800952e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	f003 0302 	and.w	r3, r3, #2
 800941c:	2b02      	cmp	r3, #2
 800941e:	d15b      	bne.n	80094d8 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009426:	b29b      	uxth	r3, r3
 8009428:	2b03      	cmp	r3, #3
 800942a:	d918      	bls.n	800945e <HAL_SPI_Transmit+0x316>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009430:	2b40      	cmp	r3, #64	; 0x40
 8009432:	d914      	bls.n	800945e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6812      	ldr	r2, [r2, #0]
 800943e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009444:	1d1a      	adds	r2, r3, #4
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009450:	b29b      	uxth	r3, r3
 8009452:	3b04      	subs	r3, #4
 8009454:	b29a      	uxth	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800945c:	e060      	b.n	8009520 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b01      	cmp	r3, #1
 8009468:	d917      	bls.n	800949a <HAL_SPI_Transmit+0x352>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d013      	beq.n	800949a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009476:	881a      	ldrh	r2, [r3, #0]
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009480:	1c9a      	adds	r2, r3, #2
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800948c:	b29b      	uxth	r3, r3
 800948e:	3b02      	subs	r3, #2
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009498:	e042      	b.n	8009520 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3320      	adds	r3, #32
 80094a4:	7812      	ldrb	r2, [r2, #0]
 80094a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80094c4:	e02c      	b.n	8009520 <HAL_SPI_Transmit+0x3d8>
 80094c6:	bf00      	nop
 80094c8:	40013000 	.word	0x40013000
 80094cc:	50013000 	.word	0x50013000
 80094d0:	40003800 	.word	0x40003800
 80094d4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d8:	f7f8 fc44 	bl	8001d64 <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d803      	bhi.n	80094f0 <HAL_SPI_Transmit+0x3a8>
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ee:	d102      	bne.n	80094f6 <HAL_SPI_Transmit+0x3ae>
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d114      	bne.n	8009520 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 fc84 	bl	8009e04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800950a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e02c      	b.n	800957a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009526:	b29b      	uxth	r3, r3
 8009528:	2b00      	cmp	r3, #0
 800952a:	f47f af72 	bne.w	8009412 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2200      	movs	r2, #0
 8009536:	2108      	movs	r1, #8
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 fd03 	bl	8009f44 <SPI_WaitOnFlagUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800954a:	f043 0220 	orr.w	r2, r3, #32
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 fc55 	bl	8009e04 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e000      	b.n	800957a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8009578:	7efb      	ldrb	r3, [r7, #27]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3720      	adds	r7, #32
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop

08009584 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_SPI_Transmit_DMA+0x1c>
 800959c:	2302      	movs	r3, #2
 800959e:	e1c2      	b.n	8009926 <HAL_SPI_Transmit_DMA+0x3a2>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  if (hspi->State != HAL_SPI_STATE_READY)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d007      	beq.n	80095c4 <HAL_SPI_Transmit_DMA+0x40>
  {
    errorcode = HAL_BUSY;
 80095b4:	2302      	movs	r3, #2
 80095b6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	e1b0      	b.n	8009926 <HAL_SPI_Transmit_DMA+0x3a2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <HAL_SPI_Transmit_DMA+0x4c>
 80095ca:	88fb      	ldrh	r3, [r7, #6]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d107      	bne.n	80095e0 <HAL_SPI_Transmit_DMA+0x5c>
  {
    errorcode = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	e1a2      	b.n	8009926 <HAL_SPI_Transmit_DMA+0x3a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2203      	movs	r2, #3
 80095e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	88fa      	ldrh	r2, [r7, #6]
 80095fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->TxISR       = NULL;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009630:	d108      	bne.n	8009644 <HAL_SPI_Transmit_DMA+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	e009      	b.n	8009658 <HAL_SPI_Transmit_DMA+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009656:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	2b0f      	cmp	r3, #15
 800965e:	d919      	bls.n	8009694 <HAL_SPI_Transmit_DMA+0x110>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d013      	beq.n	8009694 <HAL_SPI_Transmit_DMA+0x110>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8009670:	4a88      	ldr	r2, [pc, #544]	; (8009894 <HAL_SPI_Transmit_DMA+0x310>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d018      	beq.n	80096a8 <HAL_SPI_Transmit_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a87      	ldr	r2, [pc, #540]	; (8009898 <HAL_SPI_Transmit_DMA+0x314>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d013      	beq.n	80096a8 <HAL_SPI_Transmit_DMA+0x124>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a85      	ldr	r2, [pc, #532]	; (800989c <HAL_SPI_Transmit_DMA+0x318>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00e      	beq.n	80096a8 <HAL_SPI_Transmit_DMA+0x124>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a84      	ldr	r2, [pc, #528]	; (80098a0 <HAL_SPI_Transmit_DMA+0x31c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d009      	beq.n	80096a8 <HAL_SPI_Transmit_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8009698:	2b07      	cmp	r3, #7
 800969a:	d90d      	bls.n	80096b8 <HAL_SPI_Transmit_DMA+0x134>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d107      	bne.n	80096b8 <HAL_SPI_Transmit_DMA+0x134>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	e136      	b.n	8009926 <HAL_SPI_Transmit_DMA+0x3a2>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	2b07      	cmp	r3, #7
 80096be:	d820      	bhi.n	8009702 <HAL_SPI_Transmit_DMA+0x17e>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d109      	bne.n	80096e0 <HAL_SPI_Transmit_DMA+0x15c>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	3301      	adds	r3, #1
 80096d6:	105b      	asrs	r3, r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d11e      	bne.n	800972a <HAL_SPI_Transmit_DMA+0x1a6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	3303      	adds	r3, #3
 80096f6:	109b      	asrs	r3, r3, #2
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009700:	e013      	b.n	800972a <HAL_SPI_Transmit_DMA+0x1a6>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b0f      	cmp	r3, #15
 8009708:	d80f      	bhi.n	800972a <HAL_SPI_Transmit_DMA+0x1a6>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	2b02      	cmp	r3, #2
 8009714:	d109      	bne.n	800972a <HAL_SPI_Transmit_DMA+0x1a6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800971c:	b29b      	uxth	r3, r3
 800971e:	3301      	adds	r3, #1
 8009720:	105b      	asrs	r3, r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009730:	4a5c      	ldr	r2, [pc, #368]	; (80098a4 <HAL_SPI_Transmit_DMA+0x320>)
 8009732:	665a      	str	r2, [r3, #100]	; 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800973a:	4a5b      	ldr	r2, [pc, #364]	; (80098a8 <HAL_SPI_Transmit_DMA+0x324>)
 800973c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009744:	4a59      	ldr	r2, [pc, #356]	; (80098ac <HAL_SPI_Transmit_DMA+0x328>)
 8009746:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800974e:	2200      	movs	r2, #0
 8009750:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009760:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	2b07      	cmp	r3, #7
 8009768:	d804      	bhi.n	8009774 <HAL_SPI_Transmit_DMA+0x1f0>
  {
    hspi->TxXferCount = Size;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	88fa      	ldrh	r2, [r7, #6]
 800976e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009772:	e010      	b.n	8009796 <HAL_SPI_Transmit_DMA+0x212>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	2b0f      	cmp	r3, #15
 800977a:	d806      	bhi.n	800978a <HAL_SPI_Transmit_DMA+0x206>
  {
    hspi->TxXferCount = Size * 2U;
 800977c:	88fb      	ldrh	r3, [r7, #6]
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009788:	e005      	b.n	8009796 <HAL_SPI_Transmit_DMA+0x212>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800979c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d03e      	beq.n	8009824 <HAL_SPI_Transmit_DMA+0x2a0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d024      	beq.n	80097fc <HAL_SPI_Transmit_DMA+0x278>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f103 0220 	add.w	r2, r3, #32
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	611a      	str	r2, [r3, #16]

      errorcode = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f9 fea3 	bl	800353c <HAL_DMAEx_List_Start_IT>
 80097f6:	4603      	mov	r3, r0
 80097f8:	75fb      	strb	r3, [r7, #23]
 80097fa:	e025      	b.n	8009848 <HAL_SPI_Transmit_DMA+0x2c4>
    }
    else
    {
      /* Update SPI error code */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009802:	f043 0210 	orr.w	r2, r3, #16
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Unlock the process */
      __HAL_UNLOCK(hspi);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

      hspi->State = HAL_SPI_STATE_READY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      errorcode = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	75fb      	strb	r3, [r7, #23]
      return errorcode;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	e080      	b.n	8009926 <HAL_SPI_Transmit_DMA+0x3a2>
    }
  }
  else
  {
    errorcode = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800982e:	4619      	mov	r1, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3320      	adds	r3, #32
 8009836:	461a      	mov	r2, r3
                                 hspi->TxXferCount);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800983e:	b29b      	uxth	r3, r3
    errorcode = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009840:	f7f9 f98a 	bl	8002b58 <HAL_DMA_Start_IT>
 8009844:	4603      	mov	r3, r0
 8009846:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (errorcode != HAL_OK)
 8009848:	7dfb      	ldrb	r3, [r7, #23]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d013      	beq.n	8009876 <HAL_SPI_Transmit_DMA+0x2f2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009854:	f043 0210 	orr.w	r2, r3, #16
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    errorcode = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	e057      	b.n	8009926 <HAL_SPI_Transmit_DMA+0x3a2>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800987c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987e:	2b81      	cmp	r3, #129	; 0x81
 8009880:	d116      	bne.n	80098b0 <HAL_SPI_Transmit_DMA+0x32c>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	6812      	ldr	r2, [r2, #0]
 800988c:	0c1b      	lsrs	r3, r3, #16
 800988e:	041b      	lsls	r3, r3, #16
 8009890:	6053      	str	r3, [r2, #4]
 8009892:	e017      	b.n	80098c4 <HAL_SPI_Transmit_DMA+0x340>
 8009894:	40013000 	.word	0x40013000
 8009898:	50013000 	.word	0x50013000
 800989c:	40003800 	.word	0x40003800
 80098a0:	50003800 	.word	0x50003800
 80098a4:	08009d6f 	.word	0x08009d6f
 80098a8:	08009d29 	.word	0x08009d29
 80098ac:	08009d8b 	.word	0x08009d8b
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	0c1b      	lsrs	r3, r3, #16
 80098b8:	041b      	lsls	r3, r3, #16
 80098ba:	88f9      	ldrh	r1, [r7, #6]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	6812      	ldr	r2, [r2, #0]
 80098c0:	430b      	orrs	r3, r1
 80098c2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098d2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	691a      	ldr	r2, [r3, #16]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80098e2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10c      	bne.n	800991c <HAL_SPI_Transmit_DMA+0x398>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800990a:	d107      	bne.n	800991c <HAL_SPI_Transmit_DMA+0x398>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800991a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return errorcode;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop

08009930 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08a      	sub	sp, #40	; 0x28
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009948:	6a3a      	ldr	r2, [r7, #32]
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	4013      	ands	r3, r2
 800994e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009958:	2300      	movs	r3, #0
 800995a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009962:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3330      	adds	r3, #48	; 0x30
 800996a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009972:	2b00      	cmp	r3, #0
 8009974:	d010      	beq.n	8009998 <HAL_SPI_IRQHandler+0x68>
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699a      	ldr	r2, [r3, #24]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800998e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f9bf 	bl	8009d14 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009996:	e19a      	b.n	8009cce <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d113      	bne.n	80099ca <HAL_SPI_IRQHandler+0x9a>
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10e      	bne.n	80099ca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d009      	beq.n	80099ca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
    hspi->RxISR(hspi);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	4798      	blx	r3
    handled = 1UL;
 80099c6:	2301      	movs	r3, #1
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10f      	bne.n	80099f4 <HAL_SPI_IRQHandler+0xc4>
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00a      	beq.n	80099f4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d105      	bne.n	80099f4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	4798      	blx	r3
    handled = 1UL;
 80099f0:	2301      	movs	r3, #1
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10f      	bne.n	8009a1e <HAL_SPI_IRQHandler+0xee>
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d105      	bne.n	8009a1e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
    handled = 1UL;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f040 814f 	bne.w	8009cc4 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	f003 0308 	and.w	r3, r3, #8
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 808b 	beq.w	8009b48 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699a      	ldr	r2, [r3, #24]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0208 	orr.w	r2, r2, #8
 8009a40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	699a      	ldr	r2, [r3, #24]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f042 0210 	orr.w	r2, r2, #16
 8009a50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a60:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691a      	ldr	r2, [r3, #16]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0208 	bic.w	r2, r2, #8
 8009a70:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d13d      	bne.n	8009afc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009a80:	e036      	b.n	8009af0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	2b0f      	cmp	r3, #15
 8009a88:	d90b      	bls.n	8009aa2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a94:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a9a:	1d1a      	adds	r2, r3, #4
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009aa0:	e01d      	b.n	8009ade <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	2b07      	cmp	r3, #7
 8009aa8:	d90b      	bls.n	8009ac2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	8812      	ldrh	r2, [r2, #0]
 8009ab2:	b292      	uxth	r2, r2
 8009ab4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aba:	1c9a      	adds	r2, r3, #2
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ac0:	e00d      	b.n	8009ade <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ace:	7812      	ldrb	r2, [r2, #0]
 8009ad0:	b2d2      	uxtb	r2, r2
 8009ad2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1c2      	bne.n	8009a82 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f981 	bl	8009e04 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7f7 ffe1 	bl	8001adc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009b1a:	e0d8      	b.n	8009cce <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009b1c:	7cfb      	ldrb	r3, [r7, #19]
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d103      	bne.n	8009b2a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f8e2 	bl	8009cec <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009b28:	e0ce      	b.n	8009cc8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009b2a:	7cfb      	ldrb	r3, [r7, #19]
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d103      	bne.n	8009b38 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f8d1 	bl	8009cd8 <HAL_SPI_RxCpltCallback>
    return;
 8009b36:	e0c7      	b.n	8009cc8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009b38:	7cfb      	ldrb	r3, [r7, #19]
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	f040 80c4 	bne.w	8009cc8 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7f7 ffe1 	bl	8001b08 <HAL_SPI_TxCpltCallback>
    return;
 8009b46:	e0bf      	b.n	8009cc8 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 80bd 	beq.w	8009cce <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00f      	beq.n	8009b7e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b64:	f043 0204 	orr.w	r2, r3, #4
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699a      	ldr	r2, [r3, #24]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00f      	beq.n	8009ba8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b8e:	f043 0201 	orr.w	r2, r3, #1
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	699a      	ldr	r2, [r3, #24]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00f      	beq.n	8009bd2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb8:	f043 0208 	orr.w	r2, r3, #8
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699a      	ldr	r2, [r3, #24]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	f003 0320 	and.w	r3, r3, #32
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00f      	beq.n	8009bfc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0220 	orr.w	r2, r2, #32
 8009bfa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d062      	beq.n	8009ccc <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 0201 	bic.w	r2, r2, #1
 8009c14:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8009c24:	f023 0303 	bic.w	r3, r3, #3
 8009c28:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c34:	d13e      	bne.n	8009cb4 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009c44:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d015      	beq.n	8009c7c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c56:	4a1f      	ldr	r2, [pc, #124]	; (8009cd4 <HAL_SPI_IRQHandler+0x3a4>)
 8009c58:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f8 ffd9 	bl	8002c18 <HAL_DMA_Abort_IT>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d007      	beq.n	8009c7c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d022      	beq.n	8009ccc <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c8c:	4a11      	ldr	r2, [pc, #68]	; (8009cd4 <HAL_SPI_IRQHandler+0x3a4>)
 8009c8e:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f8 ffbe 	bl	8002c18 <HAL_DMA_Abort_IT>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d014      	beq.n	8009ccc <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ca8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009cb2:	e00b      	b.n	8009ccc <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        HAL_SPI_ErrorCallback(hspi);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7f7 ff0d 	bl	8001adc <HAL_SPI_ErrorCallback>
    return;
 8009cc2:	e003      	b.n	8009ccc <HAL_SPI_IRQHandler+0x39c>
    return;
 8009cc4:	bf00      	nop
 8009cc6:	e002      	b.n	8009cce <HAL_SPI_IRQHandler+0x39e>
    return;
 8009cc8:	bf00      	nop
 8009cca:	e000      	b.n	8009cce <HAL_SPI_IRQHandler+0x39e>
    return;
 8009ccc:	bf00      	nop
  }
}
 8009cce:	3728      	adds	r7, #40	; 0x28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	08009dd1 	.word	0x08009dd1

08009cd8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d34:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b07      	cmp	r3, #7
 8009d40:	d011      	beq.n	8009d66 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4a:	2b81      	cmp	r3, #129	; 0x81
 8009d4c:	d103      	bne.n	8009d56 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7f7 feda 	bl	8001b08 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009d54:	e007      	b.n	8009d66 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f042 0208 	orr.w	r2, r2, #8
 8009d64:	611a      	str	r2, [r3, #16]
}
 8009d66:	bf00      	nop
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff ffbf 	bl	8009d00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d96:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7f9 f8e2 	bl	8002f62 <HAL_DMA_GetError>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d011      	beq.n	8009dc8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 f82d 	bl	8009e04 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db0:	f043 0210 	orr.w	r2, r3, #16
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f7f7 fe8a 	bl	8001adc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009dc8:	bf00      	nop
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ddc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f7f7 fe70 	bl	8001adc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009dfc:	bf00      	nop
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699a      	ldr	r2, [r3, #24]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0208 	orr.w	r2, r2, #8
 8009e22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	699a      	ldr	r2, [r3, #24]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f042 0210 	orr.w	r2, r2, #16
 8009e32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f022 0201 	bic.w	r2, r2, #1
 8009e42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6812      	ldr	r2, [r2, #0]
 8009e4e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009e66:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d014      	beq.n	8009e9e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00f      	beq.n	8009e9e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	699a      	ldr	r2, [r3, #24]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f042 0220 	orr.w	r2, r2, #32
 8009e9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d014      	beq.n	8009ed4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00f      	beq.n	8009ed4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eba:	f043 0204 	orr.w	r2, r3, #4
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699a      	ldr	r2, [r3, #24]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ed2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00f      	beq.n	8009efe <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ee4:	f043 0201 	orr.w	r2, r3, #1
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699a      	ldr	r2, [r3, #24]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009efc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00f      	beq.n	8009f28 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f0e:	f043 0208 	orr.w	r2, r3, #8
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699a      	ldr	r2, [r3, #24]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f26:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009f38:	bf00      	nop
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4613      	mov	r3, r2
 8009f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f54:	e010      	b.n	8009f78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f56:	f7f7 ff05 	bl	8001d64 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d803      	bhi.n	8009f6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6c:	d102      	bne.n	8009f74 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d101      	bne.n	8009f78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e00f      	b.n	8009f98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695a      	ldr	r2, [r3, #20]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	4013      	ands	r3, r2
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	bf0c      	ite	eq
 8009f88:	2301      	moveq	r3, #1
 8009f8a:	2300      	movne	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d0df      	beq.n	8009f56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fac:	095b      	lsrs	r3, r3, #5
 8009fae:	3301      	adds	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	3307      	adds	r3, #7
 8009fbe:	08db      	lsrs	r3, r3, #3
 8009fc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d12e      	bne.n	800a04a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	e028      	b.n	800a04c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2202      	movs	r2, #2
 800a006:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0201 	bic.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800a026:	ea42 0103 	orr.w	r1, r2, r3
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	e000      	b.n	800a04c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
  }
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e049      	b.n	800a0fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7f7 f878 	bl	8001174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	4619      	mov	r1, r3
 800a096:	4610      	mov	r0, r2
 800a098:	f000 fb50 	bl	800a73c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d001      	beq.n	800a120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e072      	b.n	800a206 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2202      	movs	r2, #2
 800a124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f042 0201 	orr.w	r2, r2, #1
 800a136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a35      	ldr	r2, [pc, #212]	; (800a214 <HAL_TIM_Base_Start_IT+0x10c>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d040      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a34      	ldr	r2, [pc, #208]	; (800a218 <HAL_TIM_Base_Start_IT+0x110>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d03b      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a154:	d036      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a15e:	d031      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a2d      	ldr	r2, [pc, #180]	; (800a21c <HAL_TIM_Base_Start_IT+0x114>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d02c      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a2c      	ldr	r2, [pc, #176]	; (800a220 <HAL_TIM_Base_Start_IT+0x118>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d027      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a2a      	ldr	r2, [pc, #168]	; (800a224 <HAL_TIM_Base_Start_IT+0x11c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d022      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a29      	ldr	r2, [pc, #164]	; (800a228 <HAL_TIM_Base_Start_IT+0x120>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d01d      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a27      	ldr	r2, [pc, #156]	; (800a22c <HAL_TIM_Base_Start_IT+0x124>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d018      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a26      	ldr	r2, [pc, #152]	; (800a230 <HAL_TIM_Base_Start_IT+0x128>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d013      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a24      	ldr	r2, [pc, #144]	; (800a234 <HAL_TIM_Base_Start_IT+0x12c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00e      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a23      	ldr	r2, [pc, #140]	; (800a238 <HAL_TIM_Base_Start_IT+0x130>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d009      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a21      	ldr	r2, [pc, #132]	; (800a23c <HAL_TIM_Base_Start_IT+0x134>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d004      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0xbc>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a20      	ldr	r2, [pc, #128]	; (800a240 <HAL_TIM_Base_Start_IT+0x138>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d115      	bne.n	800a1f0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	4b1e      	ldr	r3, [pc, #120]	; (800a244 <HAL_TIM_Base_Start_IT+0x13c>)
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b06      	cmp	r3, #6
 800a1d4:	d015      	beq.n	800a202 <HAL_TIM_Base_Start_IT+0xfa>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1dc:	d011      	beq.n	800a202 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f042 0201 	orr.w	r2, r2, #1
 800a1ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ee:	e008      	b.n	800a202 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0201 	orr.w	r2, r2, #1
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	e000      	b.n	800a204 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	40012c00 	.word	0x40012c00
 800a218:	50012c00 	.word	0x50012c00
 800a21c:	40000400 	.word	0x40000400
 800a220:	50000400 	.word	0x50000400
 800a224:	40000800 	.word	0x40000800
 800a228:	50000800 	.word	0x50000800
 800a22c:	40000c00 	.word	0x40000c00
 800a230:	50000c00 	.word	0x50000c00
 800a234:	40013400 	.word	0x40013400
 800a238:	50013400 	.word	0x50013400
 800a23c:	40014000 	.word	0x40014000
 800a240:	50014000 	.word	0x50014000
 800a244:	00010007 	.word	0x00010007

0800a248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f003 0302 	and.w	r3, r3, #2
 800a266:	2b00      	cmp	r3, #0
 800a268:	d020      	beq.n	800a2ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d01b      	beq.n	800a2ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f06f 0202 	mvn.w	r2, #2
 800a27c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	f003 0303 	and.w	r3, r3, #3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fa34 	bl	800a700 <HAL_TIM_IC_CaptureCallback>
 800a298:	e005      	b.n	800a2a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa26 	bl	800a6ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fa37 	bl	800a714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f003 0304 	and.w	r3, r3, #4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d020      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01b      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0204 	mvn.w	r2, #4
 800a2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa0e 	bl	800a700 <HAL_TIM_IC_CaptureCallback>
 800a2e4:	e005      	b.n	800a2f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fa00 	bl	800a6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fa11 	bl	800a714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f003 0308 	and.w	r3, r3, #8
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d020      	beq.n	800a344 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01b      	beq.n	800a344 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0208 	mvn.w	r2, #8
 800a314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2204      	movs	r2, #4
 800a31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f9e8 	bl	800a700 <HAL_TIM_IC_CaptureCallback>
 800a330:	e005      	b.n	800a33e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f9da 	bl	800a6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f9eb 	bl	800a714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f003 0310 	and.w	r3, r3, #16
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d020      	beq.n	800a390 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0310 	and.w	r3, r3, #16
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01b      	beq.n	800a390 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f06f 0210 	mvn.w	r2, #16
 800a360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2208      	movs	r2, #8
 800a366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f9c2 	bl	800a700 <HAL_TIM_IC_CaptureCallback>
 800a37c:	e005      	b.n	800a38a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f9b4 	bl	800a6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f9c5 	bl	800a714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00c      	beq.n	800a3b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d007      	beq.n	800a3b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0201 	mvn.w	r2, #1
 800a3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7f6 fd68 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00c      	beq.n	800a3e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d007      	beq.n	800a3e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800a3da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fc0f 	bl	800ac00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00c      	beq.n	800a406 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d007      	beq.n	800a406 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fc07 	bl	800ac14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00c      	beq.n	800a42a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a416:	2b00      	cmp	r3, #0
 800a418:	d007      	beq.n	800a42a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f97f 	bl	800a728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	f003 0320 	and.w	r3, r3, #32
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00c      	beq.n	800a44e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d007      	beq.n	800a44e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f06f 0220 	mvn.w	r2, #32
 800a446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fbcf 	bl	800abec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00c      	beq.n	800a472 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d007      	beq.n	800a472 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fbdb 	bl	800ac28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00c      	beq.n	800a496 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d007      	beq.n	800a496 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fbd3 	bl	800ac3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00c      	beq.n	800a4ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d007      	beq.n	800a4ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fbcb 	bl	800ac50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00c      	beq.n	800a4de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d007      	beq.n	800a4de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fbc3 	bl	800ac64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <HAL_TIM_ConfigClockSource+0x1c>
 800a500:	2302      	movs	r3, #2
 800a502:	e0e6      	b.n	800a6d2 <HAL_TIM_ConfigClockSource+0x1ea>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a522:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a52e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a67      	ldr	r2, [pc, #412]	; (800a6dc <HAL_TIM_ConfigClockSource+0x1f4>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	f000 80b1 	beq.w	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a544:	4a65      	ldr	r2, [pc, #404]	; (800a6dc <HAL_TIM_ConfigClockSource+0x1f4>)
 800a546:	4293      	cmp	r3, r2
 800a548:	f200 80b6 	bhi.w	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a54c:	4a64      	ldr	r2, [pc, #400]	; (800a6e0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	f000 80a9 	beq.w	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a554:	4a62      	ldr	r2, [pc, #392]	; (800a6e0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a556:	4293      	cmp	r3, r2
 800a558:	f200 80ae 	bhi.w	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a55c:	4a61      	ldr	r2, [pc, #388]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	f000 80a1 	beq.w	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a564:	4a5f      	ldr	r2, [pc, #380]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a566:	4293      	cmp	r3, r2
 800a568:	f200 80a6 	bhi.w	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a56c:	4a5e      	ldr	r2, [pc, #376]	; (800a6e8 <HAL_TIM_ConfigClockSource+0x200>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	f000 8099 	beq.w	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a574:	4a5c      	ldr	r2, [pc, #368]	; (800a6e8 <HAL_TIM_ConfigClockSource+0x200>)
 800a576:	4293      	cmp	r3, r2
 800a578:	f200 809e 	bhi.w	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a57c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a580:	f000 8091 	beq.w	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a584:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a588:	f200 8096 	bhi.w	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a58c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a590:	f000 8089 	beq.w	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a598:	f200 808e 	bhi.w	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a59c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a0:	d03e      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x138>
 800a5a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a6:	f200 8087 	bhi.w	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ae:	f000 8086 	beq.w	800a6be <HAL_TIM_ConfigClockSource+0x1d6>
 800a5b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b6:	d87f      	bhi.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5b8:	2b70      	cmp	r3, #112	; 0x70
 800a5ba:	d01a      	beq.n	800a5f2 <HAL_TIM_ConfigClockSource+0x10a>
 800a5bc:	2b70      	cmp	r3, #112	; 0x70
 800a5be:	d87b      	bhi.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5c0:	2b60      	cmp	r3, #96	; 0x60
 800a5c2:	d050      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x17e>
 800a5c4:	2b60      	cmp	r3, #96	; 0x60
 800a5c6:	d877      	bhi.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5c8:	2b50      	cmp	r3, #80	; 0x50
 800a5ca:	d03c      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x15e>
 800a5cc:	2b50      	cmp	r3, #80	; 0x50
 800a5ce:	d873      	bhi.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5d0:	2b40      	cmp	r3, #64	; 0x40
 800a5d2:	d058      	beq.n	800a686 <HAL_TIM_ConfigClockSource+0x19e>
 800a5d4:	2b40      	cmp	r3, #64	; 0x40
 800a5d6:	d86f      	bhi.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5d8:	2b30      	cmp	r3, #48	; 0x30
 800a5da:	d064      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a5dc:	2b30      	cmp	r3, #48	; 0x30
 800a5de:	d86b      	bhi.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5e0:	2b20      	cmp	r3, #32
 800a5e2:	d060      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a5e4:	2b20      	cmp	r3, #32
 800a5e6:	d867      	bhi.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d05c      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a5ec:	2b10      	cmp	r3, #16
 800a5ee:	d05a      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a5f0:	e062      	b.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a602:	f000 fa11 	bl	800aa28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	609a      	str	r2, [r3, #8]
      break;
 800a61e:	e04f      	b.n	800a6c0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a630:	f000 f9fa 	bl	800aa28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689a      	ldr	r2, [r3, #8]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a642:	609a      	str	r2, [r3, #8]
      break;
 800a644:	e03c      	b.n	800a6c0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a652:	461a      	mov	r2, r3
 800a654:	f000 f96c 	bl	800a930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2150      	movs	r1, #80	; 0x50
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 f9c5 	bl	800a9ee <TIM_ITRx_SetConfig>
      break;
 800a664:	e02c      	b.n	800a6c0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a672:	461a      	mov	r2, r3
 800a674:	f000 f98b 	bl	800a98e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2160      	movs	r1, #96	; 0x60
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 f9b5 	bl	800a9ee <TIM_ITRx_SetConfig>
      break;
 800a684:	e01c      	b.n	800a6c0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a692:	461a      	mov	r2, r3
 800a694:	f000 f94c 	bl	800a930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2140      	movs	r1, #64	; 0x40
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 f9a5 	bl	800a9ee <TIM_ITRx_SetConfig>
      break;
 800a6a4:	e00c      	b.n	800a6c0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	f000 f99c 	bl	800a9ee <TIM_ITRx_SetConfig>
      break;
 800a6b6:	e003      	b.n	800a6c0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a6bc:	e000      	b.n	800a6c0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a6be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	00100070 	.word	0x00100070
 800a6e0:	00100040 	.word	0x00100040
 800a6e4:	00100030 	.word	0x00100030
 800a6e8:	00100020 	.word	0x00100020

0800a6ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a68      	ldr	r2, [pc, #416]	; (800a8f0 <TIM_Base_SetConfig+0x1b4>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d02b      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a67      	ldr	r2, [pc, #412]	; (800a8f4 <TIM_Base_SetConfig+0x1b8>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d027      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a762:	d023      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a76a:	d01f      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a62      	ldr	r2, [pc, #392]	; (800a8f8 <TIM_Base_SetConfig+0x1bc>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d01b      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a61      	ldr	r2, [pc, #388]	; (800a8fc <TIM_Base_SetConfig+0x1c0>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d017      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a60      	ldr	r2, [pc, #384]	; (800a900 <TIM_Base_SetConfig+0x1c4>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d013      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a5f      	ldr	r2, [pc, #380]	; (800a904 <TIM_Base_SetConfig+0x1c8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d00f      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a5e      	ldr	r2, [pc, #376]	; (800a908 <TIM_Base_SetConfig+0x1cc>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d00b      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a5d      	ldr	r2, [pc, #372]	; (800a90c <TIM_Base_SetConfig+0x1d0>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d007      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a5c      	ldr	r2, [pc, #368]	; (800a910 <TIM_Base_SetConfig+0x1d4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d003      	beq.n	800a7ac <TIM_Base_SetConfig+0x70>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a5b      	ldr	r2, [pc, #364]	; (800a914 <TIM_Base_SetConfig+0x1d8>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d108      	bne.n	800a7be <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a4b      	ldr	r2, [pc, #300]	; (800a8f0 <TIM_Base_SetConfig+0x1b4>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d043      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a4a      	ldr	r2, [pc, #296]	; (800a8f4 <TIM_Base_SetConfig+0x1b8>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d03f      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d4:	d03b      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7dc:	d037      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a45      	ldr	r2, [pc, #276]	; (800a8f8 <TIM_Base_SetConfig+0x1bc>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d033      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a44      	ldr	r2, [pc, #272]	; (800a8fc <TIM_Base_SetConfig+0x1c0>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d02f      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a43      	ldr	r2, [pc, #268]	; (800a900 <TIM_Base_SetConfig+0x1c4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d02b      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a42      	ldr	r2, [pc, #264]	; (800a904 <TIM_Base_SetConfig+0x1c8>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d027      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a41      	ldr	r2, [pc, #260]	; (800a908 <TIM_Base_SetConfig+0x1cc>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d023      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a40      	ldr	r2, [pc, #256]	; (800a90c <TIM_Base_SetConfig+0x1d0>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d01f      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a3f      	ldr	r2, [pc, #252]	; (800a910 <TIM_Base_SetConfig+0x1d4>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d01b      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a3e      	ldr	r2, [pc, #248]	; (800a914 <TIM_Base_SetConfig+0x1d8>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d017      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a3d      	ldr	r2, [pc, #244]	; (800a918 <TIM_Base_SetConfig+0x1dc>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d013      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a3c      	ldr	r2, [pc, #240]	; (800a91c <TIM_Base_SetConfig+0x1e0>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d00f      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a3b      	ldr	r2, [pc, #236]	; (800a920 <TIM_Base_SetConfig+0x1e4>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d00b      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a3a      	ldr	r2, [pc, #232]	; (800a924 <TIM_Base_SetConfig+0x1e8>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d007      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a39      	ldr	r2, [pc, #228]	; (800a928 <TIM_Base_SetConfig+0x1ec>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d003      	beq.n	800a84e <TIM_Base_SetConfig+0x112>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a38      	ldr	r2, [pc, #224]	; (800a92c <TIM_Base_SetConfig+0x1f0>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d108      	bne.n	800a860 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a1a      	ldr	r2, [pc, #104]	; (800a8f0 <TIM_Base_SetConfig+0x1b4>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d023      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a19      	ldr	r2, [pc, #100]	; (800a8f4 <TIM_Base_SetConfig+0x1b8>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d01f      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a1e      	ldr	r2, [pc, #120]	; (800a910 <TIM_Base_SetConfig+0x1d4>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d01b      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a1d      	ldr	r2, [pc, #116]	; (800a914 <TIM_Base_SetConfig+0x1d8>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d017      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a1c      	ldr	r2, [pc, #112]	; (800a918 <TIM_Base_SetConfig+0x1dc>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d013      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a1b      	ldr	r2, [pc, #108]	; (800a91c <TIM_Base_SetConfig+0x1e0>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00f      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a1a      	ldr	r2, [pc, #104]	; (800a920 <TIM_Base_SetConfig+0x1e4>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d00b      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a19      	ldr	r2, [pc, #100]	; (800a924 <TIM_Base_SetConfig+0x1e8>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d007      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a18      	ldr	r2, [pc, #96]	; (800a928 <TIM_Base_SetConfig+0x1ec>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d003      	beq.n	800a8d4 <TIM_Base_SetConfig+0x198>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a17      	ldr	r2, [pc, #92]	; (800a92c <TIM_Base_SetConfig+0x1f0>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d103      	bne.n	800a8dc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	615a      	str	r2, [r3, #20]
}
 800a8e2:	bf00      	nop
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	40012c00 	.word	0x40012c00
 800a8f4:	50012c00 	.word	0x50012c00
 800a8f8:	40000400 	.word	0x40000400
 800a8fc:	50000400 	.word	0x50000400
 800a900:	40000800 	.word	0x40000800
 800a904:	50000800 	.word	0x50000800
 800a908:	40000c00 	.word	0x40000c00
 800a90c:	50000c00 	.word	0x50000c00
 800a910:	40013400 	.word	0x40013400
 800a914:	50013400 	.word	0x50013400
 800a918:	40014000 	.word	0x40014000
 800a91c:	50014000 	.word	0x50014000
 800a920:	40014400 	.word	0x40014400
 800a924:	50014400 	.word	0x50014400
 800a928:	40014800 	.word	0x40014800
 800a92c:	50014800 	.word	0x50014800

0800a930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6a1b      	ldr	r3, [r3, #32]
 800a940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	f023 0201 	bic.w	r2, r3, #1
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a95a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	011b      	lsls	r3, r3, #4
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	4313      	orrs	r3, r2
 800a964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f023 030a 	bic.w	r3, r3, #10
 800a96c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	4313      	orrs	r3, r2
 800a974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	621a      	str	r2, [r3, #32]
}
 800a982:	bf00      	nop
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98e:	b480      	push	{r7}
 800a990:	b087      	sub	sp, #28
 800a992:	af00      	add	r7, sp, #0
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	f023 0210 	bic.w	r2, r3, #16
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	031b      	lsls	r3, r3, #12
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	621a      	str	r2, [r3, #32]
}
 800a9e2:	bf00      	nop
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b085      	sub	sp, #20
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800aa04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	f043 0307 	orr.w	r3, r3, #7
 800aa14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	609a      	str	r2, [r3, #8]
}
 800aa1c:	bf00      	nop
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
 800aa34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	021a      	lsls	r2, r3, #8
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	431a      	orrs	r2, r3
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	609a      	str	r2, [r3, #8]
}
 800aa5c:	bf00      	nop
 800aa5e:	371c      	adds	r7, #28
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d101      	bne.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e097      	b.n	800abb0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a45      	ldr	r2, [pc, #276]	; (800abbc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00e      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a44      	ldr	r2, [pc, #272]	; (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d009      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a42      	ldr	r2, [pc, #264]	; (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d004      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a41      	ldr	r2, [pc, #260]	; (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d108      	bne.n	800aada <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aace:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800aae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a2f      	ldr	r2, [pc, #188]	; (800abbc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d040      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a2e      	ldr	r2, [pc, #184]	; (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d03b      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab14:	d036      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab1e:	d031      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a29      	ldr	r2, [pc, #164]	; (800abcc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d02c      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a28      	ldr	r2, [pc, #160]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d027      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a26      	ldr	r2, [pc, #152]	; (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d022      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a25      	ldr	r2, [pc, #148]	; (800abd8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d01d      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a23      	ldr	r2, [pc, #140]	; (800abdc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d018      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a22      	ldr	r2, [pc, #136]	; (800abe0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d013      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a18      	ldr	r2, [pc, #96]	; (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00e      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a17      	ldr	r2, [pc, #92]	; (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d009      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a1b      	ldr	r2, [pc, #108]	; (800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d004      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a1a      	ldr	r2, [pc, #104]	; (800abe8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d10c      	bne.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	40012c00 	.word	0x40012c00
 800abc0:	50012c00 	.word	0x50012c00
 800abc4:	40013400 	.word	0x40013400
 800abc8:	50013400 	.word	0x50013400
 800abcc:	40000400 	.word	0x40000400
 800abd0:	50000400 	.word	0x50000400
 800abd4:	40000800 	.word	0x40000800
 800abd8:	50000800 	.word	0x50000800
 800abdc:	40000c00 	.word	0x40000c00
 800abe0:	50000c00 	.word	0x50000c00
 800abe4:	40014000 	.word	0x40014000
 800abe8:	50014000 	.word	0x50014000

0800abec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e042      	b.n	800ad10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d106      	bne.n	800aca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7f6 fa91 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2224      	movs	r2, #36	; 0x24
 800aca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f022 0201 	bic.w	r2, r2, #1
 800acb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f9ca 	bl	800b05c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f825 	bl	800ad18 <UART_SetConfig>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d101      	bne.n	800acd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e01b      	b.n	800ad10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ace6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689a      	ldr	r2, [r3, #8]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f042 0201 	orr.w	r2, r2, #1
 800ad06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa49 	bl	800b1a0 <UART_CheckIdleState>
 800ad0e:	4603      	mov	r3, r0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad1c:	b094      	sub	sp, #80	; 0x50
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	4b7e      	ldr	r3, [pc, #504]	; (800af28 <UART_SetConfig+0x210>)
 800ad2e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	431a      	orrs	r2, r3
 800ad40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4977      	ldr	r1, [pc, #476]	; (800af2c <UART_SetConfig+0x214>)
 800ad50:	4019      	ands	r1, r3
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad58:	430b      	orrs	r3, r1
 800ad5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	68d9      	ldr	r1, [r3, #12]
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	ea40 0301 	orr.w	r3, r0, r1
 800ad72:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	4b6a      	ldr	r3, [pc, #424]	; (800af28 <UART_SetConfig+0x210>)
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d009      	beq.n	800ad98 <UART_SetConfig+0x80>
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	4b69      	ldr	r3, [pc, #420]	; (800af30 <UART_SetConfig+0x218>)
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d004      	beq.n	800ad98 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad90:	6a1a      	ldr	r2, [r3, #32]
 800ad92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad94:	4313      	orrs	r3, r2
 800ad96:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800ada2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adac:	430b      	orrs	r3, r1
 800adae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb6:	f023 000f 	bic.w	r0, r3, #15
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	ea40 0301 	orr.w	r3, r0, r1
 800adc6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	4b59      	ldr	r3, [pc, #356]	; (800af34 <UART_SetConfig+0x21c>)
 800adce:	429a      	cmp	r2, r3
 800add0:	d102      	bne.n	800add8 <UART_SetConfig+0xc0>
 800add2:	2301      	movs	r3, #1
 800add4:	64bb      	str	r3, [r7, #72]	; 0x48
 800add6:	e029      	b.n	800ae2c <UART_SetConfig+0x114>
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	4b56      	ldr	r3, [pc, #344]	; (800af38 <UART_SetConfig+0x220>)
 800adde:	429a      	cmp	r2, r3
 800ade0:	d102      	bne.n	800ade8 <UART_SetConfig+0xd0>
 800ade2:	2302      	movs	r3, #2
 800ade4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ade6:	e021      	b.n	800ae2c <UART_SetConfig+0x114>
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	4b53      	ldr	r3, [pc, #332]	; (800af3c <UART_SetConfig+0x224>)
 800adee:	429a      	cmp	r2, r3
 800adf0:	d102      	bne.n	800adf8 <UART_SetConfig+0xe0>
 800adf2:	2304      	movs	r3, #4
 800adf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800adf6:	e019      	b.n	800ae2c <UART_SetConfig+0x114>
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	4b50      	ldr	r3, [pc, #320]	; (800af40 <UART_SetConfig+0x228>)
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d102      	bne.n	800ae08 <UART_SetConfig+0xf0>
 800ae02:	2308      	movs	r3, #8
 800ae04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae06:	e011      	b.n	800ae2c <UART_SetConfig+0x114>
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	4b4d      	ldr	r3, [pc, #308]	; (800af44 <UART_SetConfig+0x22c>)
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d102      	bne.n	800ae18 <UART_SetConfig+0x100>
 800ae12:	2310      	movs	r3, #16
 800ae14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae16:	e009      	b.n	800ae2c <UART_SetConfig+0x114>
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	4b42      	ldr	r3, [pc, #264]	; (800af28 <UART_SetConfig+0x210>)
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d102      	bne.n	800ae28 <UART_SetConfig+0x110>
 800ae22:	2320      	movs	r3, #32
 800ae24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae26:	e001      	b.n	800ae2c <UART_SetConfig+0x114>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	4b3d      	ldr	r3, [pc, #244]	; (800af28 <UART_SetConfig+0x210>)
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d005      	beq.n	800ae42 <UART_SetConfig+0x12a>
 800ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	4b3d      	ldr	r3, [pc, #244]	; (800af30 <UART_SetConfig+0x218>)
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	f040 8085 	bne.w	800af4c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ae42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae44:	2200      	movs	r2, #0
 800ae46:	623b      	str	r3, [r7, #32]
 800ae48:	627a      	str	r2, [r7, #36]	; 0x24
 800ae4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ae4e:	f7fc fd3d 	bl	80078cc <HAL_RCCEx_GetPeriphCLKFreq>
 800ae52:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f000 80e8 	beq.w	800b02c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	4a39      	ldr	r2, [pc, #228]	; (800af48 <UART_SetConfig+0x230>)
 800ae62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae66:	461a      	mov	r2, r3
 800ae68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	4613      	mov	r3, r2
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	4413      	add	r3, r2
 800ae7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d305      	bcc.n	800ae8c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d903      	bls.n	800ae94 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ae92:	e048      	b.n	800af26 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae96:	2200      	movs	r2, #0
 800ae98:	61bb      	str	r3, [r7, #24]
 800ae9a:	61fa      	str	r2, [r7, #28]
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	4a29      	ldr	r2, [pc, #164]	; (800af48 <UART_SetConfig+0x230>)
 800aea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	2200      	movs	r2, #0
 800aeaa:	613b      	str	r3, [r7, #16]
 800aeac:	617a      	str	r2, [r7, #20]
 800aeae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aeb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800aeb6:	f7f5 f9e3 	bl	8000280 <__aeabi_uldivmod>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4610      	mov	r0, r2
 800aec0:	4619      	mov	r1, r3
 800aec2:	f04f 0200 	mov.w	r2, #0
 800aec6:	f04f 0300 	mov.w	r3, #0
 800aeca:	020b      	lsls	r3, r1, #8
 800aecc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aed0:	0202      	lsls	r2, r0, #8
 800aed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aed4:	6849      	ldr	r1, [r1, #4]
 800aed6:	0849      	lsrs	r1, r1, #1
 800aed8:	2000      	movs	r0, #0
 800aeda:	460c      	mov	r4, r1
 800aedc:	4605      	mov	r5, r0
 800aede:	eb12 0804 	adds.w	r8, r2, r4
 800aee2:	eb43 0905 	adc.w	r9, r3, r5
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	60bb      	str	r3, [r7, #8]
 800aeee:	60fa      	str	r2, [r7, #12]
 800aef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aef4:	4640      	mov	r0, r8
 800aef6:	4649      	mov	r1, r9
 800aef8:	f7f5 f9c2 	bl	8000280 <__aeabi_uldivmod>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4613      	mov	r3, r2
 800af02:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af0a:	d308      	bcc.n	800af1e <UART_SetConfig+0x206>
 800af0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af12:	d204      	bcs.n	800af1e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af1a:	60da      	str	r2, [r3, #12]
 800af1c:	e003      	b.n	800af26 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800af24:	e082      	b.n	800b02c <UART_SetConfig+0x314>
 800af26:	e081      	b.n	800b02c <UART_SetConfig+0x314>
 800af28:	46002400 	.word	0x46002400
 800af2c:	cfff69f3 	.word	0xcfff69f3
 800af30:	56002400 	.word	0x56002400
 800af34:	40013800 	.word	0x40013800
 800af38:	40004400 	.word	0x40004400
 800af3c:	40004800 	.word	0x40004800
 800af40:	40004c00 	.word	0x40004c00
 800af44:	40005000 	.word	0x40005000
 800af48:	0802933c 	.word	0x0802933c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	69db      	ldr	r3, [r3, #28]
 800af50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af54:	d13c      	bne.n	800afd0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800af56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af58:	2200      	movs	r2, #0
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	607a      	str	r2, [r7, #4]
 800af5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af62:	f7fc fcb3 	bl	80078cc <HAL_RCCEx_GetPeriphCLKFreq>
 800af66:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d05e      	beq.n	800b02c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	4a39      	ldr	r2, [pc, #228]	; (800b058 <UART_SetConfig+0x340>)
 800af74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af78:	461a      	mov	r2, r3
 800af7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af80:	005a      	lsls	r2, r3, #1
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	085b      	lsrs	r3, r3, #1
 800af88:	441a      	add	r2, r3
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af92:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d916      	bls.n	800afc8 <UART_SetConfig+0x2b0>
 800af9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa0:	d212      	bcs.n	800afc8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	f023 030f 	bic.w	r3, r3, #15
 800afaa:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afae:	085b      	lsrs	r3, r3, #1
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	f003 0307 	and.w	r3, r3, #7
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800afba:	4313      	orrs	r3, r2
 800afbc:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800afbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800afc4:	60da      	str	r2, [r3, #12]
 800afc6:	e031      	b.n	800b02c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800afce:	e02d      	b.n	800b02c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800afd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd2:	2200      	movs	r2, #0
 800afd4:	469a      	mov	sl, r3
 800afd6:	4693      	mov	fp, r2
 800afd8:	4650      	mov	r0, sl
 800afda:	4659      	mov	r1, fp
 800afdc:	f7fc fc76 	bl	80078cc <HAL_RCCEx_GetPeriphCLKFreq>
 800afe0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800afe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d021      	beq.n	800b02c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	4a1a      	ldr	r2, [pc, #104]	; (800b058 <UART_SetConfig+0x340>)
 800afee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aff2:	461a      	mov	r2, r3
 800aff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff6:	fbb3 f2f2 	udiv	r2, r3, r2
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	085b      	lsrs	r3, r3, #1
 800b000:	441a      	add	r2, r3
 800b002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00e:	2b0f      	cmp	r3, #15
 800b010:	d909      	bls.n	800b026 <UART_SetConfig+0x30e>
 800b012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b018:	d205      	bcs.n	800b026 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	60da      	str	r2, [r3, #12]
 800b024:	e002      	b.n	800b02c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	2201      	movs	r2, #1
 800b030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	2201      	movs	r2, #1
 800b038:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03e:	2200      	movs	r2, #0
 800b040:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	2200      	movs	r2, #0
 800b046:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b048:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3750      	adds	r7, #80	; 0x50
 800b050:	46bd      	mov	sp, r7
 800b052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b056:	bf00      	nop
 800b058:	0802933c 	.word	0x0802933c

0800b05c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b068:	f003 0308 	and.w	r3, r3, #8
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00a      	beq.n	800b086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	430a      	orrs	r2, r1
 800b084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ac:	f003 0302 	and.w	r3, r3, #2
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00a      	beq.n	800b0ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00a      	beq.n	800b0ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	430a      	orrs	r2, r1
 800b0ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f0:	f003 0310 	and.w	r3, r3, #16
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00a      	beq.n	800b10e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b112:	f003 0320 	and.w	r3, r3, #32
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00a      	beq.n	800b130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	430a      	orrs	r2, r1
 800b12e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d01a      	beq.n	800b172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	430a      	orrs	r2, r1
 800b150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b15a:	d10a      	bne.n	800b172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	430a      	orrs	r2, r1
 800b192:	605a      	str	r2, [r3, #4]
  }
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b098      	sub	sp, #96	; 0x60
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1b0:	f7f6 fdd8 	bl	8001d64 <HAL_GetTick>
 800b1b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0308 	and.w	r3, r3, #8
 800b1c0:	2b08      	cmp	r3, #8
 800b1c2:	d12f      	bne.n	800b224 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f88e 	bl	800b2f4 <UART_WaitOnFlagUntilTimeout>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d022      	beq.n	800b224 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1f2:	653b      	str	r3, [r7, #80]	; 0x50
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1fc:	647b      	str	r3, [r7, #68]	; 0x44
 800b1fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e6      	bne.n	800b1de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2220      	movs	r2, #32
 800b214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e063      	b.n	800b2ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0304 	and.w	r3, r3, #4
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d149      	bne.n	800b2c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b232:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b23a:	2200      	movs	r2, #0
 800b23c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f857 	bl	800b2f4 <UART_WaitOnFlagUntilTimeout>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d03c      	beq.n	800b2c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	e853 3f00 	ldrex	r3, [r3]
 800b258:	623b      	str	r3, [r7, #32]
   return(result);
 800b25a:	6a3b      	ldr	r3, [r7, #32]
 800b25c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b260:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26a:	633b      	str	r3, [r7, #48]	; 0x30
 800b26c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b272:	e841 2300 	strex	r3, r2, [r1]
 800b276:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1e6      	bne.n	800b24c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3308      	adds	r3, #8
 800b284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f023 0301 	bic.w	r3, r3, #1
 800b294:	64bb      	str	r3, [r7, #72]	; 0x48
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3308      	adds	r3, #8
 800b29c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b29e:	61fa      	str	r2, [r7, #28]
 800b2a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a2:	69b9      	ldr	r1, [r7, #24]
 800b2a4:	69fa      	ldr	r2, [r7, #28]
 800b2a6:	e841 2300 	strex	r3, r2, [r1]
 800b2aa:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1e5      	bne.n	800b27e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e012      	b.n	800b2ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3758      	adds	r7, #88	; 0x58
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	4613      	mov	r3, r2
 800b302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b304:	e049      	b.n	800b39a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30c:	d045      	beq.n	800b39a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b30e:	f7f6 fd29 	bl	8001d64 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	69ba      	ldr	r2, [r7, #24]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d302      	bcc.n	800b324 <UART_WaitOnFlagUntilTimeout+0x30>
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e048      	b.n	800b3ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0304 	and.w	r3, r3, #4
 800b332:	2b00      	cmp	r3, #0
 800b334:	d031      	beq.n	800b39a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	f003 0308 	and.w	r3, r3, #8
 800b340:	2b08      	cmp	r3, #8
 800b342:	d110      	bne.n	800b366 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2208      	movs	r2, #8
 800b34a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f000 f838 	bl	800b3c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2208      	movs	r2, #8
 800b356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e029      	b.n	800b3ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b374:	d111      	bne.n	800b39a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b37e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 f81e 	bl	800b3c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2220      	movs	r2, #32
 800b38a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b396:	2303      	movs	r3, #3
 800b398:	e00f      	b.n	800b3ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	69da      	ldr	r2, [r3, #28]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	bf0c      	ite	eq
 800b3aa:	2301      	moveq	r3, #1
 800b3ac:	2300      	movne	r3, #0
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d0a6      	beq.n	800b306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b095      	sub	sp, #84	; 0x54
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d2:	e853 3f00 	ldrex	r3, [r3]
 800b3d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e8:	643b      	str	r3, [r7, #64]	; 0x40
 800b3ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3f0:	e841 2300 	strex	r3, r2, [r1]
 800b3f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1e6      	bne.n	800b3ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	e853 3f00 	ldrex	r3, [r3]
 800b40a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b412:	f023 0301 	bic.w	r3, r3, #1
 800b416:	64bb      	str	r3, [r7, #72]	; 0x48
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3308      	adds	r3, #8
 800b41e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b420:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b428:	e841 2300 	strex	r3, r2, [r1]
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1e3      	bne.n	800b3fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d118      	bne.n	800b46e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	60bb      	str	r3, [r7, #8]
   return(result);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f023 0310 	bic.w	r3, r3, #16
 800b450:	647b      	str	r3, [r7, #68]	; 0x44
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b45a:	61bb      	str	r3, [r7, #24]
 800b45c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45e:	6979      	ldr	r1, [r7, #20]
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	e841 2300 	strex	r3, r2, [r1]
 800b466:	613b      	str	r3, [r7, #16]
   return(result);
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e6      	bne.n	800b43c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2220      	movs	r2, #32
 800b472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b482:	bf00      	nop
 800b484:	3754      	adds	r7, #84	; 0x54
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d101      	bne.n	800b4a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	e027      	b.n	800b4f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2224      	movs	r2, #36	; 0x24
 800b4b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0201 	bic.w	r2, r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b4d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2220      	movs	r2, #32
 800b4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b514:	2302      	movs	r3, #2
 800b516:	e02d      	b.n	800b574 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2224      	movs	r2, #36	; 0x24
 800b524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0201 	bic.w	r2, r2, #1
 800b53e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	430a      	orrs	r2, r1
 800b552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f84f 	bl	800b5f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d101      	bne.n	800b594 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b590:	2302      	movs	r3, #2
 800b592:	e02d      	b.n	800b5f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2224      	movs	r2, #36	; 0x24
 800b5a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f022 0201 	bic.w	r2, r2, #1
 800b5ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f811 	bl	800b5f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b604:	2b00      	cmp	r3, #0
 800b606:	d108      	bne.n	800b61a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b618:	e031      	b.n	800b67e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b61a:	2308      	movs	r3, #8
 800b61c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b61e:	2308      	movs	r3, #8
 800b620:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	0e5b      	lsrs	r3, r3, #25
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	f003 0307 	and.w	r3, r3, #7
 800b630:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	0f5b      	lsrs	r3, r3, #29
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	f003 0307 	and.w	r3, r3, #7
 800b640:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	7b3a      	ldrb	r2, [r7, #12]
 800b646:	4911      	ldr	r1, [pc, #68]	; (800b68c <UARTEx_SetNbDataToProcess+0x94>)
 800b648:	5c8a      	ldrb	r2, [r1, r2]
 800b64a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b64e:	7b3a      	ldrb	r2, [r7, #12]
 800b650:	490f      	ldr	r1, [pc, #60]	; (800b690 <UARTEx_SetNbDataToProcess+0x98>)
 800b652:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b654:	fb93 f3f2 	sdiv	r3, r3, r2
 800b658:	b29a      	uxth	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	7b7a      	ldrb	r2, [r7, #13]
 800b664:	4909      	ldr	r1, [pc, #36]	; (800b68c <UARTEx_SetNbDataToProcess+0x94>)
 800b666:	5c8a      	ldrb	r2, [r1, r2]
 800b668:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b66c:	7b7a      	ldrb	r2, [r7, #13]
 800b66e:	4908      	ldr	r1, [pc, #32]	; (800b690 <UARTEx_SetNbDataToProcess+0x98>)
 800b670:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b672:	fb93 f3f2 	sdiv	r3, r3, r2
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b67e:	bf00      	nop
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	08029354 	.word	0x08029354
 800b690:	0802935c 	.word	0x0802935c

0800b694 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800b694:	b480      	push	{r7}
 800b696:	b08b      	sub	sp, #44	; 0x2c
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	fa93 f3a3 	rbit	r3, r3
 800b6ae:	613b      	str	r3, [r7, #16]
  return result;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	e003      	b.n	800b6c6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	fab3 f383 	clz	r3, r3
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	2103      	movs	r1, #3
 800b6ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ce:	43db      	mvns	r3, r3
 800b6d0:	401a      	ands	r2, r3
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	fa93 f3a3 	rbit	r3, r3
 800b6dc:	61fb      	str	r3, [r7, #28]
  return result;
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b6e8:	2320      	movs	r3, #32
 800b6ea:	e003      	b.n	800b6f4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	fab3 f383 	clz	r3, r3
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6fc:	431a      	orrs	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	601a      	str	r2, [r3, #0]
}
 800b702:	bf00      	nop
 800b704:	372c      	adds	r7, #44	; 0x2c
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800b70e:	b480      	push	{r7}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	43db      	mvns	r3, r3
 800b722:	401a      	ands	r2, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	6879      	ldr	r1, [r7, #4]
 800b728:	fb01 f303 	mul.w	r3, r1, r3
 800b72c:	431a      	orrs	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	605a      	str	r2, [r3, #4]
}
 800b732:	bf00      	nop
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800b73e:	b480      	push	{r7}
 800b740:	b08b      	sub	sp, #44	; 0x2c
 800b742:	af00      	add	r7, sp, #0
 800b744:	60f8      	str	r0, [r7, #12]
 800b746:	60b9      	str	r1, [r7, #8]
 800b748:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689a      	ldr	r2, [r3, #8]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	fa93 f3a3 	rbit	r3, r3
 800b758:	613b      	str	r3, [r7, #16]
  return result;
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b764:	2320      	movs	r3, #32
 800b766:	e003      	b.n	800b770 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	fab3 f383 	clz	r3, r3
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	2103      	movs	r1, #3
 800b774:	fa01 f303 	lsl.w	r3, r1, r3
 800b778:	43db      	mvns	r3, r3
 800b77a:	401a      	ands	r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	fa93 f3a3 	rbit	r3, r3
 800b786:	61fb      	str	r3, [r7, #28]
  return result;
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b792:	2320      	movs	r3, #32
 800b794:	e003      	b.n	800b79e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b798:	fab3 f383 	clz	r3, r3
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	005b      	lsls	r3, r3, #1
 800b7a0:	6879      	ldr	r1, [r7, #4]
 800b7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800b7ac:	bf00      	nop
 800b7ae:	372c      	adds	r7, #44	; 0x2c
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b08b      	sub	sp, #44	; 0x2c
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	fa93 f3a3 	rbit	r3, r3
 800b7d2:	613b      	str	r3, [r7, #16]
  return result;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b7de:	2320      	movs	r3, #32
 800b7e0:	e003      	b.n	800b7ea <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	fab3 f383 	clz	r3, r3
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	005b      	lsls	r3, r3, #1
 800b7ec:	2103      	movs	r1, #3
 800b7ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f2:	43db      	mvns	r3, r3
 800b7f4:	401a      	ands	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7fa:	6a3b      	ldr	r3, [r7, #32]
 800b7fc:	fa93 f3a3 	rbit	r3, r3
 800b800:	61fb      	str	r3, [r7, #28]
  return result;
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b80c:	2320      	movs	r3, #32
 800b80e:	e003      	b.n	800b818 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	fab3 f383 	clz	r3, r3
 800b816:	b2db      	uxtb	r3, r3
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	6879      	ldr	r1, [r7, #4]
 800b81c:	fa01 f303 	lsl.w	r3, r1, r3
 800b820:	431a      	orrs	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	60da      	str	r2, [r3, #12]
}
 800b826:	bf00      	nop
 800b828:	372c      	adds	r7, #44	; 0x2c
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b832:	b480      	push	{r7}
 800b834:	b08b      	sub	sp, #44	; 0x2c
 800b836:	af00      	add	r7, sp, #0
 800b838:	60f8      	str	r0, [r7, #12]
 800b83a:	60b9      	str	r1, [r7, #8]
 800b83c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6a1a      	ldr	r2, [r3, #32]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	fa93 f3a3 	rbit	r3, r3
 800b84c:	613b      	str	r3, [r7, #16]
  return result;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b858:	2320      	movs	r3, #32
 800b85a:	e003      	b.n	800b864 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	fab3 f383 	clz	r3, r3
 800b862:	b2db      	uxtb	r3, r3
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	210f      	movs	r1, #15
 800b868:	fa01 f303 	lsl.w	r3, r1, r3
 800b86c:	43db      	mvns	r3, r3
 800b86e:	401a      	ands	r2, r3
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	fa93 f3a3 	rbit	r3, r3
 800b87a:	61fb      	str	r3, [r7, #28]
  return result;
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b886:	2320      	movs	r3, #32
 800b888:	e003      	b.n	800b892 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	fab3 f383 	clz	r3, r3
 800b890:	b2db      	uxtb	r3, r3
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	fa01 f303 	lsl.w	r3, r1, r3
 800b89a:	431a      	orrs	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800b8a0:	bf00      	nop
 800b8a2:	372c      	adds	r7, #44	; 0x2c
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b08b      	sub	sp, #44	; 0x2c
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	0a1b      	lsrs	r3, r3, #8
 800b8c0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	fa93 f3a3 	rbit	r3, r3
 800b8c8:	613b      	str	r3, [r7, #16]
  return result;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b8d4:	2320      	movs	r3, #32
 800b8d6:	e003      	b.n	800b8e0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	fab3 f383 	clz	r3, r3
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	210f      	movs	r1, #15
 800b8e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e8:	43db      	mvns	r3, r3
 800b8ea:	401a      	ands	r2, r3
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	0a1b      	lsrs	r3, r3, #8
 800b8f0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	fa93 f3a3 	rbit	r3, r3
 800b8f8:	61fb      	str	r3, [r7, #28]
  return result;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b904:	2320      	movs	r3, #32
 800b906:	e003      	b.n	800b910 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	fab3 f383 	clz	r3, r3
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	fa01 f303 	lsl.w	r3, r1, r3
 800b918:	431a      	orrs	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b91e:	bf00      	nop
 800b920:	372c      	adds	r7, #44	; 0x2c
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b08a      	sub	sp, #40	; 0x28
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	fa93 f3a3 	rbit	r3, r3
 800b940:	617b      	str	r3, [r7, #20]
  return result;
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <LL_GPIO_Init+0x26>
    return 32U;
 800b94c:	2320      	movs	r3, #32
 800b94e:	e003      	b.n	800b958 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	fab3 f383 	clz	r3, r3
 800b956:	b2db      	uxtb	r3, r3
 800b958:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b95a:	e058      	b.n	800ba0e <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	2101      	movs	r1, #1
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	fa01 f303 	lsl.w	r3, r1, r3
 800b968:	4013      	ands	r3, r2
 800b96a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d04a      	beq.n	800ba08 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d003      	beq.n	800b982 <LL_GPIO_Init+0x58>
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d10e      	bne.n	800b9a0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	461a      	mov	r2, r3
 800b988:	6a39      	ldr	r1, [r7, #32]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7ff fed7 	bl	800b73e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6819      	ldr	r1, [r3, #0]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	461a      	mov	r2, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff feb7 	bl	800b70e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	6a39      	ldr	r1, [r7, #32]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff ff05 	bl	800b7b8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d121      	bne.n	800b9fa <LL_GPIO_Init+0xd0>
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	fa93 f3a3 	rbit	r3, r3
 800b9c0:	60bb      	str	r3, [r7, #8]
  return result;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <LL_GPIO_Init+0xa6>
    return 32U;
 800b9cc:	2320      	movs	r3, #32
 800b9ce:	e003      	b.n	800b9d8 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	fab3 f383 	clz	r3, r3
 800b9d6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800b9d8:	2b07      	cmp	r3, #7
 800b9da:	d807      	bhi.n	800b9ec <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6a39      	ldr	r1, [r7, #32]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7ff ff24 	bl	800b832 <LL_GPIO_SetAFPin_0_7>
 800b9ea:	e006      	b.n	800b9fa <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	695b      	ldr	r3, [r3, #20]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	6a39      	ldr	r1, [r7, #32]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff ff59 	bl	800b8ac <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	6a39      	ldr	r1, [r7, #32]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7ff fe46 	bl	800b694 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	fa22 f303 	lsr.w	r3, r2, r3
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d19f      	bne.n	800b95c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3728      	adds	r7, #40	; 0x28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba26:	b084      	sub	sp, #16
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	f107 001c 	add.w	r0, r7, #28
 800ba34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fd85 	bl	800c554 <USB_CoreReset>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ba4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d106      	bne.n	800ba62 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	639a      	str	r2, [r3, #56]	; 0x38
 800ba60:	e005      	b.n	800ba6e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba7a:	b004      	add	sp, #16
 800ba7c:	4770      	bx	lr
	...

0800ba80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ba8e:	79fb      	ldrb	r3, [r7, #7]
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d165      	bne.n	800bb60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	4a41      	ldr	r2, [pc, #260]	; (800bb9c <USB_SetTurnaroundTime+0x11c>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d906      	bls.n	800baaa <USB_SetTurnaroundTime+0x2a>
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	4a40      	ldr	r2, [pc, #256]	; (800bba0 <USB_SetTurnaroundTime+0x120>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d202      	bcs.n	800baaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800baa4:	230f      	movs	r3, #15
 800baa6:	617b      	str	r3, [r7, #20]
 800baa8:	e062      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	4a3c      	ldr	r2, [pc, #240]	; (800bba0 <USB_SetTurnaroundTime+0x120>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d306      	bcc.n	800bac0 <USB_SetTurnaroundTime+0x40>
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	4a3b      	ldr	r2, [pc, #236]	; (800bba4 <USB_SetTurnaroundTime+0x124>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d202      	bcs.n	800bac0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800baba:	230e      	movs	r3, #14
 800babc:	617b      	str	r3, [r7, #20]
 800babe:	e057      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	4a38      	ldr	r2, [pc, #224]	; (800bba4 <USB_SetTurnaroundTime+0x124>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d306      	bcc.n	800bad6 <USB_SetTurnaroundTime+0x56>
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	4a37      	ldr	r2, [pc, #220]	; (800bba8 <USB_SetTurnaroundTime+0x128>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d202      	bcs.n	800bad6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bad0:	230d      	movs	r3, #13
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	e04c      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	4a33      	ldr	r2, [pc, #204]	; (800bba8 <USB_SetTurnaroundTime+0x128>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d306      	bcc.n	800baec <USB_SetTurnaroundTime+0x6c>
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	4a32      	ldr	r2, [pc, #200]	; (800bbac <USB_SetTurnaroundTime+0x12c>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d802      	bhi.n	800baec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bae6:	230c      	movs	r3, #12
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	e041      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	4a2f      	ldr	r2, [pc, #188]	; (800bbac <USB_SetTurnaroundTime+0x12c>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d906      	bls.n	800bb02 <USB_SetTurnaroundTime+0x82>
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	4a2e      	ldr	r2, [pc, #184]	; (800bbb0 <USB_SetTurnaroundTime+0x130>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d802      	bhi.n	800bb02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bafc:	230b      	movs	r3, #11
 800bafe:	617b      	str	r3, [r7, #20]
 800bb00:	e036      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	4a2a      	ldr	r2, [pc, #168]	; (800bbb0 <USB_SetTurnaroundTime+0x130>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d906      	bls.n	800bb18 <USB_SetTurnaroundTime+0x98>
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	4a29      	ldr	r2, [pc, #164]	; (800bbb4 <USB_SetTurnaroundTime+0x134>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d802      	bhi.n	800bb18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bb12:	230a      	movs	r3, #10
 800bb14:	617b      	str	r3, [r7, #20]
 800bb16:	e02b      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	4a26      	ldr	r2, [pc, #152]	; (800bbb4 <USB_SetTurnaroundTime+0x134>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d906      	bls.n	800bb2e <USB_SetTurnaroundTime+0xae>
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	4a25      	ldr	r2, [pc, #148]	; (800bbb8 <USB_SetTurnaroundTime+0x138>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d202      	bcs.n	800bb2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bb28:	2309      	movs	r3, #9
 800bb2a:	617b      	str	r3, [r7, #20]
 800bb2c:	e020      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	4a21      	ldr	r2, [pc, #132]	; (800bbb8 <USB_SetTurnaroundTime+0x138>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d306      	bcc.n	800bb44 <USB_SetTurnaroundTime+0xc4>
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	4a20      	ldr	r2, [pc, #128]	; (800bbbc <USB_SetTurnaroundTime+0x13c>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d802      	bhi.n	800bb44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bb3e:	2308      	movs	r3, #8
 800bb40:	617b      	str	r3, [r7, #20]
 800bb42:	e015      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	4a1d      	ldr	r2, [pc, #116]	; (800bbbc <USB_SetTurnaroundTime+0x13c>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d906      	bls.n	800bb5a <USB_SetTurnaroundTime+0xda>
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	4a1c      	ldr	r2, [pc, #112]	; (800bbc0 <USB_SetTurnaroundTime+0x140>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d202      	bcs.n	800bb5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bb54:	2307      	movs	r3, #7
 800bb56:	617b      	str	r3, [r7, #20]
 800bb58:	e00a      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bb5a:	2306      	movs	r3, #6
 800bb5c:	617b      	str	r3, [r7, #20]
 800bb5e:	e007      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bb60:	79fb      	ldrb	r3, [r7, #7]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d102      	bne.n	800bb6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bb66:	2309      	movs	r3, #9
 800bb68:	617b      	str	r3, [r7, #20]
 800bb6a:	e001      	b.n	800bb70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bb6c:	2309      	movs	r3, #9
 800bb6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	68da      	ldr	r2, [r3, #12]
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	029b      	lsls	r3, r3, #10
 800bb84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bb88:	431a      	orrs	r2, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	371c      	adds	r7, #28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	00d8acbf 	.word	0x00d8acbf
 800bba0:	00e4e1c0 	.word	0x00e4e1c0
 800bba4:	00f42400 	.word	0x00f42400
 800bba8:	01067380 	.word	0x01067380
 800bbac:	011a499f 	.word	0x011a499f
 800bbb0:	01312cff 	.word	0x01312cff
 800bbb4:	014ca43f 	.word	0x014ca43f
 800bbb8:	016e3600 	.word	0x016e3600
 800bbbc:	01a6ab1f 	.word	0x01a6ab1f
 800bbc0:	01e84800 	.word	0x01e84800

0800bbc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f023 0201 	bic.w	r2, r3, #1
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	370c      	adds	r7, #12
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc02:	78fb      	ldrb	r3, [r7, #3]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d115      	bne.n	800bc34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc14:	2001      	movs	r0, #1
 800bc16:	f7f6 f8b1 	bl	8001d7c <HAL_Delay>
      ms++;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fc07 	bl	800c434 <USB_GetMode>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d01e      	beq.n	800bc6a <USB_SetCurrentMode+0x84>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b31      	cmp	r3, #49	; 0x31
 800bc30:	d9f0      	bls.n	800bc14 <USB_SetCurrentMode+0x2e>
 800bc32:	e01a      	b.n	800bc6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bc34:	78fb      	ldrb	r3, [r7, #3]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d115      	bne.n	800bc66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc46:	2001      	movs	r0, #1
 800bc48:	f7f6 f898 	bl	8001d7c <HAL_Delay>
      ms++;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fbee 	bl	800c434 <USB_GetMode>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d005      	beq.n	800bc6a <USB_SetCurrentMode+0x84>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b31      	cmp	r3, #49	; 0x31
 800bc62:	d9f0      	bls.n	800bc46 <USB_SetCurrentMode+0x60>
 800bc64:	e001      	b.n	800bc6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e005      	b.n	800bc76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b32      	cmp	r3, #50	; 0x32
 800bc6e:	d101      	bne.n	800bc74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e000      	b.n	800bc76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc80:	b084      	sub	sp, #16
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b086      	sub	sp, #24
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bc8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	613b      	str	r3, [r7, #16]
 800bc9e:	e009      	b.n	800bcb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	3340      	adds	r3, #64	; 0x40
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4413      	add	r3, r2
 800bcaa:	2200      	movs	r2, #0
 800bcac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	613b      	str	r3, [r7, #16]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	2b0e      	cmp	r3, #14
 800bcb8:	d9f2      	bls.n	800bca0 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d11c      	bne.n	800bcfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcce:	f043 0302 	orr.w	r3, r3, #2
 800bcd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	601a      	str	r2, [r3, #0]
 800bcf8:	e005      	b.n	800bd06 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	2300      	movs	r3, #0
 800bd10:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bd12:	2103      	movs	r1, #3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f95b 	bl	800bfd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd1a:	2110      	movs	r1, #16
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f8f3 	bl	800bf08 <USB_FlushTxFifo>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f91f 	bl	800bf70 <USB_FlushRxFifo>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd42:	461a      	mov	r2, r3
 800bd44:	2300      	movs	r3, #0
 800bd46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd4e:	461a      	mov	r2, r3
 800bd50:	2300      	movs	r3, #0
 800bd52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd60:	2300      	movs	r3, #0
 800bd62:	613b      	str	r3, [r7, #16]
 800bd64:	e043      	b.n	800bdee <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	015a      	lsls	r2, r3, #5
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd7c:	d118      	bne.n	800bdb0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10a      	bne.n	800bd9a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	015a      	lsls	r2, r3, #5
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd90:	461a      	mov	r2, r3
 800bd92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	e013      	b.n	800bdc2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	015a      	lsls	r2, r3, #5
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	4413      	add	r3, r2
 800bda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda6:	461a      	mov	r2, r3
 800bda8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	e008      	b.n	800bdc2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	015a      	lsls	r2, r3, #5
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdce:	461a      	mov	r2, r3
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde0:	461a      	mov	r2, r3
 800bde2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bde6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	3301      	adds	r3, #1
 800bdec:	613b      	str	r3, [r7, #16]
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d3b7      	bcc.n	800bd66 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	613b      	str	r3, [r7, #16]
 800bdfa:	e043      	b.n	800be84 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be12:	d118      	bne.n	800be46 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10a      	bne.n	800be30 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	015a      	lsls	r2, r3, #5
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	4413      	add	r3, r2
 800be22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be26:	461a      	mov	r2, r3
 800be28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be2c:	6013      	str	r3, [r2, #0]
 800be2e:	e013      	b.n	800be58 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3c:	461a      	mov	r2, r3
 800be3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	e008      	b.n	800be58 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	015a      	lsls	r2, r3, #5
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	4413      	add	r3, r2
 800be4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be52:	461a      	mov	r2, r3
 800be54:	2300      	movs	r3, #0
 800be56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be64:	461a      	mov	r2, r3
 800be66:	2300      	movs	r3, #0
 800be68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	015a      	lsls	r2, r3, #5
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	4413      	add	r3, r2
 800be72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be76:	461a      	mov	r2, r3
 800be78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	3301      	adds	r3, #1
 800be82:	613b      	str	r3, [r7, #16]
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d3b7      	bcc.n	800bdfc <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800beac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800beae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d105      	bne.n	800bec0 <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	f043 0210 	orr.w	r2, r3, #16
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	699a      	ldr	r2, [r3, #24]
 800bec4:	4b0f      	ldr	r3, [pc, #60]	; (800bf04 <USB_DevInit+0x284>)
 800bec6:	4313      	orrs	r3, r2
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800becc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	f043 0208 	orr.w	r2, r3, #8
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d107      	bne.n	800bef4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800beec:	f043 0304 	orr.w	r3, r3, #4
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf00:	b004      	add	sp, #16
 800bf02:	4770      	bx	lr
 800bf04:	803c3800 	.word	0x803c3800

0800bf08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	4a13      	ldr	r2, [pc, #76]	; (800bf6c <USB_FlushTxFifo+0x64>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d901      	bls.n	800bf28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bf24:	2303      	movs	r3, #3
 800bf26:	e01b      	b.n	800bf60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	daf2      	bge.n	800bf16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bf30:	2300      	movs	r3, #0
 800bf32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	019b      	lsls	r3, r3, #6
 800bf38:	f043 0220 	orr.w	r2, r3, #32
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3301      	adds	r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4a08      	ldr	r2, [pc, #32]	; (800bf6c <USB_FlushTxFifo+0x64>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d901      	bls.n	800bf52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e006      	b.n	800bf60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f003 0320 	and.w	r3, r3, #32
 800bf5a:	2b20      	cmp	r3, #32
 800bf5c:	d0f0      	beq.n	800bf40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	00030d40 	.word	0x00030d40

0800bf70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <USB_FlushRxFifo+0x5c>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d901      	bls.n	800bf8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e018      	b.n	800bfc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	daf2      	bge.n	800bf7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bf96:	2300      	movs	r3, #0
 800bf98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2210      	movs	r2, #16
 800bf9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	4a08      	ldr	r2, [pc, #32]	; (800bfcc <USB_FlushRxFifo+0x5c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d901      	bls.n	800bfb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e006      	b.n	800bfc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	f003 0310 	and.w	r3, r3, #16
 800bfba:	2b10      	cmp	r3, #16
 800bfbc:	d0f0      	beq.n	800bfa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	00030d40 	.word	0x00030d40

0800bfd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	68f9      	ldr	r1, [r7, #12]
 800bfec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bff0:	4313      	orrs	r3, r2
 800bff2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c002:	b480      	push	{r7}
 800c004:	b087      	sub	sp, #28
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	f003 0306 	and.w	r3, r3, #6
 800c01a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d102      	bne.n	800c028 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c022:	2300      	movs	r3, #0
 800c024:	75fb      	strb	r3, [r7, #23]
 800c026:	e00a      	b.n	800c03e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d002      	beq.n	800c034 <USB_GetDevSpeed+0x32>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b06      	cmp	r3, #6
 800c032:	d102      	bne.n	800c03a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c034:	2302      	movs	r3, #2
 800c036:	75fb      	strb	r3, [r7, #23]
 800c038:	e001      	b.n	800c03e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c03a:	230f      	movs	r3, #15
 800c03c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c040:	4618      	mov	r0, r3
 800c042:	371c      	adds	r7, #28
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	785b      	ldrb	r3, [r3, #1]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d14a      	bne.n	800c100 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	4413      	add	r3, r2
 800c074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c07e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c082:	f040 8086 	bne.w	800c192 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	015a      	lsls	r2, r3, #5
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	4413      	add	r3, r2
 800c090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	7812      	ldrb	r2, [r2, #0]
 800c09a:	0151      	lsls	r1, r2, #5
 800c09c:	693a      	ldr	r2, [r7, #16]
 800c09e:	440a      	add	r2, r1
 800c0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	015a      	lsls	r2, r3, #5
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	0151      	lsls	r1, r2, #5
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	440a      	add	r2, r1
 800c0c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d902      	bls.n	800c0e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800c0e2:	e056      	b.n	800c192 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0fc:	d0e7      	beq.n	800c0ce <USB_EPStopXfer+0x82>
 800c0fe:	e048      	b.n	800c192 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c118:	d13b      	bne.n	800c192 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	7812      	ldrb	r2, [r2, #0]
 800c12e:	0151      	lsls	r1, r2, #5
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	440a      	add	r2, r1
 800c134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c13c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	7812      	ldrb	r2, [r2, #0]
 800c152:	0151      	lsls	r1, r2, #5
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	440a      	add	r2, r1
 800c158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c15c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c160:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c16e:	4293      	cmp	r3, r2
 800c170:	d902      	bls.n	800c178 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	75fb      	strb	r3, [r7, #23]
          break;
 800c176:	e00c      	b.n	800c192 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c18c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c190:	d0e7      	beq.n	800c162 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c192:	7dfb      	ldrb	r3, [r7, #23]
}
 800c194:	4618      	mov	r0, r3
 800c196:	371c      	adds	r7, #28
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b089      	sub	sp, #36	; 0x24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	71fb      	strb	r3, [r7, #7]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c1be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d123      	bne.n	800c20e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c1c6:	88bb      	ldrh	r3, [r7, #4]
 800c1c8:	3303      	adds	r3, #3
 800c1ca:	089b      	lsrs	r3, r3, #2
 800c1cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	61bb      	str	r3, [r7, #24]
 800c1d2:	e018      	b.n	800c206 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c1d4:	79fb      	ldrb	r3, [r7, #7]
 800c1d6:	031a      	lsls	r2, r3, #12
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	3301      	adds	r3, #1
 800c204:	61bb      	str	r3, [r7, #24]
 800c206:	69ba      	ldr	r2, [r7, #24]
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d3e2      	bcc.n	800c1d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3724      	adds	r7, #36	; 0x24
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b08b      	sub	sp, #44	; 0x2c
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	4613      	mov	r3, r2
 800c228:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c232:	88fb      	ldrh	r3, [r7, #6]
 800c234:	089b      	lsrs	r3, r3, #2
 800c236:	b29b      	uxth	r3, r3
 800c238:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c23a:	88fb      	ldrh	r3, [r7, #6]
 800c23c:	f003 0303 	and.w	r3, r3, #3
 800c240:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c242:	2300      	movs	r3, #0
 800c244:	623b      	str	r3, [r7, #32]
 800c246:	e014      	b.n	800c272 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	601a      	str	r2, [r3, #0]
    pDest++;
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	3301      	adds	r3, #1
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	3301      	adds	r3, #1
 800c25e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	3301      	adds	r3, #1
 800c264:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	3301      	adds	r3, #1
 800c26a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c26c:	6a3b      	ldr	r3, [r7, #32]
 800c26e:	3301      	adds	r3, #1
 800c270:	623b      	str	r3, [r7, #32]
 800c272:	6a3a      	ldr	r2, [r7, #32]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	429a      	cmp	r2, r3
 800c278:	d3e6      	bcc.n	800c248 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c27a:	8bfb      	ldrh	r3, [r7, #30]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d01e      	beq.n	800c2be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c28a:	461a      	mov	r2, r3
 800c28c:	f107 0310 	add.w	r3, r7, #16
 800c290:	6812      	ldr	r2, [r2, #0]
 800c292:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	6a3b      	ldr	r3, [r7, #32]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	fa22 f303 	lsr.w	r3, r2, r3
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a4:	701a      	strb	r2, [r3, #0]
      i++;
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c2b2:	8bfb      	ldrh	r3, [r7, #30]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c2b8:	8bfb      	ldrh	r3, [r7, #30]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1ea      	bne.n	800c294 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	372c      	adds	r7, #44	; 0x2c
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c2e6:	f023 0303 	bic.w	r3, r3, #3
 800c2ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2fa:	f043 0302 	orr.w	r3, r3, #2
 800c2fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c30e:	b480      	push	{r7}
 800c310:	b085      	sub	sp, #20
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4013      	ands	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c326:	68fb      	ldr	r3, [r7, #12]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c350:	69db      	ldr	r3, [r3, #28]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	4013      	ands	r3, r2
 800c356:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	0c1b      	lsrs	r3, r3, #16
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c384:	69db      	ldr	r3, [r3, #28]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	4013      	ands	r3, r2
 800c38a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	b29b      	uxth	r3, r3
}
 800c390:	4618      	mov	r0, r3
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3c2:	695b      	ldr	r3, [r3, #20]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b087      	sub	sp, #28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	f003 030f 	and.w	r3, r3, #15
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	fa22 f303 	lsr.w	r3, r2, r3
 800c408:	01db      	lsls	r3, r3, #7
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	4313      	orrs	r3, r2
 800c410:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c412:	78fb      	ldrb	r3, [r7, #3]
 800c414:	015a      	lsls	r2, r3, #5
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	4413      	add	r3, r2
 800c41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	4013      	ands	r3, r2
 800c424:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c426:	68bb      	ldr	r3, [r7, #8]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	371c      	adds	r7, #28
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	f003 0301 	and.w	r3, r3, #1
}
 800c444:	4618      	mov	r0, r3
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c46a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c46e:	f023 0307 	bic.w	r3, r3, #7
 800c472:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c486:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
	...

0800c498 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c498:	b480      	push	{r7}
 800c49a:	b087      	sub	sp, #28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	607a      	str	r2, [r7, #4]
 800c4a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	333c      	adds	r3, #60	; 0x3c
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	4a26      	ldr	r2, [pc, #152]	; (800c550 <USB_EP0_OutStart+0xb8>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d90a      	bls.n	800c4d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4cc:	d101      	bne.n	800c4d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e037      	b.n	800c542 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d8:	461a      	mov	r2, r3
 800c4da:	2300      	movs	r3, #0
 800c4dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c500:	f043 0318 	orr.w	r3, r3, #24
 800c504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c514:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c518:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c51a:	7afb      	ldrb	r3, [r7, #11]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d10f      	bne.n	800c540 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c526:	461a      	mov	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c53a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c53e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	371c      	adds	r7, #28
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	4f54300a 	.word	0x4f54300a

0800c554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3301      	adds	r3, #1
 800c564:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	4a13      	ldr	r2, [pc, #76]	; (800c5b8 <USB_CoreReset+0x64>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d901      	bls.n	800c572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e01b      	b.n	800c5aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	2b00      	cmp	r3, #0
 800c578:	daf2      	bge.n	800c560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c57a:	2300      	movs	r3, #0
 800c57c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	f043 0201 	orr.w	r2, r3, #1
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	3301      	adds	r3, #1
 800c58e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	4a09      	ldr	r2, [pc, #36]	; (800c5b8 <USB_CoreReset+0x64>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d901      	bls.n	800c59c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c598:	2303      	movs	r3, #3
 800c59a:	e006      	b.n	800c5aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d0f0      	beq.n	800c58a <USB_CoreReset+0x36>

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	00030d40 	.word	0x00030d40

0800c5bc <__NVIC_SetPriority>:
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	6039      	str	r1, [r7, #0]
 800c5c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	db0a      	blt.n	800c5e6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	490c      	ldr	r1, [pc, #48]	; (800c608 <__NVIC_SetPriority+0x4c>)
 800c5d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5da:	0112      	lsls	r2, r2, #4
 800c5dc:	b2d2      	uxtb	r2, r2
 800c5de:	440b      	add	r3, r1
 800c5e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c5e4:	e00a      	b.n	800c5fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	4908      	ldr	r1, [pc, #32]	; (800c60c <__NVIC_SetPriority+0x50>)
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	f003 030f 	and.w	r3, r3, #15
 800c5f2:	3b04      	subs	r3, #4
 800c5f4:	0112      	lsls	r2, r2, #4
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	440b      	add	r3, r1
 800c5fa:	761a      	strb	r2, [r3, #24]
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	e000e100 	.word	0xe000e100
 800c60c:	e000ed00 	.word	0xe000ed00

0800c610 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800c614:	4b05      	ldr	r3, [pc, #20]	; (800c62c <SysTick_Handler+0x1c>)
 800c616:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c618:	f002 fa78 	bl	800eb0c <xTaskGetSchedulerState>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d001      	beq.n	800c626 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c622:	f002 ffdf 	bl	800f5e4 <xPortSysTickHandler>
  }
}
 800c626:	bf00      	nop
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	e000e010 	.word	0xe000e010

0800c630 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c630:	b580      	push	{r7, lr}
 800c632:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800c634:	2100      	movs	r1, #0
 800c636:	f06f 0004 	mvn.w	r0, #4
 800c63a:	f7ff ffbf 	bl	800c5bc <__NVIC_SetPriority>
#endif
}
 800c63e:	bf00      	nop
 800c640:	bd80      	pop	{r7, pc}

0800c642 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800c642:	b580      	push	{r7, lr}
 800c644:	b086      	sub	sp, #24
 800c646:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800c648:	2300      	movs	r3, #0
 800c64a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c64c:	f3ef 8305 	mrs	r3, IPSR
 800c650:	60fb      	str	r3, [r7, #12]
  return(result);
 800c652:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800c658:	2301      	movs	r3, #1
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	e013      	b.n	800c686 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800c65e:	f002 fa55 	bl	800eb0c <xTaskGetSchedulerState>
 800c662:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	2b01      	cmp	r3, #1
 800c668:	d00d      	beq.n	800c686 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c66a:	f3ef 8310 	mrs	r3, PRIMASK
 800c66e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c670:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800c672:	2b00      	cmp	r3, #0
 800c674:	d105      	bne.n	800c682 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c676:	f3ef 8311 	mrs	r3, BASEPRI
 800c67a:	607b      	str	r3, [r7, #4]
  return(result);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800c682:	2301      	movs	r3, #1
 800c684:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800c686:	697b      	ldr	r3, [r7, #20]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3718      	adds	r7, #24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800c696:	f7ff ffd4 	bl	800c642 <IRQ_Context>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800c6a0:	f06f 0305 	mvn.w	r3, #5
 800c6a4:	607b      	str	r3, [r7, #4]
 800c6a6:	e012      	b.n	800c6ce <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800c6a8:	f002 fa30 	bl	800eb0c <xTaskGetSchedulerState>
 800c6ac:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d109      	bne.n	800c6c8 <osKernelInitialize+0x38>
 800c6b4:	4b08      	ldr	r3, [pc, #32]	; (800c6d8 <osKernelInitialize+0x48>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d105      	bne.n	800c6c8 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c6bc:	4b06      	ldr	r3, [pc, #24]	; (800c6d8 <osKernelInitialize+0x48>)
 800c6be:	2201      	movs	r2, #1
 800c6c0:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	607b      	str	r3, [r7, #4]
 800c6c6:	e002      	b.n	800c6ce <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800c6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6cc:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800c6ce:	687b      	ldr	r3, [r7, #4]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	20004930 	.word	0x20004930

0800c6dc <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800c6e2:	f7ff ffae 	bl	800c642 <IRQ_Context>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <osKernelStart+0x18>
    stat = osErrorISR;
 800c6ec:	f06f 0305 	mvn.w	r3, #5
 800c6f0:	607b      	str	r3, [r7, #4]
 800c6f2:	e016      	b.n	800c722 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800c6f4:	f002 fa0a 	bl	800eb0c <xTaskGetSchedulerState>
 800c6f8:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d10d      	bne.n	800c71c <osKernelStart+0x40>
 800c700:	4b0a      	ldr	r3, [pc, #40]	; (800c72c <osKernelStart+0x50>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d109      	bne.n	800c71c <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c708:	f7ff ff92 	bl	800c630 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800c70c:	4b07      	ldr	r3, [pc, #28]	; (800c72c <osKernelStart+0x50>)
 800c70e:	2202      	movs	r2, #2
 800c710:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c712:	f001 fcad 	bl	800e070 <vTaskStartScheduler>
      stat = osOK;
 800c716:	2300      	movs	r3, #0
 800c718:	607b      	str	r3, [r7, #4]
 800c71a:	e002      	b.n	800c722 <osKernelStart+0x46>
    } else {
      stat = osError;
 800c71c:	f04f 33ff 	mov.w	r3, #4294967295
 800c720:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800c722:	687b      	ldr	r3, [r7, #4]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20004930 	.word	0x20004930

0800c730 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c730:	b580      	push	{r7, lr}
 800c732:	b08e      	sub	sp, #56	; 0x38
 800c734:	af04      	add	r7, sp, #16
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800c740:	f7ff ff7f 	bl	800c642 <IRQ_Context>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d17e      	bne.n	800c848 <osThreadNew+0x118>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d07b      	beq.n	800c848 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800c750:	2380      	movs	r3, #128	; 0x80
 800c752:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c754:	2318      	movs	r3, #24
 800c756:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c75c:	f04f 33ff 	mov.w	r3, #4294967295
 800c760:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d045      	beq.n	800c7f4 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <osThreadNew+0x46>
        name = attr->name;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	699b      	ldr	r3, [r3, #24]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d002      	beq.n	800c784 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d008      	beq.n	800c79c <osThreadNew+0x6c>
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	2b38      	cmp	r3, #56	; 0x38
 800c78e:	d805      	bhi.n	800c79c <osThreadNew+0x6c>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800c79c:	2300      	movs	r3, #0
 800c79e:	e054      	b.n	800c84a <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d003      	beq.n	800c7b0 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	695b      	ldr	r3, [r3, #20]
 800c7ac:	089b      	lsrs	r3, r3, #2
 800c7ae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00e      	beq.n	800c7d6 <osThreadNew+0xa6>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	2ba7      	cmp	r3, #167	; 0xa7
 800c7be:	d90a      	bls.n	800c7d6 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d006      	beq.n	800c7d6 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	61bb      	str	r3, [r7, #24]
 800c7d4:	e010      	b.n	800c7f8 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10c      	bne.n	800c7f8 <osThreadNew+0xc8>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d108      	bne.n	800c7f8 <osThreadNew+0xc8>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d104      	bne.n	800c7f8 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	61bb      	str	r3, [r7, #24]
 800c7f2:	e001      	b.n	800c7f8 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d110      	bne.n	800c820 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c806:	9202      	str	r2, [sp, #8]
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6a3a      	ldr	r2, [r7, #32]
 800c812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f001 fa4d 	bl	800dcb4 <xTaskCreateStatic>
 800c81a:	4603      	mov	r3, r0
 800c81c:	617b      	str	r3, [r7, #20]
 800c81e:	e013      	b.n	800c848 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d110      	bne.n	800c848 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	b29a      	uxth	r2, r3
 800c82a:	f107 0314 	add.w	r3, r7, #20
 800c82e:	9301      	str	r3, [sp, #4]
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f001 fa85 	bl	800dd48 <xTaskCreate>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b01      	cmp	r3, #1
 800c842:	d001      	beq.n	800c848 <osThreadNew+0x118>
            hTask = NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800c848:	697b      	ldr	r3, [r7, #20]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3728      	adds	r7, #40	; 0x28
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800c852:	b580      	push	{r7, lr}
 800c854:	b084      	sub	sp, #16
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800c85a:	f7ff fef2 	bl	800c642 <IRQ_Context>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d003      	beq.n	800c86c <osDelay+0x1a>
    stat = osErrorISR;
 800c864:	f06f 0305 	mvn.w	r3, #5
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	e007      	b.n	800c87c <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800c86c:	2300      	movs	r3, #0
 800c86e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <osDelay+0x2a>
      vTaskDelay(ticks);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f001 fbd6 	bl	800e028 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800c87c:	68fb      	ldr	r3, [r7, #12]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c886:	b580      	push	{r7, lr}
 800c888:	b088      	sub	sp, #32
 800c88a:	af02      	add	r7, sp, #8
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800c892:	2300      	movs	r3, #0
 800c894:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800c896:	f7ff fed4 	bl	800c642 <IRQ_Context>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d175      	bne.n	800c98c <osSemaphoreNew+0x106>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d072      	beq.n	800c98c <osSemaphoreNew+0x106>
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d86e      	bhi.n	800c98c <osSemaphoreNew+0x106>
    mem = -1;
 800c8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d015      	beq.n	800c8e6 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <osSemaphoreNew+0x4a>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	2b4f      	cmp	r3, #79	; 0x4f
 800c8c8:	d902      	bls.n	800c8d0 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	613b      	str	r3, [r7, #16]
 800c8ce:	e00c      	b.n	800c8ea <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d108      	bne.n	800c8ea <osSemaphoreNew+0x64>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d104      	bne.n	800c8ea <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	613b      	str	r3, [r7, #16]
 800c8e4:	e001      	b.n	800c8ea <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f0:	d04c      	beq.n	800c98c <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d128      	bne.n	800c94a <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d10a      	bne.n	800c914 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	2203      	movs	r2, #3
 800c904:	9200      	str	r2, [sp, #0]
 800c906:	2200      	movs	r2, #0
 800c908:	2100      	movs	r1, #0
 800c90a:	2001      	movs	r0, #1
 800c90c:	f000 fb2d 	bl	800cf6a <xQueueGenericCreateStatic>
 800c910:	6178      	str	r0, [r7, #20]
 800c912:	e005      	b.n	800c920 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c914:	2203      	movs	r2, #3
 800c916:	2100      	movs	r1, #0
 800c918:	2001      	movs	r0, #1
 800c91a:	f000 fb6c 	bl	800cff6 <xQueueGenericCreate>
 800c91e:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d022      	beq.n	800c96c <osSemaphoreNew+0xe6>
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d01f      	beq.n	800c96c <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c92c:	2300      	movs	r3, #0
 800c92e:	2200      	movs	r2, #0
 800c930:	2100      	movs	r1, #0
 800c932:	6978      	ldr	r0, [r7, #20]
 800c934:	f000 fc1c 	bl	800d170 <xQueueGenericSend>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d016      	beq.n	800c96c <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800c93e:	6978      	ldr	r0, [r7, #20]
 800c940:	f000 ffce 	bl	800d8e0 <vQueueDelete>
            hSemaphore = NULL;
 800c944:	2300      	movs	r3, #0
 800c946:	617b      	str	r3, [r7, #20]
 800c948:	e010      	b.n	800c96c <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d108      	bne.n	800c962 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	461a      	mov	r2, r3
 800c956:	68b9      	ldr	r1, [r7, #8]
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f000 fbb9 	bl	800d0d0 <xQueueCreateCountingSemaphoreStatic>
 800c95e:	6178      	str	r0, [r7, #20]
 800c960:	e004      	b.n	800c96c <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 fbdd 	bl	800d124 <xQueueCreateCountingSemaphore>
 800c96a:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00c      	beq.n	800c98c <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d009      	beq.n	800c98c <osSemaphoreNew+0x106>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d005      	beq.n	800c98c <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4619      	mov	r1, r3
 800c986:	6978      	ldr	r0, [r7, #20]
 800c988:	f001 f8ee 	bl	800db68 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800c98c:	697b      	ldr	r3, [r7, #20]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
	...

0800c998 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d103      	bne.n	800c9b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c9b0:	f06f 0303 	mvn.w	r3, #3
 800c9b4:	617b      	str	r3, [r7, #20]
 800c9b6:	e034      	b.n	800ca22 <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800c9b8:	f7ff fe43 	bl	800c642 <IRQ_Context>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d01e      	beq.n	800ca00 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d003      	beq.n	800c9d0 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800c9c8:	f06f 0303 	mvn.w	r3, #3
 800c9cc:	617b      	str	r3, [r7, #20]
 800c9ce:	e028      	b.n	800ca22 <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c9d4:	f107 030c 	add.w	r3, r7, #12
 800c9d8:	461a      	mov	r2, r3
 800c9da:	2100      	movs	r1, #0
 800c9dc:	6938      	ldr	r0, [r7, #16]
 800c9de:	f000 ff12 	bl	800d806 <xQueueReceiveFromISR>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d003      	beq.n	800c9f0 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800c9e8:	f06f 0302 	mvn.w	r3, #2
 800c9ec:	617b      	str	r3, [r7, #20]
 800c9ee:	e018      	b.n	800ca22 <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d015      	beq.n	800ca22 <osSemaphoreAcquire+0x8a>
 800c9f6:	4b0d      	ldr	r3, [pc, #52]	; (800ca2c <osSemaphoreAcquire+0x94>)
 800c9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	e010      	b.n	800ca22 <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ca00:	6839      	ldr	r1, [r7, #0]
 800ca02:	6938      	ldr	r0, [r7, #16]
 800ca04:	f000 fe28 	bl	800d658 <xQueueSemaphoreTake>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d009      	beq.n	800ca22 <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800ca14:	f06f 0301 	mvn.w	r3, #1
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	e002      	b.n	800ca22 <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800ca1c:	f06f 0302 	mvn.w	r3, #2
 800ca20:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800ca22:	697b      	ldr	r3, [r7, #20]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3718      	adds	r7, #24
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	e000ed04 	.word	0xe000ed04

0800ca30 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d103      	bne.n	800ca4e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ca46:	f06f 0303 	mvn.w	r3, #3
 800ca4a:	617b      	str	r3, [r7, #20]
 800ca4c:	e027      	b.n	800ca9e <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800ca4e:	f7ff fdf8 	bl	800c642 <IRQ_Context>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d016      	beq.n	800ca86 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca5c:	f107 030c 	add.w	r3, r7, #12
 800ca60:	4619      	mov	r1, r3
 800ca62:	6938      	ldr	r0, [r7, #16]
 800ca64:	f000 fccd 	bl	800d402 <xQueueGiveFromISR>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d003      	beq.n	800ca76 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800ca6e:	f06f 0302 	mvn.w	r3, #2
 800ca72:	617b      	str	r3, [r7, #20]
 800ca74:	e013      	b.n	800ca9e <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d010      	beq.n	800ca9e <osSemaphoreRelease+0x6e>
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	; (800caa8 <osSemaphoreRelease+0x78>)
 800ca7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	e00b      	b.n	800ca9e <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ca86:	2300      	movs	r3, #0
 800ca88:	2200      	movs	r2, #0
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	6938      	ldr	r0, [r7, #16]
 800ca8e:	f000 fb6f 	bl	800d170 <xQueueGenericSend>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d002      	beq.n	800ca9e <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800ca98:	f06f 0302 	mvn.w	r3, #2
 800ca9c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800ca9e:	697b      	ldr	r3, [r7, #20]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	e000ed04 	.word	0xe000ed04

0800caac <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800caac:	b580      	push	{r7, lr}
 800caae:	b088      	sub	sp, #32
 800cab0:	af02      	add	r7, sp, #8
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800cab8:	2300      	movs	r3, #0
 800caba:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800cabc:	f7ff fdc1 	bl	800c642 <IRQ_Context>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d15f      	bne.n	800cb86 <osMessageQueueNew+0xda>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d05c      	beq.n	800cb86 <osMessageQueueNew+0xda>
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d059      	beq.n	800cb86 <osMessageQueueNew+0xda>
    mem = -1;
 800cad2:	f04f 33ff 	mov.w	r3, #4294967295
 800cad6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d029      	beq.n	800cb32 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d012      	beq.n	800cb0c <osMessageQueueNew+0x60>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	2b4f      	cmp	r3, #79	; 0x4f
 800caec:	d90e      	bls.n	800cb0c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00a      	beq.n	800cb0c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	695a      	ldr	r2, [r3, #20]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	68b9      	ldr	r1, [r7, #8]
 800cafe:	fb01 f303 	mul.w	r3, r1, r3
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d302      	bcc.n	800cb0c <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800cb06:	2301      	movs	r3, #1
 800cb08:	613b      	str	r3, [r7, #16]
 800cb0a:	e014      	b.n	800cb36 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d110      	bne.n	800cb36 <osMessageQueueNew+0x8a>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10c      	bne.n	800cb36 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d108      	bne.n	800cb36 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d104      	bne.n	800cb36 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	613b      	str	r3, [r7, #16]
 800cb30:	e001      	b.n	800cb36 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d10b      	bne.n	800cb54 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	691a      	ldr	r2, [r3, #16]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	2100      	movs	r1, #0
 800cb46:	9100      	str	r1, [sp, #0]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f000 fa0d 	bl	800cf6a <xQueueGenericCreateStatic>
 800cb50:	6178      	str	r0, [r7, #20]
 800cb52:	e008      	b.n	800cb66 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d105      	bne.n	800cb66 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	68b9      	ldr	r1, [r7, #8]
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 fa49 	bl	800cff6 <xQueueGenericCreate>
 800cb64:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00c      	beq.n	800cb86 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d009      	beq.n	800cb86 <osMessageQueueNew+0xda>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d005      	beq.n	800cb86 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6978      	ldr	r0, [r7, #20]
 800cb82:	f000 fff1 	bl	800db68 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800cb86:	697b      	ldr	r3, [r7, #20]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3718      	adds	r7, #24
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800cba8:	f7ff fd4b 	bl	800c642 <IRQ_Context>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d024      	beq.n	800cbfc <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d005      	beq.n	800cbc4 <osMessageQueuePut+0x34>
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d002      	beq.n	800cbc4 <osMessageQueuePut+0x34>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800cbc4:	f06f 0303 	mvn.w	r3, #3
 800cbc8:	61fb      	str	r3, [r7, #28]
 800cbca:	e034      	b.n	800cc36 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cbd0:	f107 0214 	add.w	r2, r7, #20
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	68b9      	ldr	r1, [r7, #8]
 800cbd8:	69b8      	ldr	r0, [r7, #24]
 800cbda:	f000 fb92 	bl	800d302 <xQueueGenericSendFromISR>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d003      	beq.n	800cbec <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800cbe4:	f06f 0302 	mvn.w	r3, #2
 800cbe8:	61fb      	str	r3, [r7, #28]
 800cbea:	e024      	b.n	800cc36 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d021      	beq.n	800cc36 <osMessageQueuePut+0xa6>
 800cbf2:	4b13      	ldr	r3, [pc, #76]	; (800cc40 <osMessageQueuePut+0xb0>)
 800cbf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	e01c      	b.n	800cc36 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d002      	beq.n	800cc08 <osMessageQueuePut+0x78>
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d103      	bne.n	800cc10 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800cc08:	f06f 0303 	mvn.w	r3, #3
 800cc0c:	61fb      	str	r3, [r7, #28]
 800cc0e:	e012      	b.n	800cc36 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cc10:	2300      	movs	r3, #0
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	68b9      	ldr	r1, [r7, #8]
 800cc16:	69b8      	ldr	r0, [r7, #24]
 800cc18:	f000 faaa 	bl	800d170 <xQueueGenericSend>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d009      	beq.n	800cc36 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d003      	beq.n	800cc30 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800cc28:	f06f 0301 	mvn.w	r3, #1
 800cc2c:	61fb      	str	r3, [r7, #28]
 800cc2e:	e002      	b.n	800cc36 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800cc30:	f06f 0302 	mvn.w	r3, #2
 800cc34:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800cc36:	69fb      	ldr	r3, [r7, #28]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3720      	adds	r7, #32
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	e000ed04 	.word	0xe000ed04

0800cc44 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
 800cc50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cc56:	2300      	movs	r3, #0
 800cc58:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800cc5a:	f7ff fcf2 	bl	800c642 <IRQ_Context>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d024      	beq.n	800ccae <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d005      	beq.n	800cc76 <osMessageQueueGet+0x32>
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <osMessageQueueGet+0x32>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800cc76:	f06f 0303 	mvn.w	r3, #3
 800cc7a:	61fb      	str	r3, [r7, #28]
 800cc7c:	e033      	b.n	800cce6 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cc82:	f107 0314 	add.w	r3, r7, #20
 800cc86:	461a      	mov	r2, r3
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	69b8      	ldr	r0, [r7, #24]
 800cc8c:	f000 fdbb 	bl	800d806 <xQueueReceiveFromISR>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d003      	beq.n	800cc9e <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800cc96:	f06f 0302 	mvn.w	r3, #2
 800cc9a:	61fb      	str	r3, [r7, #28]
 800cc9c:	e023      	b.n	800cce6 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d020      	beq.n	800cce6 <osMessageQueueGet+0xa2>
 800cca4:	4b12      	ldr	r3, [pc, #72]	; (800ccf0 <osMessageQueueGet+0xac>)
 800cca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	e01b      	b.n	800cce6 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <osMessageQueueGet+0x76>
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d103      	bne.n	800ccc2 <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800ccba:	f06f 0303 	mvn.w	r3, #3
 800ccbe:	61fb      	str	r3, [r7, #28]
 800ccc0:	e011      	b.n	800cce6 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	68b9      	ldr	r1, [r7, #8]
 800ccc6:	69b8      	ldr	r0, [r7, #24]
 800ccc8:	f000 fc0d 	bl	800d4e6 <xQueueReceive>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d009      	beq.n	800cce6 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d003      	beq.n	800cce0 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800ccd8:	f06f 0301 	mvn.w	r3, #1
 800ccdc:	61fb      	str	r3, [r7, #28]
 800ccde:	e002      	b.n	800cce6 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800cce0:	f06f 0302 	mvn.w	r3, #2
 800cce4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800cce6:	69fb      	ldr	r3, [r7, #28]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3720      	adds	r7, #32
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	e000ed04 	.word	0xe000ed04

0800ccf4 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	4a07      	ldr	r2, [pc, #28]	; (800cd20 <vApplicationGetIdleTaskMemory+0x2c>)
 800cd04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	4a06      	ldr	r2, [pc, #24]	; (800cd24 <vApplicationGetIdleTaskMemory+0x30>)
 800cd0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2280      	movs	r2, #128	; 0x80
 800cd10:	601a      	str	r2, [r3, #0]
}
 800cd12:	bf00      	nop
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	20004934 	.word	0x20004934
 800cd24:	200049dc 	.word	0x200049dc

0800cd28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	4a07      	ldr	r2, [pc, #28]	; (800cd54 <vApplicationGetTimerTaskMemory+0x2c>)
 800cd38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	4a06      	ldr	r2, [pc, #24]	; (800cd58 <vApplicationGetTimerTaskMemory+0x30>)
 800cd3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2280      	movs	r2, #128	; 0x80
 800cd44:	601a      	str	r2, [r3, #0]
}
 800cd46:	bf00      	nop
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	20004bdc 	.word	0x20004bdc
 800cd58:	20004c84 	.word	0x20004c84

0800cd5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f103 0208 	add.w	r2, r3, #8
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f04f 32ff 	mov.w	r2, #4294967295
 800cd74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f103 0208 	add.w	r2, r3, #8
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f103 0208 	add.w	r2, r3, #8
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cdaa:	bf00      	nop
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800cdb6:	b480      	push	{r7}
 800cdb8:	b085      	sub	sp, #20
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdcc:	d103      	bne.n	800cdd6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	e00c      	b.n	800cdf0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	3308      	adds	r3, #8
 800cdda:	60fb      	str	r3, [r7, #12]
 800cddc:	e002      	b.n	800cde4 <vListInsert+0x2e>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d2f6      	bcs.n	800cdde <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	685a      	ldr	r2, [r3, #4]
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	601a      	str	r2, [r3, #0]
}
 800ce1c:	bf00      	nop
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	6892      	ldr	r2, [r2, #8]
 800ce3e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	6852      	ldr	r2, [r2, #4]
 800ce48:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d103      	bne.n	800ce5c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	689a      	ldr	r2, [r3, #8]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	1e5a      	subs	r2, r3, #1
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800ce86:	2301      	movs	r3, #1
 800ce88:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d102      	bne.n	800ce9a <xQueueGenericReset+0x1e>
 800ce94:	f002 fcb8 	bl	800f808 <ulSetInterruptMask>
 800ce98:	e7fe      	b.n	800ce98 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d057      	beq.n	800cf50 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d053      	beq.n	800cf50 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	fba3 2302 	umull	r2, r3, r3, r2
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d000      	beq.n	800cebc <xQueueGenericReset+0x40>
 800ceba:	2101      	movs	r1, #1
 800cebc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d146      	bne.n	800cf50 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800cec2:	f002 fb63 	bl	800f58c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ced2:	fb01 f303 	mul.w	r3, r1, r3
 800ced6:	441a      	add	r2, r3
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2200      	movs	r2, #0
 800cee0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef2:	3b01      	subs	r3, #1
 800cef4:	68b9      	ldr	r1, [r7, #8]
 800cef6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cef8:	fb01 f303 	mul.w	r3, r1, r3
 800cefc:	441a      	add	r2, r3
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	22ff      	movs	r2, #255	; 0xff
 800cf06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	22ff      	movs	r2, #255	; 0xff
 800cf0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10e      	bne.n	800cf36 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d014      	beq.n	800cf4a <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	3310      	adds	r3, #16
 800cf24:	4618      	mov	r0, r3
 800cf26:	f001 fbe1 	bl	800e6ec <xTaskRemoveFromEventList>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00c      	beq.n	800cf4a <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cf30:	f002 fb1a 	bl	800f568 <vPortYield>
 800cf34:	e009      	b.n	800cf4a <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	3310      	adds	r3, #16
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff ff0e 	bl	800cd5c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	3324      	adds	r3, #36	; 0x24
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff ff09 	bl	800cd5c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800cf4a:	f002 fb31 	bl	800f5b0 <vPortExitCritical>
 800cf4e:	e001      	b.n	800cf54 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800cf50:	2300      	movs	r3, #0
 800cf52:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d102      	bne.n	800cf60 <xQueueGenericReset+0xe4>
 800cf5a:	f002 fc55 	bl	800f808 <ulSetInterruptMask>
 800cf5e:	e7fe      	b.n	800cf5e <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800cf60:	68fb      	ldr	r3, [r7, #12]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b088      	sub	sp, #32
 800cf6e:	af02      	add	r7, sp, #8
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
 800cf76:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d102      	bne.n	800cf88 <xQueueGenericCreateStatic+0x1e>
 800cf82:	f002 fc41 	bl	800f808 <ulSetInterruptMask>
 800cf86:	e7fe      	b.n	800cf86 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d028      	beq.n	800cfe0 <xQueueGenericCreateStatic+0x76>
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d025      	beq.n	800cfe0 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d002      	beq.n	800cfa0 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d01f      	beq.n	800cfe0 <xQueueGenericCreateStatic+0x76>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d102      	bne.n	800cfac <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d119      	bne.n	800cfe0 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800cfac:	2350      	movs	r3, #80	; 0x50
 800cfae:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	2b50      	cmp	r3, #80	; 0x50
 800cfb4:	d002      	beq.n	800cfbc <xQueueGenericCreateStatic+0x52>
 800cfb6:	f002 fc27 	bl	800f808 <ulSetInterruptMask>
 800cfba:	e7fe      	b.n	800cfba <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800cfbc:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfca:	f897 2020 	ldrb.w	r2, [r7, #32]
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	68b9      	ldr	r1, [r7, #8]
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f000 f856 	bl	800d08a <prvInitialiseNewQueue>
 800cfde:	e005      	b.n	800cfec <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d102      	bne.n	800cfec <xQueueGenericCreateStatic+0x82>
 800cfe6:	f002 fc0f 	bl	800f808 <ulSetInterruptMask>
 800cfea:	e7fe      	b.n	800cfea <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800cfec:	697b      	ldr	r3, [r7, #20]
    }
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b08a      	sub	sp, #40	; 0x28
 800cffa:	af02      	add	r7, sp, #8
 800cffc:	60f8      	str	r0, [r7, #12]
 800cffe:	60b9      	str	r1, [r7, #8]
 800d000:	4613      	mov	r3, r2
 800d002:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800d004:	2300      	movs	r3, #0
 800d006:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d032      	beq.n	800d074 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800d00e:	2100      	movs	r1, #0
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	fba3 2302 	umull	r2, r3, r3, r2
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d000      	beq.n	800d01e <xQueueGenericCreate+0x28>
 800d01c:	2101      	movs	r1, #1
 800d01e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800d020:	2b00      	cmp	r3, #0
 800d022:	d127      	bne.n	800d074 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800d02c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800d030:	d820      	bhi.n	800d074 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	fb02 f303 	mul.w	r3, r2, r3
 800d03a:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	3350      	adds	r3, #80	; 0x50
 800d040:	4618      	mov	r0, r3
 800d042:	f002 fc41 	bl	800f8c8 <pvPortMalloc>
 800d046:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d018      	beq.n	800d080 <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	3350      	adds	r3, #80	; 0x50
 800d056:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d060:	79fa      	ldrb	r2, [r7, #7]
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	4613      	mov	r3, r2
 800d068:	697a      	ldr	r2, [r7, #20]
 800d06a:	68b9      	ldr	r1, [r7, #8]
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f000 f80c 	bl	800d08a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800d072:	e005      	b.n	800d080 <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d102      	bne.n	800d080 <xQueueGenericCreate+0x8a>
 800d07a:	f002 fbc5 	bl	800f808 <ulSetInterruptMask>
 800d07e:	e7fe      	b.n	800d07e <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800d080:	69fb      	ldr	r3, [r7, #28]
    }
 800d082:	4618      	mov	r0, r3
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b084      	sub	sp, #16
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	607a      	str	r2, [r7, #4]
 800d096:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d103      	bne.n	800d0a6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	69ba      	ldr	r2, [r7, #24]
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	e002      	b.n	800d0ac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0b8:	2101      	movs	r1, #1
 800d0ba:	69b8      	ldr	r0, [r7, #24]
 800d0bc:	f7ff fede 	bl	800ce7c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	78fa      	ldrb	r2, [r7, #3]
 800d0c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800d0c8:	bf00      	nop
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b088      	sub	sp, #32
 800d0d4:	af02      	add	r7, sp, #8
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d013      	beq.n	800d10e <xQueueCreateCountingSemaphoreStatic+0x3e>
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d80f      	bhi.n	800d10e <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f7ff ff36 	bl	800cf6a <xQueueGenericCreateStatic>
 800d0fe:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d009      	beq.n	800d11a <xQueueCreateCountingSemaphoreStatic+0x4a>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 800d10c:	e005      	b.n	800d11a <xQueueCreateCountingSemaphoreStatic+0x4a>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d102      	bne.n	800d11a <xQueueCreateCountingSemaphoreStatic+0x4a>
 800d114:	f002 fb78 	bl	800f808 <ulSetInterruptMask>
 800d118:	e7fe      	b.n	800d118 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800d11a:	697b      	ldr	r3, [r7, #20]
    }
 800d11c:	4618      	mov	r0, r3
 800d11e:	3718      	adds	r7, #24
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d010      	beq.n	800d15a <xQueueCreateCountingSemaphore+0x36>
 800d138:	683a      	ldr	r2, [r7, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d80c      	bhi.n	800d15a <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d140:	2202      	movs	r2, #2
 800d142:	2100      	movs	r1, #0
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff ff56 	bl	800cff6 <xQueueGenericCreate>
 800d14a:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d009      	beq.n	800d166 <xQueueCreateCountingSemaphore+0x42>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 800d158:	e005      	b.n	800d166 <xQueueCreateCountingSemaphore+0x42>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d102      	bne.n	800d166 <xQueueCreateCountingSemaphore+0x42>
 800d160:	f002 fb52 	bl	800f808 <ulSetInterruptMask>
 800d164:	e7fe      	b.n	800d164 <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800d166:	68fb      	ldr	r3, [r7, #12]
    }
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08a      	sub	sp, #40	; 0x28
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d17e:	2300      	movs	r3, #0
 800d180:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d102      	bne.n	800d192 <xQueueGenericSend+0x22>
 800d18c:	f002 fb3c 	bl	800f808 <ulSetInterruptMask>
 800d190:	e7fe      	b.n	800d190 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d103      	bne.n	800d1a0 <xQueueGenericSend+0x30>
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <xQueueGenericSend+0x34>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e000      	b.n	800d1a6 <xQueueGenericSend+0x36>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d102      	bne.n	800d1b0 <xQueueGenericSend+0x40>
 800d1aa:	f002 fb2d 	bl	800f808 <ulSetInterruptMask>
 800d1ae:	e7fe      	b.n	800d1ae <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d103      	bne.n	800d1be <xQueueGenericSend+0x4e>
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d101      	bne.n	800d1c2 <xQueueGenericSend+0x52>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e000      	b.n	800d1c4 <xQueueGenericSend+0x54>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d102      	bne.n	800d1ce <xQueueGenericSend+0x5e>
 800d1c8:	f002 fb1e 	bl	800f808 <ulSetInterruptMask>
 800d1cc:	e7fe      	b.n	800d1cc <xQueueGenericSend+0x5c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1ce:	f001 fc9d 	bl	800eb0c <xTaskGetSchedulerState>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d102      	bne.n	800d1de <xQueueGenericSend+0x6e>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <xQueueGenericSend+0x72>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e000      	b.n	800d1e4 <xQueueGenericSend+0x74>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d102      	bne.n	800d1ee <xQueueGenericSend+0x7e>
 800d1e8:	f002 fb0e 	bl	800f808 <ulSetInterruptMask>
 800d1ec:	e7fe      	b.n	800d1ec <xQueueGenericSend+0x7c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d1ee:	f002 f9cd 	bl	800f58c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1f6:	6a3b      	ldr	r3, [r7, #32]
 800d1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d302      	bcc.n	800d204 <xQueueGenericSend+0x94>
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	2b02      	cmp	r3, #2
 800d202:	d11d      	bne.n	800d240 <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	68b9      	ldr	r1, [r7, #8]
 800d208:	6a38      	ldr	r0, [r7, #32]
 800d20a:	f000 fb9c 	bl	800d946 <prvCopyDataToQueue>
 800d20e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d210:	6a3b      	ldr	r3, [r7, #32]
 800d212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	3324      	adds	r3, #36	; 0x24
 800d21c:	4618      	mov	r0, r3
 800d21e:	f001 fa65 	bl	800e6ec <xTaskRemoveFromEventList>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800d228:	f002 f99e 	bl	800f568 <vPortYield>
 800d22c:	e004      	b.n	800d238 <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800d234:	f002 f998 	bl	800f568 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800d238:	f002 f9ba 	bl	800f5b0 <vPortExitCritical>
                return pdPASS;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e05c      	b.n	800d2fa <xQueueGenericSend+0x18a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d103      	bne.n	800d24e <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d246:	f002 f9b3 	bl	800f5b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	e055      	b.n	800d2fa <xQueueGenericSend+0x18a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d250:	2b00      	cmp	r3, #0
 800d252:	d106      	bne.n	800d262 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d254:	f107 0314 	add.w	r3, r7, #20
 800d258:	4618      	mov	r0, r3
 800d25a:	f001 fb15 	bl	800e888 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d25e:	2301      	movs	r3, #1
 800d260:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d262:	f002 f9a5 	bl	800f5b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d266:	f000 ff67 	bl	800e138 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d26a:	f002 f98f 	bl	800f58c <vPortEnterCritical>
 800d26e:	6a3b      	ldr	r3, [r7, #32]
 800d270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d274:	b25b      	sxtb	r3, r3
 800d276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27a:	d103      	bne.n	800d284 <xQueueGenericSend+0x114>
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d28a:	b25b      	sxtb	r3, r3
 800d28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d290:	d103      	bne.n	800d29a <xQueueGenericSend+0x12a>
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d29a:	f002 f989 	bl	800f5b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d29e:	1d3a      	adds	r2, r7, #4
 800d2a0:	f107 0314 	add.w	r3, r7, #20
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f001 fb04 	bl	800e8b4 <xTaskCheckForTimeOut>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d11d      	bne.n	800d2ee <xQueueGenericSend+0x17e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2b2:	6a38      	ldr	r0, [r7, #32]
 800d2b4:	f000 fc3f 	bl	800db36 <prvIsQueueFull>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d011      	beq.n	800d2e2 <xQueueGenericSend+0x172>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	3310      	adds	r3, #16
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f001 f9b6 	bl	800e638 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800d2cc:	6a38      	ldr	r0, [r7, #32]
 800d2ce:	f000 fbca 	bl	800da66 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800d2d2:	f000 ff3f 	bl	800e154 <xTaskResumeAll>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d188      	bne.n	800d1ee <xQueueGenericSend+0x7e>
                {
                    portYIELD_WITHIN_API();
 800d2dc:	f002 f944 	bl	800f568 <vPortYield>
 800d2e0:	e785      	b.n	800d1ee <xQueueGenericSend+0x7e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800d2e2:	6a38      	ldr	r0, [r7, #32]
 800d2e4:	f000 fbbf 	bl	800da66 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d2e8:	f000 ff34 	bl	800e154 <xTaskResumeAll>
 800d2ec:	e77f      	b.n	800d1ee <xQueueGenericSend+0x7e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800d2ee:	6a38      	ldr	r0, [r7, #32]
 800d2f0:	f000 fbb9 	bl	800da66 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d2f4:	f000 ff2e 	bl	800e154 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800d2f8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3728      	adds	r7, #40	; 0x28
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b08a      	sub	sp, #40	; 0x28
 800d306:	af00      	add	r7, sp, #0
 800d308:	60f8      	str	r0, [r7, #12]
 800d30a:	60b9      	str	r1, [r7, #8]
 800d30c:	607a      	str	r2, [r7, #4]
 800d30e:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800d314:	6a3b      	ldr	r3, [r7, #32]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d102      	bne.n	800d320 <xQueueGenericSendFromISR+0x1e>
 800d31a:	f002 fa75 	bl	800f808 <ulSetInterruptMask>
 800d31e:	e7fe      	b.n	800d31e <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d103      	bne.n	800d32e <xQueueGenericSendFromISR+0x2c>
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <xQueueGenericSendFromISR+0x30>
 800d32e:	2301      	movs	r3, #1
 800d330:	e000      	b.n	800d334 <xQueueGenericSendFromISR+0x32>
 800d332:	2300      	movs	r3, #0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <xQueueGenericSendFromISR+0x3c>
 800d338:	f002 fa66 	bl	800f808 <ulSetInterruptMask>
 800d33c:	e7fe      	b.n	800d33c <xQueueGenericSendFromISR+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b02      	cmp	r3, #2
 800d342:	d103      	bne.n	800d34c <xQueueGenericSendFromISR+0x4a>
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d101      	bne.n	800d350 <xQueueGenericSendFromISR+0x4e>
 800d34c:	2301      	movs	r3, #1
 800d34e:	e000      	b.n	800d352 <xQueueGenericSendFromISR+0x50>
 800d350:	2300      	movs	r3, #0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d102      	bne.n	800d35c <xQueueGenericSendFromISR+0x5a>
 800d356:	f002 fa57 	bl	800f808 <ulSetInterruptMask>
 800d35a:	e7fe      	b.n	800d35a <xQueueGenericSendFromISR+0x58>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d35c:	f002 fa54 	bl	800f808 <ulSetInterruptMask>
 800d360:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d366:	6a3b      	ldr	r3, [r7, #32]
 800d368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d302      	bcc.n	800d374 <xQueueGenericSendFromISR+0x72>
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	2b02      	cmp	r3, #2
 800d372:	d13c      	bne.n	800d3ee <xQueueGenericSendFromISR+0xec>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800d374:	6a3b      	ldr	r3, [r7, #32]
 800d376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d37a:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d380:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	68b9      	ldr	r1, [r7, #8]
 800d386:	6a38      	ldr	r0, [r7, #32]
 800d388:	f000 fadd 	bl	800d946 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800d38c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d394:	d112      	bne.n	800d3bc <xQueueGenericSendFromISR+0xba>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d024      	beq.n	800d3e8 <xQueueGenericSendFromISR+0xe6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d39e:	6a3b      	ldr	r3, [r7, #32]
 800d3a0:	3324      	adds	r3, #36	; 0x24
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f001 f9a2 	bl	800e6ec <xTaskRemoveFromEventList>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d01c      	beq.n	800d3e8 <xQueueGenericSendFromISR+0xe6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d019      	beq.n	800d3e8 <xQueueGenericSendFromISR+0xe6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	e015      	b.n	800d3e8 <xQueueGenericSendFromISR+0xe6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800d3bc:	f000 ffc6 	bl	800e34c <uxTaskGetNumberOfTasks>
 800d3c0:	6138      	str	r0, [r7, #16]
 800d3c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d90d      	bls.n	800d3e8 <xQueueGenericSendFromISR+0xe6>
 800d3cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d3d0:	2b7f      	cmp	r3, #127	; 0x7f
 800d3d2:	d102      	bne.n	800d3da <xQueueGenericSendFromISR+0xd8>
 800d3d4:	f002 fa18 	bl	800f808 <ulSetInterruptMask>
 800d3d8:	e7fe      	b.n	800d3d8 <xQueueGenericSendFromISR+0xd6>
 800d3da:	7efb      	ldrb	r3, [r7, #27]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	b25a      	sxtb	r2, r3
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	627b      	str	r3, [r7, #36]	; 0x24
        {
 800d3ec:	e001      	b.n	800d3f2 <xQueueGenericSendFromISR+0xf0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d3f2:	69f8      	ldr	r0, [r7, #28]
 800d3f4:	f002 fa15 	bl	800f822 <vClearInterruptMask>

    return xReturn;
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3728      	adds	r7, #40	; 0x28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b088      	sub	sp, #32
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d102      	bne.n	800d41c <xQueueGiveFromISR+0x1a>
 800d416:	f002 f9f7 	bl	800f808 <ulSetInterruptMask>
 800d41a:	e7fe      	b.n	800d41a <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <xQueueGiveFromISR+0x28>
 800d424:	f002 f9f0 	bl	800f808 <ulSetInterruptMask>
 800d428:	e7fe      	b.n	800d428 <xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d103      	bne.n	800d43a <xQueueGiveFromISR+0x38>
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <xQueueGiveFromISR+0x3c>
 800d43a:	2301      	movs	r3, #1
 800d43c:	e000      	b.n	800d440 <xQueueGiveFromISR+0x3e>
 800d43e:	2300      	movs	r3, #0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d102      	bne.n	800d44a <xQueueGiveFromISR+0x48>
 800d444:	f002 f9e0 	bl	800f808 <ulSetInterruptMask>
 800d448:	e7fe      	b.n	800d448 <xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d44a:	f002 f9dd 	bl	800f808 <ulSetInterruptMask>
 800d44e:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d454:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45a:	693a      	ldr	r2, [r7, #16]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d238      	bcs.n	800d4d2 <xQueueGiveFromISR+0xd0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d466:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800d470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d478:	d112      	bne.n	800d4a0 <xQueueGiveFromISR+0x9e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d024      	beq.n	800d4cc <xQueueGiveFromISR+0xca>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	3324      	adds	r3, #36	; 0x24
 800d486:	4618      	mov	r0, r3
 800d488:	f001 f930 	bl	800e6ec <xTaskRemoveFromEventList>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d01c      	beq.n	800d4cc <xQueueGiveFromISR+0xca>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d019      	beq.n	800d4cc <xQueueGiveFromISR+0xca>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	2201      	movs	r2, #1
 800d49c:	601a      	str	r2, [r3, #0]
 800d49e:	e015      	b.n	800d4cc <xQueueGiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800d4a0:	f000 ff54 	bl	800e34c <uxTaskGetNumberOfTasks>
 800d4a4:	60b8      	str	r0, [r7, #8]
 800d4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d90d      	bls.n	800d4cc <xQueueGiveFromISR+0xca>
 800d4b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4b4:	2b7f      	cmp	r3, #127	; 0x7f
 800d4b6:	d102      	bne.n	800d4be <xQueueGiveFromISR+0xbc>
 800d4b8:	f002 f9a6 	bl	800f808 <ulSetInterruptMask>
 800d4bc:	e7fe      	b.n	800d4bc <xQueueGiveFromISR+0xba>
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	b25a      	sxtb	r2, r3
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	61fb      	str	r3, [r7, #28]
 800d4d0:	e001      	b.n	800d4d6 <xQueueGiveFromISR+0xd4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d4d6:	6978      	ldr	r0, [r7, #20]
 800d4d8:	f002 f9a3 	bl	800f822 <vClearInterruptMask>

    return xReturn;
 800d4dc:	69fb      	ldr	r3, [r7, #28]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3720      	adds	r7, #32
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b08a      	sub	sp, #40	; 0x28
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	60f8      	str	r0, [r7, #12]
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <xQueueReceive+0x20>
 800d500:	f002 f982 	bl	800f808 <ulSetInterruptMask>
 800d504:	e7fe      	b.n	800d504 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d103      	bne.n	800d514 <xQueueReceive+0x2e>
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <xQueueReceive+0x32>
 800d514:	2301      	movs	r3, #1
 800d516:	e000      	b.n	800d51a <xQueueReceive+0x34>
 800d518:	2300      	movs	r3, #0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d102      	bne.n	800d524 <xQueueReceive+0x3e>
 800d51e:	f002 f973 	bl	800f808 <ulSetInterruptMask>
 800d522:	e7fe      	b.n	800d522 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d524:	f001 faf2 	bl	800eb0c <xTaskGetSchedulerState>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d102      	bne.n	800d534 <xQueueReceive+0x4e>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <xQueueReceive+0x52>
 800d534:	2301      	movs	r3, #1
 800d536:	e000      	b.n	800d53a <xQueueReceive+0x54>
 800d538:	2300      	movs	r3, #0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d102      	bne.n	800d544 <xQueueReceive+0x5e>
 800d53e:	f002 f963 	bl	800f808 <ulSetInterruptMask>
 800d542:	e7fe      	b.n	800d542 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d544:	f002 f822 	bl	800f58c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d019      	beq.n	800d588 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d554:	68b9      	ldr	r1, [r7, #8]
 800d556:	6a38      	ldr	r0, [r7, #32]
 800d558:	f000 fa5f 	bl	800da1a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	1e5a      	subs	r2, r3, #1
 800d560:	6a3b      	ldr	r3, [r7, #32]
 800d562:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	691b      	ldr	r3, [r3, #16]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d009      	beq.n	800d580 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	3310      	adds	r3, #16
 800d570:	4618      	mov	r0, r3
 800d572:	f001 f8bb 	bl	800e6ec <xTaskRemoveFromEventList>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d001      	beq.n	800d580 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d57c:	f001 fff4 	bl	800f568 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800d580:	f002 f816 	bl	800f5b0 <vPortExitCritical>
                return pdPASS;
 800d584:	2301      	movs	r3, #1
 800d586:	e063      	b.n	800d650 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d103      	bne.n	800d596 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d58e:	f002 f80f 	bl	800f5b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800d592:	2300      	movs	r3, #0
 800d594:	e05c      	b.n	800d650 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d106      	bne.n	800d5aa <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d59c:	f107 0314 	add.w	r3, r7, #20
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f001 f971 	bl	800e888 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d5aa:	f002 f801 	bl	800f5b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d5ae:	f000 fdc3 	bl	800e138 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d5b2:	f001 ffeb 	bl	800f58c <vPortEnterCritical>
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c2:	d103      	bne.n	800d5cc <xQueueReceive+0xe6>
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5cc:	6a3b      	ldr	r3, [r7, #32]
 800d5ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5d2:	b25b      	sxtb	r3, r3
 800d5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d8:	d103      	bne.n	800d5e2 <xQueueReceive+0xfc>
 800d5da:	6a3b      	ldr	r3, [r7, #32]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5e2:	f001 ffe5 	bl	800f5b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5e6:	1d3a      	adds	r2, r7, #4
 800d5e8:	f107 0314 	add.w	r3, r7, #20
 800d5ec:	4611      	mov	r1, r2
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f001 f960 	bl	800e8b4 <xTaskCheckForTimeOut>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d11d      	bne.n	800d636 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5fa:	6a38      	ldr	r0, [r7, #32]
 800d5fc:	f000 fa85 	bl	800db0a <prvIsQueueEmpty>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d011      	beq.n	800d62a <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	3324      	adds	r3, #36	; 0x24
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	4611      	mov	r1, r2
 800d60e:	4618      	mov	r0, r3
 800d610:	f001 f812 	bl	800e638 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800d614:	6a38      	ldr	r0, [r7, #32]
 800d616:	f000 fa26 	bl	800da66 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800d61a:	f000 fd9b 	bl	800e154 <xTaskResumeAll>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d18f      	bne.n	800d544 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800d624:	f001 ffa0 	bl	800f568 <vPortYield>
 800d628:	e78c      	b.n	800d544 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800d62a:	6a38      	ldr	r0, [r7, #32]
 800d62c:	f000 fa1b 	bl	800da66 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d630:	f000 fd90 	bl	800e154 <xTaskResumeAll>
 800d634:	e786      	b.n	800d544 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800d636:	6a38      	ldr	r0, [r7, #32]
 800d638:	f000 fa15 	bl	800da66 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d63c:	f000 fd8a 	bl	800e154 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d640:	6a38      	ldr	r0, [r7, #32]
 800d642:	f000 fa62 	bl	800db0a <prvIsQueueEmpty>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f43f af7b 	beq.w	800d544 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800d64e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800d650:	4618      	mov	r0, r3
 800d652:	3728      	adds	r7, #40	; 0x28
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b08a      	sub	sp, #40	; 0x28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d662:	2300      	movs	r3, #0
 800d664:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800d66a:	2300      	movs	r3, #0
 800d66c:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d102      	bne.n	800d67a <xQueueSemaphoreTake+0x22>
 800d674:	f002 f8c8 	bl	800f808 <ulSetInterruptMask>
 800d678:	e7fe      	b.n	800d678 <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <xQueueSemaphoreTake+0x30>
 800d682:	f002 f8c1 	bl	800f808 <ulSetInterruptMask>
 800d686:	e7fe      	b.n	800d686 <xQueueSemaphoreTake+0x2e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d688:	f001 fa40 	bl	800eb0c <xTaskGetSchedulerState>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d102      	bne.n	800d698 <xQueueSemaphoreTake+0x40>
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <xQueueSemaphoreTake+0x44>
 800d698:	2301      	movs	r3, #1
 800d69a:	e000      	b.n	800d69e <xQueueSemaphoreTake+0x46>
 800d69c:	2300      	movs	r3, #0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d102      	bne.n	800d6a8 <xQueueSemaphoreTake+0x50>
 800d6a2:	f002 f8b1 	bl	800f808 <ulSetInterruptMask>
 800d6a6:	e7fe      	b.n	800d6a6 <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d6a8:	f001 ff70 	bl	800f58c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d6ac:	69fb      	ldr	r3, [r7, #28]
 800d6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b0:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d01e      	beq.n	800d6f6 <xQueueSemaphoreTake+0x9e>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	1e5a      	subs	r2, r3, #1
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d104      	bne.n	800d6d2 <xQueueSemaphoreTake+0x7a>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d6c8:	f001 fbee 	bl	800eea8 <pvTaskIncrementMutexHeldCount>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <xQueueSemaphoreTake+0x96>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	3310      	adds	r3, #16
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f001 f804 	bl	800e6ec <xTaskRemoveFromEventList>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d001      	beq.n	800d6ee <xQueueSemaphoreTake+0x96>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d6ea:	f001 ff3d 	bl	800f568 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800d6ee:	f001 ff5f 	bl	800f5b0 <vPortExitCritical>
                return pdPASS;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e083      	b.n	800d7fe <xQueueSemaphoreTake+0x1a6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d103      	bne.n	800d704 <xQueueSemaphoreTake+0xac>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800d6fc:	f001 ff58 	bl	800f5b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800d700:	2300      	movs	r3, #0
 800d702:	e07c      	b.n	800d7fe <xQueueSemaphoreTake+0x1a6>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	2b00      	cmp	r3, #0
 800d708:	d106      	bne.n	800d718 <xQueueSemaphoreTake+0xc0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d70a:	f107 030c 	add.w	r3, r7, #12
 800d70e:	4618      	mov	r0, r3
 800d710:	f001 f8ba 	bl	800e888 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d714:	2301      	movs	r3, #1
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d718:	f001 ff4a 	bl	800f5b0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d71c:	f000 fd0c 	bl	800e138 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d720:	f001 ff34 	bl	800f58c <vPortEnterCritical>
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d72a:	b25b      	sxtb	r3, r3
 800d72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d730:	d103      	bne.n	800d73a <xQueueSemaphoreTake+0xe2>
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d740:	b25b      	sxtb	r3, r3
 800d742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d746:	d103      	bne.n	800d750 <xQueueSemaphoreTake+0xf8>
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d750:	f001 ff2e 	bl	800f5b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d754:	463a      	mov	r2, r7
 800d756:	f107 030c 	add.w	r3, r7, #12
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f001 f8a9 	bl	800e8b4 <xTaskCheckForTimeOut>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d12c      	bne.n	800d7c2 <xQueueSemaphoreTake+0x16a>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d768:	69f8      	ldr	r0, [r7, #28]
 800d76a:	f000 f9ce 	bl	800db0a <prvIsQueueEmpty>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d020      	beq.n	800d7b6 <xQueueSemaphoreTake+0x15e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d109      	bne.n	800d790 <xQueueSemaphoreTake+0x138>
                    {
                        taskENTER_CRITICAL();
 800d77c:	f001 ff06 	bl	800f58c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	4618      	mov	r0, r3
 800d786:	f001 f9df 	bl	800eb48 <xTaskPriorityInherit>
 800d78a:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800d78c:	f001 ff10 	bl	800f5b0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	3324      	adds	r3, #36	; 0x24
 800d794:	683a      	ldr	r2, [r7, #0]
 800d796:	4611      	mov	r1, r2
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 ff4d 	bl	800e638 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800d79e:	69f8      	ldr	r0, [r7, #28]
 800d7a0:	f000 f961 	bl	800da66 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800d7a4:	f000 fcd6 	bl	800e154 <xTaskResumeAll>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f47f af7c 	bne.w	800d6a8 <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 800d7b0:	f001 feda 	bl	800f568 <vPortYield>
 800d7b4:	e778      	b.n	800d6a8 <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800d7b6:	69f8      	ldr	r0, [r7, #28]
 800d7b8:	f000 f955 	bl	800da66 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d7bc:	f000 fcca 	bl	800e154 <xTaskResumeAll>
 800d7c0:	e772      	b.n	800d6a8 <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800d7c2:	69f8      	ldr	r0, [r7, #28]
 800d7c4:	f000 f94f 	bl	800da66 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d7c8:	f000 fcc4 	bl	800e154 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7cc:	69f8      	ldr	r0, [r7, #28]
 800d7ce:	f000 f99c 	bl	800db0a <prvIsQueueEmpty>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f43f af67 	beq.w	800d6a8 <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800d7da:	6a3b      	ldr	r3, [r7, #32]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00d      	beq.n	800d7fc <xQueueSemaphoreTake+0x1a4>
                    {
                        taskENTER_CRITICAL();
 800d7e0:	f001 fed4 	bl	800f58c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d7e4:	69f8      	ldr	r0, [r7, #28]
 800d7e6:	f000 f896 	bl	800d916 <prvGetDisinheritPriorityAfterTimeout>
 800d7ea:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	6979      	ldr	r1, [r7, #20]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f001 fabe 	bl	800ed74 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800d7f8:	f001 feda 	bl	800f5b0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800d7fc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3728      	adds	r7, #40	; 0x28
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b08a      	sub	sp, #40	; 0x28
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	60f8      	str	r0, [r7, #12]
 800d80e:	60b9      	str	r1, [r7, #8]
 800d810:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d102      	bne.n	800d822 <xQueueReceiveFromISR+0x1c>
 800d81c:	f001 fff4 	bl	800f808 <ulSetInterruptMask>
 800d820:	e7fe      	b.n	800d820 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d103      	bne.n	800d830 <xQueueReceiveFromISR+0x2a>
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d101      	bne.n	800d834 <xQueueReceiveFromISR+0x2e>
 800d830:	2301      	movs	r3, #1
 800d832:	e000      	b.n	800d836 <xQueueReceiveFromISR+0x30>
 800d834:	2300      	movs	r3, #0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d102      	bne.n	800d840 <xQueueReceiveFromISR+0x3a>
 800d83a:	f001 ffe5 	bl	800f808 <ulSetInterruptMask>
 800d83e:	e7fe      	b.n	800d83e <xQueueReceiveFromISR+0x38>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d840:	f001 ffe2 	bl	800f808 <ulSetInterruptMask>
 800d844:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84a:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d03c      	beq.n	800d8cc <xQueueReceiveFromISR+0xc6>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d858:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d85a:	68b9      	ldr	r1, [r7, #8]
 800d85c:	6a38      	ldr	r0, [r7, #32]
 800d85e:	f000 f8dc 	bl	800da1a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	1e5a      	subs	r2, r3, #1
 800d866:	6a3b      	ldr	r3, [r7, #32]
 800d868:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800d86a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d872:	d112      	bne.n	800d89a <xQueueReceiveFromISR+0x94>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d874:	6a3b      	ldr	r3, [r7, #32]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d024      	beq.n	800d8c6 <xQueueReceiveFromISR+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	3310      	adds	r3, #16
 800d880:	4618      	mov	r0, r3
 800d882:	f000 ff33 	bl	800e6ec <xTaskRemoveFromEventList>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d01c      	beq.n	800d8c6 <xQueueReceiveFromISR+0xc0>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d019      	beq.n	800d8c6 <xQueueReceiveFromISR+0xc0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	601a      	str	r2, [r3, #0]
 800d898:	e015      	b.n	800d8c6 <xQueueReceiveFromISR+0xc0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800d89a:	f000 fd57 	bl	800e34c <uxTaskGetNumberOfTasks>
 800d89e:	6138      	str	r0, [r7, #16]
 800d8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8a4:	693a      	ldr	r2, [r7, #16]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d90d      	bls.n	800d8c6 <xQueueReceiveFromISR+0xc0>
 800d8aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8ae:	2b7f      	cmp	r3, #127	; 0x7f
 800d8b0:	d102      	bne.n	800d8b8 <xQueueReceiveFromISR+0xb2>
 800d8b2:	f001 ffa9 	bl	800f808 <ulSetInterruptMask>
 800d8b6:	e7fe      	b.n	800d8b6 <xQueueReceiveFromISR+0xb0>
 800d8b8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	b25a      	sxtb	r2, r3
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ca:	e001      	b.n	800d8d0 <xQueueReceiveFromISR+0xca>
        }
        else
        {
            xReturn = pdFAIL;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	627b      	str	r3, [r7, #36]	; 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d8d0:	69f8      	ldr	r0, [r7, #28]
 800d8d2:	f001 ffa6 	bl	800f822 <vClearInterruptMask>

    return xReturn;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3728      	adds	r7, #40	; 0x28
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d102      	bne.n	800d8f8 <vQueueDelete+0x18>
 800d8f2:	f001 ff89 	bl	800f808 <ulSetInterruptMask>
 800d8f6:	e7fe      	b.n	800d8f6 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f000 f979 	bl	800dbf0 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d904:	2b00      	cmp	r3, #0
 800d906:	d102      	bne.n	800d90e <vQueueDelete+0x2e>
        {
            vPortFree( pxQueue );
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f002 f887 	bl	800fa1c <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d90e:	bf00      	nop
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800d916:	b480      	push	{r7}
 800d918:	b085      	sub	sp, #20
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d922:	2b00      	cmp	r3, #0
 800d924:	d006      	beq.n	800d934 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d930:	60fb      	str	r3, [r7, #12]
 800d932:	e001      	b.n	800d938 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d934:	2300      	movs	r3, #0
 800d936:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800d938:	68fb      	ldr	r3, [r7, #12]
    }
 800d93a:	4618      	mov	r0, r3
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b086      	sub	sp, #24
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	60f8      	str	r0, [r7, #12]
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800d952:	2300      	movs	r3, #0
 800d954:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10d      	bne.n	800d980 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d14d      	bne.n	800da08 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	4618      	mov	r0, r3
 800d972:	f001 f979 	bl	800ec68 <xTaskPriorityDisinherit>
 800d976:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	609a      	str	r2, [r3, #8]
 800d97e:	e043      	b.n	800da08 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d119      	bne.n	800d9ba <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6858      	ldr	r0, [r3, #4]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d98e:	461a      	mov	r2, r3
 800d990:	68b9      	ldr	r1, [r7, #8]
 800d992:	f019 fdea 	bl	802756a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	685a      	ldr	r2, [r3, #4]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99e:	441a      	add	r2, r3
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	685a      	ldr	r2, [r3, #4]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d32b      	bcc.n	800da08 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	605a      	str	r2, [r3, #4]
 800d9b8:	e026      	b.n	800da08 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	68d8      	ldr	r0, [r3, #12]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	68b9      	ldr	r1, [r7, #8]
 800d9c6:	f019 fdd0 	bl	802756a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	68da      	ldr	r2, [r3, #12]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d2:	425b      	negs	r3, r3
 800d9d4:	441a      	add	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	68da      	ldr	r2, [r3, #12]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d207      	bcs.n	800d9f6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689a      	ldr	r2, [r3, #8]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ee:	425b      	negs	r3, r3
 800d9f0:	441a      	add	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d105      	bne.n	800da08 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d002      	beq.n	800da08 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	3b01      	subs	r3, #1
 800da06:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800da10:	697b      	ldr	r3, [r7, #20]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3718      	adds	r7, #24
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b082      	sub	sp, #8
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d018      	beq.n	800da5e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68da      	ldr	r2, [r3, #12]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da34:	441a      	add	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	429a      	cmp	r2, r3
 800da44:	d303      	bcc.n	800da4e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	68d9      	ldr	r1, [r3, #12]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da56:	461a      	mov	r2, r3
 800da58:	6838      	ldr	r0, [r7, #0]
 800da5a:	f019 fd86 	bl	802756a <memcpy>
    }
}
 800da5e:	bf00      	nop
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b084      	sub	sp, #16
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800da6e:	f001 fd8d 	bl	800f58c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da78:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800da7a:	e011      	b.n	800daa0 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da80:	2b00      	cmp	r3, #0
 800da82:	d012      	beq.n	800daaa <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	3324      	adds	r3, #36	; 0x24
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 fe2f 	bl	800e6ec <xTaskRemoveFromEventList>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d001      	beq.n	800da98 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800da94:	f000 ff64 	bl	800e960 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	3b01      	subs	r3, #1
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800daa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	dce9      	bgt.n	800da7c <prvUnlockQueue+0x16>
 800daa8:	e000      	b.n	800daac <prvUnlockQueue+0x46>
                    break;
 800daaa:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	22ff      	movs	r2, #255	; 0xff
 800dab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800dab4:	f001 fd7c 	bl	800f5b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800dab8:	f001 fd68 	bl	800f58c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dac2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800dac4:	e011      	b.n	800daea <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d012      	beq.n	800daf4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	3310      	adds	r3, #16
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 fe0a 	bl	800e6ec <xTaskRemoveFromEventList>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d001      	beq.n	800dae2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800dade:	f000 ff3f 	bl	800e960 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800dae2:	7bbb      	ldrb	r3, [r7, #14]
 800dae4:	3b01      	subs	r3, #1
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800daea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	dce9      	bgt.n	800dac6 <prvUnlockQueue+0x60>
 800daf2:	e000      	b.n	800daf6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800daf4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	22ff      	movs	r2, #255	; 0xff
 800dafa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800dafe:	f001 fd57 	bl	800f5b0 <vPortExitCritical>
}
 800db02:	bf00      	nop
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b084      	sub	sp, #16
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800db12:	f001 fd3b 	bl	800f58c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d102      	bne.n	800db24 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800db1e:	2301      	movs	r3, #1
 800db20:	60fb      	str	r3, [r7, #12]
 800db22:	e001      	b.n	800db28 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800db24:	2300      	movs	r3, #0
 800db26:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800db28:	f001 fd42 	bl	800f5b0 <vPortExitCritical>

    return xReturn;
 800db2c:	68fb      	ldr	r3, [r7, #12]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800db3e:	f001 fd25 	bl	800f58c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d102      	bne.n	800db54 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800db4e:	2301      	movs	r3, #1
 800db50:	60fb      	str	r3, [r7, #12]
 800db52:	e001      	b.n	800db58 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800db54:	2300      	movs	r3, #0
 800db56:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800db58:	f001 fd2a 	bl	800f5b0 <vPortExitCritical>

    return xReturn;
 800db5c:	68fb      	ldr	r3, [r7, #12]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
	...

0800db68 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800db72:	2300      	movs	r3, #0
 800db74:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d102      	bne.n	800db82 <vQueueAddToRegistry+0x1a>
 800db7c:	f001 fe44 	bl	800f808 <ulSetInterruptMask>
 800db80:	e7fe      	b.n	800db80 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d024      	beq.n	800dbd2 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db88:	2300      	movs	r3, #0
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	e01e      	b.n	800dbcc <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800db8e:	4a17      	ldr	r2, [pc, #92]	; (800dbec <vQueueAddToRegistry+0x84>)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	4413      	add	r3, r2
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d105      	bne.n	800dbaa <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	00db      	lsls	r3, r3, #3
 800dba2:	4a12      	ldr	r2, [pc, #72]	; (800dbec <vQueueAddToRegistry+0x84>)
 800dba4:	4413      	add	r3, r2
 800dba6:	60bb      	str	r3, [r7, #8]
                    break;
 800dba8:	e013      	b.n	800dbd2 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <vQueueAddToRegistry+0x5e>
 800dbb0:	4a0e      	ldr	r2, [pc, #56]	; (800dbec <vQueueAddToRegistry+0x84>)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d104      	bne.n	800dbc6 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	00db      	lsls	r3, r3, #3
 800dbc0:	4a0a      	ldr	r2, [pc, #40]	; (800dbec <vQueueAddToRegistry+0x84>)
 800dbc2:	4413      	add	r3, r2
 800dbc4:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	60fb      	str	r3, [r7, #12]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b07      	cmp	r3, #7
 800dbd0:	d9dd      	bls.n	800db8e <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d005      	beq.n	800dbe4 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800dbe4:	bf00      	nop
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20004e84 	.word	0x20004e84

0800dbf0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d102      	bne.n	800dc04 <vQueueUnregisterQueue+0x14>
 800dbfe:	f001 fe03 	bl	800f808 <ulSetInterruptMask>
 800dc02:	e7fe      	b.n	800dc02 <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc04:	2300      	movs	r3, #0
 800dc06:	60fb      	str	r3, [r7, #12]
 800dc08:	e016      	b.n	800dc38 <vQueueUnregisterQueue+0x48>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dc0a:	4a0f      	ldr	r2, [pc, #60]	; (800dc48 <vQueueUnregisterQueue+0x58>)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	4413      	add	r3, r2
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d10b      	bne.n	800dc32 <vQueueUnregisterQueue+0x42>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800dc1a:	4a0b      	ldr	r2, [pc, #44]	; (800dc48 <vQueueUnregisterQueue+0x58>)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2100      	movs	r1, #0
 800dc20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dc24:	4a08      	ldr	r2, [pc, #32]	; (800dc48 <vQueueUnregisterQueue+0x58>)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	4413      	add	r3, r2
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	605a      	str	r2, [r3, #4]
                break;
 800dc30:	e006      	b.n	800dc40 <vQueueUnregisterQueue+0x50>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	3301      	adds	r3, #1
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2b07      	cmp	r3, #7
 800dc3c:	d9e5      	bls.n	800dc0a <vQueueUnregisterQueue+0x1a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dc3e:	bf00      	nop
 800dc40:	bf00      	nop
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	20004e84 	.word	0x20004e84

0800dc4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800dc5c:	f001 fc96 	bl	800f58c <vPortEnterCritical>
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc66:	b25b      	sxtb	r3, r3
 800dc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc6c:	d103      	bne.n	800dc76 <vQueueWaitForMessageRestricted+0x2a>
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc7c:	b25b      	sxtb	r3, r3
 800dc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc82:	d103      	bne.n	800dc8c <vQueueWaitForMessageRestricted+0x40>
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc8c:	f001 fc90 	bl	800f5b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	3324      	adds	r3, #36	; 0x24
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	68b9      	ldr	r1, [r7, #8]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f000 fce5 	bl	800e670 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800dca6:	6978      	ldr	r0, [r7, #20]
 800dca8:	f7ff fedd 	bl	800da66 <prvUnlockQueue>
    }
 800dcac:	bf00      	nop
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b08c      	sub	sp, #48	; 0x30
 800dcb8:	af04      	add	r7, sp, #16
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800dcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d102      	bne.n	800dcce <xTaskCreateStatic+0x1a>
 800dcc8:	f001 fd9e 	bl	800f808 <ulSetInterruptMask>
 800dccc:	e7fe      	b.n	800dccc <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d102      	bne.n	800dcda <xTaskCreateStatic+0x26>
 800dcd4:	f001 fd98 	bl	800f808 <ulSetInterruptMask>
 800dcd8:	e7fe      	b.n	800dcd8 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800dcda:	23a8      	movs	r3, #168	; 0xa8
 800dcdc:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2ba8      	cmp	r3, #168	; 0xa8
 800dce2:	d002      	beq.n	800dcea <xTaskCreateStatic+0x36>
 800dce4:	f001 fd90 	bl	800f808 <ulSetInterruptMask>
 800dce8:	e7fe      	b.n	800dce8 <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dcea:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d023      	beq.n	800dd3a <xTaskCreateStatic+0x86>
 800dcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d020      	beq.n	800dd3a <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800dcfc:	22a8      	movs	r2, #168	; 0xa8
 800dcfe:	2100      	movs	r1, #0
 800dd00:	69f8      	ldr	r0, [r7, #28]
 800dd02:	f019 fb0c 	bl	802731e <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd0a:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd14:	2300      	movs	r3, #0
 800dd16:	9303      	str	r3, [sp, #12]
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	9302      	str	r3, [sp, #8]
 800dd1c:	f107 0318 	add.w	r3, r7, #24
 800dd20:	9301      	str	r3, [sp, #4]
 800dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	68b9      	ldr	r1, [r7, #8]
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f000 f855 	bl	800dddc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800dd32:	69f8      	ldr	r0, [r7, #28]
 800dd34:	f000 f8e8 	bl	800df08 <prvAddNewTaskToReadyList>
 800dd38:	e001      	b.n	800dd3e <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800dd3e:	69bb      	ldr	r3, [r7, #24]
    }
 800dd40:	4618      	mov	r0, r3
 800dd42:	3720      	adds	r7, #32
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08c      	sub	sp, #48	; 0x30
 800dd4c:	af04      	add	r7, sp, #16
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	603b      	str	r3, [r7, #0]
 800dd54:	4613      	mov	r3, r2
 800dd56:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd58:	88fb      	ldrh	r3, [r7, #6]
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f001 fdb3 	bl	800f8c8 <pvPortMalloc>
 800dd62:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d013      	beq.n	800dd92 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd6a:	20a8      	movs	r0, #168	; 0xa8
 800dd6c:	f001 fdac 	bl	800f8c8 <pvPortMalloc>
 800dd70:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d008      	beq.n	800dd8a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800dd78:	22a8      	movs	r2, #168	; 0xa8
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	69f8      	ldr	r0, [r7, #28]
 800dd7e:	f019 face 	bl	802731e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	631a      	str	r2, [r3, #48]	; 0x30
 800dd88:	e005      	b.n	800dd96 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800dd8a:	6978      	ldr	r0, [r7, #20]
 800dd8c:	f001 fe46 	bl	800fa1c <vPortFree>
 800dd90:	e001      	b.n	800dd96 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800dd92:	2300      	movs	r3, #0
 800dd94:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d017      	beq.n	800ddcc <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dda4:	88fa      	ldrh	r2, [r7, #6]
 800dda6:	2300      	movs	r3, #0
 800dda8:	9303      	str	r3, [sp, #12]
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	9302      	str	r3, [sp, #8]
 800ddae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb0:	9301      	str	r3, [sp, #4]
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	68b9      	ldr	r1, [r7, #8]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f000 f80e 	bl	800dddc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800ddc0:	69f8      	ldr	r0, [r7, #28]
 800ddc2:	f000 f8a1 	bl	800df08 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	61bb      	str	r3, [r7, #24]
 800ddca:	e002      	b.n	800ddd2 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ddcc:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800ddd2:	69bb      	ldr	r3, [r7, #24]
    }
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3720      	adds	r7, #32
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
 800dde8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ddea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	21a5      	movs	r1, #165	; 0xa5
 800ddf6:	f019 fa92 	bl	802731e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800de04:	3b01      	subs	r3, #1
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	4413      	add	r3, r2
 800de0a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	f023 0307 	bic.w	r3, r3, #7
 800de12:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	f003 0307 	and.w	r3, r3, #7
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <prvInitialiseNewTask+0x48>
 800de1e:	f001 fcf3 	bl	800f808 <ulSetInterruptMask>
 800de22:	e7fe      	b.n	800de22 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d01e      	beq.n	800de68 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de2a:	2300      	movs	r3, #0
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	e012      	b.n	800de56 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	4413      	add	r3, r2
 800de36:	7819      	ldrb	r1, [r3, #0]
 800de38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	4413      	add	r3, r2
 800de3e:	3334      	adds	r3, #52	; 0x34
 800de40:	460a      	mov	r2, r1
 800de42:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	4413      	add	r3, r2
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d006      	beq.n	800de5e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	3301      	adds	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2b0f      	cmp	r3, #15
 800de5a:	d9e9      	bls.n	800de30 <prvInitialiseNewTask+0x54>
 800de5c:	e000      	b.n	800de60 <prvInitialiseNewTask+0x84>
            {
                break;
 800de5e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de62:	2200      	movs	r2, #0
 800de64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800de68:	6a3b      	ldr	r3, [r7, #32]
 800de6a:	2b37      	cmp	r3, #55	; 0x37
 800de6c:	d902      	bls.n	800de74 <prvInitialiseNewTask+0x98>
 800de6e:	f001 fccb 	bl	800f808 <ulSetInterruptMask>
 800de72:	e7fe      	b.n	800de72 <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de74:	6a3b      	ldr	r3, [r7, #32]
 800de76:	2b37      	cmp	r3, #55	; 0x37
 800de78:	d901      	bls.n	800de7e <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de7a:	2337      	movs	r3, #55	; 0x37
 800de7c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	6a3a      	ldr	r2, [r7, #32]
 800de82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	6a3a      	ldr	r2, [r7, #32]
 800de88:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	3304      	adds	r3, #4
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe ff84 	bl	800cd9c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	3318      	adds	r3, #24
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fe ff7f 	bl	800cd9c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dea2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800deaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800deae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800deb2:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	3354      	adds	r3, #84	; 0x54
 800deb8:	224c      	movs	r2, #76	; 0x4c
 800deba:	2100      	movs	r1, #0
 800debc:	4618      	mov	r0, r3
 800debe:	f019 fa2e 	bl	802731e <memset>
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	4a0d      	ldr	r2, [pc, #52]	; (800defc <prvInitialiseNewTask+0x120>)
 800dec6:	659a      	str	r2, [r3, #88]	; 0x58
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	4a0d      	ldr	r2, [pc, #52]	; (800df00 <prvInitialiseNewTask+0x124>)
 800decc:	65da      	str	r2, [r3, #92]	; 0x5c
 800dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded0:	4a0c      	ldr	r2, [pc, #48]	; (800df04 <prvInitialiseNewTask+0x128>)
 800ded2:	661a      	str	r2, [r3, #96]	; 0x60
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	6938      	ldr	r0, [r7, #16]
 800dede:	f001 fbb1 	bl	800f644 <pxPortInitialiseStack>
 800dee2:	4602      	mov	r2, r0
 800dee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	2b00      	cmp	r3, #0
 800deec:	d002      	beq.n	800def4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800def2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800def4:	bf00      	nop
 800def6:	3718      	adds	r7, #24
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	2000fce8 	.word	0x2000fce8
 800df00:	2000fd50 	.word	0x2000fd50
 800df04:	2000fdb8 	.word	0x2000fdb8

0800df08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800df10:	f001 fb3c 	bl	800f58c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800df14:	4b3e      	ldr	r3, [pc, #248]	; (800e010 <prvAddNewTaskToReadyList+0x108>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	3301      	adds	r3, #1
 800df1a:	4a3d      	ldr	r2, [pc, #244]	; (800e010 <prvAddNewTaskToReadyList+0x108>)
 800df1c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800df1e:	4b3d      	ldr	r3, [pc, #244]	; (800e014 <prvAddNewTaskToReadyList+0x10c>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d109      	bne.n	800df3a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800df26:	4a3b      	ldr	r2, [pc, #236]	; (800e014 <prvAddNewTaskToReadyList+0x10c>)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df2c:	4b38      	ldr	r3, [pc, #224]	; (800e010 <prvAddNewTaskToReadyList+0x108>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d110      	bne.n	800df56 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800df34:	f000 fd30 	bl	800e998 <prvInitialiseTaskLists>
 800df38:	e00d      	b.n	800df56 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800df3a:	4b37      	ldr	r3, [pc, #220]	; (800e018 <prvAddNewTaskToReadyList+0x110>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d109      	bne.n	800df56 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df42:	4b34      	ldr	r3, [pc, #208]	; (800e014 <prvAddNewTaskToReadyList+0x10c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d802      	bhi.n	800df56 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800df50:	4a30      	ldr	r2, [pc, #192]	; (800e014 <prvAddNewTaskToReadyList+0x10c>)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800df56:	4b31      	ldr	r3, [pc, #196]	; (800e01c <prvAddNewTaskToReadyList+0x114>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	3301      	adds	r3, #1
 800df5c:	4a2f      	ldr	r2, [pc, #188]	; (800e01c <prvAddNewTaskToReadyList+0x114>)
 800df5e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800df60:	4b2e      	ldr	r3, [pc, #184]	; (800e01c <prvAddNewTaskToReadyList+0x114>)
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df6c:	4b2c      	ldr	r3, [pc, #176]	; (800e020 <prvAddNewTaskToReadyList+0x118>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	429a      	cmp	r2, r3
 800df72:	d903      	bls.n	800df7c <prvAddNewTaskToReadyList+0x74>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df78:	4a29      	ldr	r2, [pc, #164]	; (800e020 <prvAddNewTaskToReadyList+0x118>)
 800df7a:	6013      	str	r3, [r2, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df80:	4928      	ldr	r1, [pc, #160]	; (800e024 <prvAddNewTaskToReadyList+0x11c>)
 800df82:	4613      	mov	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	440b      	add	r3, r1
 800df8c:	3304      	adds	r3, #4
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	60fb      	str	r3, [r7, #12]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	609a      	str	r2, [r3, #8]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	689a      	ldr	r2, [r3, #8]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	60da      	str	r2, [r3, #12]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	3204      	adds	r2, #4
 800dfa8:	605a      	str	r2, [r3, #4]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	1d1a      	adds	r2, r3, #4
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	609a      	str	r2, [r3, #8]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	4a19      	ldr	r2, [pc, #100]	; (800e024 <prvAddNewTaskToReadyList+0x11c>)
 800dfc0:	441a      	add	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	615a      	str	r2, [r3, #20]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfca:	4916      	ldr	r1, [pc, #88]	; (800e024 <prvAddNewTaskToReadyList+0x11c>)
 800dfcc:	4613      	mov	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4413      	add	r3, r2
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	440b      	add	r3, r1
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	1c59      	adds	r1, r3, #1
 800dfda:	4812      	ldr	r0, [pc, #72]	; (800e024 <prvAddNewTaskToReadyList+0x11c>)
 800dfdc:	4613      	mov	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4403      	add	r3, r0
 800dfe6:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800dfe8:	f001 fae2 	bl	800f5b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800dfec:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <prvAddNewTaskToReadyList+0x110>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d008      	beq.n	800e006 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dff4:	4b07      	ldr	r3, [pc, #28]	; (800e014 <prvAddNewTaskToReadyList+0x10c>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffe:	429a      	cmp	r2, r3
 800e000:	d201      	bcs.n	800e006 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800e002:	f001 fab1 	bl	800f568 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e006:	bf00      	nop
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	20005398 	.word	0x20005398
 800e014:	20004ec4 	.word	0x20004ec4
 800e018:	200053a4 	.word	0x200053a4
 800e01c:	200053b4 	.word	0x200053b4
 800e020:	200053a0 	.word	0x200053a0
 800e024:	20004ec8 	.word	0x20004ec8

0800e028 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00f      	beq.n	800e05a <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800e03a:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <vTaskDelay+0x44>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d002      	beq.n	800e048 <vTaskDelay+0x20>
 800e042:	f001 fbe1 	bl	800f808 <ulSetInterruptMask>
 800e046:	e7fe      	b.n	800e046 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800e048:	f000 f876 	bl	800e138 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e04c:	2100      	movs	r1, #0
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 ff3e 	bl	800eed0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800e054:	f000 f87e 	bl	800e154 <xTaskResumeAll>
 800e058:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 800e060:	f001 fa82 	bl	800f568 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e064:	bf00      	nop
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	200053c0 	.word	0x200053c0

0800e070 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b088      	sub	sp, #32
 800e074:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800e076:	2300      	movs	r3, #0
 800e078:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800e07a:	2300      	movs	r3, #0
 800e07c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e07e:	463a      	mov	r2, r7
 800e080:	1d39      	adds	r1, r7, #4
 800e082:	f107 0308 	add.w	r3, r7, #8
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe fe34 	bl	800ccf4 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800e08c:	6839      	ldr	r1, [r7, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	9202      	str	r2, [sp, #8]
 800e094:	9301      	str	r3, [sp, #4]
 800e096:	2300      	movs	r3, #0
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	2300      	movs	r3, #0
 800e09c:	460a      	mov	r2, r1
 800e09e:	491d      	ldr	r1, [pc, #116]	; (800e114 <vTaskStartScheduler+0xa4>)
 800e0a0:	481d      	ldr	r0, [pc, #116]	; (800e118 <vTaskStartScheduler+0xa8>)
 800e0a2:	f7ff fe07 	bl	800dcb4 <xTaskCreateStatic>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4a1c      	ldr	r2, [pc, #112]	; (800e11c <vTaskStartScheduler+0xac>)
 800e0aa:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800e0ac:	4b1b      	ldr	r3, [pc, #108]	; (800e11c <vTaskStartScheduler+0xac>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	60fb      	str	r3, [r7, #12]
 800e0b8:	e001      	b.n	800e0be <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d102      	bne.n	800e0ca <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800e0c4:	f000 ff72 	bl	800efac <xTimerCreateTimerTask>
 800e0c8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d113      	bne.n	800e0f8 <vTaskStartScheduler+0x88>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800e0d0:	f001 fb9a 	bl	800f808 <ulSetInterruptMask>

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800e0d4:	4b12      	ldr	r3, [pc, #72]	; (800e120 <vTaskStartScheduler+0xb0>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3354      	adds	r3, #84	; 0x54
 800e0da:	4a12      	ldr	r2, [pc, #72]	; (800e124 <vTaskStartScheduler+0xb4>)
 800e0dc:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800e0de:	4b12      	ldr	r3, [pc, #72]	; (800e128 <vTaskStartScheduler+0xb8>)
 800e0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800e0e6:	4b11      	ldr	r3, [pc, #68]	; (800e12c <vTaskStartScheduler+0xbc>)
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0ec:	4b10      	ldr	r3, [pc, #64]	; (800e130 <vTaskStartScheduler+0xc0>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800e0f2:	f001 fb31 	bl	800f758 <xPortStartScheduler>
 800e0f6:	e006      	b.n	800e106 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0fe:	d102      	bne.n	800e106 <vTaskStartScheduler+0x96>
 800e100:	f001 fb82 	bl	800f808 <ulSetInterruptMask>
 800e104:	e7fe      	b.n	800e104 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800e106:	4b0b      	ldr	r3, [pc, #44]	; (800e134 <vTaskStartScheduler+0xc4>)
 800e108:	681b      	ldr	r3, [r3, #0]
}
 800e10a:	bf00      	nop
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	0802806c 	.word	0x0802806c
 800e118:	0800e979 	.word	0x0800e979
 800e11c:	200053bc 	.word	0x200053bc
 800e120:	20004ec4 	.word	0x20004ec4
 800e124:	200000fc 	.word	0x200000fc
 800e128:	200053b8 	.word	0x200053b8
 800e12c:	200053a4 	.word	0x200053a4
 800e130:	2000539c 	.word	0x2000539c
 800e134:	20000014 	.word	0x20000014

0800e138 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e138:	b480      	push	{r7}
 800e13a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800e13c:	4b04      	ldr	r3, [pc, #16]	; (800e150 <vTaskSuspendAll+0x18>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	3301      	adds	r3, #1
 800e142:	4a03      	ldr	r2, [pc, #12]	; (800e150 <vTaskSuspendAll+0x18>)
 800e144:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800e146:	bf00      	nop
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	200053c0 	.word	0x200053c0

0800e154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b086      	sub	sp, #24
 800e158:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e15e:	2300      	movs	r3, #0
 800e160:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800e162:	4b6a      	ldr	r3, [pc, #424]	; (800e30c <xTaskResumeAll+0x1b8>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d102      	bne.n	800e170 <xTaskResumeAll+0x1c>
 800e16a:	f001 fb4d 	bl	800f808 <ulSetInterruptMask>
 800e16e:	e7fe      	b.n	800e16e <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800e170:	f001 fa0c 	bl	800f58c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800e174:	4b65      	ldr	r3, [pc, #404]	; (800e30c <xTaskResumeAll+0x1b8>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	3b01      	subs	r3, #1
 800e17a:	4a64      	ldr	r2, [pc, #400]	; (800e30c <xTaskResumeAll+0x1b8>)
 800e17c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e17e:	4b63      	ldr	r3, [pc, #396]	; (800e30c <xTaskResumeAll+0x1b8>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	f040 80bb 	bne.w	800e2fe <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e188:	4b61      	ldr	r3, [pc, #388]	; (800e310 <xTaskResumeAll+0x1bc>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f000 80b6 	beq.w	800e2fe <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e192:	e08b      	b.n	800e2ac <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e194:	4b5f      	ldr	r3, [pc, #380]	; (800e314 <xTaskResumeAll+0x1c0>)
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a0:	60bb      	str	r3, [r7, #8]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	69db      	ldr	r3, [r3, #28]
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	6a12      	ldr	r2, [r2, #32]
 800e1aa:	609a      	str	r2, [r3, #8]
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	6a1b      	ldr	r3, [r3, #32]
 800e1b0:	697a      	ldr	r2, [r7, #20]
 800e1b2:	69d2      	ldr	r2, [r2, #28]
 800e1b4:	605a      	str	r2, [r3, #4]
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	685a      	ldr	r2, [r3, #4]
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	3318      	adds	r3, #24
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d103      	bne.n	800e1ca <xTaskResumeAll+0x76>
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	6a1a      	ldr	r2, [r3, #32]
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	605a      	str	r2, [r3, #4]
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	629a      	str	r2, [r3, #40]	; 0x28
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	1e5a      	subs	r2, r3, #1
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	695b      	ldr	r3, [r3, #20]
 800e1de:	607b      	str	r3, [r7, #4]
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	697a      	ldr	r2, [r7, #20]
 800e1e6:	68d2      	ldr	r2, [r2, #12]
 800e1e8:	609a      	str	r2, [r3, #8]
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	697a      	ldr	r2, [r7, #20]
 800e1f0:	6892      	ldr	r2, [r2, #8]
 800e1f2:	605a      	str	r2, [r3, #4]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	3304      	adds	r3, #4
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d103      	bne.n	800e208 <xTaskResumeAll+0xb4>
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	68da      	ldr	r2, [r3, #12]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	605a      	str	r2, [r3, #4]
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	2200      	movs	r2, #0
 800e20c:	615a      	str	r2, [r3, #20]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	1e5a      	subs	r2, r3, #1
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21c:	4b3e      	ldr	r3, [pc, #248]	; (800e318 <xTaskResumeAll+0x1c4>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d903      	bls.n	800e22c <xTaskResumeAll+0xd8>
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e228:	4a3b      	ldr	r2, [pc, #236]	; (800e318 <xTaskResumeAll+0x1c4>)
 800e22a:	6013      	str	r3, [r2, #0]
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e230:	493a      	ldr	r1, [pc, #232]	; (800e31c <xTaskResumeAll+0x1c8>)
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	440b      	add	r3, r1
 800e23c:	3304      	adds	r3, #4
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	603b      	str	r3, [r7, #0]
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	609a      	str	r2, [r3, #8]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	60da      	str	r2, [r3, #12]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	3204      	adds	r2, #4
 800e258:	605a      	str	r2, [r3, #4]
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	1d1a      	adds	r2, r3, #4
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	609a      	str	r2, [r3, #8]
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e266:	4613      	mov	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4a2b      	ldr	r2, [pc, #172]	; (800e31c <xTaskResumeAll+0x1c8>)
 800e270:	441a      	add	r2, r3
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	615a      	str	r2, [r3, #20]
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e27a:	4928      	ldr	r1, [pc, #160]	; (800e31c <xTaskResumeAll+0x1c8>)
 800e27c:	4613      	mov	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	440b      	add	r3, r1
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	1c59      	adds	r1, r3, #1
 800e28a:	4824      	ldr	r0, [pc, #144]	; (800e31c <xTaskResumeAll+0x1c8>)
 800e28c:	4613      	mov	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4403      	add	r3, r0
 800e296:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e29c:	4b20      	ldr	r3, [pc, #128]	; (800e320 <xTaskResumeAll+0x1cc>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d302      	bcc.n	800e2ac <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800e2a6:	4b1f      	ldr	r3, [pc, #124]	; (800e324 <xTaskResumeAll+0x1d0>)
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2ac:	4b19      	ldr	r3, [pc, #100]	; (800e314 <xTaskResumeAll+0x1c0>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f47f af6f 	bne.w	800e194 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d001      	beq.n	800e2c0 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800e2bc:	f000 fc0a 	bl	800ead4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e2c0:	4b19      	ldr	r3, [pc, #100]	; (800e328 <xTaskResumeAll+0x1d4>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d010      	beq.n	800e2ee <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800e2cc:	f000 f84a 	bl	800e364 <xTaskIncrementTick>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800e2d6:	4b13      	ldr	r3, [pc, #76]	; (800e324 <xTaskResumeAll+0x1d0>)
 800e2d8:	2201      	movs	r2, #1
 800e2da:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1f1      	bne.n	800e2cc <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800e2e8:	4b0f      	ldr	r3, [pc, #60]	; (800e328 <xTaskResumeAll+0x1d4>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800e2ee:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <xTaskResumeAll+0x1d0>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d003      	beq.n	800e2fe <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800e2fa:	f001 f935 	bl	800f568 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e2fe:	f001 f957 	bl	800f5b0 <vPortExitCritical>

    return xAlreadyYielded;
 800e302:	693b      	ldr	r3, [r7, #16]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3718      	adds	r7, #24
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	200053c0 	.word	0x200053c0
 800e310:	20005398 	.word	0x20005398
 800e314:	20005358 	.word	0x20005358
 800e318:	200053a0 	.word	0x200053a0
 800e31c:	20004ec8 	.word	0x20004ec8
 800e320:	20004ec4 	.word	0x20004ec4
 800e324:	200053ac 	.word	0x200053ac
 800e328:	200053a8 	.word	0x200053a8

0800e32c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800e332:	4b05      	ldr	r3, [pc, #20]	; (800e348 <xTaskGetTickCount+0x1c>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800e338:	687b      	ldr	r3, [r7, #4]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	2000539c 	.word	0x2000539c

0800e34c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800e34c:	b480      	push	{r7}
 800e34e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800e350:	4b03      	ldr	r3, [pc, #12]	; (800e360 <uxTaskGetNumberOfTasks+0x14>)
 800e352:	681b      	ldr	r3, [r3, #0]
}
 800e354:	4618      	mov	r0, r3
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	20005398 	.word	0x20005398

0800e364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b088      	sub	sp, #32
 800e368:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800e36a:	2300      	movs	r3, #0
 800e36c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e36e:	4b7a      	ldr	r3, [pc, #488]	; (800e558 <xTaskIncrementTick+0x1f4>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	f040 80e5 	bne.w	800e542 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e378:	4b78      	ldr	r3, [pc, #480]	; (800e55c <xTaskIncrementTick+0x1f8>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	3301      	adds	r3, #1
 800e37e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800e380:	4a76      	ldr	r2, [pc, #472]	; (800e55c <xTaskIncrementTick+0x1f8>)
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d118      	bne.n	800e3be <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800e38c:	4b74      	ldr	r3, [pc, #464]	; (800e560 <xTaskIncrementTick+0x1fc>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d002      	beq.n	800e39c <xTaskIncrementTick+0x38>
 800e396:	f001 fa37 	bl	800f808 <ulSetInterruptMask>
 800e39a:	e7fe      	b.n	800e39a <xTaskIncrementTick+0x36>
 800e39c:	4b70      	ldr	r3, [pc, #448]	; (800e560 <xTaskIncrementTick+0x1fc>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	4b70      	ldr	r3, [pc, #448]	; (800e564 <xTaskIncrementTick+0x200>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a6e      	ldr	r2, [pc, #440]	; (800e560 <xTaskIncrementTick+0x1fc>)
 800e3a8:	6013      	str	r3, [r2, #0]
 800e3aa:	4a6e      	ldr	r2, [pc, #440]	; (800e564 <xTaskIncrementTick+0x200>)
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	6013      	str	r3, [r2, #0]
 800e3b0:	4b6d      	ldr	r3, [pc, #436]	; (800e568 <xTaskIncrementTick+0x204>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	4a6c      	ldr	r2, [pc, #432]	; (800e568 <xTaskIncrementTick+0x204>)
 800e3b8:	6013      	str	r3, [r2, #0]
 800e3ba:	f000 fb8b 	bl	800ead4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800e3be:	4b6b      	ldr	r3, [pc, #428]	; (800e56c <xTaskIncrementTick+0x208>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	69ba      	ldr	r2, [r7, #24]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	f0c0 80a7 	bcc.w	800e518 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3ca:	4b65      	ldr	r3, [pc, #404]	; (800e560 <xTaskIncrementTick+0x1fc>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d104      	bne.n	800e3de <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3d4:	4b65      	ldr	r3, [pc, #404]	; (800e56c <xTaskIncrementTick+0x208>)
 800e3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3da:	601a      	str	r2, [r3, #0]
                    break;
 800e3dc:	e09c      	b.n	800e518 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3de:	4b60      	ldr	r3, [pc, #384]	; (800e560 <xTaskIncrementTick+0x1fc>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800e3ee:	69ba      	ldr	r2, [r7, #24]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d203      	bcs.n	800e3fe <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800e3f6:	4a5d      	ldr	r2, [pc, #372]	; (800e56c <xTaskIncrementTick+0x208>)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800e3fc:	e08c      	b.n	800e518 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	695b      	ldr	r3, [r3, #20]
 800e402:	60bb      	str	r3, [r7, #8]
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	68d2      	ldr	r2, [r2, #12]
 800e40c:	609a      	str	r2, [r3, #8]
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	693a      	ldr	r2, [r7, #16]
 800e414:	6892      	ldr	r2, [r2, #8]
 800e416:	605a      	str	r2, [r3, #4]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	685a      	ldr	r2, [r3, #4]
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	3304      	adds	r3, #4
 800e420:	429a      	cmp	r2, r3
 800e422:	d103      	bne.n	800e42c <xTaskIncrementTick+0xc8>
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	68da      	ldr	r2, [r3, #12]
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	605a      	str	r2, [r3, #4]
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2200      	movs	r2, #0
 800e430:	615a      	str	r2, [r3, #20]
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	1e5a      	subs	r2, r3, #1
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e440:	2b00      	cmp	r3, #0
 800e442:	d01e      	beq.n	800e482 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e448:	607b      	str	r3, [r7, #4]
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	6a12      	ldr	r2, [r2, #32]
 800e452:	609a      	str	r2, [r3, #8]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	6a1b      	ldr	r3, [r3, #32]
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	69d2      	ldr	r2, [r2, #28]
 800e45c:	605a      	str	r2, [r3, #4]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	685a      	ldr	r2, [r3, #4]
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	3318      	adds	r3, #24
 800e466:	429a      	cmp	r2, r3
 800e468:	d103      	bne.n	800e472 <xTaskIncrementTick+0x10e>
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	6a1a      	ldr	r2, [r3, #32]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	605a      	str	r2, [r3, #4]
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	2200      	movs	r2, #0
 800e476:	629a      	str	r2, [r3, #40]	; 0x28
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	1e5a      	subs	r2, r3, #1
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e486:	4b3a      	ldr	r3, [pc, #232]	; (800e570 <xTaskIncrementTick+0x20c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d903      	bls.n	800e496 <xTaskIncrementTick+0x132>
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e492:	4a37      	ldr	r2, [pc, #220]	; (800e570 <xTaskIncrementTick+0x20c>)
 800e494:	6013      	str	r3, [r2, #0]
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e49a:	4936      	ldr	r1, [pc, #216]	; (800e574 <xTaskIncrementTick+0x210>)
 800e49c:	4613      	mov	r3, r2
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	4413      	add	r3, r2
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	440b      	add	r3, r1
 800e4a6:	3304      	adds	r3, #4
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	603b      	str	r3, [r7, #0]
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	683a      	ldr	r2, [r7, #0]
 800e4b0:	609a      	str	r2, [r3, #8]
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	689a      	ldr	r2, [r3, #8]
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	60da      	str	r2, [r3, #12]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	693a      	ldr	r2, [r7, #16]
 800e4c0:	3204      	adds	r2, #4
 800e4c2:	605a      	str	r2, [r3, #4]
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	1d1a      	adds	r2, r3, #4
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	609a      	str	r2, [r3, #8]
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4a26      	ldr	r2, [pc, #152]	; (800e574 <xTaskIncrementTick+0x210>)
 800e4da:	441a      	add	r2, r3
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	615a      	str	r2, [r3, #20]
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e4:	4923      	ldr	r1, [pc, #140]	; (800e574 <xTaskIncrementTick+0x210>)
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4413      	add	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	440b      	add	r3, r1
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	1c59      	adds	r1, r3, #1
 800e4f4:	481f      	ldr	r0, [pc, #124]	; (800e574 <xTaskIncrementTick+0x210>)
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4413      	add	r3, r2
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	4403      	add	r3, r0
 800e500:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e506:	4b1c      	ldr	r3, [pc, #112]	; (800e578 <xTaskIncrementTick+0x214>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50c:	429a      	cmp	r2, r3
 800e50e:	f67f af5c 	bls.w	800e3ca <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800e512:	2301      	movs	r3, #1
 800e514:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e516:	e758      	b.n	800e3ca <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e518:	4b17      	ldr	r3, [pc, #92]	; (800e578 <xTaskIncrementTick+0x214>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e51e:	4915      	ldr	r1, [pc, #84]	; (800e574 <xTaskIncrementTick+0x210>)
 800e520:	4613      	mov	r3, r2
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	4413      	add	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	440b      	add	r3, r1
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d901      	bls.n	800e534 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800e530:	2301      	movs	r3, #1
 800e532:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800e534:	4b11      	ldr	r3, [pc, #68]	; (800e57c <xTaskIncrementTick+0x218>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d007      	beq.n	800e54c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800e53c:	2301      	movs	r3, #1
 800e53e:	61fb      	str	r3, [r7, #28]
 800e540:	e004      	b.n	800e54c <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800e542:	4b0f      	ldr	r3, [pc, #60]	; (800e580 <xTaskIncrementTick+0x21c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3301      	adds	r3, #1
 800e548:	4a0d      	ldr	r2, [pc, #52]	; (800e580 <xTaskIncrementTick+0x21c>)
 800e54a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800e54c:	69fb      	ldr	r3, [r7, #28]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3720      	adds	r7, #32
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	200053c0 	.word	0x200053c0
 800e55c:	2000539c 	.word	0x2000539c
 800e560:	20005350 	.word	0x20005350
 800e564:	20005354 	.word	0x20005354
 800e568:	200053b0 	.word	0x200053b0
 800e56c:	200053b8 	.word	0x200053b8
 800e570:	200053a0 	.word	0x200053a0
 800e574:	20004ec8 	.word	0x20004ec8
 800e578:	20004ec4 	.word	0x20004ec4
 800e57c:	200053ac 	.word	0x200053ac
 800e580:	200053a8 	.word	0x200053a8

0800e584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e58a:	4b25      	ldr	r3, [pc, #148]	; (800e620 <vTaskSwitchContext+0x9c>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d003      	beq.n	800e59a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800e592:	4b24      	ldr	r3, [pc, #144]	; (800e624 <vTaskSwitchContext+0xa0>)
 800e594:	2201      	movs	r2, #1
 800e596:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800e598:	e03e      	b.n	800e618 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 800e59a:	4b22      	ldr	r3, [pc, #136]	; (800e624 <vTaskSwitchContext+0xa0>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5a0:	4b21      	ldr	r3, [pc, #132]	; (800e628 <vTaskSwitchContext+0xa4>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	607b      	str	r3, [r7, #4]
 800e5a6:	e008      	b.n	800e5ba <vTaskSwitchContext+0x36>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d102      	bne.n	800e5b4 <vTaskSwitchContext+0x30>
 800e5ae:	f001 f92b 	bl	800f808 <ulSetInterruptMask>
 800e5b2:	e7fe      	b.n	800e5b2 <vTaskSwitchContext+0x2e>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	607b      	str	r3, [r7, #4]
 800e5ba:	491c      	ldr	r1, [pc, #112]	; (800e62c <vTaskSwitchContext+0xa8>)
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	440b      	add	r3, r1
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d0ec      	beq.n	800e5a8 <vTaskSwitchContext+0x24>
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	4413      	add	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	4a14      	ldr	r2, [pc, #80]	; (800e62c <vTaskSwitchContext+0xa8>)
 800e5da:	4413      	add	r3, r2
 800e5dc:	603b      	str	r3, [r7, #0]
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	605a      	str	r2, [r3, #4]
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	685a      	ldr	r2, [r3, #4]
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d104      	bne.n	800e5fe <vTaskSwitchContext+0x7a>
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	685a      	ldr	r2, [r3, #4]
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	605a      	str	r2, [r3, #4]
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	4a0a      	ldr	r2, [pc, #40]	; (800e630 <vTaskSwitchContext+0xac>)
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	4a07      	ldr	r2, [pc, #28]	; (800e628 <vTaskSwitchContext+0xa4>)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800e60e:	4b08      	ldr	r3, [pc, #32]	; (800e630 <vTaskSwitchContext+0xac>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	3354      	adds	r3, #84	; 0x54
 800e614:	4a07      	ldr	r2, [pc, #28]	; (800e634 <vTaskSwitchContext+0xb0>)
 800e616:	6013      	str	r3, [r2, #0]
}
 800e618:	bf00      	nop
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	200053c0 	.word	0x200053c0
 800e624:	200053ac 	.word	0x200053ac
 800e628:	200053a0 	.word	0x200053a0
 800e62c:	20004ec8 	.word	0x20004ec8
 800e630:	20004ec4 	.word	0x20004ec4
 800e634:	200000fc 	.word	0x200000fc

0800e638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d102      	bne.n	800e64e <vTaskPlaceOnEventList+0x16>
 800e648:	f001 f8de 	bl	800f808 <ulSetInterruptMask>
 800e64c:	e7fe      	b.n	800e64c <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e64e:	4b07      	ldr	r3, [pc, #28]	; (800e66c <vTaskPlaceOnEventList+0x34>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	3318      	adds	r3, #24
 800e654:	4619      	mov	r1, r3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7fe fbad 	bl	800cdb6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e65c:	2101      	movs	r1, #1
 800e65e:	6838      	ldr	r0, [r7, #0]
 800e660:	f000 fc36 	bl	800eed0 <prvAddCurrentTaskToDelayedList>
}
 800e664:	bf00      	nop
 800e666:	3708      	adds	r7, #8
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	20004ec4 	.word	0x20004ec4

0800e670 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800e670:	b580      	push	{r7, lr}
 800e672:	b086      	sub	sp, #24
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d102      	bne.n	800e688 <vTaskPlaceOnEventListRestricted+0x18>
 800e682:	f001 f8c1 	bl	800f808 <ulSetInterruptMask>
 800e686:	e7fe      	b.n	800e686 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	617b      	str	r3, [r7, #20]
 800e68e:	4b16      	ldr	r3, [pc, #88]	; (800e6e8 <vTaskPlaceOnEventListRestricted+0x78>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	697a      	ldr	r2, [r7, #20]
 800e694:	61da      	str	r2, [r3, #28]
 800e696:	4b14      	ldr	r3, [pc, #80]	; (800e6e8 <vTaskPlaceOnEventListRestricted+0x78>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	6892      	ldr	r2, [r2, #8]
 800e69e:	621a      	str	r2, [r3, #32]
 800e6a0:	4b11      	ldr	r3, [pc, #68]	; (800e6e8 <vTaskPlaceOnEventListRestricted+0x78>)
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	3218      	adds	r2, #24
 800e6aa:	605a      	str	r2, [r3, #4]
 800e6ac:	4b0e      	ldr	r3, [pc, #56]	; (800e6e8 <vTaskPlaceOnEventListRestricted+0x78>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f103 0218 	add.w	r2, r3, #24
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	609a      	str	r2, [r3, #8]
 800e6b8:	4b0b      	ldr	r3, [pc, #44]	; (800e6e8 <vTaskPlaceOnEventListRestricted+0x78>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	629a      	str	r2, [r3, #40]	; 0x28
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800e6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6d6:	6879      	ldr	r1, [r7, #4]
 800e6d8:	68b8      	ldr	r0, [r7, #8]
 800e6da:	f000 fbf9 	bl	800eed0 <prvAddCurrentTaskToDelayedList>
    }
 800e6de:	bf00      	nop
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	20004ec4 	.word	0x20004ec4

0800e6ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b088      	sub	sp, #32
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d102      	bne.n	800e708 <xTaskRemoveFromEventList+0x1c>
 800e702:	f001 f881 	bl	800f808 <ulSetInterruptMask>
 800e706:	e7fe      	b.n	800e706 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	69db      	ldr	r3, [r3, #28]
 800e712:	69ba      	ldr	r2, [r7, #24]
 800e714:	6a12      	ldr	r2, [r2, #32]
 800e716:	609a      	str	r2, [r3, #8]
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	6a1b      	ldr	r3, [r3, #32]
 800e71c:	69ba      	ldr	r2, [r7, #24]
 800e71e:	69d2      	ldr	r2, [r2, #28]
 800e720:	605a      	str	r2, [r3, #4]
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	685a      	ldr	r2, [r3, #4]
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	3318      	adds	r3, #24
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d103      	bne.n	800e736 <xTaskRemoveFromEventList+0x4a>
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	6a1a      	ldr	r2, [r3, #32]
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	605a      	str	r2, [r3, #4]
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	2200      	movs	r2, #0
 800e73a:	629a      	str	r2, [r3, #40]	; 0x28
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	1e5a      	subs	r2, r3, #1
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e746:	4b4a      	ldr	r3, [pc, #296]	; (800e870 <xTaskRemoveFromEventList+0x184>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d15f      	bne.n	800e80e <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	695b      	ldr	r3, [r3, #20]
 800e752:	60fb      	str	r3, [r7, #12]
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	69ba      	ldr	r2, [r7, #24]
 800e75a:	68d2      	ldr	r2, [r2, #12]
 800e75c:	609a      	str	r2, [r3, #8]
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	68db      	ldr	r3, [r3, #12]
 800e762:	69ba      	ldr	r2, [r7, #24]
 800e764:	6892      	ldr	r2, [r2, #8]
 800e766:	605a      	str	r2, [r3, #4]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	3304      	adds	r3, #4
 800e770:	429a      	cmp	r2, r3
 800e772:	d103      	bne.n	800e77c <xTaskRemoveFromEventList+0x90>
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	68da      	ldr	r2, [r3, #12]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	605a      	str	r2, [r3, #4]
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	2200      	movs	r2, #0
 800e780:	615a      	str	r2, [r3, #20]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	1e5a      	subs	r2, r3, #1
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e790:	4b38      	ldr	r3, [pc, #224]	; (800e874 <xTaskRemoveFromEventList+0x188>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	429a      	cmp	r2, r3
 800e796:	d903      	bls.n	800e7a0 <xTaskRemoveFromEventList+0xb4>
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79c:	4a35      	ldr	r2, [pc, #212]	; (800e874 <xTaskRemoveFromEventList+0x188>)
 800e79e:	6013      	str	r3, [r2, #0]
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a4:	4934      	ldr	r1, [pc, #208]	; (800e878 <xTaskRemoveFromEventList+0x18c>)
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4413      	add	r3, r2
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	440b      	add	r3, r1
 800e7b0:	3304      	adds	r3, #4
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	60bb      	str	r3, [r7, #8]
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	609a      	str	r2, [r3, #8]
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	689a      	ldr	r2, [r3, #8]
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	60da      	str	r2, [r3, #12]
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	69ba      	ldr	r2, [r7, #24]
 800e7ca:	3204      	adds	r2, #4
 800e7cc:	605a      	str	r2, [r3, #4]
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	1d1a      	adds	r2, r3, #4
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	609a      	str	r2, [r3, #8]
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7da:	4613      	mov	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4a25      	ldr	r2, [pc, #148]	; (800e878 <xTaskRemoveFromEventList+0x18c>)
 800e7e4:	441a      	add	r2, r3
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	615a      	str	r2, [r3, #20]
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ee:	4922      	ldr	r1, [pc, #136]	; (800e878 <xTaskRemoveFromEventList+0x18c>)
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4413      	add	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	440b      	add	r3, r1
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	1c59      	adds	r1, r3, #1
 800e7fe:	481e      	ldr	r0, [pc, #120]	; (800e878 <xTaskRemoveFromEventList+0x18c>)
 800e800:	4613      	mov	r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	4413      	add	r3, r2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4403      	add	r3, r0
 800e80a:	6019      	str	r1, [r3, #0]
 800e80c:	e01b      	b.n	800e846 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e80e:	4b1b      	ldr	r3, [pc, #108]	; (800e87c <xTaskRemoveFromEventList+0x190>)
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	613b      	str	r3, [r7, #16]
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	61da      	str	r2, [r3, #28]
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	689a      	ldr	r2, [r3, #8]
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	621a      	str	r2, [r3, #32]
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	69ba      	ldr	r2, [r7, #24]
 800e828:	3218      	adds	r2, #24
 800e82a:	605a      	str	r2, [r3, #4]
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	f103 0218 	add.w	r2, r3, #24
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	609a      	str	r2, [r3, #8]
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	4a10      	ldr	r2, [pc, #64]	; (800e87c <xTaskRemoveFromEventList+0x190>)
 800e83a:	629a      	str	r2, [r3, #40]	; 0x28
 800e83c:	4b0f      	ldr	r3, [pc, #60]	; (800e87c <xTaskRemoveFromEventList+0x190>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	3301      	adds	r3, #1
 800e842:	4a0e      	ldr	r2, [pc, #56]	; (800e87c <xTaskRemoveFromEventList+0x190>)
 800e844:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e84a:	4b0d      	ldr	r3, [pc, #52]	; (800e880 <xTaskRemoveFromEventList+0x194>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e850:	429a      	cmp	r2, r3
 800e852:	d905      	bls.n	800e860 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800e854:	2301      	movs	r3, #1
 800e856:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800e858:	4b0a      	ldr	r3, [pc, #40]	; (800e884 <xTaskRemoveFromEventList+0x198>)
 800e85a:	2201      	movs	r2, #1
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	e001      	b.n	800e864 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800e860:	2300      	movs	r3, #0
 800e862:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800e864:	69fb      	ldr	r3, [r7, #28]
}
 800e866:	4618      	mov	r0, r3
 800e868:	3720      	adds	r7, #32
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	200053c0 	.word	0x200053c0
 800e874:	200053a0 	.word	0x200053a0
 800e878:	20004ec8 	.word	0x20004ec8
 800e87c:	20005358 	.word	0x20005358
 800e880:	20004ec4 	.word	0x20004ec4
 800e884:	200053ac 	.word	0x200053ac

0800e888 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e890:	4b06      	ldr	r3, [pc, #24]	; (800e8ac <vTaskInternalSetTimeOutState+0x24>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800e898:	4b05      	ldr	r3, [pc, #20]	; (800e8b0 <vTaskInternalSetTimeOutState+0x28>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	605a      	str	r2, [r3, #4]
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	200053b0 	.word	0x200053b0
 800e8b0:	2000539c 	.word	0x2000539c

0800e8b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d102      	bne.n	800e8ca <xTaskCheckForTimeOut+0x16>
 800e8c4:	f000 ffa0 	bl	800f808 <ulSetInterruptMask>
 800e8c8:	e7fe      	b.n	800e8c8 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d102      	bne.n	800e8d6 <xTaskCheckForTimeOut+0x22>
 800e8d0:	f000 ff9a 	bl	800f808 <ulSetInterruptMask>
 800e8d4:	e7fe      	b.n	800e8d4 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800e8d6:	f000 fe59 	bl	800f58c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800e8da:	4b1f      	ldr	r3, [pc, #124]	; (800e958 <xTaskCheckForTimeOut+0xa4>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	693a      	ldr	r2, [r7, #16]
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f2:	d102      	bne.n	800e8fa <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	617b      	str	r3, [r7, #20]
 800e8f8:	e026      	b.n	800e948 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	4b17      	ldr	r3, [pc, #92]	; (800e95c <xTaskCheckForTimeOut+0xa8>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	429a      	cmp	r2, r3
 800e904:	d00a      	beq.n	800e91c <xTaskCheckForTimeOut+0x68>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d305      	bcc.n	800e91c <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800e910:	2301      	movs	r3, #1
 800e912:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2200      	movs	r2, #0
 800e918:	601a      	str	r2, [r3, #0]
 800e91a:	e015      	b.n	800e948 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	429a      	cmp	r2, r3
 800e924:	d20b      	bcs.n	800e93e <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	1ad2      	subs	r2, r2, r3
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff ffa8 	bl	800e888 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800e938:	2300      	movs	r3, #0
 800e93a:	617b      	str	r3, [r7, #20]
 800e93c:	e004      	b.n	800e948 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2200      	movs	r2, #0
 800e942:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800e944:	2301      	movs	r3, #1
 800e946:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800e948:	f000 fe32 	bl	800f5b0 <vPortExitCritical>

    return xReturn;
 800e94c:	697b      	ldr	r3, [r7, #20]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3718      	adds	r7, #24
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	2000539c 	.word	0x2000539c
 800e95c:	200053b0 	.word	0x200053b0

0800e960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e960:	b480      	push	{r7}
 800e962:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800e964:	4b03      	ldr	r3, [pc, #12]	; (800e974 <vTaskMissedYield+0x14>)
 800e966:	2201      	movs	r2, #1
 800e968:	601a      	str	r2, [r3, #0]
}
 800e96a:	bf00      	nop
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	200053ac 	.word	0x200053ac

0800e978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800e980:	f000 f84a 	bl	800ea18 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e984:	4b03      	ldr	r3, [pc, #12]	; (800e994 <prvIdleTask+0x1c>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d9f9      	bls.n	800e980 <prvIdleTask+0x8>
            {
                taskYIELD();
 800e98c:	f000 fdec 	bl	800f568 <vPortYield>
        prvCheckTasksWaitingTermination();
 800e990:	e7f6      	b.n	800e980 <prvIdleTask+0x8>
 800e992:	bf00      	nop
 800e994:	20004ec8 	.word	0x20004ec8

0800e998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e99e:	2300      	movs	r3, #0
 800e9a0:	607b      	str	r3, [r7, #4]
 800e9a2:	e00c      	b.n	800e9be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	4413      	add	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	4a12      	ldr	r2, [pc, #72]	; (800e9f8 <prvInitialiseTaskLists+0x60>)
 800e9b0:	4413      	add	r3, r2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fe f9d2 	bl	800cd5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	607b      	str	r3, [r7, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b37      	cmp	r3, #55	; 0x37
 800e9c2:	d9ef      	bls.n	800e9a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800e9c4:	480d      	ldr	r0, [pc, #52]	; (800e9fc <prvInitialiseTaskLists+0x64>)
 800e9c6:	f7fe f9c9 	bl	800cd5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800e9ca:	480d      	ldr	r0, [pc, #52]	; (800ea00 <prvInitialiseTaskLists+0x68>)
 800e9cc:	f7fe f9c6 	bl	800cd5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800e9d0:	480c      	ldr	r0, [pc, #48]	; (800ea04 <prvInitialiseTaskLists+0x6c>)
 800e9d2:	f7fe f9c3 	bl	800cd5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800e9d6:	480c      	ldr	r0, [pc, #48]	; (800ea08 <prvInitialiseTaskLists+0x70>)
 800e9d8:	f7fe f9c0 	bl	800cd5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800e9dc:	480b      	ldr	r0, [pc, #44]	; (800ea0c <prvInitialiseTaskLists+0x74>)
 800e9de:	f7fe f9bd 	bl	800cd5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800e9e2:	4b0b      	ldr	r3, [pc, #44]	; (800ea10 <prvInitialiseTaskLists+0x78>)
 800e9e4:	4a05      	ldr	r2, [pc, #20]	; (800e9fc <prvInitialiseTaskLists+0x64>)
 800e9e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ea14 <prvInitialiseTaskLists+0x7c>)
 800e9ea:	4a05      	ldr	r2, [pc, #20]	; (800ea00 <prvInitialiseTaskLists+0x68>)
 800e9ec:	601a      	str	r2, [r3, #0]
}
 800e9ee:	bf00      	nop
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20004ec8 	.word	0x20004ec8
 800e9fc:	20005328 	.word	0x20005328
 800ea00:	2000533c 	.word	0x2000533c
 800ea04:	20005358 	.word	0x20005358
 800ea08:	2000536c 	.word	0x2000536c
 800ea0c:	20005384 	.word	0x20005384
 800ea10:	20005350 	.word	0x20005350
 800ea14:	20005354 	.word	0x20005354

0800ea18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea1e:	e019      	b.n	800ea54 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800ea20:	f000 fdb4 	bl	800f58c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea24:	4b10      	ldr	r3, [pc, #64]	; (800ea68 <prvCheckTasksWaitingTermination+0x50>)
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3304      	adds	r3, #4
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fe f9f9 	bl	800ce28 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800ea36:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <prvCheckTasksWaitingTermination+0x54>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	4a0b      	ldr	r2, [pc, #44]	; (800ea6c <prvCheckTasksWaitingTermination+0x54>)
 800ea3e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800ea40:	4b0b      	ldr	r3, [pc, #44]	; (800ea70 <prvCheckTasksWaitingTermination+0x58>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	4a0a      	ldr	r2, [pc, #40]	; (800ea70 <prvCheckTasksWaitingTermination+0x58>)
 800ea48:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800ea4a:	f000 fdb1 	bl	800f5b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 f810 	bl	800ea74 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <prvCheckTasksWaitingTermination+0x58>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1e1      	bne.n	800ea20 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800ea5c:	bf00      	nop
 800ea5e:	bf00      	nop
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	2000536c 	.word	0x2000536c
 800ea6c:	20005398 	.word	0x20005398
 800ea70:	20005380 	.word	0x20005380

0800ea74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800ea7c:	4b14      	ldr	r3, [pc, #80]	; (800ead0 <prvDeleteTCB+0x5c>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	3354      	adds	r3, #84	; 0x54
 800ea82:	4618      	mov	r0, r3
 800ea84:	f018 fc94 	bl	80273b0 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d108      	bne.n	800eaa4 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea96:	4618      	mov	r0, r3
 800ea98:	f000 ffc0 	bl	800fa1c <vPortFree>
                vPortFree( pxTCB );
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 ffbd 	bl	800fa1c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800eaa2:	e010      	b.n	800eac6 <prvDeleteTCB+0x52>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d103      	bne.n	800eab6 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 ffb4 	bl	800fa1c <vPortFree>
    }
 800eab4:	e007      	b.n	800eac6 <prvDeleteTCB+0x52>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d002      	beq.n	800eac6 <prvDeleteTCB+0x52>
 800eac0:	f000 fea2 	bl	800f808 <ulSetInterruptMask>
 800eac4:	e7fe      	b.n	800eac4 <prvDeleteTCB+0x50>
    }
 800eac6:	bf00      	nop
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	20004ec4 	.word	0x20004ec4

0800ead4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ead4:	b480      	push	{r7}
 800ead6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ead8:	4b0a      	ldr	r3, [pc, #40]	; (800eb04 <prvResetNextTaskUnblockTime+0x30>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d104      	bne.n	800eaec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800eae2:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <prvResetNextTaskUnblockTime+0x34>)
 800eae4:	f04f 32ff 	mov.w	r2, #4294967295
 800eae8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800eaea:	e005      	b.n	800eaf8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800eaec:	4b05      	ldr	r3, [pc, #20]	; (800eb04 <prvResetNextTaskUnblockTime+0x30>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a04      	ldr	r2, [pc, #16]	; (800eb08 <prvResetNextTaskUnblockTime+0x34>)
 800eaf6:	6013      	str	r3, [r2, #0]
}
 800eaf8:	bf00      	nop
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	20005350 	.word	0x20005350
 800eb08:	200053b8 	.word	0x200053b8

0800eb0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800eb12:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <xTaskGetSchedulerState+0x34>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d102      	bne.n	800eb20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	607b      	str	r3, [r7, #4]
 800eb1e:	e008      	b.n	800eb32 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb20:	4b08      	ldr	r3, [pc, #32]	; (800eb44 <xTaskGetSchedulerState+0x38>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800eb28:	2302      	movs	r3, #2
 800eb2a:	607b      	str	r3, [r7, #4]
 800eb2c:	e001      	b.n	800eb32 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800eb32:	687b      	ldr	r3, [r7, #4]
    }
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	200053a4 	.word	0x200053a4
 800eb44:	200053c0 	.word	0x200053c0

0800eb48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800eb54:	2300      	movs	r3, #0
 800eb56:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d079      	beq.n	800ec52 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb62:	4b3e      	ldr	r3, [pc, #248]	; (800ec5c <xTaskPriorityInherit+0x114>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d269      	bcs.n	800ec40 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	db06      	blt.n	800eb82 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb74:	4b39      	ldr	r3, [pc, #228]	; (800ec5c <xTaskPriorityInherit+0x114>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	6959      	ldr	r1, [r3, #20]
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	4413      	add	r3, r2
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	4a33      	ldr	r2, [pc, #204]	; (800ec60 <xTaskPriorityInherit+0x118>)
 800eb94:	4413      	add	r3, r2
 800eb96:	4299      	cmp	r1, r3
 800eb98:	d14a      	bne.n	800ec30 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fe f942 	bl	800ce28 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eba4:	4b2d      	ldr	r3, [pc, #180]	; (800ec5c <xTaskPriorityInherit+0x114>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb2:	4b2c      	ldr	r3, [pc, #176]	; (800ec64 <xTaskPriorityInherit+0x11c>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d903      	bls.n	800ebc2 <xTaskPriorityInherit+0x7a>
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebbe:	4a29      	ldr	r2, [pc, #164]	; (800ec64 <xTaskPriorityInherit+0x11c>)
 800ebc0:	6013      	str	r3, [r2, #0]
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc6:	4926      	ldr	r1, [pc, #152]	; (800ec60 <xTaskPriorityInherit+0x118>)
 800ebc8:	4613      	mov	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4413      	add	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	440b      	add	r3, r1
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	609a      	str	r2, [r3, #8]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	689a      	ldr	r2, [r3, #8]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	60da      	str	r2, [r3, #12]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	693a      	ldr	r2, [r7, #16]
 800ebec:	3204      	adds	r2, #4
 800ebee:	605a      	str	r2, [r3, #4]
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	1d1a      	adds	r2, r3, #4
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	609a      	str	r2, [r3, #8]
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	4413      	add	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	4a16      	ldr	r2, [pc, #88]	; (800ec60 <xTaskPriorityInherit+0x118>)
 800ec06:	441a      	add	r2, r3
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	615a      	str	r2, [r3, #20]
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec10:	4913      	ldr	r1, [pc, #76]	; (800ec60 <xTaskPriorityInherit+0x118>)
 800ec12:	4613      	mov	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4413      	add	r3, r2
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	440b      	add	r3, r1
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	1c59      	adds	r1, r3, #1
 800ec20:	480f      	ldr	r0, [pc, #60]	; (800ec60 <xTaskPriorityInherit+0x118>)
 800ec22:	4613      	mov	r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4413      	add	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	4403      	add	r3, r0
 800ec2c:	6019      	str	r1, [r3, #0]
 800ec2e:	e004      	b.n	800ec3a <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec30:	4b0a      	ldr	r3, [pc, #40]	; (800ec5c <xTaskPriorityInherit+0x114>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	617b      	str	r3, [r7, #20]
 800ec3e:	e008      	b.n	800ec52 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec44:	4b05      	ldr	r3, [pc, #20]	; (800ec5c <xTaskPriorityInherit+0x114>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d201      	bcs.n	800ec52 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800ec52:	697b      	ldr	r3, [r7, #20]
    }
 800ec54:	4618      	mov	r0, r3
 800ec56:	3718      	adds	r7, #24
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	20004ec4 	.word	0x20004ec4
 800ec60:	20004ec8 	.word	0x20004ec8
 800ec64:	200053a0 	.word	0x200053a0

0800ec68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b086      	sub	sp, #24
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800ec74:	2300      	movs	r3, #0
 800ec76:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d06e      	beq.n	800ed5c <xTaskPriorityDisinherit+0xf4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800ec7e:	4b3a      	ldr	r3, [pc, #232]	; (800ed68 <xTaskPriorityDisinherit+0x100>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d002      	beq.n	800ec8e <xTaskPriorityDisinherit+0x26>
 800ec88:	f000 fdbe 	bl	800f808 <ulSetInterruptMask>
 800ec8c:	e7fe      	b.n	800ec8c <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d102      	bne.n	800ec9c <xTaskPriorityDisinherit+0x34>
 800ec96:	f000 fdb7 	bl	800f808 <ulSetInterruptMask>
 800ec9a:	e7fe      	b.n	800ec9a <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca0:	1e5a      	subs	r2, r3, #1
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d054      	beq.n	800ed5c <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d150      	bne.n	800ed5c <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe f8b2 	bl	800ce28 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecdc:	4b23      	ldr	r3, [pc, #140]	; (800ed6c <xTaskPriorityDisinherit+0x104>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d903      	bls.n	800ecec <xTaskPriorityDisinherit+0x84>
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece8:	4a20      	ldr	r2, [pc, #128]	; (800ed6c <xTaskPriorityDisinherit+0x104>)
 800ecea:	6013      	str	r3, [r2, #0]
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf0:	491f      	ldr	r1, [pc, #124]	; (800ed70 <xTaskPriorityDisinherit+0x108>)
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4413      	add	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	440b      	add	r3, r1
 800ecfc:	3304      	adds	r3, #4
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	60fb      	str	r3, [r7, #12]
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	609a      	str	r2, [r3, #8]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	689a      	ldr	r2, [r3, #8]
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	60da      	str	r2, [r3, #12]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	693a      	ldr	r2, [r7, #16]
 800ed16:	3204      	adds	r2, #4
 800ed18:	605a      	str	r2, [r3, #4]
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	1d1a      	adds	r2, r3, #4
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	609a      	str	r2, [r3, #8]
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed26:	4613      	mov	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	4413      	add	r3, r2
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	4a10      	ldr	r2, [pc, #64]	; (800ed70 <xTaskPriorityDisinherit+0x108>)
 800ed30:	441a      	add	r2, r3
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	615a      	str	r2, [r3, #20]
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3a:	490d      	ldr	r1, [pc, #52]	; (800ed70 <xTaskPriorityDisinherit+0x108>)
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4413      	add	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	440b      	add	r3, r1
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	1c59      	adds	r1, r3, #1
 800ed4a:	4809      	ldr	r0, [pc, #36]	; (800ed70 <xTaskPriorityDisinherit+0x108>)
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4413      	add	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	4403      	add	r3, r0
 800ed56:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800ed5c:	697b      	ldr	r3, [r7, #20]
    }
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3718      	adds	r7, #24
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	20004ec4 	.word	0x20004ec4
 800ed6c:	200053a0 	.word	0x200053a0
 800ed70:	20004ec8 	.word	0x20004ec8

0800ed74 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b088      	sub	sp, #32
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed82:	2301      	movs	r3, #1
 800ed84:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 8083 	beq.w	800ee94 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d102      	bne.n	800ed9c <vTaskPriorityDisinheritAfterTimeout+0x28>
 800ed96:	f000 fd37 	bl	800f808 <ulSetInterruptMask>
 800ed9a:	e7fe      	b.n	800ed9a <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eda0:	683a      	ldr	r2, [r7, #0]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d902      	bls.n	800edac <vTaskPriorityDisinheritAfterTimeout+0x38>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	61fb      	str	r3, [r7, #28]
 800edaa:	e002      	b.n	800edb2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edb0:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb6:	69fa      	ldr	r2, [r7, #28]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d06b      	beq.n	800ee94 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edc0:	697a      	ldr	r2, [r7, #20]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d166      	bne.n	800ee94 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800edc6:	4b35      	ldr	r3, [pc, #212]	; (800ee9c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	69ba      	ldr	r2, [r7, #24]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d102      	bne.n	800edd6 <vTaskPriorityDisinheritAfterTimeout+0x62>
 800edd0:	f000 fd1a 	bl	800f808 <ulSetInterruptMask>
 800edd4:	e7fe      	b.n	800edd4 <vTaskPriorityDisinheritAfterTimeout+0x60>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edda:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	69fa      	ldr	r2, [r7, #28]
 800ede0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	699b      	ldr	r3, [r3, #24]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	db04      	blt.n	800edf4 <vTaskPriorityDisinheritAfterTimeout+0x80>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edea:	69fb      	ldr	r3, [r7, #28]
 800edec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	6959      	ldr	r1, [r3, #20]
 800edf8:	693a      	ldr	r2, [r7, #16]
 800edfa:	4613      	mov	r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4413      	add	r3, r2
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	4a27      	ldr	r2, [pc, #156]	; (800eea0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ee04:	4413      	add	r3, r2
 800ee06:	4299      	cmp	r1, r3
 800ee08:	d144      	bne.n	800ee94 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	3304      	adds	r3, #4
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fe f80a 	bl	800ce28 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee18:	4b22      	ldr	r3, [pc, #136]	; (800eea4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d903      	bls.n	800ee28 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee24:	4a1f      	ldr	r2, [pc, #124]	; (800eea4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ee26:	6013      	str	r3, [r2, #0]
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee2c:	491c      	ldr	r1, [pc, #112]	; (800eea0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ee2e:	4613      	mov	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	440b      	add	r3, r1
 800ee38:	3304      	adds	r3, #4
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	60fb      	str	r3, [r7, #12]
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	609a      	str	r2, [r3, #8]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	689a      	ldr	r2, [r3, #8]
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	60da      	str	r2, [r3, #12]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	69ba      	ldr	r2, [r7, #24]
 800ee52:	3204      	adds	r2, #4
 800ee54:	605a      	str	r2, [r3, #4]
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	1d1a      	adds	r2, r3, #4
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	609a      	str	r2, [r3, #8]
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee62:	4613      	mov	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	4413      	add	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4a0d      	ldr	r2, [pc, #52]	; (800eea0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ee6c:	441a      	add	r2, r3
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	615a      	str	r2, [r3, #20]
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee76:	490a      	ldr	r1, [pc, #40]	; (800eea0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ee78:	4613      	mov	r3, r2
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	4413      	add	r3, r2
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	440b      	add	r3, r1
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	1c59      	adds	r1, r3, #1
 800ee86:	4806      	ldr	r0, [pc, #24]	; (800eea0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ee88:	4613      	mov	r3, r2
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	4413      	add	r3, r2
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	4403      	add	r3, r0
 800ee92:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800ee94:	bf00      	nop
 800ee96:	3720      	adds	r7, #32
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	20004ec4 	.word	0x20004ec4
 800eea0:	20004ec8 	.word	0x20004ec8
 800eea4:	200053a0 	.word	0x200053a0

0800eea8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800eea8:	b480      	push	{r7}
 800eeaa:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800eeac:	4b07      	ldr	r3, [pc, #28]	; (800eecc <pvTaskIncrementMutexHeldCount+0x24>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d004      	beq.n	800eebe <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800eeb4:	4b05      	ldr	r3, [pc, #20]	; (800eecc <pvTaskIncrementMutexHeldCount+0x24>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eeba:	3201      	adds	r2, #1
 800eebc:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800eebe:	4b03      	ldr	r3, [pc, #12]	; (800eecc <pvTaskIncrementMutexHeldCount+0x24>)
 800eec0:	681b      	ldr	r3, [r3, #0]
    }
 800eec2:	4618      	mov	r0, r3
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	20004ec4 	.word	0x20004ec4

0800eed0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b086      	sub	sp, #24
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800eeda:	4b2e      	ldr	r3, [pc, #184]	; (800ef94 <prvAddCurrentTaskToDelayedList+0xc4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eee0:	4b2d      	ldr	r3, [pc, #180]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	3304      	adds	r3, #4
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fd ff9e 	bl	800ce28 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef2:	d124      	bne.n	800ef3e <prvAddCurrentTaskToDelayedList+0x6e>
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d021      	beq.n	800ef3e <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eefa:	4b28      	ldr	r3, [pc, #160]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xcc>)
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	613b      	str	r3, [r7, #16]
 800ef00:	4b25      	ldr	r3, [pc, #148]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	609a      	str	r2, [r3, #8]
 800ef08:	4b23      	ldr	r3, [pc, #140]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	693a      	ldr	r2, [r7, #16]
 800ef0e:	6892      	ldr	r2, [r2, #8]
 800ef10:	60da      	str	r2, [r3, #12]
 800ef12:	4b21      	ldr	r3, [pc, #132]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	3204      	adds	r2, #4
 800ef1c:	605a      	str	r2, [r3, #4]
 800ef1e:	4b1e      	ldr	r3, [pc, #120]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	1d1a      	adds	r2, r3, #4
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	609a      	str	r2, [r3, #8]
 800ef28:	4b1b      	ldr	r3, [pc, #108]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a1b      	ldr	r2, [pc, #108]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xcc>)
 800ef2e:	615a      	str	r2, [r3, #20]
 800ef30:	4b1a      	ldr	r3, [pc, #104]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xcc>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	3301      	adds	r3, #1
 800ef36:	4a19      	ldr	r2, [pc, #100]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xcc>)
 800ef38:	6013      	str	r3, [r2, #0]
 800ef3a:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ef3c:	e026      	b.n	800ef8c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800ef3e:	697a      	ldr	r2, [r7, #20]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4413      	add	r3, r2
 800ef44:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef46:	4b14      	ldr	r3, [pc, #80]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d209      	bcs.n	800ef6a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef56:	4b12      	ldr	r3, [pc, #72]	; (800efa0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	4b0f      	ldr	r3, [pc, #60]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	3304      	adds	r3, #4
 800ef60:	4619      	mov	r1, r3
 800ef62:	4610      	mov	r0, r2
 800ef64:	f7fd ff27 	bl	800cdb6 <vListInsert>
}
 800ef68:	e010      	b.n	800ef8c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef6a:	4b0e      	ldr	r3, [pc, #56]	; (800efa4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	3304      	adds	r3, #4
 800ef74:	4619      	mov	r1, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	f7fd ff1d 	bl	800cdb6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800ef7c:	4b0a      	ldr	r3, [pc, #40]	; (800efa8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d202      	bcs.n	800ef8c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800ef86:	4a08      	ldr	r2, [pc, #32]	; (800efa8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6013      	str	r3, [r2, #0]
}
 800ef8c:	bf00      	nop
 800ef8e:	3718      	adds	r7, #24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	2000539c 	.word	0x2000539c
 800ef98:	20004ec4 	.word	0x20004ec4
 800ef9c:	20005384 	.word	0x20005384
 800efa0:	20005354 	.word	0x20005354
 800efa4:	20005350 	.word	0x20005350
 800efa8:	200053b8 	.word	0x200053b8

0800efac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800efac:	b580      	push	{r7, lr}
 800efae:	b088      	sub	sp, #32
 800efb0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800efb2:	2300      	movs	r3, #0
 800efb4:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800efb6:	f000 fa59 	bl	800f46c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800efba:	4b18      	ldr	r3, [pc, #96]	; (800f01c <xTimerCreateTimerTask+0x70>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d020      	beq.n	800f004 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800efc2:	2300      	movs	r3, #0
 800efc4:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800efca:	463a      	mov	r2, r7
 800efcc:	1d39      	adds	r1, r7, #4
 800efce:	f107 0308 	add.w	r3, r7, #8
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fd fea8 	bl	800cd28 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	9202      	str	r2, [sp, #8]
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	2302      	movs	r3, #2
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	2300      	movs	r3, #0
 800efe8:	460a      	mov	r2, r1
 800efea:	490d      	ldr	r1, [pc, #52]	; (800f020 <xTimerCreateTimerTask+0x74>)
 800efec:	480d      	ldr	r0, [pc, #52]	; (800f024 <xTimerCreateTimerTask+0x78>)
 800efee:	f7fe fe61 	bl	800dcb4 <xTaskCreateStatic>
 800eff2:	4603      	mov	r3, r0
 800eff4:	4a0c      	ldr	r2, [pc, #48]	; (800f028 <xTimerCreateTimerTask+0x7c>)
 800eff6:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800eff8:	4b0b      	ldr	r3, [pc, #44]	; (800f028 <xTimerCreateTimerTask+0x7c>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800f000:	2301      	movs	r3, #1
 800f002:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d102      	bne.n	800f010 <xTimerCreateTimerTask+0x64>
 800f00a:	f000 fbfd 	bl	800f808 <ulSetInterruptMask>
 800f00e:	e7fe      	b.n	800f00e <xTimerCreateTimerTask+0x62>
        return xReturn;
 800f010:	68fb      	ldr	r3, [r7, #12]
    }
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	200053f4 	.word	0x200053f4
 800f020:	08028074 	.word	0x08028074
 800f024:	0800f0d1 	.word	0x0800f0d1
 800f028:	200053f8 	.word	0x200053f8

0800f02c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800f038:	e008      	b.n	800f04c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	4413      	add	r3, r2
 800f042:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	6a1b      	ldr	r3, [r3, #32]
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	699a      	ldr	r2, [r3, #24]
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	18d1      	adds	r1, r2, r3
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f000 f8d5 	bl	800f208 <prvInsertTimerInActiveList>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d1ea      	bne.n	800f03a <prvReloadTimer+0xe>
        }
    }
 800f064:	bf00      	nop
 800f066:	bf00      	nop
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f07a:	4b14      	ldr	r3, [pc, #80]	; (800f0cc <prvProcessExpiredTimer+0x5c>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	68db      	ldr	r3, [r3, #12]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	3304      	adds	r3, #4
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fd fecd 	bl	800ce28 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f094:	f003 0304 	and.w	r3, r3, #4
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d005      	beq.n	800f0a8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	6879      	ldr	r1, [r7, #4]
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f7ff ffc3 	bl	800f02c <prvReloadTimer>
 800f0a6:	e008      	b.n	800f0ba <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0ae:	f023 0301 	bic.w	r3, r3, #1
 800f0b2:	b2da      	uxtb	r2, r3
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6a1b      	ldr	r3, [r3, #32]
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	4798      	blx	r3
    }
 800f0c2:	bf00      	nop
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	200053ec 	.word	0x200053ec

0800f0d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0d8:	f107 0308 	add.w	r3, r7, #8
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 f84f 	bl	800f180 <prvGetNextExpireTime>
 800f0e2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f000 f803 	bl	800f0f4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800f0ee:	f000 f8cd 	bl	800f28c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0f2:	e7f1      	b.n	800f0d8 <prvTimerTask+0x8>

0800f0f4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800f0fe:	f7ff f81b 	bl	800e138 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f102:	f107 0308 	add.w	r3, r7, #8
 800f106:	4618      	mov	r0, r3
 800f108:	f000 f85e 	bl	800f1c8 <prvSampleTimeNow>
 800f10c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d12a      	bne.n	800f16a <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10a      	bne.n	800f130 <prvProcessTimerOrBlockTask+0x3c>
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d806      	bhi.n	800f130 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800f122:	f7ff f817 	bl	800e154 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f126:	68f9      	ldr	r1, [r7, #12]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7ff ffa1 	bl	800f070 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800f12e:	e01e      	b.n	800f16e <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d008      	beq.n	800f148 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f136:	4b10      	ldr	r3, [pc, #64]	; (800f178 <prvProcessTimerOrBlockTask+0x84>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d101      	bne.n	800f144 <prvProcessTimerOrBlockTask+0x50>
 800f140:	2301      	movs	r3, #1
 800f142:	e000      	b.n	800f146 <prvProcessTimerOrBlockTask+0x52>
 800f144:	2300      	movs	r3, #0
 800f146:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f148:	4b0c      	ldr	r3, [pc, #48]	; (800f17c <prvProcessTimerOrBlockTask+0x88>)
 800f14a:	6818      	ldr	r0, [r3, #0]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	4619      	mov	r1, r3
 800f156:	f7fe fd79 	bl	800dc4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800f15a:	f7fe fffb 	bl	800e154 <xTaskResumeAll>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d104      	bne.n	800f16e <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800f164:	f000 fa00 	bl	800f568 <vPortYield>
    }
 800f168:	e001      	b.n	800f16e <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800f16a:	f7fe fff3 	bl	800e154 <xTaskResumeAll>
    }
 800f16e:	bf00      	nop
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	200053f0 	.word	0x200053f0
 800f17c:	200053f4 	.word	0x200053f4

0800f180 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800f180:	b480      	push	{r7}
 800f182:	b085      	sub	sp, #20
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f188:	4b0e      	ldr	r3, [pc, #56]	; (800f1c4 <prvGetNextExpireTime+0x44>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <prvGetNextExpireTime+0x16>
 800f192:	2201      	movs	r2, #1
 800f194:	e000      	b.n	800f198 <prvGetNextExpireTime+0x18>
 800f196:	2200      	movs	r2, #0
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d105      	bne.n	800f1b0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1a4:	4b07      	ldr	r3, [pc, #28]	; (800f1c4 <prvGetNextExpireTime+0x44>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	60fb      	str	r3, [r7, #12]
 800f1ae:	e001      	b.n	800f1b4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
    }
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3714      	adds	r7, #20
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	200053ec 	.word	0x200053ec

0800f1c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800f1d0:	f7ff f8ac 	bl	800e32c <xTaskGetTickCount>
 800f1d4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800f1d6:	4b0b      	ldr	r3, [pc, #44]	; (800f204 <prvSampleTimeNow+0x3c>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d205      	bcs.n	800f1ec <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800f1e0:	f000 f91e 	bl	800f420 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	601a      	str	r2, [r3, #0]
 800f1ea:	e002      	b.n	800f1f2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800f1f2:	4a04      	ldr	r2, [pc, #16]	; (800f204 <prvSampleTimeNow+0x3c>)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
    }
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	200053fc 	.word	0x200053fc

0800f208 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800f208:	b580      	push	{r7, lr}
 800f20a:	b086      	sub	sp, #24
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	607a      	str	r2, [r7, #4]
 800f214:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800f216:	2300      	movs	r3, #0
 800f218:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800f226:	68ba      	ldr	r2, [r7, #8]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d812      	bhi.n	800f254 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	1ad2      	subs	r2, r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	699b      	ldr	r3, [r3, #24]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d302      	bcc.n	800f242 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800f23c:	2301      	movs	r3, #1
 800f23e:	617b      	str	r3, [r7, #20]
 800f240:	e01b      	b.n	800f27a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f242:	4b10      	ldr	r3, [pc, #64]	; (800f284 <prvInsertTimerInActiveList+0x7c>)
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3304      	adds	r3, #4
 800f24a:	4619      	mov	r1, r3
 800f24c:	4610      	mov	r0, r2
 800f24e:	f7fd fdb2 	bl	800cdb6 <vListInsert>
 800f252:	e012      	b.n	800f27a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d206      	bcs.n	800f26a <prvInsertTimerInActiveList+0x62>
 800f25c:	68ba      	ldr	r2, [r7, #8]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	429a      	cmp	r2, r3
 800f262:	d302      	bcc.n	800f26a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800f264:	2301      	movs	r3, #1
 800f266:	617b      	str	r3, [r7, #20]
 800f268:	e007      	b.n	800f27a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f26a:	4b07      	ldr	r3, [pc, #28]	; (800f288 <prvInsertTimerInActiveList+0x80>)
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	3304      	adds	r3, #4
 800f272:	4619      	mov	r1, r3
 800f274:	4610      	mov	r0, r2
 800f276:	f7fd fd9e 	bl	800cdb6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800f27a:	697b      	ldr	r3, [r7, #20]
    }
 800f27c:	4618      	mov	r0, r3
 800f27e:	3718      	adds	r7, #24
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	200053f0 	.word	0x200053f0
 800f288:	200053ec 	.word	0x200053ec

0800f28c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b088      	sub	sp, #32
 800f290:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f292:	e0b2      	b.n	800f3fa <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2b00      	cmp	r3, #0
 800f298:	da10      	bge.n	800f2bc <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f29a:	1d3b      	adds	r3, r7, #4
 800f29c:	3304      	adds	r3, #4
 800f29e:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d102      	bne.n	800f2ac <prvProcessReceivedCommands+0x20>
 800f2a6:	f000 faaf 	bl	800f808 <ulSetInterruptMask>
 800f2aa:	e7fe      	b.n	800f2aa <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	69fa      	ldr	r2, [r7, #28]
 800f2b2:	6850      	ldr	r0, [r2, #4]
 800f2b4:	69fa      	ldr	r2, [r7, #28]
 800f2b6:	6892      	ldr	r2, [r2, #8]
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	f2c0 809b 	blt.w	800f3fa <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	695b      	ldr	r3, [r3, #20]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d004      	beq.n	800f2da <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	3304      	adds	r3, #4
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fd fda7 	bl	800ce28 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2da:	463b      	mov	r3, r7
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7ff ff73 	bl	800f1c8 <prvSampleTimeNow>
 800f2e2:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	2b08      	cmp	r3, #8
 800f2ea:	f200 8085 	bhi.w	800f3f8 <prvProcessReceivedCommands+0x16c>
 800f2ee:	a201      	add	r2, pc, #4	; (adr r2, 800f2f4 <prvProcessReceivedCommands+0x68>)
 800f2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f4:	0800f319 	.word	0x0800f319
 800f2f8:	0800f319 	.word	0x0800f319
 800f2fc:	0800f381 	.word	0x0800f381
 800f300:	0800f395 	.word	0x0800f395
 800f304:	0800f3cf 	.word	0x0800f3cf
 800f308:	0800f319 	.word	0x0800f319
 800f30c:	0800f319 	.word	0x0800f319
 800f310:	0800f381 	.word	0x0800f381
 800f314:	0800f395 	.word	0x0800f395
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f31e:	f043 0301 	orr.w	r3, r3, #1
 800f322:	b2da      	uxtb	r2, r3
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	18d1      	adds	r1, r2, r3
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	697a      	ldr	r2, [r7, #20]
 800f336:	69b8      	ldr	r0, [r7, #24]
 800f338:	f7ff ff66 	bl	800f208 <prvInsertTimerInActiveList>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d05b      	beq.n	800f3fa <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d009      	beq.n	800f364 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800f350:	68ba      	ldr	r2, [r7, #8]
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	4413      	add	r3, r2
 800f358:	697a      	ldr	r2, [r7, #20]
 800f35a:	4619      	mov	r1, r3
 800f35c:	69b8      	ldr	r0, [r7, #24]
 800f35e:	f7ff fe65 	bl	800f02c <prvReloadTimer>
 800f362:	e008      	b.n	800f376 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f364:	69bb      	ldr	r3, [r7, #24]
 800f366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f36a:	f023 0301 	bic.w	r3, r3, #1
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	6a1b      	ldr	r3, [r3, #32]
 800f37a:	69b8      	ldr	r0, [r7, #24]
 800f37c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800f37e:	e03c      	b.n	800f3fa <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f386:	f023 0301 	bic.w	r3, r3, #1
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	69bb      	ldr	r3, [r7, #24]
 800f38e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800f392:	e032      	b.n	800f3fa <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f39a:	f043 0301 	orr.w	r3, r3, #1
 800f39e:	b2da      	uxtb	r2, r3
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	699b      	ldr	r3, [r3, #24]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d102      	bne.n	800f3ba <prvProcessReceivedCommands+0x12e>
 800f3b4:	f000 fa28 	bl	800f808 <ulSetInterruptMask>
 800f3b8:	e7fe      	b.n	800f3b8 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	699a      	ldr	r2, [r3, #24]
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	18d1      	adds	r1, r2, r3
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	69b8      	ldr	r0, [r7, #24]
 800f3c8:	f7ff ff1e 	bl	800f208 <prvInsertTimerInActiveList>
                        break;
 800f3cc:	e015      	b.n	800f3fa <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3d4:	f003 0302 	and.w	r3, r3, #2
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d103      	bne.n	800f3e4 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800f3dc:	69b8      	ldr	r0, [r7, #24]
 800f3de:	f000 fb1d 	bl	800fa1c <vPortFree>
 800f3e2:	e00a      	b.n	800f3fa <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3ea:	f023 0301 	bic.w	r3, r3, #1
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	69bb      	ldr	r3, [r7, #24]
 800f3f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800f3f6:	e000      	b.n	800f3fa <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800f3f8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3fa:	4b08      	ldr	r3, [pc, #32]	; (800f41c <prvProcessReceivedCommands+0x190>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	1d39      	adds	r1, r7, #4
 800f400:	2200      	movs	r2, #0
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe f86f 	bl	800d4e6 <xQueueReceive>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f47f af42 	bne.w	800f294 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800f410:	bf00      	nop
 800f412:	bf00      	nop
 800f414:	3720      	adds	r7, #32
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	200053f4 	.word	0x200053f4

0800f420 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f426:	e009      	b.n	800f43c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f428:	4b0e      	ldr	r3, [pc, #56]	; (800f464 <prvSwitchTimerLists+0x44>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800f432:	f04f 31ff 	mov.w	r1, #4294967295
 800f436:	6838      	ldr	r0, [r7, #0]
 800f438:	f7ff fe1a 	bl	800f070 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f43c:	4b09      	ldr	r3, [pc, #36]	; (800f464 <prvSwitchTimerLists+0x44>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1f0      	bne.n	800f428 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800f446:	4b07      	ldr	r3, [pc, #28]	; (800f464 <prvSwitchTimerLists+0x44>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800f44c:	4b06      	ldr	r3, [pc, #24]	; (800f468 <prvSwitchTimerLists+0x48>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a04      	ldr	r2, [pc, #16]	; (800f464 <prvSwitchTimerLists+0x44>)
 800f452:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800f454:	4a04      	ldr	r2, [pc, #16]	; (800f468 <prvSwitchTimerLists+0x48>)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6013      	str	r3, [r2, #0]
    }
 800f45a:	bf00      	nop
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	200053ec 	.word	0x200053ec
 800f468:	200053f0 	.word	0x200053f0

0800f46c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800f472:	f000 f88b 	bl	800f58c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800f476:	4b15      	ldr	r3, [pc, #84]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d120      	bne.n	800f4c0 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800f47e:	4814      	ldr	r0, [pc, #80]	; (800f4d0 <prvCheckForValidListAndQueue+0x64>)
 800f480:	f7fd fc6c 	bl	800cd5c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800f484:	4813      	ldr	r0, [pc, #76]	; (800f4d4 <prvCheckForValidListAndQueue+0x68>)
 800f486:	f7fd fc69 	bl	800cd5c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800f48a:	4b13      	ldr	r3, [pc, #76]	; (800f4d8 <prvCheckForValidListAndQueue+0x6c>)
 800f48c:	4a10      	ldr	r2, [pc, #64]	; (800f4d0 <prvCheckForValidListAndQueue+0x64>)
 800f48e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800f490:	4b12      	ldr	r3, [pc, #72]	; (800f4dc <prvCheckForValidListAndQueue+0x70>)
 800f492:	4a10      	ldr	r2, [pc, #64]	; (800f4d4 <prvCheckForValidListAndQueue+0x68>)
 800f494:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f496:	2300      	movs	r3, #0
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	4b11      	ldr	r3, [pc, #68]	; (800f4e0 <prvCheckForValidListAndQueue+0x74>)
 800f49c:	4a11      	ldr	r2, [pc, #68]	; (800f4e4 <prvCheckForValidListAndQueue+0x78>)
 800f49e:	2110      	movs	r1, #16
 800f4a0:	200a      	movs	r0, #10
 800f4a2:	f7fd fd62 	bl	800cf6a <xQueueGenericCreateStatic>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	4a08      	ldr	r2, [pc, #32]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4aa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800f4ac:	4b07      	ldr	r3, [pc, #28]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4b4:	4b05      	ldr	r3, [pc, #20]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	490b      	ldr	r1, [pc, #44]	; (800f4e8 <prvCheckForValidListAndQueue+0x7c>)
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fe fb54 	bl	800db68 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800f4c0:	f000 f876 	bl	800f5b0 <vPortExitCritical>
    }
 800f4c4:	bf00      	nop
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	200053f4 	.word	0x200053f4
 800f4d0:	200053c4 	.word	0x200053c4
 800f4d4:	200053d8 	.word	0x200053d8
 800f4d8:	200053ec 	.word	0x200053ec
 800f4dc:	200053f0 	.word	0x200053f0
 800f4e0:	200054a0 	.word	0x200054a0
 800f4e4:	20005400 	.word	0x20005400
 800f4e8:	0802807c 	.word	0x0802807c

0800f4ec <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f4f0:	4b0b      	ldr	r3, [pc, #44]	; (800f520 <vPortSetupTimerInterrupt+0x34>)
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f4f6:	4b0b      	ldr	r3, [pc, #44]	; (800f524 <vPortSetupTimerInterrupt+0x38>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4fc:	4b0a      	ldr	r3, [pc, #40]	; (800f528 <vPortSetupTimerInterrupt+0x3c>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a0a      	ldr	r2, [pc, #40]	; (800f52c <vPortSetupTimerInterrupt+0x40>)
 800f502:	fba2 2303 	umull	r2, r3, r2, r3
 800f506:	099b      	lsrs	r3, r3, #6
 800f508:	4a09      	ldr	r2, [pc, #36]	; (800f530 <vPortSetupTimerInterrupt+0x44>)
 800f50a:	3b01      	subs	r3, #1
 800f50c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800f50e:	4b04      	ldr	r3, [pc, #16]	; (800f520 <vPortSetupTimerInterrupt+0x34>)
 800f510:	2207      	movs	r2, #7
 800f512:	601a      	str	r2, [r3, #0]
}
 800f514:	bf00      	nop
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	e000e010 	.word	0xe000e010
 800f524:	e000e018 	.word	0xe000e018
 800f528:	20000004 	.word	0x20000004
 800f52c:	10624dd3 	.word	0x10624dd3
 800f530:	e000e014 	.word	0xe000e014

0800f534 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800f53a:	2300      	movs	r3, #0
 800f53c:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800f53e:	4b09      	ldr	r3, [pc, #36]	; (800f564 <prvTaskExitError+0x30>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	d002      	beq.n	800f54e <prvTaskExitError+0x1a>
 800f548:	f000 f95e 	bl	800f808 <ulSetInterruptMask>
 800f54c:	e7fe      	b.n	800f54c <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800f54e:	f000 f95b 	bl	800f808 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800f552:	bf00      	nop
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d0fc      	beq.n	800f554 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800f55a:	bf00      	nop
 800f55c:	bf00      	nop
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	20000018 	.word	0x20000018

0800f568 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800f568:	b480      	push	{r7}
 800f56a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f56c:	4b06      	ldr	r3, [pc, #24]	; (800f588 <vPortYield+0x20>)
 800f56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f572:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800f574:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800f578:	f3bf 8f6f 	isb	sy
}
 800f57c:	bf00      	nop
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr
 800f586:	bf00      	nop
 800f588:	e000ed04 	.word	0xe000ed04

0800f58c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800f590:	f000 f93a 	bl	800f808 <ulSetInterruptMask>
    ulCriticalNesting++;
 800f594:	4b05      	ldr	r3, [pc, #20]	; (800f5ac <vPortEnterCritical+0x20>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3301      	adds	r3, #1
 800f59a:	4a04      	ldr	r2, [pc, #16]	; (800f5ac <vPortEnterCritical+0x20>)
 800f59c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800f59e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800f5a2:	f3bf 8f6f 	isb	sy
}
 800f5a6:	bf00      	nop
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20000018 	.word	0x20000018

0800f5b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800f5b4:	4b0a      	ldr	r3, [pc, #40]	; (800f5e0 <vPortExitCritical+0x30>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d102      	bne.n	800f5c2 <vPortExitCritical+0x12>
 800f5bc:	f000 f924 	bl	800f808 <ulSetInterruptMask>
 800f5c0:	e7fe      	b.n	800f5c0 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800f5c2:	4b07      	ldr	r3, [pc, #28]	; (800f5e0 <vPortExitCritical+0x30>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	4a05      	ldr	r2, [pc, #20]	; (800f5e0 <vPortExitCritical+0x30>)
 800f5ca:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800f5cc:	4b04      	ldr	r3, [pc, #16]	; (800f5e0 <vPortExitCritical+0x30>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d102      	bne.n	800f5da <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	f000 f924 	bl	800f822 <vClearInterruptMask>
    }
}
 800f5da:	bf00      	nop
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	20000018 	.word	0x20000018

0800f5e4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5ea:	f000 f90d 	bl	800f808 <ulSetInterruptMask>
 800f5ee:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800f5f0:	f7fe feb8 	bl	800e364 <xTaskIncrementTick>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5fa:	4b05      	ldr	r3, [pc, #20]	; (800f610 <xPortSysTickHandler+0x2c>)
 800f5fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f600:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 f90d 	bl	800f822 <vClearInterruptMask>
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	e000ed04 	.word	0xe000ed04

0800f614 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	699b      	ldr	r3, [r3, #24]
 800f620:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3b02      	subs	r3, #2
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800f62a:	7afb      	ldrb	r3, [r7, #11]
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	d102      	bne.n	800f636 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800f630:	f000 f8b6 	bl	800f7a0 <vRestoreContextOfFirstTask>
            break;
 800f634:	e002      	b.n	800f63c <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800f636:	f000 f8e7 	bl	800f808 <ulSetInterruptMask>
 800f63a:	e7fe      	b.n	800f63a <vPortSVCHandler_C+0x26>
    }
}
 800f63c:	bf00      	nop
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	3b04      	subs	r3, #4
 800f656:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f65e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	3b04      	subs	r3, #4
 800f664:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	3b04      	subs	r3, #4
 800f670:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800f672:	4a38      	ldr	r2, [pc, #224]	; (800f754 <pxPortInitialiseStack+0x110>)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	3b04      	subs	r3, #4
 800f67c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800f684:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	3b04      	subs	r3, #4
 800f68a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800f692:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	3b04      	subs	r3, #4
 800f698:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800f6a0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	3b04      	subs	r3, #4
 800f6a6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800f6ae:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	3b04      	subs	r3, #4
 800f6b4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800f6b6:	683a      	ldr	r2, [r7, #0]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	3b04      	subs	r3, #4
 800f6c0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800f6c8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	3b04      	subs	r3, #4
 800f6ce:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800f6d6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	3b04      	subs	r3, #4
 800f6dc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800f6e4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3b04      	subs	r3, #4
 800f6ea:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800f6f2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	3b04      	subs	r3, #4
 800f6f8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800f700:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	3b04      	subs	r3, #4
 800f706:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800f70e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	3b04      	subs	r3, #4
 800f714:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800f71c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	3b04      	subs	r3, #4
 800f722:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800f72a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	3b04      	subs	r3, #4
 800f730:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800f738:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	3b04      	subs	r3, #4
 800f73e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800f746:	68fb      	ldr	r3, [r7, #12]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3714      	adds	r7, #20
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr
 800f754:	0800f535 	.word	0x0800f535

0800f758 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800f75c:	4b0c      	ldr	r3, [pc, #48]	; (800f790 <xPortStartScheduler+0x38>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a0b      	ldr	r2, [pc, #44]	; (800f790 <xPortStartScheduler+0x38>)
 800f762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f766:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800f768:	4b09      	ldr	r3, [pc, #36]	; (800f790 <xPortStartScheduler+0x38>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a08      	ldr	r2, [pc, #32]	; (800f790 <xPortStartScheduler+0x38>)
 800f76e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f772:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800f774:	f7ff feba 	bl	800f4ec <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800f778:	4b06      	ldr	r3, [pc, #24]	; (800f794 <xPortStartScheduler+0x3c>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800f77e:	f000 f82f 	bl	800f7e0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800f782:	f7fe feff 	bl	800e584 <vTaskSwitchContext>
    prvTaskExitError();
 800f786:	f7ff fed5 	bl	800f534 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	e000ed20 	.word	0xe000ed20
 800f794:	20000018 	.word	0x20000018
	...

0800f7a0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f7a0:	4a0b      	ldr	r2, [pc, #44]	; (800f7d0 <pxCurrentTCBConst2>)
 800f7a2:	6811      	ldr	r1, [r2, #0]
 800f7a4:	6808      	ldr	r0, [r1, #0]
 800f7a6:	c806      	ldmia	r0!, {r1, r2}
 800f7a8:	f381 880b 	msr	PSPLIM, r1
 800f7ac:	2102      	movs	r1, #2
 800f7ae:	f381 8814 	msr	CONTROL, r1
 800f7b2:	3020      	adds	r0, #32
 800f7b4:	f380 8809 	msr	PSP, r0
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f04f 0000 	mov.w	r0, #0
 800f7c0:	f380 8811 	msr	BASEPRI, r0
 800f7c4:	4710      	bx	r2
 800f7c6:	bf00      	nop
 800f7c8:	f3af 8000 	nop.w
 800f7cc:	f3af 8000 	nop.w

0800f7d0 <pxCurrentTCBConst2>:
 800f7d0:	20004ec4 	.word	0x20004ec4
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop
	...

0800f7e0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f7e0:	4807      	ldr	r0, [pc, #28]	; (800f800 <xVTORConst>)
 800f7e2:	6800      	ldr	r0, [r0, #0]
 800f7e4:	6800      	ldr	r0, [r0, #0]
 800f7e6:	f380 8808 	msr	MSP, r0
 800f7ea:	b662      	cpsie	i
 800f7ec:	b661      	cpsie	f
 800f7ee:	f3bf 8f4f 	dsb	sy
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	df02      	svc	2
 800f7f8:	bf00      	nop
 800f7fa:	bf00      	nop
 800f7fc:	f3af 8000 	nop.w

0800f800 <xVTORConst>:
 800f800:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f808:	f3ef 8011 	mrs	r0, BASEPRI
 800f80c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800f810:	f381 8811 	msr	BASEPRI, r1
 800f814:	f3bf 8f4f 	dsb	sy
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800f81e:	bf00      	nop
 800f820:	4618      	mov	r0, r3

0800f822 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f822:	f380 8811 	msr	BASEPRI, r0
 800f826:	f3bf 8f4f 	dsb	sy
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800f830:	bf00      	nop
	...

0800f840 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f840:	f3ef 8009 	mrs	r0, PSP
 800f844:	f3ef 820b 	mrs	r2, PSPLIM
 800f848:	4673      	mov	r3, lr
 800f84a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800f84e:	4a10      	ldr	r2, [pc, #64]	; (800f890 <pxCurrentTCBConst>)
 800f850:	6811      	ldr	r1, [r2, #0]
 800f852:	6008      	str	r0, [r1, #0]
 800f854:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f858:	f380 8811 	msr	BASEPRI, r0
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	f3bf 8f6f 	isb	sy
 800f864:	f7fe fe8e 	bl	800e584 <vTaskSwitchContext>
 800f868:	f04f 0000 	mov.w	r0, #0
 800f86c:	f380 8811 	msr	BASEPRI, r0
 800f870:	4a07      	ldr	r2, [pc, #28]	; (800f890 <pxCurrentTCBConst>)
 800f872:	6811      	ldr	r1, [r2, #0]
 800f874:	6808      	ldr	r0, [r1, #0]
 800f876:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800f87a:	f382 880b 	msr	PSPLIM, r2
 800f87e:	f380 8809 	msr	PSP, r0
 800f882:	4718      	bx	r3
 800f884:	f3af 8000 	nop.w
 800f888:	f3af 8000 	nop.w
 800f88c:	f3af 8000 	nop.w

0800f890 <pxCurrentTCBConst>:
 800f890:	20004ec4 	.word	0x20004ec4
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800f894:	bf00      	nop
 800f896:	bf00      	nop
	...

0800f8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f8a0:	f01e 0f04 	tst.w	lr, #4
 800f8a4:	bf0c      	ite	eq
 800f8a6:	f3ef 8008 	mrseq	r0, MSP
 800f8aa:	f3ef 8009 	mrsne	r0, PSP
 800f8ae:	4904      	ldr	r1, [pc, #16]	; (800f8c0 <svchandler_address_const>)
 800f8b0:	4708      	bx	r1
 800f8b2:	bf00      	nop
 800f8b4:	f3af 8000 	nop.w
 800f8b8:	f3af 8000 	nop.w
 800f8bc:	f3af 8000 	nop.w

0800f8c0 <svchandler_address_const>:
 800f8c0:	0800f615 	.word	0x0800f615
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800f8c4:	bf00      	nop
 800f8c6:	bf00      	nop

0800f8c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b088      	sub	sp, #32
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800f8d4:	f7fe fc30 	bl	800e138 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800f8d8:	4b4b      	ldr	r3, [pc, #300]	; (800fa08 <pvPortMalloc+0x140>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d101      	bne.n	800f8e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800f8e0:	f000 f8e8 	bl	800fab4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d012      	beq.n	800f910 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800f8ea:	2208      	movs	r2, #8
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f003 0307 	and.w	r3, r3, #7
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	3308      	adds	r3, #8
 800f8f6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	43db      	mvns	r3, r3
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d804      	bhi.n	800f90c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	4413      	add	r3, r2
 800f908:	607b      	str	r3, [r7, #4]
 800f90a:	e001      	b.n	800f910 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800f90c:	2300      	movs	r3, #0
 800f90e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	db68      	blt.n	800f9e8 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d065      	beq.n	800f9e8 <pvPortMalloc+0x120>
 800f91c:	4b3b      	ldr	r3, [pc, #236]	; (800fa0c <pvPortMalloc+0x144>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	429a      	cmp	r2, r3
 800f924:	d860      	bhi.n	800f9e8 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800f926:	4b3a      	ldr	r3, [pc, #232]	; (800fa10 <pvPortMalloc+0x148>)
 800f928:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800f92a:	4b39      	ldr	r3, [pc, #228]	; (800fa10 <pvPortMalloc+0x148>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f930:	e004      	b.n	800f93c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	429a      	cmp	r2, r3
 800f944:	d903      	bls.n	800f94e <pvPortMalloc+0x86>
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1f1      	bne.n	800f932 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800f94e:	4b2e      	ldr	r3, [pc, #184]	; (800fa08 <pvPortMalloc+0x140>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	69fa      	ldr	r2, [r7, #28]
 800f954:	429a      	cmp	r2, r3
 800f956:	d047      	beq.n	800f9e8 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2208      	movs	r2, #8
 800f95e:	4413      	add	r3, r2
 800f960:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	685a      	ldr	r2, [r3, #4]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	1ad2      	subs	r2, r2, r3
 800f972:	2308      	movs	r3, #8
 800f974:	005b      	lsls	r3, r3, #1
 800f976:	429a      	cmp	r2, r3
 800f978:	d917      	bls.n	800f9aa <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f97a:	69fa      	ldr	r2, [r7, #28]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4413      	add	r3, r2
 800f980:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f003 0307 	and.w	r3, r3, #7
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d002      	beq.n	800f992 <pvPortMalloc+0xca>
 800f98c:	f7ff ff3c 	bl	800f808 <ulSetInterruptMask>
 800f990:	e7fe      	b.n	800f990 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	685a      	ldr	r2, [r3, #4]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	1ad2      	subs	r2, r2, r3
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f000 f8e1 	bl	800fb6c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f9aa:	4b18      	ldr	r3, [pc, #96]	; (800fa0c <pvPortMalloc+0x144>)
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	4a15      	ldr	r2, [pc, #84]	; (800fa0c <pvPortMalloc+0x144>)
 800f9b6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9b8:	4b14      	ldr	r3, [pc, #80]	; (800fa0c <pvPortMalloc+0x144>)
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	4b15      	ldr	r3, [pc, #84]	; (800fa14 <pvPortMalloc+0x14c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d203      	bcs.n	800f9cc <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f9c4:	4b11      	ldr	r3, [pc, #68]	; (800fa0c <pvPortMalloc+0x144>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a12      	ldr	r2, [pc, #72]	; (800fa14 <pvPortMalloc+0x14c>)
 800f9ca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800f9de:	4b0e      	ldr	r3, [pc, #56]	; (800fa18 <pvPortMalloc+0x150>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	4a0c      	ldr	r2, [pc, #48]	; (800fa18 <pvPortMalloc+0x150>)
 800f9e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800f9e8:	f7fe fbb4 	bl	800e154 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	f003 0307 	and.w	r3, r3, #7
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d002      	beq.n	800f9fc <pvPortMalloc+0x134>
 800f9f6:	f7ff ff07 	bl	800f808 <ulSetInterruptMask>
 800f9fa:	e7fe      	b.n	800f9fa <pvPortMalloc+0x132>
    return pvReturn;
 800f9fc:	697b      	ldr	r3, [r7, #20]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3720      	adds	r7, #32
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	2000ccf8 	.word	0x2000ccf8
 800fa0c:	2000ccfc 	.word	0x2000ccfc
 800fa10:	2000ccf0 	.word	0x2000ccf0
 800fa14:	2000cd00 	.word	0x2000cd00
 800fa18:	2000cd04 	.word	0x2000cd04

0800fa1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d039      	beq.n	800faa2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800fa2e:	2308      	movs	r3, #8
 800fa30:	425b      	negs	r3, r3
 800fa32:	68fa      	ldr	r2, [r7, #12]
 800fa34:	4413      	add	r3, r2
 800fa36:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	db02      	blt.n	800fa4a <vPortFree+0x2e>
 800fa44:	f7ff fee0 	bl	800f808 <ulSetInterruptMask>
 800fa48:	e7fe      	b.n	800fa48 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d002      	beq.n	800fa58 <vPortFree+0x3c>
 800fa52:	f7ff fed9 	bl	800f808 <ulSetInterruptMask>
 800fa56:	e7fe      	b.n	800fa56 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	0fdb      	lsrs	r3, r3, #31
 800fa5e:	f003 0301 	and.w	r3, r3, #1
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d01c      	beq.n	800faa2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d118      	bne.n	800faa2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800fa7c:	f7fe fb5c 	bl	800e138 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	685a      	ldr	r2, [r3, #4]
 800fa84:	4b09      	ldr	r3, [pc, #36]	; (800faac <vPortFree+0x90>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4413      	add	r3, r2
 800fa8a:	4a08      	ldr	r2, [pc, #32]	; (800faac <vPortFree+0x90>)
 800fa8c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa8e:	68b8      	ldr	r0, [r7, #8]
 800fa90:	f000 f86c 	bl	800fb6c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800fa94:	4b06      	ldr	r3, [pc, #24]	; (800fab0 <vPortFree+0x94>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	4a05      	ldr	r2, [pc, #20]	; (800fab0 <vPortFree+0x94>)
 800fa9c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800fa9e:	f7fe fb59 	bl	800e154 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800faa2:	bf00      	nop
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	2000ccfc 	.word	0x2000ccfc
 800fab0:	2000cd08 	.word	0x2000cd08

0800fab4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800faba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800fabe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800fac0:	4b25      	ldr	r3, [pc, #148]	; (800fb58 <prvHeapInit+0xa4>)
 800fac2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f003 0307 	and.w	r3, r3, #7
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00c      	beq.n	800fae8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	3307      	adds	r3, #7
 800fad2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f023 0307 	bic.w	r3, r3, #7
 800fada:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	4a1d      	ldr	r2, [pc, #116]	; (800fb58 <prvHeapInit+0xa4>)
 800fae4:	4413      	add	r3, r2
 800fae6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800faec:	4a1b      	ldr	r2, [pc, #108]	; (800fb5c <prvHeapInit+0xa8>)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800faf2:	4b1a      	ldr	r3, [pc, #104]	; (800fb5c <prvHeapInit+0xa8>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	68ba      	ldr	r2, [r7, #8]
 800fafc:	4413      	add	r3, r2
 800fafe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800fb00:	2208      	movs	r2, #8
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	1a9b      	subs	r3, r3, r2
 800fb06:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f023 0307 	bic.w	r3, r3, #7
 800fb0e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	4a13      	ldr	r2, [pc, #76]	; (800fb60 <prvHeapInit+0xac>)
 800fb14:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800fb16:	4b12      	ldr	r3, [pc, #72]	; (800fb60 <prvHeapInit+0xac>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800fb1e:	4b10      	ldr	r3, [pc, #64]	; (800fb60 <prvHeapInit+0xac>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	2200      	movs	r2, #0
 800fb24:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	1ad2      	subs	r2, r2, r3
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb34:	4b0a      	ldr	r3, [pc, #40]	; (800fb60 <prvHeapInit+0xac>)
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	4a08      	ldr	r2, [pc, #32]	; (800fb64 <prvHeapInit+0xb0>)
 800fb42:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	4a07      	ldr	r2, [pc, #28]	; (800fb68 <prvHeapInit+0xb4>)
 800fb4a:	6013      	str	r3, [r2, #0]
}
 800fb4c:	bf00      	nop
 800fb4e:	3714      	adds	r7, #20
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr
 800fb58:	200054f0 	.word	0x200054f0
 800fb5c:	2000ccf0 	.word	0x2000ccf0
 800fb60:	2000ccf8 	.word	0x2000ccf8
 800fb64:	2000cd00 	.word	0x2000cd00
 800fb68:	2000ccfc 	.word	0x2000ccfc

0800fb6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b085      	sub	sp, #20
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fb74:	4b28      	ldr	r3, [pc, #160]	; (800fc18 <prvInsertBlockIntoFreeList+0xac>)
 800fb76:	60fb      	str	r3, [r7, #12]
 800fb78:	e002      	b.n	800fb80 <prvInsertBlockIntoFreeList+0x14>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	60fb      	str	r3, [r7, #12]
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d8f7      	bhi.n	800fb7a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	4413      	add	r3, r2
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d108      	bne.n	800fbae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	685a      	ldr	r2, [r3, #4]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	441a      	add	r2, r3
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	441a      	add	r2, r3
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d118      	bne.n	800fbf4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	4b15      	ldr	r3, [pc, #84]	; (800fc1c <prvInsertBlockIntoFreeList+0xb0>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d00d      	beq.n	800fbea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	685a      	ldr	r2, [r3, #4]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	441a      	add	r2, r3
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	601a      	str	r2, [r3, #0]
 800fbe8:	e008      	b.n	800fbfc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fbea:	4b0c      	ldr	r3, [pc, #48]	; (800fc1c <prvInsertBlockIntoFreeList+0xb0>)
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	601a      	str	r2, [r3, #0]
 800fbf2:	e003      	b.n	800fbfc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d002      	beq.n	800fc0a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800fc0a:	bf00      	nop
 800fc0c:	3714      	adds	r7, #20
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	2000ccf0 	.word	0x2000ccf0
 800fc1c:	2000ccf8 	.word	0x2000ccf8

0800fc20 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800fc20:	b480      	push	{r7}
 800fc22:	af00      	add	r7, sp, #0
}
 800fc24:	bf00      	nop
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800fc32:	f003 fa07 	bl	8013044 <touchgfx_components_init>
  touchgfx_init();
 800fc36:	f003 f9db 	bl	8012ff0 <touchgfx_init>
}
 800fc3a:	bf00      	nop
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b082      	sub	sp, #8
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800fc46:	f003 fa05 	bl	8013054 <touchgfx_taskEntry>
}
 800fc4a:	bf00      	nop
 800fc4c:	3708      	adds	r7, #8
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
	...

0800fc54 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
    {
 800fc5c:	4a04      	ldr	r2, [pc, #16]	; (800fc70 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	601a      	str	r2, [r3, #0]
    }
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4618      	mov	r0, r3
 800fc66:	370c      	adds	r7, #12
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	08029380 	.word	0x08029380

0800fc74 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
    }
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7ff ffe9 	bl	800fc54 <_ZN8touchgfx12FontProviderD1Ev>
 800fc82:	2104      	movs	r1, #4
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f017 f918 	bl	8026eba <_ZdlPvj>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800fca0:	887b      	ldrh	r3, [r7, #2]
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	d010      	beq.n	800fcc8 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	dc13      	bgt.n	800fcd2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d002      	beq.n	800fcb4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d005      	beq.n	800fcbe <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800fcb2:	e00e      	b.n	800fcd2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800fcb4:	f002 f83e 	bl	8011d34 <_ZN17TypedTextDatabase8getFontsEv>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	e00a      	b.n	800fcd4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800fcbe:	f002 f839 	bl	8011d34 <_ZN17TypedTextDatabase8getFontsEv>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	e005      	b.n	800fcd4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800fcc8:	f002 f834 	bl	8011d34 <_ZN17TypedTextDatabase8getFontsEv>
 800fccc:	4603      	mov	r3, r0
 800fcce:	689b      	ldr	r3, [r3, #8]
 800fcd0:	e000      	b.n	800fcd4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800fcd2:	2300      	movs	r3, #0
    }
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	4a05      	ldr	r2, [pc, #20]	; (800fcfc <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	601a      	str	r2, [r3, #0]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff ffb1 	bl	800fc54 <_ZN8touchgfx12FontProviderD1Ev>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	0802936c 	.word	0x0802936c

0800fd00 <_ZN23ApplicationFontProviderD0Ev>:
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7ff ffe7 	bl	800fcdc <_ZN23ApplicationFontProviderD1Ev>
 800fd0e:	2104      	movs	r1, #4
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f017 f8d2 	bl	8026eba <_ZdlPvj>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
    {
 800fd28:	4a04      	ldr	r2, [pc, #16]	; (800fd3c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	601a      	str	r2, [r3, #0]
    }
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4618      	mov	r0, r3
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr
 800fd3c:	08029644 	.word	0x08029644

0800fd40 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    }
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7ff ffe9 	bl	800fd20 <_ZN8touchgfx4FontD1Ev>
 800fd4e:	2114      	movs	r1, #20
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f017 f8b2 	bl	8026eba <_ZdlPvj>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800fd60:	b590      	push	{r4, r7, lr}
 800fd62:	b087      	sub	sp, #28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	460b      	mov	r3, r1
 800fd6a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800fd6c:	887b      	ldrh	r3, [r7, #2]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	e010      	b.n	800fd98 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800fd76:	2300      	movs	r3, #0
 800fd78:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	3308      	adds	r3, #8
 800fd84:	681c      	ldr	r4, [r3, #0]
 800fd86:	f107 030f 	add.w	r3, r7, #15
 800fd8a:	f107 0210 	add.w	r2, r7, #16
 800fd8e:	8879      	ldrh	r1, [r7, #2]
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	47a0      	blx	r4
 800fd94:	6178      	str	r0, [r7, #20]
        return glyph;
 800fd96:	697b      	ldr	r3, [r7, #20]
    }
 800fd98:	4618      	mov	r0, r3
 800fd9a:	371c      	adds	r7, #28
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd90      	pop	{r4, r7, pc}

0800fda0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	89db      	ldrh	r3, [r3, #14]
    }
 800fdac:	4618      	mov	r0, r3
 800fdae:	370c      	adds	r7, #12
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr

0800fdb8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	8a1b      	ldrh	r3, [r3, #16]
    }
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	88db      	ldrh	r3, [r3, #6]
    }
 800fddc:	4618      	mov	r0, r3
 800fdde:	370c      	adds	r7, #12
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr

0800fde8 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	889b      	ldrh	r3, [r3, #4]
    }
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	7a9b      	ldrb	r3, [r3, #10]
 800fe0c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800fe10:	b2db      	uxtb	r3, r3
    }
 800fe12:	4618      	mov	r0, r3
 800fe14:	370c      	adds	r7, #12
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr

0800fe1e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800fe1e:	b480      	push	{r7}
 800fe20:	b083      	sub	sp, #12
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	7a9b      	ldrb	r3, [r3, #10]
 800fe2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fe2e:	b2db      	uxtb	r3, r3
    }
 800fe30:	4618      	mov	r0, r3
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr

0800fe3c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	4a05      	ldr	r2, [pc, #20]	; (800fe5c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	601a      	str	r2, [r3, #0]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7ff ff67 	bl	800fd20 <_ZN8touchgfx4FontD1Ev>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	08029fe8 	.word	0x08029fe8

0800fe60 <_ZN8touchgfx9ConstFontD0Ev>:
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff ffe7 	bl	800fe3c <_ZN8touchgfx9ConstFontD1Ev>
 800fe6e:	211c      	movs	r1, #28
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f017 f822 	bl	8026eba <_ZdlPvj>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	4a05      	ldr	r2, [pc, #20]	; (800fea0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	601a      	str	r2, [r3, #0]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7ff ffd3 	bl	800fe3c <_ZN8touchgfx9ConstFontD1Ev>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3708      	adds	r7, #8
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	080293a4 	.word	0x080293a4

0800fea4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7ff ffe7 	bl	800fe80 <_ZN8touchgfx13GeneratedFontD1Ev>
 800feb2:	212c      	movs	r1, #44	; 0x2c
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f017 f800 	bl	8026eba <_ZdlPvj>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
    {
 800fecc:	4a04      	ldr	r2, [pc, #16]	; (800fee0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	601a      	str	r2, [r3, #0]
    }
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4618      	mov	r0, r3
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	08029394 	.word	0x08029394

0800fee4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
    }
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f7ff ffe9 	bl	800fec4 <_ZN8touchgfx9TypedTextD1Ev>
 800fef2:	2108      	movs	r1, #8
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f016 ffe0 	bl	8026eba <_ZdlPvj>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	4618      	mov	r0, r3
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800ff10:	4618      	mov	r0, r3
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800ff28:	4618      	mov	r0, r3
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b08e      	sub	sp, #56	; 0x38
 800ff38:	af0a      	add	r7, sp, #40	; 0x28
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	4611      	mov	r1, r2
 800ff40:	461a      	mov	r2, r3
 800ff42:	460b      	mov	r3, r1
 800ff44:	80fb      	strh	r3, [r7, #6]
 800ff46:	4613      	mov	r3, r2
 800ff48:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	88b9      	ldrh	r1, [r7, #4]
 800ff4e:	88fa      	ldrh	r2, [r7, #6]
 800ff50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ff54:	9308      	str	r3, [sp, #32]
 800ff56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ff58:	9307      	str	r3, [sp, #28]
 800ff5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ff5e:	9306      	str	r3, [sp, #24]
 800ff60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff64:	9305      	str	r3, [sp, #20]
 800ff66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff6a:	9304      	str	r3, [sp, #16]
 800ff6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff70:	9303      	str	r3, [sp, #12]
 800ff72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff76:	9302      	str	r3, [sp, #8]
 800ff78:	7f3b      	ldrb	r3, [r7, #28]
 800ff7a:	9301      	str	r3, [sp, #4]
 800ff7c:	8b3b      	ldrh	r3, [r7, #24]
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	460b      	mov	r3, r1
 800ff82:	68b9      	ldr	r1, [r7, #8]
 800ff84:	f007 ffee 	bl	8017f64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800ff88:	4a09      	ldr	r2, [pc, #36]	; (800ffb0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff92:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff98:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff9e:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffa4:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3710      	adds	r7, #16
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	080293a4 	.word	0x080293a4

0800ffb4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b085      	sub	sp, #20
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	889b      	ldrh	r3, [r3, #4]
 800ffc8:	0adb      	lsrs	r3, r3, #11
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	68fa      	ldr	r2, [r7, #12]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4413      	add	r3, r2
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800ffe6:	b480      	push	{r7}
 800ffe8:	b089      	sub	sp, #36	; 0x24
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	60f8      	str	r0, [r7, #12]
 800ffee:	460b      	mov	r3, r1
 800fff0:	607a      	str	r2, [r7, #4]
 800fff2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d003      	beq.n	8010002 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	7b1b      	ldrb	r3, [r3, #12]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8010002:	2300      	movs	r3, #0
 8010004:	e031      	b.n	801006a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6a1a      	ldr	r2, [r3, #32]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	7b5b      	ldrb	r3, [r3, #13]
 8010012:	021b      	lsls	r3, r3, #8
 8010014:	b21b      	sxth	r3, r3
 8010016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801001a:	b219      	sxth	r1, r3
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	7adb      	ldrb	r3, [r3, #11]
 8010020:	b21b      	sxth	r3, r3
 8010022:	430b      	orrs	r3, r1
 8010024:	b21b      	sxth	r3, r3
 8010026:	b29b      	uxth	r3, r3
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	4413      	add	r3, r2
 801002c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7b1b      	ldrb	r3, [r3, #12]
 8010032:	837b      	strh	r3, [r7, #26]
 8010034:	e013      	b.n	801005e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	897a      	ldrh	r2, [r7, #10]
 801003c:	429a      	cmp	r2, r3
 801003e:	d103      	bne.n	8010048 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8010046:	e010      	b.n	801006a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	881b      	ldrh	r3, [r3, #0]
 801004c:	897a      	ldrh	r2, [r7, #10]
 801004e:	429a      	cmp	r2, r3
 8010050:	d309      	bcc.n	8010066 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8010052:	8b7b      	ldrh	r3, [r7, #26]
 8010054:	3b01      	subs	r3, #1
 8010056:	837b      	strh	r3, [r7, #26]
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	3304      	adds	r3, #4
 801005c:	61fb      	str	r3, [r7, #28]
 801005e:	8b7b      	ldrh	r3, [r7, #26]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d1e8      	bne.n	8010036 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8010064:	e000      	b.n	8010068 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8010066:	bf00      	nop
        }
    }
    return 0;
 8010068:	2300      	movs	r3, #0
}
 801006a:	4618      	mov	r0, r3
 801006c:	3724      	adds	r7, #36	; 0x24
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
	...

08010078 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8010078:	b580      	push	{r7, lr}
 801007a:	af00      	add	r7, sp, #0
 801007c:	4801      	ldr	r0, [pc, #4]	; (8010084 <__tcf_0+0xc>)
 801007e:	f7ff feff 	bl	800fe80 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010082:	bd80      	pop	{r7, pc}
 8010084:	2000cd0c 	.word	0x2000cd0c

08010088 <_Z23getFont_verdana_10_4bppv>:
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b08e      	sub	sp, #56	; 0x38
 801008c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 801008e:	4b20      	ldr	r3, [pc, #128]	; (8010110 <_Z23getFont_verdana_10_4bppv+0x88>)
 8010090:	e8d3 3faf 	lda	r3, [r3]
 8010094:	f003 0301 	and.w	r3, r3, #1
 8010098:	2b00      	cmp	r3, #0
 801009a:	bf0c      	ite	eq
 801009c:	2301      	moveq	r3, #1
 801009e:	2300      	movne	r3, #0
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d030      	beq.n	8010108 <_Z23getFont_verdana_10_4bppv+0x80>
 80100a6:	481a      	ldr	r0, [pc, #104]	; (8010110 <_Z23getFont_verdana_10_4bppv+0x88>)
 80100a8:	f016 ff09 	bl	8026ebe <__cxa_guard_acquire>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	bf14      	ite	ne
 80100b2:	2301      	movne	r3, #1
 80100b4:	2300      	moveq	r3, #0
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d025      	beq.n	8010108 <_Z23getFont_verdana_10_4bppv+0x80>
 80100bc:	2300      	movs	r3, #0
 80100be:	930c      	str	r3, [sp, #48]	; 0x30
 80100c0:	2300      	movs	r3, #0
 80100c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80100c4:	2300      	movs	r3, #0
 80100c6:	930a      	str	r3, [sp, #40]	; 0x28
 80100c8:	233f      	movs	r3, #63	; 0x3f
 80100ca:	9309      	str	r3, [sp, #36]	; 0x24
 80100cc:	4b11      	ldr	r3, [pc, #68]	; (8010114 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80100ce:	9308      	str	r3, [sp, #32]
 80100d0:	4b11      	ldr	r3, [pc, #68]	; (8010118 <_Z23getFont_verdana_10_4bppv+0x90>)
 80100d2:	9307      	str	r3, [sp, #28]
 80100d4:	2300      	movs	r3, #0
 80100d6:	9306      	str	r3, [sp, #24]
 80100d8:	2300      	movs	r3, #0
 80100da:	9305      	str	r3, [sp, #20]
 80100dc:	2301      	movs	r3, #1
 80100de:	9304      	str	r3, [sp, #16]
 80100e0:	2304      	movs	r3, #4
 80100e2:	9303      	str	r3, [sp, #12]
 80100e4:	2300      	movs	r3, #0
 80100e6:	9302      	str	r3, [sp, #8]
 80100e8:	2300      	movs	r3, #0
 80100ea:	9301      	str	r3, [sp, #4]
 80100ec:	230a      	movs	r3, #10
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	230a      	movs	r3, #10
 80100f2:	2201      	movs	r2, #1
 80100f4:	4909      	ldr	r1, [pc, #36]	; (801011c <_Z23getFont_verdana_10_4bppv+0x94>)
 80100f6:	480a      	ldr	r0, [pc, #40]	; (8010120 <_Z23getFont_verdana_10_4bppv+0x98>)
 80100f8:	f7ff ff1c 	bl	800ff34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80100fc:	4809      	ldr	r0, [pc, #36]	; (8010124 <_Z23getFont_verdana_10_4bppv+0x9c>)
 80100fe:	f016 ff27 	bl	8026f50 <atexit>
 8010102:	4803      	ldr	r0, [pc, #12]	; (8010110 <_Z23getFont_verdana_10_4bppv+0x88>)
 8010104:	f016 fee7 	bl	8026ed6 <__cxa_guard_release>
    return verdana_10_4bpp;
 8010108:	4b05      	ldr	r3, [pc, #20]	; (8010120 <_Z23getFont_verdana_10_4bppv+0x98>)
}
 801010a:	4618      	mov	r0, r3
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	2000cd38 	.word	0x2000cd38
 8010114:	0802a8c4 	.word	0x0802a8c4
 8010118:	0802a8d0 	.word	0x0802a8d0
 801011c:	0802a808 	.word	0x0802a808
 8010120:	2000cd0c 	.word	0x2000cd0c
 8010124:	08010079 	.word	0x08010079

08010128 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 11, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8010128:	b580      	push	{r7, lr}
 801012a:	af00      	add	r7, sp, #0
 801012c:	4801      	ldr	r0, [pc, #4]	; (8010134 <__tcf_0+0xc>)
 801012e:	f7ff fea7 	bl	800fe80 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010132:	bd80      	pop	{r7, pc}
 8010134:	2000cd3c 	.word	0x2000cd3c

08010138 <_Z23getFont_verdana_20_4bppv>:
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b08e      	sub	sp, #56	; 0x38
 801013c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 11, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 801013e:	4b20      	ldr	r3, [pc, #128]	; (80101c0 <_Z23getFont_verdana_20_4bppv+0x88>)
 8010140:	e8d3 3faf 	lda	r3, [r3]
 8010144:	f003 0301 	and.w	r3, r3, #1
 8010148:	2b00      	cmp	r3, #0
 801014a:	bf0c      	ite	eq
 801014c:	2301      	moveq	r3, #1
 801014e:	2300      	movne	r3, #0
 8010150:	b2db      	uxtb	r3, r3
 8010152:	2b00      	cmp	r3, #0
 8010154:	d030      	beq.n	80101b8 <_Z23getFont_verdana_20_4bppv+0x80>
 8010156:	481a      	ldr	r0, [pc, #104]	; (80101c0 <_Z23getFont_verdana_20_4bppv+0x88>)
 8010158:	f016 feb1 	bl	8026ebe <__cxa_guard_acquire>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	bf14      	ite	ne
 8010162:	2301      	movne	r3, #1
 8010164:	2300      	moveq	r3, #0
 8010166:	b2db      	uxtb	r3, r3
 8010168:	2b00      	cmp	r3, #0
 801016a:	d025      	beq.n	80101b8 <_Z23getFont_verdana_20_4bppv+0x80>
 801016c:	2300      	movs	r3, #0
 801016e:	930c      	str	r3, [sp, #48]	; 0x30
 8010170:	2300      	movs	r3, #0
 8010172:	930b      	str	r3, [sp, #44]	; 0x2c
 8010174:	2300      	movs	r3, #0
 8010176:	930a      	str	r3, [sp, #40]	; 0x28
 8010178:	233f      	movs	r3, #63	; 0x3f
 801017a:	9309      	str	r3, [sp, #36]	; 0x24
 801017c:	4b11      	ldr	r3, [pc, #68]	; (80101c4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 801017e:	9308      	str	r3, [sp, #32]
 8010180:	4b11      	ldr	r3, [pc, #68]	; (80101c8 <_Z23getFont_verdana_20_4bppv+0x90>)
 8010182:	9307      	str	r3, [sp, #28]
 8010184:	2300      	movs	r3, #0
 8010186:	9306      	str	r3, [sp, #24]
 8010188:	2300      	movs	r3, #0
 801018a:	9305      	str	r3, [sp, #20]
 801018c:	2301      	movs	r3, #1
 801018e:	9304      	str	r3, [sp, #16]
 8010190:	2304      	movs	r3, #4
 8010192:	9303      	str	r3, [sp, #12]
 8010194:	2300      	movs	r3, #0
 8010196:	9302      	str	r3, [sp, #8]
 8010198:	2300      	movs	r3, #0
 801019a:	9301      	str	r3, [sp, #4]
 801019c:	2314      	movs	r3, #20
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	2318      	movs	r3, #24
 80101a2:	220b      	movs	r2, #11
 80101a4:	4909      	ldr	r1, [pc, #36]	; (80101cc <_Z23getFont_verdana_20_4bppv+0x94>)
 80101a6:	480a      	ldr	r0, [pc, #40]	; (80101d0 <_Z23getFont_verdana_20_4bppv+0x98>)
 80101a8:	f7ff fec4 	bl	800ff34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80101ac:	4809      	ldr	r0, [pc, #36]	; (80101d4 <_Z23getFont_verdana_20_4bppv+0x9c>)
 80101ae:	f016 fecf 	bl	8026f50 <atexit>
 80101b2:	4803      	ldr	r0, [pc, #12]	; (80101c0 <_Z23getFont_verdana_20_4bppv+0x88>)
 80101b4:	f016 fe8f 	bl	8026ed6 <__cxa_guard_release>
    return verdana_20_4bpp;
 80101b8:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <_Z23getFont_verdana_20_4bppv+0x98>)
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	2000cd68 	.word	0x2000cd68
 80101c4:	0802a8c8 	.word	0x0802a8c8
 80101c8:	0802a8d4 	.word	0x0802a8d4
 80101cc:	0802a818 	.word	0x0802a818
 80101d0:	2000cd3c 	.word	0x2000cd3c
 80101d4:	08010129 	.word	0x08010129

080101d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
 80101dc:	4801      	ldr	r0, [pc, #4]	; (80101e4 <__tcf_0+0xc>)
 80101de:	f7ff fe4f 	bl	800fe80 <_ZN8touchgfx13GeneratedFontD1Ev>
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	2000cd6c 	.word	0x2000cd6c

080101e8 <_Z23getFont_verdana_40_4bppv>:
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b08e      	sub	sp, #56	; 0x38
 80101ec:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80101ee:	4b20      	ldr	r3, [pc, #128]	; (8010270 <_Z23getFont_verdana_40_4bppv+0x88>)
 80101f0:	e8d3 3faf 	lda	r3, [r3]
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	bf0c      	ite	eq
 80101fc:	2301      	moveq	r3, #1
 80101fe:	2300      	movne	r3, #0
 8010200:	b2db      	uxtb	r3, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	d030      	beq.n	8010268 <_Z23getFont_verdana_40_4bppv+0x80>
 8010206:	481a      	ldr	r0, [pc, #104]	; (8010270 <_Z23getFont_verdana_40_4bppv+0x88>)
 8010208:	f016 fe59 	bl	8026ebe <__cxa_guard_acquire>
 801020c:	4603      	mov	r3, r0
 801020e:	2b00      	cmp	r3, #0
 8010210:	bf14      	ite	ne
 8010212:	2301      	movne	r3, #1
 8010214:	2300      	moveq	r3, #0
 8010216:	b2db      	uxtb	r3, r3
 8010218:	2b00      	cmp	r3, #0
 801021a:	d025      	beq.n	8010268 <_Z23getFont_verdana_40_4bppv+0x80>
 801021c:	2300      	movs	r3, #0
 801021e:	930c      	str	r3, [sp, #48]	; 0x30
 8010220:	2300      	movs	r3, #0
 8010222:	930b      	str	r3, [sp, #44]	; 0x2c
 8010224:	2300      	movs	r3, #0
 8010226:	930a      	str	r3, [sp, #40]	; 0x28
 8010228:	233f      	movs	r3, #63	; 0x3f
 801022a:	9309      	str	r3, [sp, #36]	; 0x24
 801022c:	4b11      	ldr	r3, [pc, #68]	; (8010274 <_Z23getFont_verdana_40_4bppv+0x8c>)
 801022e:	9308      	str	r3, [sp, #32]
 8010230:	4b11      	ldr	r3, [pc, #68]	; (8010278 <_Z23getFont_verdana_40_4bppv+0x90>)
 8010232:	9307      	str	r3, [sp, #28]
 8010234:	2300      	movs	r3, #0
 8010236:	9306      	str	r3, [sp, #24]
 8010238:	2300      	movs	r3, #0
 801023a:	9305      	str	r3, [sp, #20]
 801023c:	2301      	movs	r3, #1
 801023e:	9304      	str	r3, [sp, #16]
 8010240:	2304      	movs	r3, #4
 8010242:	9303      	str	r3, [sp, #12]
 8010244:	2300      	movs	r3, #0
 8010246:	9302      	str	r3, [sp, #8]
 8010248:	2300      	movs	r3, #0
 801024a:	9301      	str	r3, [sp, #4]
 801024c:	2328      	movs	r3, #40	; 0x28
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	2328      	movs	r3, #40	; 0x28
 8010252:	2201      	movs	r2, #1
 8010254:	4909      	ldr	r1, [pc, #36]	; (801027c <_Z23getFont_verdana_40_4bppv+0x94>)
 8010256:	480a      	ldr	r0, [pc, #40]	; (8010280 <_Z23getFont_verdana_40_4bppv+0x98>)
 8010258:	f7ff fe6c 	bl	800ff34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 801025c:	4809      	ldr	r0, [pc, #36]	; (8010284 <_Z23getFont_verdana_40_4bppv+0x9c>)
 801025e:	f016 fe77 	bl	8026f50 <atexit>
 8010262:	4803      	ldr	r0, [pc, #12]	; (8010270 <_Z23getFont_verdana_40_4bppv+0x88>)
 8010264:	f016 fe37 	bl	8026ed6 <__cxa_guard_release>
    return verdana_40_4bpp;
 8010268:	4b05      	ldr	r3, [pc, #20]	; (8010280 <_Z23getFont_verdana_40_4bppv+0x98>)
}
 801026a:	4618      	mov	r0, r3
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	2000cd98 	.word	0x2000cd98
 8010274:	0802a8cc 	.word	0x0802a8cc
 8010278:	0802a8d8 	.word	0x0802a8d8
 801027c:	0802a8b4 	.word	0x0802a8b4
 8010280:	2000cd6c 	.word	0x2000cd6c
 8010284:	080101d9 	.word	0x080101d9

08010288 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	4618      	mov	r0, r3
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80102aa:	bf00      	nop
 80102ac:	370c      	adds	r7, #12
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80102b6:	b480      	push	{r7}
 80102b8:	b083      	sub	sp, #12
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80102d6:	bf00      	nop
 80102d8:	370c      	adds	r7, #12
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr

080102e2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80102e2:	b480      	push	{r7}
 80102e4:	b083      	sub	sp, #12
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
 80102ea:	460b      	mov	r3, r1
 80102ec:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 80102ee:	bf00      	nop
 80102f0:	370c      	adds	r7, #12
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr

080102fa <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80102fa:	b480      	push	{r7}
 80102fc:	b083      	sub	sp, #12
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
    {
    }
 8010302:	bf00      	nop
 8010304:	370c      	adds	r7, #12
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr

0801030e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 801030e:	b480      	push	{r7}
 8010310:	b083      	sub	sp, #12
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
    {
    }
 8010316:	bf00      	nop
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
	...

08010324 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
    {
 801032c:	4a04      	ldr	r2, [pc, #16]	; (8010340 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	601a      	str	r2, [r3, #0]
    }
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	370c      	adds	r7, #12
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	08029524 	.word	0x08029524

08010344 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
    }
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7ff ffe9 	bl	8010324 <_ZN8touchgfx15UIEventListenerD1Ev>
 8010352:	2104      	movs	r1, #4
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f016 fdb0 	bl	8026eba <_ZdlPvj>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4618      	mov	r0, r3
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
    {
    }
 801036c:	bf00      	nop
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	460b      	mov	r3, r1
 8010382:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8010384:	bf00      	nop
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	683a      	ldr	r2, [r7, #0]
 801039e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80103a2:	6810      	ldr	r0, [r2, #0]
 80103a4:	6851      	ldr	r1, [r2, #4]
 80103a6:	c303      	stmia	r3!, {r0, r1}
    }
 80103a8:	bf00      	nop
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	3304      	adds	r3, #4
 80103c0:	4618      	mov	r0, r3
 80103c2:	f006 fcd0 	bl	8016d66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 80103c6:	bf00      	nop
 80103c8:	3708      	adds	r7, #8
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
	...

080103d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
    {
 80103d8:	4a04      	ldr	r2, [pc, #16]	; (80103ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	601a      	str	r2, [r3, #0]
    }
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	4618      	mov	r0, r3
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr
 80103ec:	0802950c 	.word	0x0802950c

080103f0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
    }
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7ff ffe9 	bl	80103d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80103fe:	2104      	movs	r1, #4
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f016 fd5a 	bl	8026eba <_ZdlPvj>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010410:	b480      	push	{r7}
 8010412:	af00      	add	r7, sp, #0
    {
        return instance;
 8010414:	4b03      	ldr	r3, [pc, #12]	; (8010424 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010416:	681b      	ldr	r3, [r3, #0]
    }
 8010418:	4618      	mov	r0, r3
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	2000f394 	.word	0x2000f394

08010428 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010428:	b480      	push	{r7}
 801042a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 801042c:	4b0b      	ldr	r3, [pc, #44]	; (801045c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010434:	2b00      	cmp	r3, #0
 8010436:	d008      	beq.n	801044a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010438:	4b08      	ldr	r3, [pc, #32]	; (801045c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801043e:	2b00      	cmp	r3, #0
 8010440:	d003      	beq.n	801044a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010442:	4b06      	ldr	r3, [pc, #24]	; (801045c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010448:	e002      	b.n	8010450 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 801044a:	4b04      	ldr	r3, [pc, #16]	; (801045c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	689b      	ldr	r3, [r3, #8]
    }
 8010450:	4618      	mov	r0, r3
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	2000f394 	.word	0x2000f394

08010460 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8010468:	4a07      	ldr	r2, [pc, #28]	; (8010488 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	601a      	str	r2, [r3, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2200      	movs	r2, #0
 8010472:	605a      	str	r2, [r3, #4]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2200      	movs	r2, #0
 8010478:	721a      	strb	r2, [r3, #8]
    {
    }
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	080294e8 	.word	0x080294e8

0801048c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
    {
 8010494:	4a04      	ldr	r2, [pc, #16]	; (80104a8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	601a      	str	r2, [r3, #0]
    }
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4618      	mov	r0, r3
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr
 80104a8:	080294e8 	.word	0x080294e8

080104ac <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
    }
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f7ff ffe9 	bl	801048c <_ZN8touchgfx10TransitionD1Ev>
 80104ba:	210c      	movs	r1, #12
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f016 fcfc 	bl	8026eba <_ZdlPvj>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4618      	mov	r0, r3
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
    {
    }
 80104d4:	bf00      	nop
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
    {
    }
 80104e8:	bf00      	nop
 80104ea:	370c      	adds	r7, #12
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr

080104f4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
    {
    }
 80104fc:	bf00      	nop
 80104fe:	370c      	adds	r7, #12
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr

08010508 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8010510:	f006 fc04 	bl	8016d1c <_ZN8touchgfx11Application11getInstanceEv>
 8010514:	4603      	mov	r3, r0
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	323c      	adds	r2, #60	; 0x3c
 801051a:	6812      	ldr	r2, [r2, #0]
 801051c:	4618      	mov	r0, r3
 801051e:	4790      	blx	r2
    }
 8010520:	bf00      	nop
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	683a      	ldr	r2, [r7, #0]
 8010536:	605a      	str	r2, [r3, #4]
    }
 8010538:	bf00      	nop
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr

08010544 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	4a05      	ldr	r2, [pc, #20]	; (8010564 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	601a      	str	r2, [r3, #0]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4618      	mov	r0, r3
 8010556:	f7ff fee5 	bl	8010324 <_ZN8touchgfx15UIEventListenerD1Ev>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}
 8010564:	08029f2c 	.word	0x08029f2c

08010568 <_ZN8touchgfx11ApplicationD0Ev>:
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff ffe7 	bl	8010544 <_ZN8touchgfx11ApplicationD1Ev>
 8010576:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f016 fc9d 	bl	8026eba <_ZdlPvj>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	4618      	mov	r0, r3
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
	...

0801058c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4618      	mov	r0, r3
 8010598:	f006 fc82 	bl	8016ea0 <_ZN8touchgfx11ApplicationC1Ev>
 801059c:	4a09      	ldr	r2, [pc, #36]	; (80105c4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2200      	movs	r2, #0
 80105ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	4a04      	ldr	r2, [pc, #16]	; (80105c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80105b6:	6013      	str	r3, [r2, #0]
    }
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	4618      	mov	r0, r3
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	08029494 	.word	0x08029494
 80105c8:	2000f3e0 	.word	0x2000f3e0

080105cc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 f804 	bl	80105e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80105da:	bf00      	nop
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b082      	sub	sp, #8
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d00f      	beq.n	8010614 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	330c      	adds	r3, #12
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4610      	mov	r0, r2
 8010608:	4798      	blx	r3
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d001      	beq.n	8010614 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010610:	2301      	movs	r3, #1
 8010612:	e000      	b.n	8010616 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010614:	2300      	movs	r3, #0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d00e      	beq.n	8010638 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	3308      	adds	r3, #8
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4610      	mov	r0, r2
 801062e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8010638:	bf00      	nop
 801063a:	3708      	adds	r7, #8
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	683a      	ldr	r2, [r7, #0]
 801064e:	601a      	str	r2, [r3, #0]
    }
 8010650:	bf00      	nop
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	4a05      	ldr	r2, [pc, #20]	; (801067c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4618      	mov	r0, r3
 801066e:	f7ff ff69 	bl	8010544 <_ZN8touchgfx11ApplicationD1Ev>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	08029494 	.word	0x08029494

08010680 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7ff ffe7 	bl	801065c <_ZN8touchgfx14MVPApplicationD1Ev>
 801068e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f016 fc11 	bl	8026eba <_ZdlPvj>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	4618      	mov	r0, r3
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
	...

080106a4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	4a08      	ldr	r2, [pc, #32]	; (80106d0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	601a      	str	r2, [r3, #0]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80106b8:	4618      	mov	r0, r3
 80106ba:	f000 facb 	bl	8010c54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7ff ffcb 	bl	801065c <_ZN8touchgfx14MVPApplicationD1Ev>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4618      	mov	r0, r3
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	08029428 	.word	0x08029428

080106d4 <_ZN23FrontendApplicationBaseD0Ev>:
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f7ff ffe1 	bl	80106a4 <_ZN23FrontendApplicationBaseD1Ev>
 80106e2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f016 fbe7 	bl	8026eba <_ZdlPvj>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	4618      	mov	r0, r3
 80106f0:	3708      	adds	r7, #8
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b082      	sub	sp, #8
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
    {
        gotoscreen1ScreenNoTransition();
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 f882 	bl	8010808 <_ZN23FrontendApplicationBase29gotoscreen1ScreenNoTransitionEv>
    }
 8010704:	bf00      	nop
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2201      	movs	r2, #1
 8010718:	721a      	strb	r2, [r3, #8]
    }
 801071a:	bf00      	nop
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8010726:	b480      	push	{r7}
 8010728:	b083      	sub	sp, #12
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	683a      	ldr	r2, [r7, #0]
 8010734:	605a      	str	r2, [r3, #4]
    }
 8010736:	bf00      	nop
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
	...

08010744 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/screen1View.hpp>
#include <gui/screen1_screen/screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	4618      	mov	r0, r3
 8010754:	f7ff ff1a 	bl	801058c <_ZN8touchgfx14MVPApplicationC1Ev>
 8010758:	4a16      	ldr	r2, [pc, #88]	; (80107b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010764:	4618      	mov	r0, r3
 8010766:	f000 f8a5 	bl	80108b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801077a:	f7ff fe49 	bl	8010410 <_ZN8touchgfx3HAL11getInstanceEv>
 801077e:	4603      	mov	r3, r0
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	3208      	adds	r2, #8
 8010784:	6812      	ldr	r2, [r2, #0]
 8010786:	2100      	movs	r1, #0
 8010788:	4618      	mov	r0, r3
 801078a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 801078c:	2000      	movs	r0, #0
 801078e:	f001 fa59 	bl	8011c44 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010792:	f7ff fe49 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 8010796:	4603      	mov	r3, r0
 8010798:	4618      	mov	r0, r3
 801079a:	f00f f842 	bl	801f822 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 801079e:	f7ff fe43 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 80107a2:	4603      	mov	r3, r0
 80107a4:	4618      	mov	r0, r3
 80107a6:	f00f f8b1 	bl	801f90c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	08029428 	.word	0x08029428

080107b8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4618      	mov	r0, r3
 80107c6:	370c      	adds	r7, #12
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	683a      	ldr	r2, [r7, #0]
 80107de:	4611      	mov	r1, r2
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7ff ffe9 	bl	80107b8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	685a      	ldr	r2, [r3, #4]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	605a      	str	r2, [r3, #4]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	683a      	ldr	r2, [r7, #0]
 80107f2:	3308      	adds	r3, #8
 80107f4:	3208      	adds	r2, #8
 80107f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4618      	mov	r0, r3
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <_ZN23FrontendApplicationBase29gotoscreen1ScreenNoTransitionEv>:
 */

// screen1

void FrontendApplicationBase::gotoscreen1ScreenNoTransition()
{
 8010808:	b590      	push	{r4, r7, lr}
 801080a:	b089      	sub	sp, #36	; 0x24
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen1ScreenNoTransitionImpl);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8010816:	4b10      	ldr	r3, [pc, #64]	; (8010858 <_ZN23FrontendApplicationBase29gotoscreen1ScreenNoTransitionEv+0x50>)
 8010818:	61bb      	str	r3, [r7, #24]
 801081a:	2300      	movs	r3, #0
 801081c:	61fb      	str	r3, [r7, #28]
 801081e:	f107 0008 	add.w	r0, r7, #8
 8010822:	f107 0318 	add.w	r3, r7, #24
 8010826:	cb0c      	ldmia	r3, {r2, r3}
 8010828:	6879      	ldr	r1, [r7, #4]
 801082a:	f000 f85f 	bl	80108ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801082e:	f107 0308 	add.w	r3, r7, #8
 8010832:	4619      	mov	r1, r3
 8010834:	4620      	mov	r0, r4
 8010836:	f7ff ffcb 	bl	80107d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801083a:	f107 0308 	add.w	r3, r7, #8
 801083e:	4618      	mov	r0, r3
 8010840:	f000 fa08 	bl	8010c54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8010850:	bf00      	nop
 8010852:	3724      	adds	r7, #36	; 0x24
 8010854:	46bd      	mov	sp, r7
 8010856:	bd90      	pop	{r4, r7, pc}
 8010858:	0801085d 	.word	0x0801085d

0801085c <_ZN23FrontendApplicationBase33gotoscreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreen1ScreenNoTransitionImpl()
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af02      	add	r7, sp, #8
 8010862:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screen1View, screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010870:	461a      	mov	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	4b04      	ldr	r3, [pc, #16]	; (801088c <_ZN23FrontendApplicationBase33gotoscreen1ScreenNoTransitionImplEv+0x30>)
 801087c:	4804      	ldr	r0, [pc, #16]	; (8010890 <_ZN23FrontendApplicationBase33gotoscreen1ScreenNoTransitionImplEv+0x34>)
 801087e:	f000 f867 	bl	8010950 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010882:	bf00      	nop
 8010884:	3708      	adds	r7, #8
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	2000f3d4 	.word	0x2000f3d4
 8010890:	2000f3d0 	.word	0x2000f3d0

08010894 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	4a04      	ldr	r2, [pc, #16]	; (80108b0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	601a      	str	r2, [r3, #0]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4618      	mov	r0, r3
 80108a6:	370c      	adds	r7, #12
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr
 80108b0:	0802950c 	.word	0x0802950c

080108b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4618      	mov	r0, r3
 80108c0:	f7ff ffe8 	bl	8010894 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80108c4:	4a08      	ldr	r2, [pc, #32]	; (80108e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	601a      	str	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2200      	movs	r2, #0
 80108ce:	605a      	str	r2, [r3, #4]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2200      	movs	r2, #0
 80108d4:	609a      	str	r2, [r3, #8]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	60da      	str	r2, [r3, #12]
    {
    }
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	4618      	mov	r0, r3
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	0802947c 	.word	0x0802947c

080108ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	4639      	mov	r1, r7
 80108f8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	4618      	mov	r0, r3
 8010900:	f7ff ffc8 	bl	8010894 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010904:	4a08      	ldr	r2, [pc, #32]	; (8010928 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	601a      	str	r2, [r3, #0]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	605a      	str	r2, [r3, #4]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	3308      	adds	r3, #8
 8010914:	463a      	mov	r2, r7
 8010916:	e892 0003 	ldmia.w	r2, {r0, r1}
 801091a:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	4618      	mov	r0, r3
 8010922:	3710      	adds	r7, #16
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	0802947c 	.word	0x0802947c

0801092c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	4618      	mov	r0, r3
 8010938:	f7ff fd92 	bl	8010460 <_ZN8touchgfx10TransitionC1Ev>
 801093c:	4a03      	ldr	r2, [pc, #12]	; (801094c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	601a      	str	r2, [r3, #0]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	08029404 	.word	0x08029404

08010950 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010950:	b590      	push	{r4, r7, lr}
 8010952:	b08f      	sub	sp, #60	; 0x3c
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
 801095c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	689a      	ldr	r2, [r3, #8]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	689b      	ldr	r3, [r3, #8]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	3320      	adds	r3, #32
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	4610      	mov	r0, r2
 801096e:	4798      	blx	r3
 8010970:	4603      	mov	r3, r0
 8010972:	2be7      	cmp	r3, #231	; 0xe7
 8010974:	d805      	bhi.n	8010982 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8010976:	4b7d      	ldr	r3, [pc, #500]	; (8010b6c <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 8010978:	4a7d      	ldr	r2, [pc, #500]	; (8010b70 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 801097a:	21a3      	movs	r1, #163	; 0xa3
 801097c:	487d      	ldr	r0, [pc, #500]	; (8010b74 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801097e:	f016 fac9 	bl	8026f14 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	685a      	ldr	r2, [r3, #4]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	3320      	adds	r3, #32
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4610      	mov	r0, r2
 8010992:	4798      	blx	r3
 8010994:	4603      	mov	r3, r0
 8010996:	2b0f      	cmp	r3, #15
 8010998:	d805      	bhi.n	80109a6 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 801099a:	4b77      	ldr	r3, [pc, #476]	; (8010b78 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801099c:	4a74      	ldr	r2, [pc, #464]	; (8010b70 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 801099e:	21a4      	movs	r1, #164	; 0xa4
 80109a0:	4874      	ldr	r0, [pc, #464]	; (8010b74 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80109a2:	f016 fab7 	bl	8026f14 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	68da      	ldr	r2, [r3, #12]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	3320      	adds	r3, #32
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4610      	mov	r0, r2
 80109b6:	4798      	blx	r3
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b0b      	cmp	r3, #11
 80109bc:	d805      	bhi.n	80109ca <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 80109be:	4b6f      	ldr	r3, [pc, #444]	; (8010b7c <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80109c0:	4a6b      	ldr	r2, [pc, #428]	; (8010b70 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80109c2:	21a5      	movs	r1, #165	; 0xa5
 80109c4:	486b      	ldr	r0, [pc, #428]	; (8010b74 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80109c6:	f016 faa5 	bl	8026f14 <__assert_func>
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	627b      	str	r3, [r7, #36]	; 0x24
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80109d6:	f006 f9a1 	bl	8016d1c <_ZN8touchgfx11Application11getInstanceEv>
 80109da:	4603      	mov	r3, r0
 80109dc:	4618      	mov	r0, r3
 80109de:	f7ff fce9 	bl	80103b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80109e2:	6a3b      	ldr	r3, [r7, #32]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d008      	beq.n	80109fc <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 80109ea:	6a3b      	ldr	r3, [r7, #32]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	6a3b      	ldr	r3, [r7, #32]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	330c      	adds	r3, #12
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4610      	mov	r0, r2
 80109fa:	4798      	blx	r3
    if (*currentTrans)
 80109fc:	6a3b      	ldr	r3, [r7, #32]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d007      	beq.n	8010a14 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8010a04:	6a3b      	ldr	r3, [r7, #32]
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	6a3b      	ldr	r3, [r7, #32]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4610      	mov	r0, r2
 8010a12:	4798      	blx	r3
    if (*currentScreen)
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d008      	beq.n	8010a2e <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8010a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	3314      	adds	r3, #20
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4610      	mov	r0, r2
 8010a2c:	4798      	blx	r3
    if (*currentPresenter)
 8010a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d008      	beq.n	8010a48 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8010a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a38:	681a      	ldr	r2, [r3, #0]
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	3304      	adds	r3, #4
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4610      	mov	r0, r2
 8010a46:	4798      	blx	r3
    if (*currentScreen)
 8010a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d007      	beq.n	8010a60 <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8010a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4610      	mov	r0, r2
 8010a5e:	4798      	blx	r3
    if (*currentPresenter)
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d008      	beq.n	8010a7a <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8010a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	3308      	adds	r3, #8
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4610      	mov	r0, r2
 8010a78:	4798      	blx	r3
}
 8010a7a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	2100      	movs	r1, #0
 8010a82:	4618      	mov	r0, r3
 8010a84:	f000 f87c 	bl	8010b80 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	200c      	movs	r0, #12
 8010a8e:	f7ff fbfb 	bl	8010288 <_ZnwjPv>
 8010a92:	4604      	mov	r4, r0
 8010a94:	4620      	mov	r0, r4
 8010a96:	f7ff ff49 	bl	801092c <_ZN8touchgfx12NoTransitionC1Ev>
 8010a9a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 f87f 	bl	8010ba6 <_ZN8touchgfx17AbstractPartition2atI11screen1ViewEERT_t>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	4619      	mov	r1, r3
 8010aac:	20e8      	movs	r0, #232	; 0xe8
 8010aae:	f7ff fbeb 	bl	8010288 <_ZnwjPv>
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f001 fad7 	bl	8012068 <_ZN11screen1ViewC1Ev>
 8010aba:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f000 f882 	bl	8010bcc <_ZN8touchgfx17AbstractPartition2atI16screen1PresenterEERT_t>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	4619      	mov	r1, r3
 8010acc:	2010      	movs	r0, #16
 8010ace:	f7ff fbdb 	bl	8010288 <_ZnwjPv>
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f001 fa70 	bl	8011fbc <_ZN16screen1PresenterC1ER11screen1View>
 8010adc:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ae2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ae8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aee:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d002      	beq.n	8010afc <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 8010af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af8:	3304      	adds	r3, #4
 8010afa:	e000      	b.n	8010afe <_ZN8touchgfx14makeTransitionI11screen1View16screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8010afc:	2300      	movs	r3, #0
 8010afe:	4619      	mov	r1, r3
 8010b00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010b02:	f7ff fd9d 	bl	8010640 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b08:	3304      	adds	r3, #4
 8010b0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7ff fe0a 	bl	8010726 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b16:	4618      	mov	r0, r3
 8010b18:	f000 f86b 	bl	8010bf2 <_ZN8touchgfx4ViewI16screen1PresenterE4bindERS1_>
 8010b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1e:	61fb      	str	r3, [r7, #28]
 8010b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b22:	61bb      	str	r3, [r7, #24]
 8010b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b26:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	330c      	adds	r3, #12
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	69f8      	ldr	r0, [r7, #28]
 8010b32:	4798      	blx	r3
    newPresenter->activate();
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	69b8      	ldr	r0, [r7, #24]
 8010b3c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010b3e:	6979      	ldr	r1, [r7, #20]
 8010b40:	69f8      	ldr	r0, [r7, #28]
 8010b42:	f007 fdad 	bl	80186a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	3310      	adds	r3, #16
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	6978      	ldr	r0, [r7, #20]
 8010b50:	4798      	blx	r3
    newTransition->invalidate();
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	3314      	adds	r3, #20
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	6978      	ldr	r0, [r7, #20]
 8010b5c:	4798      	blx	r3
}
 8010b5e:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	373c      	adds	r7, #60	; 0x3c
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd90      	pop	{r4, r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	08028084 	.word	0x08028084
 8010b70:	08028114 	.word	0x08028114
 8010b74:	08028218 	.word	0x08028218
 8010b78:	0802825c 	.word	0x0802825c
 8010b7c:	08028300 	.word	0x08028300

08010b80 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	460b      	mov	r3, r1
 8010b8a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	3324      	adds	r3, #36	; 0x24
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	887a      	ldrh	r2, [r7, #2]
 8010b96:	4611      	mov	r1, r2
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	4798      	blx	r3
 8010b9c:	4603      	mov	r3, r0
    }
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3708      	adds	r7, #8
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <_ZN8touchgfx17AbstractPartition2atI11screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b082      	sub	sp, #8
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
 8010bae:	460b      	mov	r3, r1
 8010bb0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	3324      	adds	r3, #36	; 0x24
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	887a      	ldrh	r2, [r7, #2]
 8010bbc:	4611      	mov	r1, r2
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	4798      	blx	r3
 8010bc2:	4603      	mov	r3, r0
    }
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <_ZN8touchgfx17AbstractPartition2atI16screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	3324      	adds	r3, #36	; 0x24
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	887a      	ldrh	r2, [r7, #2]
 8010be2:	4611      	mov	r1, r2
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	4798      	blx	r3
 8010be8:	4603      	mov	r3, r0
    }
 8010bea:	4618      	mov	r0, r3
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}

08010bf2 <_ZN8touchgfx4ViewI16screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8010bf2:	b480      	push	{r7}
 8010bf4:	b083      	sub	sp, #12
 8010bf6:	af00      	add	r7, sp, #0
 8010bf8:	6078      	str	r0, [r7, #4]
 8010bfa:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	683a      	ldr	r2, [r7, #0]
 8010c00:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr
	...

08010c10 <_ZN8touchgfx12NoTransitionD1Ev>:
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	4a05      	ldr	r2, [pc, #20]	; (8010c30 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	601a      	str	r2, [r3, #0]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7ff fc33 	bl	801048c <_ZN8touchgfx10TransitionD1Ev>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	08029404 	.word	0x08029404

08010c34 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7ff ffe7 	bl	8010c10 <_ZN8touchgfx12NoTransitionD1Ev>
 8010c42:	210c      	movs	r1, #12
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f016 f938 	bl	8026eba <_ZdlPvj>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	4a05      	ldr	r2, [pc, #20]	; (8010c74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	601a      	str	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7ff fbb3 	bl	80103d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	0802947c 	.word	0x0802947c

08010c78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff ffe7 	bl	8010c54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010c86:	2110      	movs	r1, #16
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f016 f916 	bl	8026eba <_ZdlPvj>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4618      	mov	r0, r3
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	68d2      	ldr	r2, [r2, #12]
 8010ca8:	1052      	asrs	r2, r2, #1
 8010caa:	1899      	adds	r1, r3, r2
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	f003 0301 	and.w	r3, r3, #1
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d102      	bne.n	8010cbe <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	689b      	ldr	r3, [r3, #8]
 8010cbc:	e00a      	b.n	8010cd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	68d2      	ldr	r2, [r2, #12]
 8010cc6:	1052      	asrs	r2, r2, #1
 8010cc8:	4413      	add	r3, r2
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	6892      	ldr	r2, [r2, #8]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	4608      	mov	r0, r1
 8010cd6:	4798      	blx	r3
    }
 8010cd8:	bf00      	nop
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d010      	beq.n	8010d12 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d107      	bne.n	8010d08 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	f003 0301 	and.w	r3, r3, #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d101      	bne.n	8010d08 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010d04:	2301      	movs	r3, #1
 8010d06:	e000      	b.n	8010d0a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d001      	beq.n	8010d12 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	e000      	b.n	8010d14 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8010d12:	2300      	movs	r3, #0
    }
 8010d14:	4618      	mov	r0, r3
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
        : color(col)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	683a      	ldr	r2, [r7, #0]
 8010d2e:	601a      	str	r2, [r3, #0]
    {
    }
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	4618      	mov	r0, r3
 8010d34:	370c      	adds	r7, #12
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr

08010d3e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8010d3e:	b480      	push	{r7}
 8010d40:	b083      	sub	sp, #12
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	801a      	strh	r2, [r3, #0]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	805a      	strh	r2, [r3, #2]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2200      	movs	r2, #0
 8010d56:	809a      	strh	r2, [r3, #4]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	80da      	strh	r2, [r3, #6]
    {
    }
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4618      	mov	r0, r3
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	460b      	mov	r3, r1
 8010d76:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	887a      	ldrh	r2, [r7, #2]
 8010d7c:	801a      	strh	r2, [r3, #0]
    {
    }
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	4618      	mov	r0, r3
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr

08010d8c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8010d94:	4a14      	ldr	r2, [pc, #80]	; (8010de8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	601a      	str	r2, [r3, #0]
        : rect(),
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	3304      	adds	r3, #4
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7ff ffcd 	bl	8010d3e <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	330c      	adds	r3, #12
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff ffc8 	bl	8010d3e <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2200      	movs	r2, #0
 8010db2:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4618      	mov	r0, r3
 8010de0:	3708      	adds	r7, #8
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	08029f80 	.word	0x08029f80

08010dec <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
    {
 8010df4:	4a04      	ldr	r2, [pc, #16]	; (8010e08 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	601a      	str	r2, [r3, #0]
    }
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	370c      	adds	r7, #12
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr
 8010e08:	08029f80 	.word	0x08029f80

08010e0c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
    }
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff ffe9 	bl	8010dec <_ZN8touchgfx8DrawableD1Ev>
 8010e1a:	2128      	movs	r1, #40	; 0x28
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f016 f84c 	bl	8026eba <_ZdlPvj>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4618      	mov	r0, r3
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d005      	beq.n	8010e4a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	3314      	adds	r3, #20
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	4798      	blx	r3
        }
    }
 8010e4a:	bf00      	nop
 8010e4c:	3708      	adds	r7, #8
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}

08010e52 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8010e52:	b480      	push	{r7}
 8010e54:	b083      	sub	sp, #12
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010e5a:	2300      	movs	r3, #0
    }
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	4608      	mov	r0, r1
 8010e72:	4611      	mov	r1, r2
 8010e74:	461a      	mov	r2, r3
 8010e76:	4603      	mov	r3, r0
 8010e78:	817b      	strh	r3, [r7, #10]
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	813b      	strh	r3, [r7, #8]
 8010e7e:	4613      	mov	r3, r2
 8010e80:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010e82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010e86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	f000 f82a 	bl	8010ee6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8010e92:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f000 f87e 	bl	8010f9e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8010ea2:	bf00      	nop
 8010ea4:	3710      	adds	r7, #16
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010eaa:	b480      	push	{r7}
 8010eac:	b083      	sub	sp, #12
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	887a      	ldrh	r2, [r7, #2]
 8010eba:	809a      	strh	r2, [r3, #4]
    }
 8010ebc:	bf00      	nop
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010ec8:	b480      	push	{r7}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	887a      	ldrh	r2, [r7, #2]
 8010ed8:	80da      	strh	r2, [r3, #6]
    }
 8010eda:	bf00      	nop
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr

08010ee6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b082      	sub	sp, #8
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
 8010eee:	460b      	mov	r3, r1
 8010ef0:	807b      	strh	r3, [r7, #2]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	3330      	adds	r3, #48	; 0x30
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010f02:	4611      	mov	r1, r2
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	4798      	blx	r3
        setY(y);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	3334      	adds	r3, #52	; 0x34
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010f14:	4611      	mov	r1, r2
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	4798      	blx	r3
    }
 8010f1a:	bf00      	nop
 8010f1c:	3708      	adds	r7, #8
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}

08010f22 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8010f22:	b480      	push	{r7}
 8010f24:	b083      	sub	sp, #12
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	887a      	ldrh	r2, [r7, #2]
 8010f32:	811a      	strh	r2, [r3, #8]
    }
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	460b      	mov	r3, r1
 8010f4a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	887a      	ldrh	r2, [r7, #2]
 8010f50:	815a      	strh	r2, [r3, #10]
    }
 8010f52:	bf00      	nop
 8010f54:	370c      	adds	r7, #12
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr

08010f5e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010f5e:	b480      	push	{r7}
 8010f60:	b083      	sub	sp, #12
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
    {
    }
 8010f66:	bf00      	nop
 8010f68:	370c      	adds	r7, #12
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr

08010f72 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010f72:	b480      	push	{r7}
 8010f74:	b083      	sub	sp, #12
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	6078      	str	r0, [r7, #4]
 8010f7a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010f7c:	bf00      	nop
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010f92:	bf00      	nop
 8010f94:	370c      	adds	r7, #12
 8010f96:	46bd      	mov	sp, r7
 8010f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9c:	4770      	bx	lr

08010f9e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
 8010fa6:	460b      	mov	r3, r1
 8010fa8:	807b      	strh	r3, [r7, #2]
 8010faa:	4613      	mov	r3, r2
 8010fac:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	3338      	adds	r3, #56	; 0x38
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010fba:	4611      	mov	r1, r2
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	4798      	blx	r3
        setHeight(height);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	333c      	adds	r3, #60	; 0x3c
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010fcc:	4611      	mov	r1, r2
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	4798      	blx	r3
    }
 8010fd2:	bf00      	nop
 8010fd4:	3708      	adds	r7, #8
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}

08010fda <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010fda:	b480      	push	{r7}
 8010fdc:	b083      	sub	sp, #12
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010fe4:	bf00      	nop
 8010fe6:	370c      	adds	r7, #12
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
    {
    }
 8010ff8:	bf00      	nop
 8010ffa:	370c      	adds	r7, #12
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr

08011004 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8011004:	b480      	push	{r7}
 8011006:	b083      	sub	sp, #12
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	460b      	mov	r3, r1
 801100e:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	78fa      	ldrb	r2, [r7, #3]
 8011014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8011032:	4618      	mov	r0, r3
 8011034:	370c      	adds	r7, #12
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr

0801103e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801103e:	b480      	push	{r7}
 8011040:	b083      	sub	sp, #12
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 801104c:	4618      	mov	r0, r3
 801104e:	370c      	adds	r7, #12
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	4770      	bx	lr

08011058 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	460b      	mov	r3, r1
 8011062:	807b      	strh	r3, [r7, #2]
 8011064:	4613      	mov	r3, r2
 8011066:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	3354      	adds	r3, #84	; 0x54
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	8879      	ldrh	r1, [r7, #2]
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8011078:	b292      	uxth	r2, r2
 801107a:	1a8a      	subs	r2, r1, r2
 801107c:	b292      	uxth	r2, r2
 801107e:	b210      	sxth	r0, r2
 8011080:	8839      	ldrh	r1, [r7, #0]
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011088:	b292      	uxth	r2, r2
 801108a:	1a8a      	subs	r2, r1, r2
 801108c:	b292      	uxth	r2, r2
 801108e:	b212      	sxth	r2, r2
 8011090:	4601      	mov	r1, r0
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	4798      	blx	r3
    }
 8011096:	bf00      	nop
 8011098:	3708      	adds	r7, #8
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801109e:	b480      	push	{r7}
 80110a0:	b083      	sub	sp, #12
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110ac:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110b4:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110bc:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80110be:	bf00      	nop
 80110c0:	370c      	adds	r7, #12
 80110c2:	46bd      	mov	sp, r7
 80110c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c8:	4770      	bx	lr

080110ca <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b084      	sub	sp, #16
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	60f8      	str	r0, [r7, #12]
 80110d2:	60b9      	str	r1, [r7, #8]
 80110d4:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f7ff ffe1 	bl	801109e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	601a      	str	r2, [r3, #0]
    }
 80110ea:	bf00      	nop
 80110ec:	3710      	adds	r7, #16
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
	...

080110f4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
    {
 80110fc:	4a06      	ldr	r2, [pc, #24]	; (8011118 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	601a      	str	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	3304      	adds	r3, #4
 8011106:	4618      	mov	r0, r3
 8011108:	f000 fbc0 	bl	801188c <_ZN8touchgfx9ContainerD1Ev>
    }
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4618      	mov	r0, r3
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	0802a084 	.word	0x0802a084

0801111c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
    }
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f7ff ffe5 	bl	80110f4 <_ZN8touchgfx6ScreenD1Ev>
 801112a:	213c      	movs	r1, #60	; 0x3c
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f015 fec4 	bl	8026eba <_ZdlPvj>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4618      	mov	r0, r3
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
    {
    }
 8011144:	bf00      	nop
 8011146:	370c      	adds	r7, #12
 8011148:	46bd      	mov	sp, r7
 801114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114e:	4770      	bx	lr

08011150 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
    {
    }
 8011158:	bf00      	nop
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8011164:	b480      	push	{r7}
 8011166:	b083      	sub	sp, #12
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
    {
    }
 801116c:	bf00      	nop
 801116e:	370c      	adds	r7, #12
 8011170:	46bd      	mov	sp, r7
 8011172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011176:	4770      	bx	lr

08011178 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
    {
    }
 8011180:	bf00      	nop
 8011182:	370c      	adds	r7, #12
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr

0801118c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801118c:	b480      	push	{r7}
 801118e:	b083      	sub	sp, #12
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	460b      	mov	r3, r1
 8011196:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	3304      	adds	r3, #4
 80111b2:	6839      	ldr	r1, [r7, #0]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f002 fda1 	bl	8013cfc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80111ba:	bf00      	nop
 80111bc:	3708      	adds	r7, #8
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b084      	sub	sp, #16
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	60f8      	str	r0, [r7, #12]
 80111ca:	607b      	str	r3, [r7, #4]
 80111cc:	460b      	mov	r3, r1
 80111ce:	817b      	strh	r3, [r7, #10]
 80111d0:	4613      	mov	r3, r2
 80111d2:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ff ff24 	bl	8011024 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d008      	beq.n	80111f4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff ff2a 	bl	801103e <_ZNK8touchgfx8Drawable11isTouchableEv>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80111f0:	2301      	movs	r3, #1
 80111f2:	e000      	b.n	80111f6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80111f4:	2300      	movs	r3, #0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d002      	beq.n	8011200 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80111fa:	68fa      	ldr	r2, [r7, #12]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	601a      	str	r2, [r3, #0]
        }
    }
 8011200:	bf00      	nop
 8011202:	3710      	adds	r7, #16
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	4618      	mov	r0, r3
 8011214:	f7ff fdba 	bl	8010d8c <_ZN8touchgfx8DrawableC1Ev>
 8011218:	4a03      	ldr	r2, [pc, #12]	; (8011228 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	601a      	str	r2, [r3, #0]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	4618      	mov	r0, r3
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	080295b4 	.word	0x080295b4

0801122c <_ZN8touchgfx6WidgetD1Ev>:
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	4a05      	ldr	r2, [pc, #20]	; (801124c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	601a      	str	r2, [r3, #0]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	f7ff fdd5 	bl	8010dec <_ZN8touchgfx8DrawableD1Ev>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	080295b4 	.word	0x080295b4

08011250 <_ZN8touchgfx6WidgetD0Ev>:
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7ff ffe7 	bl	801122c <_ZN8touchgfx6WidgetD1Ev>
 801125e:	2128      	movs	r1, #40	; 0x28
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f015 fe2a 	bl	8026eba <_ZdlPvj>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4618      	mov	r0, r3
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	4618      	mov	r0, r3
 801127c:	2326      	movs	r3, #38	; 0x26
 801127e:	461a      	mov	r2, r3
 8011280:	2100      	movs	r1, #0
 8011282:	f016 f84c 	bl	802731e <memset>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	f7ff ffbd 	bl	8011208 <_ZN8touchgfx6WidgetC1Ev>
 801128e:	4a09      	ldr	r2, [pc, #36]	; (80112b4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	601a      	str	r2, [r3, #0]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	22ff      	movs	r2, #255	; 0xff
 8011298:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	3328      	adds	r3, #40	; 0x28
 80112a0:	2100      	movs	r1, #0
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7ff fd3c 	bl	8010d20 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	4618      	mov	r0, r3
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	08029d84 	.word	0x08029d84

080112b8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	683a      	ldr	r2, [r7, #0]
 80112c6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80112c8:	bf00      	nop
 80112ca:	370c      	adds	r7, #12
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	4618      	mov	r0, r3
 80112e0:	2326      	movs	r3, #38	; 0x26
 80112e2:	461a      	mov	r2, r3
 80112e4:	2100      	movs	r1, #0
 80112e6:	f016 f81a 	bl	802731e <memset>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7ff ff8b 	bl	8011208 <_ZN8touchgfx6WidgetC1Ev>
 80112f2:	4a0a      	ldr	r2, [pc, #40]	; (801131c <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	601a      	str	r2, [r3, #0]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2200      	movs	r2, #0
 80112fc:	629a      	str	r2, [r3, #40]	; 0x28
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2200      	movs	r2, #0
 8011302:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2101      	movs	r1, #1
 801130a:	4618      	mov	r0, r3
 801130c:	f7ff fe7a 	bl	8011004 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	4618      	mov	r0, r3
 8011314:	3708      	adds	r7, #8
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	08029d14 	.word	0x08029d14

08011320 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	4a05      	ldr	r2, [pc, #20]	; (8011340 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	601a      	str	r2, [r3, #0]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4618      	mov	r0, r3
 8011332:	f7ff ff7b 	bl	801122c <_ZN8touchgfx6WidgetD1Ev>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4618      	mov	r0, r3
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	08029d14 	.word	0x08029d14

08011344 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7ff ffe7 	bl	8011320 <_ZN8touchgfx14AbstractButtonD1Ev>
 8011352:	2130      	movs	r1, #48	; 0x30
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f015 fdb0 	bl	8026eba <_ZdlPvj>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4618      	mov	r0, r3
 8011370:	f7ff ffb0 	bl	80112d4 <_ZN8touchgfx14AbstractButtonC1Ev>
 8011374:	4a0c      	ldr	r2, [pc, #48]	; (80113a8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	601a      	str	r2, [r3, #0]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	332e      	adds	r3, #46	; 0x2e
 801137e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011382:	4618      	mov	r0, r3
 8011384:	f7ff fcf2 	bl	8010d6c <_ZN8touchgfx6BitmapC1Et>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	3330      	adds	r3, #48	; 0x30
 801138c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011390:	4618      	mov	r0, r3
 8011392:	f7ff fceb 	bl	8010d6c <_ZN8touchgfx6BitmapC1Et>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	22ff      	movs	r2, #255	; 0xff
 801139a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	4618      	mov	r0, r3
 80113a2:	3708      	adds	r7, #8
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	08029dec 	.word	0x08029dec

080113ac <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	460b      	mov	r3, r1
 80113b6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80113b8:	4a06      	ldr	r2, [pc, #24]	; (80113d4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	887a      	ldrh	r2, [r7, #2]
 80113c2:	809a      	strh	r2, [r3, #4]
    }
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	4618      	mov	r0, r3
 80113c8:	370c      	adds	r7, #12
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	08029394 	.word	0x08029394

080113d8 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	889a      	ldrh	r2, [r3, #4]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	809a      	strh	r2, [r3, #4]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4618      	mov	r0, r3
 80113ee:	370c      	adds	r7, #12
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr

080113f8 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	3334      	adds	r3, #52	; 0x34
 8011406:	6839      	ldr	r1, [r7, #0]
 8011408:	4618      	mov	r0, r3
 801140a:	f7ff ffe5 	bl	80113d8 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 f820 	bl	8011454 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8011414:	bf00      	nop
 8011416:	3708      	adds	r7, #8
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801142c:	bf00      	nop
 801142e:	370c      	adds	r7, #12
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	683a      	ldr	r2, [r7, #0]
 8011446:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8011448:	bf00      	nop
 801144a:	370c      	adds	r7, #12
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr

08011454 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8011454:	b590      	push	{r4, r7, lr}
 8011456:	b08b      	sub	sp, #44	; 0x2c
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	3334      	adds	r3, #52	; 0x34
 8011460:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId < numberOfTypedTexts;
 8011462:	69fb      	ldr	r3, [r7, #28]
 8011464:	889a      	ldrh	r2, [r3, #4]
 8011466:	4b46      	ldr	r3, [pc, #280]	; (8011580 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	429a      	cmp	r2, r3
 801146c:	bf34      	ite	cc
 801146e:	2301      	movcc	r3, #1
 8011470:	2300      	movcs	r3, #0
 8011472:	b2db      	uxtb	r3, r3
 8011474:	2b00      	cmp	r3, #0
 8011476:	d07a      	beq.n	801156e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11a>
        {
            const Font* f = typedText.getFont();
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	3334      	adds	r3, #52	; 0x34
 801147c:	613b      	str	r3, [r7, #16]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801147e:	4b41      	ldr	r3, [pc, #260]	; (8011584 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d105      	bne.n	8011492 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x3e>
 8011486:	4b40      	ldr	r3, [pc, #256]	; (8011588 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 8011488:	4a40      	ldr	r2, [pc, #256]	; (801158c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 801148a:	216c      	movs	r1, #108	; 0x6c
 801148c:	4840      	ldr	r0, [pc, #256]	; (8011590 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 801148e:	f015 fd41 	bl	8026f14 <__assert_func>
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	60fb      	str	r3, [r7, #12]
        return typedTextId < numberOfTypedTexts;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	889a      	ldrh	r2, [r3, #4]
 801149a:	4b39      	ldr	r3, [pc, #228]	; (8011580 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 801149c:	881b      	ldrh	r3, [r3, #0]
 801149e:	429a      	cmp	r2, r3
 80114a0:	bf34      	ite	cc
 80114a2:	2301      	movcc	r3, #1
 80114a4:	2300      	movcs	r3, #0
 80114a6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d105      	bne.n	80114b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
 80114ac:	4b39      	ldr	r3, [pc, #228]	; (8011594 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 80114ae:	4a37      	ldr	r2, [pc, #220]	; (801158c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 80114b0:	216d      	movs	r1, #109	; 0x6d
 80114b2:	4837      	ldr	r0, [pc, #220]	; (8011590 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 80114b4:	f015 fd2e 	bl	8026f14 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80114b8:	4b37      	ldr	r3, [pc, #220]	; (8011598 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x144>)
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	4b31      	ldr	r3, [pc, #196]	; (8011584 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 80114be:	6819      	ldr	r1, [r3, #0]
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	889b      	ldrh	r3, [r3, #4]
 80114c4:	005b      	lsls	r3, r3, #1
 80114c6:	440b      	add	r3, r1
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	4413      	add	r3, r2
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	3334      	adds	r3, #52	; 0x34
 80114d6:	61bb      	str	r3, [r7, #24]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80114d8:	4b2a      	ldr	r3, [pc, #168]	; (8011584 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d105      	bne.n	80114ec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>
 80114e0:	4b29      	ldr	r3, [pc, #164]	; (8011588 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 80114e2:	4a2e      	ldr	r2, [pc, #184]	; (801159c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 80114e4:	2160      	movs	r1, #96	; 0x60
 80114e6:	482a      	ldr	r0, [pc, #168]	; (8011590 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 80114e8:	f015 fd14 	bl	8026f14 <__assert_func>
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	617b      	str	r3, [r7, #20]
        return typedTextId < numberOfTypedTexts;
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	889a      	ldrh	r2, [r3, #4]
 80114f4:	4b22      	ldr	r3, [pc, #136]	; (8011580 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 80114f6:	881b      	ldrh	r3, [r3, #0]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	bf34      	ite	cc
 80114fc:	2301      	movcc	r3, #1
 80114fe:	2300      	movcs	r3, #0
 8011500:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011502:	2b00      	cmp	r3, #0
 8011504:	d105      	bne.n	8011512 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xbe>
 8011506:	4b23      	ldr	r3, [pc, #140]	; (8011594 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 8011508:	4a24      	ldr	r2, [pc, #144]	; (801159c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 801150a:	2161      	movs	r1, #97	; 0x61
 801150c:	4820      	ldr	r0, [pc, #128]	; (8011590 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 801150e:	f015 fd01 	bl	8026f14 <__assert_func>
        return texts->getText(typedTextId);
 8011512:	4b23      	ldr	r3, [pc, #140]	; (80115a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x14c>)
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	889b      	ldrh	r3, [r3, #4]
 801151a:	4619      	mov	r1, r3
 801151c:	4610      	mov	r0, r2
 801151e:	f000 fbe7 	bl	8011cf0 <_ZNK8touchgfx5Texts7getTextEt>
 8011522:	4603      	mov	r3, r0
 8011524:	bf00      	nop
 8011526:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8011528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	3338      	adds	r3, #56	; 0x38
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011532:	4798      	blx	r3
 8011534:	4603      	mov	r3, r0
 8011536:	461c      	mov	r4, r3
 8011538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	3348      	adds	r3, #72	; 0x48
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	6a39      	ldr	r1, [r7, #32]
 8011542:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011544:	4798      	blx	r3
 8011546:	4603      	mov	r3, r0
 8011548:	fb14 f303 	smulbb	r3, r4, r3
 801154c:	b29c      	uxth	r4, r3
 801154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	3324      	adds	r3, #36	; 0x24
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	6a39      	ldr	r1, [r7, #32]
 8011558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801155a:	4798      	blx	r3
 801155c:	4603      	mov	r3, r0
 801155e:	b29b      	uxth	r3, r3
 8011560:	4423      	add	r3, r4
 8011562:	b29b      	uxth	r3, r3
 8011564:	b21a      	sxth	r2, r3
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 801156c:	e003      	b.n	8011576 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x122>
            textHeightIncludingSpacing = 0;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2200      	movs	r2, #0
 8011572:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    }
 8011576:	bf00      	nop
 8011578:	372c      	adds	r7, #44	; 0x2c
 801157a:	46bd      	mov	sp, r7
 801157c:	bd90      	pop	{r4, r7, pc}
 801157e:	bf00      	nop
 8011580:	2000f3e8 	.word	0x2000f3e8
 8011584:	2000f3e4 	.word	0x2000f3e4
 8011588:	080283a4 	.word	0x080283a4
 801158c:	080283e8 	.word	0x080283e8
 8011590:	08028424 	.word	0x08028424
 8011594:	08028468 	.word	0x08028468
 8011598:	2000f3ec 	.word	0x2000f3ec
 801159c:	080284a8 	.word	0x080284a8
 80115a0:	2000f3f0 	.word	0x2000f3f0

080115a4 <_ZN8touchgfx4ViewI16screen1PresenterED1Ev>:
class View : public Screen
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	4a05      	ldr	r2, [pc, #20]	; (80115c4 <_ZN8touchgfx4ViewI16screen1PresenterED1Ev+0x20>)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	601a      	str	r2, [r3, #0]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff fd9d 	bl	80110f4 <_ZN8touchgfx6ScreenD1Ev>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	08029580 	.word	0x08029580

080115c8 <_ZN8touchgfx4ViewI16screen1PresenterED0Ev>:
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7ff ffe7 	bl	80115a4 <_ZN8touchgfx4ViewI16screen1PresenterED1Ev>
 80115d6:	2140      	movs	r1, #64	; 0x40
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f015 fc6e 	bl	8026eba <_ZdlPvj>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4618      	mov	r0, r3
 80115e2:	3708      	adds	r7, #8
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <_ZN15screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

screen1ViewBase::screen1ViewBase()
 80115e8:	b590      	push	{r4, r7, lr}
 80115ea:	b091      	sub	sp, #68	; 0x44
 80115ec:	af02      	add	r7, sp, #8
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	4618      	mov	r0, r3
 80115f4:	f000 f934 	bl	8011860 <_ZN8touchgfx4ViewI16screen1PresenterEC1Ev>
 80115f8:	4a7a      	ldr	r2, [pc, #488]	; (80117e4 <_ZN15screen1ViewBaseC1Ev+0x1fc>)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	3340      	adds	r3, #64	; 0x40
 8011602:	4618      	mov	r0, r3
 8011604:	f7ff fe34 	bl	8011270 <_ZN8touchgfx3BoxC1Ev>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	336c      	adds	r3, #108	; 0x6c
 801160c:	4618      	mov	r0, r3
 801160e:	f7ff fea9 	bl	8011364 <_ZN8touchgfx6ButtonC1Ev>
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	33a0      	adds	r3, #160	; 0xa0
 8011616:	4618      	mov	r0, r3
 8011618:	f003 febe 	bl	8015398 <_ZN8touchgfx15ButtonWithLabelC1Ev>
{
    __background.setPosition(0, 0, 480, 320);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011622:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8011626:	9300      	str	r3, [sp, #0]
 8011628:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801162c:	2200      	movs	r2, #0
 801162e:	2100      	movs	r1, #0
 8011630:	f7ff fc1a 	bl	8010e68 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801163a:	2300      	movs	r3, #0
 801163c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8011640:	2300      	movs	r3, #0
 8011642:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8011646:	2300      	movs	r3, #0
 8011648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 801164c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8011650:	041b      	lsls	r3, r3, #16
 8011652:	461a      	mov	r2, r3
 8011654:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011658:	021b      	lsls	r3, r3, #8
 801165a:	431a      	orrs	r2, r3
 801165c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011660:	4313      	orrs	r3, r2
 8011662:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801166a:	4611      	mov	r1, r2
 801166c:	4618      	mov	r0, r3
 801166e:	f7ff fb57 	bl	8010d20 <_ZN8touchgfx9colortypeC1Em>
 8011672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011674:	4619      	mov	r1, r3
 8011676:	4620      	mov	r0, r4
 8011678:	f7ff fe1e 	bl	80112b8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	3340      	adds	r3, #64	; 0x40
 8011682:	4619      	mov	r1, r3
 8011684:	4610      	mov	r0, r2
 8011686:	f7ff fd8d 	bl	80111a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    close.setXY(12, 260);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	336c      	adds	r3, #108	; 0x6c
 801168e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011692:	210c      	movs	r1, #12
 8011694:	4618      	mov	r0, r3
 8011696:	f7ff fc26 	bl	8010ee6 <_ZN8touchgfx8Drawable5setXYEss>
    close.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80116a0:	f107 0308 	add.w	r3, r7, #8
 80116a4:	2100      	movs	r1, #0
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7ff fb60 	bl	8010d6c <_ZN8touchgfx6BitmapC1Et>
 80116ac:	f107 030c 	add.w	r3, r7, #12
 80116b0:	2101      	movs	r1, #1
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff fb5a 	bl	8010d6c <_ZN8touchgfx6BitmapC1Et>
 80116b8:	f107 020c 	add.w	r2, r7, #12
 80116bc:	f107 0308 	add.w	r3, r7, #8
 80116c0:	4619      	mov	r1, r3
 80116c2:	4620      	mov	r0, r4
 80116c4:	f003 fcf8 	bl	80150b8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    add(close);
 80116c8:	687a      	ldr	r2, [r7, #4]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	336c      	adds	r3, #108	; 0x6c
 80116ce:	4619      	mov	r1, r3
 80116d0:	4610      	mov	r0, r2
 80116d2:	f7ff fd67 	bl	80111a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel1.setXY(0, 0);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	33a0      	adds	r3, #160	; 0xa0
 80116da:	2200      	movs	r2, #0
 80116dc:	2100      	movs	r1, #0
 80116de:	4618      	mov	r0, r3
 80116e0:	f7ff fc01 	bl	8010ee6 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80116ea:	f107 0310 	add.w	r3, r7, #16
 80116ee:	2100      	movs	r1, #0
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7ff fb3b 	bl	8010d6c <_ZN8touchgfx6BitmapC1Et>
 80116f6:	f107 0314 	add.w	r3, r7, #20
 80116fa:	2101      	movs	r1, #1
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7ff fb35 	bl	8010d6c <_ZN8touchgfx6BitmapC1Et>
 8011702:	f107 0214 	add.w	r2, r7, #20
 8011706:	f107 0310 	add.w	r3, r7, #16
 801170a:	4619      	mov	r1, r3
 801170c:	4620      	mov	r0, r4
 801170e:	f003 fcd3 	bl	80150b8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_B1D4));
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8011718:	f107 0318 	add.w	r3, r7, #24
 801171c:	2100      	movs	r1, #0
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff fe44 	bl	80113ac <_ZN8touchgfx9TypedTextC1Et>
 8011724:	f107 0318 	add.w	r3, r7, #24
 8011728:	4619      	mov	r1, r3
 801172a:	4620      	mov	r0, r4
 801172c:	f7ff fe64 	bl	80113f8 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8011730:	f107 0318 	add.w	r3, r7, #24
 8011734:	4618      	mov	r0, r3
 8011736:	f7fe fbc5 	bl	800fec4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8011740:	23ff      	movs	r3, #255	; 0xff
 8011742:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8011746:	23ff      	movs	r3, #255	; 0xff
 8011748:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801174c:	23ff      	movs	r3, #255	; 0xff
 801174e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011752:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011756:	041b      	lsls	r3, r3, #16
 8011758:	461a      	mov	r2, r3
 801175a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801175e:	021b      	lsls	r3, r3, #8
 8011760:	431a      	orrs	r2, r3
 8011762:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8011766:	4313      	orrs	r3, r2
 8011768:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011770:	4611      	mov	r1, r2
 8011772:	4618      	mov	r0, r3
 8011774:	f7ff fad4 	bl	8010d20 <_ZN8touchgfx9colortypeC1Em>
 8011778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177a:	4619      	mov	r1, r3
 801177c:	4620      	mov	r0, r4
 801177e:	f7ff fe4d 	bl	801141c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8011788:	23ff      	movs	r3, #255	; 0xff
 801178a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801178e:	23ff      	movs	r3, #255	; 0xff
 8011790:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011794:	23ff      	movs	r3, #255	; 0xff
 8011796:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 801179a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801179e:	041b      	lsls	r3, r3, #16
 80117a0:	461a      	mov	r2, r3
 80117a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117a6:	021b      	lsls	r3, r3, #8
 80117a8:	431a      	orrs	r2, r3
 80117aa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117ae:	4313      	orrs	r3, r2
 80117b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80117b4:	f107 0320 	add.w	r3, r7, #32
 80117b8:	4611      	mov	r1, r2
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7ff fab0 	bl	8010d20 <_ZN8touchgfx9colortypeC1Em>
 80117c0:	6a3b      	ldr	r3, [r7, #32]
 80117c2:	4619      	mov	r1, r3
 80117c4:	4620      	mov	r0, r4
 80117c6:	f7ff fe37 	bl	8011438 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel1);
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	33a0      	adds	r3, #160	; 0xa0
 80117d0:	4619      	mov	r1, r3
 80117d2:	4610      	mov	r0, r2
 80117d4:	f7ff fce6 	bl	80111a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4618      	mov	r0, r3
 80117dc:	373c      	adds	r7, #60	; 0x3c
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd90      	pop	{r4, r7, pc}
 80117e2:	bf00      	nop
 80117e4:	0802954c 	.word	0x0802954c

080117e8 <_ZN15screen1ViewBaseD1Ev>:

screen1ViewBase::~screen1ViewBase()
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	4a0d      	ldr	r2, [pc, #52]	; (8011828 <_ZN15screen1ViewBaseD1Ev+0x40>)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	33a0      	adds	r3, #160	; 0xa0
 80117fa:	4618      	mov	r0, r3
 80117fc:	f000 f8ac 	bl	8011958 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	336c      	adds	r3, #108	; 0x6c
 8011804:	4618      	mov	r0, r3
 8011806:	f000 f885 	bl	8011914 <_ZN8touchgfx6ButtonD1Ev>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	3340      	adds	r3, #64	; 0x40
 801180e:	4618      	mov	r0, r3
 8011810:	f000 f85e 	bl	80118d0 <_ZN8touchgfx3BoxD1Ev>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4618      	mov	r0, r3
 8011818:	f7ff fec4 	bl	80115a4 <_ZN8touchgfx4ViewI16screen1PresenterED1Ev>
{

}
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4618      	mov	r0, r3
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	0802954c 	.word	0x0802954c

0801182c <_ZN15screen1ViewBaseD0Ev>:
screen1ViewBase::~screen1ViewBase()
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
}
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ff ffd7 	bl	80117e8 <_ZN15screen1ViewBaseD1Ev>
 801183a:	21e8      	movs	r1, #232	; 0xe8
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f015 fb3c 	bl	8026eba <_ZdlPvj>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	4618      	mov	r0, r3
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <_ZN15screen1ViewBase11setupScreenEv>:

void screen1ViewBase::setupScreen()
{
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]

}
 8011854:	bf00      	nop
 8011856:	370c      	adds	r7, #12
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr

08011860 <_ZN8touchgfx4ViewI16screen1PresenterEC1Ev>:
    View()
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4618      	mov	r0, r3
 801186c:	f006 fd6c 	bl	8018348 <_ZN8touchgfx6ScreenC1Ev>
 8011870:	4a05      	ldr	r2, [pc, #20]	; (8011888 <_ZN8touchgfx4ViewI16screen1PresenterEC1Ev+0x28>)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	601a      	str	r2, [r3, #0]
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2200      	movs	r2, #0
 801187a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4618      	mov	r0, r3
 8011880:	3708      	adds	r7, #8
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	08029580 	.word	0x08029580

0801188c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	4a05      	ldr	r2, [pc, #20]	; (80118ac <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4618      	mov	r0, r3
 801189e:	f7ff faa5 	bl	8010dec <_ZN8touchgfx8DrawableD1Ev>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	4618      	mov	r0, r3
 80118a6:	3708      	adds	r7, #8
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	08029b2c 	.word	0x08029b2c

080118b0 <_ZN8touchgfx9ContainerD0Ev>:
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7ff ffe7 	bl	801188c <_ZN8touchgfx9ContainerD1Ev>
 80118be:	212c      	movs	r1, #44	; 0x2c
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f015 fafa 	bl	8026eba <_ZdlPvj>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	4a05      	ldr	r2, [pc, #20]	; (80118f0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7ff fca3 	bl	801122c <_ZN8touchgfx6WidgetD1Ev>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4618      	mov	r0, r3
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	08029d84 	.word	0x08029d84

080118f4 <_ZN8touchgfx3BoxD0Ev>:
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7ff ffe7 	bl	80118d0 <_ZN8touchgfx3BoxD1Ev>
 8011902:	212c      	movs	r1, #44	; 0x2c
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f015 fad8 	bl	8026eba <_ZdlPvj>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4618      	mov	r0, r3
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	4a05      	ldr	r2, [pc, #20]	; (8011934 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	601a      	str	r2, [r3, #0]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4618      	mov	r0, r3
 8011926:	f7ff fcfb 	bl	8011320 <_ZN8touchgfx14AbstractButtonD1Ev>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4618      	mov	r0, r3
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}
 8011934:	08029dec 	.word	0x08029dec

08011938 <_ZN8touchgfx6ButtonD0Ev>:
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7ff ffe7 	bl	8011914 <_ZN8touchgfx6ButtonD1Ev>
 8011946:	2134      	movs	r1, #52	; 0x34
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f015 fab6 	bl	8026eba <_ZdlPvj>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	4618      	mov	r0, r3
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	4a08      	ldr	r2, [pc, #32]	; (8011984 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	601a      	str	r2, [r3, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	3334      	adds	r3, #52	; 0x34
 801196a:	4618      	mov	r0, r3
 801196c:	f7fe faaa 	bl	800fec4 <_ZN8touchgfx9TypedTextD1Ev>
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	4618      	mov	r0, r3
 8011974:	f7ff ffce 	bl	8011914 <_ZN8touchgfx6ButtonD1Ev>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	08029e60 	.word	0x08029e60

08011988 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7ff ffe1 	bl	8011958 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8011996:	2148      	movs	r1, #72	; 0x48
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f015 fa8e 	bl	8026eba <_ZdlPvj>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	4618      	mov	r0, r3
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80119a8:	b480      	push	{r7}
 80119aa:	af00      	add	r7, sp, #0
    return bitmap_database;
 80119ac:	4b02      	ldr	r3, [pc, #8]	; (80119b8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	08029614 	.word	0x08029614

080119bc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80119bc:	b480      	push	{r7}
 80119be:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80119c0:	2302      	movs	r3, #2
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr

080119cc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80119cc:	b480      	push	{r7}
 80119ce:	b085      	sub	sp, #20
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	460b      	mov	r3, r1
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 80119da:	2300      	movs	r3, #0
    }
 80119dc:	4618      	mov	r0, r3
 80119de:	3714      	adds	r7, #20
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr

080119e8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80119f0:	2300      	movs	r3, #0
    }
 80119f2:	4618      	mov	r0, r3
 80119f4:	370c      	adds	r7, #12
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr

080119fe <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80119fe:	b480      	push	{r7}
 8011a00:	b083      	sub	sp, #12
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011a06:	2300      	movs	r3, #0
    }
 8011a08:	4618      	mov	r0, r3
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr

08011a14 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	4613      	mov	r3, r2
 8011a20:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8011a22:	4a07      	ldr	r2, [pc, #28]	; (8011a40 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011a28:	4a06      	ldr	r2, [pc, #24]	; (8011a44 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8011a2e:	4a06      	ldr	r2, [pc, #24]	; (8011a48 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011a30:	88fb      	ldrh	r3, [r7, #6]
 8011a32:	8013      	strh	r3, [r2, #0]
    }
 8011a34:	bf00      	nop
 8011a36:	3714      	adds	r7, #20
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr
 8011a40:	2000f3e4 	.word	0x2000f3e4
 8011a44:	2000f3ec 	.word	0x2000f3ec
 8011a48:	2000f3e8 	.word	0x2000f3e8

08011a4c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011a4c:	b40e      	push	{r1, r2, r3}
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b085      	sub	sp, #20
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8011a56:	f107 0320 	add.w	r3, r7, #32
 8011a5a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	69fa      	ldr	r2, [r7, #28]
 8011a60:	2100      	movs	r1, #0
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f006 f8a6 	bl	8017bb4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3714      	adds	r7, #20
 8011a72:	46bd      	mov	sp, r7
 8011a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a78:	b003      	add	sp, #12
 8011a7a:	4770      	bx	lr

08011a7c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011a7c:	b40c      	push	{r2, r3}
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b084      	sub	sp, #16
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
 8011a86:	460b      	mov	r3, r1
 8011a88:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8011a8a:	f107 031c 	add.w	r3, r7, #28
 8011a8e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011a90:	78f9      	ldrb	r1, [r7, #3]
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	69ba      	ldr	r2, [r7, #24]
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f006 f88c 	bl	8017bb4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011aa0:	89fb      	ldrh	r3, [r7, #14]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011aac:	b002      	add	sp, #8
 8011aae:	4770      	bx	lr

08011ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b08a      	sub	sp, #40	; 0x28
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	460b      	mov	r3, r1
 8011aba:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d016      	beq.n	8011af2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	3322      	adds	r3, #34	; 0x22
 8011ac8:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011acc:	8adb      	ldrh	r3, [r3, #22]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d105      	bne.n	8011ade <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8011ad2:	4b43      	ldr	r3, [pc, #268]	; (8011be0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011ad4:	4a43      	ldr	r2, [pc, #268]	; (8011be4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011ad6:	21c5      	movs	r1, #197	; 0xc5
 8011ad8:	4843      	ldr	r0, [pc, #268]	; (8011be8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011ada:	f015 fa1b 	bl	8026f14 <__assert_func>
            return buffer[pos];
 8011ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae0:	8a9b      	ldrh	r3, [r3, #20]
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d001      	beq.n	8011af2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011aee:	2301      	movs	r3, #1
 8011af0:	e000      	b.n	8011af4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8011af2:	2300      	movs	r3, #0
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d06a      	beq.n	8011bce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f007 fae4 	bl	80190c6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	3322      	adds	r3, #34	; 0x22
 8011b02:	623b      	str	r3, [r7, #32]
 8011b04:	2301      	movs	r3, #1
 8011b06:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011b08:	6a3b      	ldr	r3, [r7, #32]
 8011b0a:	8adb      	ldrh	r3, [r3, #22]
 8011b0c:	8bfa      	ldrh	r2, [r7, #30]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d305      	bcc.n	8011b1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8011b12:	4b36      	ldr	r3, [pc, #216]	; (8011bec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011b14:	4a36      	ldr	r2, [pc, #216]	; (8011bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011b16:	21cb      	movs	r1, #203	; 0xcb
 8011b18:	4833      	ldr	r0, [pc, #204]	; (8011be8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011b1a:	f015 f9fb 	bl	8026f14 <__assert_func>
            const uint16_t index = pos + offset;
 8011b1e:	6a3b      	ldr	r3, [r7, #32]
 8011b20:	8a9a      	ldrh	r2, [r3, #20]
 8011b22:	8bfb      	ldrh	r3, [r7, #30]
 8011b24:	4413      	add	r3, r2
 8011b26:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011b28:	8bbb      	ldrh	r3, [r7, #28]
 8011b2a:	2b09      	cmp	r3, #9
 8011b2c:	d801      	bhi.n	8011b32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8011b2e:	8bbb      	ldrh	r3, [r7, #28]
 8011b30:	e001      	b.n	8011b36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8011b32:	8bbb      	ldrh	r3, [r7, #28]
 8011b34:	3b0a      	subs	r3, #10
 8011b36:	6a3a      	ldr	r2, [r7, #32]
 8011b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b3c:	f640 123f 	movw	r2, #2367	; 0x93f
 8011b40:	4293      	cmp	r3, r2
 8011b42:	bf0c      	ite	eq
 8011b44:	2301      	moveq	r3, #1
 8011b46:	2300      	movne	r3, #0
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d03f      	beq.n	8011bce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	3322      	adds	r3, #34	; 0x22
 8011b52:	687a      	ldr	r2, [r7, #4]
 8011b54:	3222      	adds	r2, #34	; 0x22
 8011b56:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8011b58:	68ba      	ldr	r2, [r7, #8]
 8011b5a:	8ad2      	ldrh	r2, [r2, #22]
 8011b5c:	2a00      	cmp	r2, #0
 8011b5e:	d105      	bne.n	8011b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8011b60:	4b1f      	ldr	r3, [pc, #124]	; (8011be0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011b62:	4a20      	ldr	r2, [pc, #128]	; (8011be4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011b64:	21c5      	movs	r1, #197	; 0xc5
 8011b66:	4820      	ldr	r0, [pc, #128]	; (8011be8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011b68:	f015 f9d4 	bl	8026f14 <__assert_func>
            return buffer[pos];
 8011b6c:	68ba      	ldr	r2, [r7, #8]
 8011b6e:	8a92      	ldrh	r2, [r2, #20]
 8011b70:	4611      	mov	r1, r2
 8011b72:	68ba      	ldr	r2, [r7, #8]
 8011b74:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011b78:	613b      	str	r3, [r7, #16]
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	8adb      	ldrh	r3, [r3, #22]
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d806      	bhi.n	8011b94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011b86:	4b1b      	ldr	r3, [pc, #108]	; (8011bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011b88:	4a1b      	ldr	r2, [pc, #108]	; (8011bf8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8011b8a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8011b8e:	4816      	ldr	r0, [pc, #88]	; (8011be8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011b90:	f015 f9c0 	bl	8026f14 <__assert_func>
            const uint16_t index = pos + 1;
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	8a9b      	ldrh	r3, [r3, #20]
 8011b98:	3301      	adds	r3, #1
 8011b9a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8011b9c:	89bb      	ldrh	r3, [r7, #12]
 8011b9e:	2b09      	cmp	r3, #9
 8011ba0:	d801      	bhi.n	8011ba6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8011ba2:	89bb      	ldrh	r3, [r7, #12]
 8011ba4:	e000      	b.n	8011ba8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	693a      	ldr	r2, [r7, #16]
 8011baa:	89f9      	ldrh	r1, [r7, #14]
 8011bac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011bb0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	3322      	adds	r3, #34	; 0x22
 8011bb6:	61bb      	str	r3, [r7, #24]
 8011bb8:	f640 133f 	movw	r3, #2367	; 0x93f
 8011bbc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	8a9b      	ldrh	r3, [r3, #20]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	8afa      	ldrh	r2, [r7, #22]
 8011bc8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8011bcc:	bf00      	nop
        }
    }
    return getNextChar();
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f007 f97c 	bl	8018ecc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011bd4:	4603      	mov	r3, r0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3728      	adds	r7, #40	; 0x28
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	080284e0 	.word	0x080284e0
 8011be4:	080284ec 	.word	0x080284ec
 8011be8:	08028598 	.word	0x08028598
 8011bec:	080285e0 	.word	0x080285e0
 8011bf0:	080285f0 	.word	0x080285f0
 8011bf4:	080286c4 	.word	0x080286c4
 8011bf8:	080286d0 	.word	0x080286d0

08011bfc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f007 f928 	bl	8018e5a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011c0a:	bf00      	nop
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}

08011c12 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b088      	sub	sp, #32
 8011c16:	af02      	add	r7, sp, #8
 8011c18:	60f8      	str	r0, [r7, #12]
 8011c1a:	1d38      	adds	r0, r7, #4
 8011c1c:	e880 0006 	stmia.w	r0, {r1, r2}
 8011c20:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8011c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c26:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8011c28:	1d39      	adds	r1, r7, #4
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	9301      	str	r3, [sp, #4]
 8011c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c30:	9300      	str	r3, [sp, #0]
 8011c32:	6a3b      	ldr	r3, [r7, #32]
 8011c34:	683a      	ldr	r2, [r7, #0]
 8011c36:	68f8      	ldr	r0, [r7, #12]
 8011c38:	f004 fc18 	bl	801646c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8011c3c:	bf00      	nop
 8011c3e:	3718      	adds	r7, #24
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011c44:	b590      	push	{r4, r7, lr}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011c52:	88fb      	ldrh	r3, [r7, #6]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d127      	bne.n	8011ca8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011c58:	88fb      	ldrh	r3, [r7, #6]
 8011c5a:	4a1e      	ldr	r2, [pc, #120]	; (8011cd4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d016      	beq.n	8011c92 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011c64:	88fb      	ldrh	r3, [r7, #6]
 8011c66:	4a1b      	ldr	r2, [pc, #108]	; (8011cd4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c6c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	68ba      	ldr	r2, [r7, #8]
 8011c74:	4413      	add	r3, r2
 8011c76:	4a18      	ldr	r2, [pc, #96]	; (8011cd8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011c78:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	4413      	add	r3, r2
 8011c82:	4a16      	ldr	r2, [pc, #88]	; (8011cdc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011c84:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	68ba      	ldr	r2, [r7, #8]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	60fb      	str	r3, [r7, #12]
 8011c90:	e00a      	b.n	8011ca8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011c92:	4b11      	ldr	r3, [pc, #68]	; (8011cd8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011c94:	4a12      	ldr	r2, [pc, #72]	; (8011ce0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011c96:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011c98:	4a12      	ldr	r2, [pc, #72]	; (8011ce4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011c9a:	4b10      	ldr	r3, [pc, #64]	; (8011cdc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011c9c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011c9e:	88fb      	ldrh	r3, [r7, #6]
 8011ca0:	4a11      	ldr	r2, [pc, #68]	; (8011ce8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ca6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00d      	beq.n	8011cca <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011cae:	4a0f      	ldr	r2, [pc, #60]	; (8011cec <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011cb0:	88fb      	ldrh	r3, [r7, #6]
 8011cb2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011cb4:	f000 f83e 	bl	8011d34 <_ZN17TypedTextDatabase8getFontsEv>
 8011cb8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011cba:	f000 f833 	bl	8011d24 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f7ff fea5 	bl	8011a14 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011cca:	bf00      	nop
 8011ccc:	3714      	adds	r7, #20
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd90      	pop	{r4, r7, pc}
 8011cd2:	bf00      	nop
 8011cd4:	2000cd9c 	.word	0x2000cd9c
 8011cd8:	2000cda4 	.word	0x2000cda4
 8011cdc:	2000cda8 	.word	0x2000cda8
 8011ce0:	08041fe0 	.word	0x08041fe0
 8011ce4:	08041fdc 	.word	0x08041fdc
 8011ce8:	08042000 	.word	0x08042000
 8011cec:	2000cda0 	.word	0x2000cda0

08011cf0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011cfc:	4b07      	ldr	r3, [pc, #28]	; (8011d1c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	4b07      	ldr	r3, [pc, #28]	; (8011d20 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011d02:	6819      	ldr	r1, [r3, #0]
 8011d04:	887b      	ldrh	r3, [r7, #2]
 8011d06:	009b      	lsls	r3, r3, #2
 8011d08:	440b      	add	r3, r1
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	005b      	lsls	r3, r3, #1
 8011d0e:	4413      	add	r3, r2
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	370c      	adds	r7, #12
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr
 8011d1c:	2000cda4 	.word	0x2000cda4
 8011d20:	2000cda8 	.word	0x2000cda8

08011d24 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011d24:	b480      	push	{r7}
 8011d26:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011d28:	2301      	movs	r3, #1
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011d34:	b480      	push	{r7}
 8011d36:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011d38:	4b02      	ldr	r3, [pc, #8]	; (8011d44 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr
 8011d44:	2000cdac 	.word	0x2000cdac

08011d48 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d113      	bne.n	8011d80 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	d10e      	bne.n	8011d80 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8011d62:	f7fe f9e9 	bl	8010138 <_Z23getFont_verdana_20_4bppv>
 8011d66:	4603      	mov	r3, r0
};
 8011d68:	4a07      	ldr	r2, [pc, #28]	; (8011d88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011d6a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011d6c:	f7fe fa3c 	bl	80101e8 <_Z23getFont_verdana_40_4bppv>
 8011d70:	4603      	mov	r3, r0
};
 8011d72:	4a05      	ldr	r2, [pc, #20]	; (8011d88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011d74:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8011d76:	f7fe f987 	bl	8010088 <_Z23getFont_verdana_10_4bppv>
 8011d7a:	4603      	mov	r3, r0
};
 8011d7c:	4a02      	ldr	r2, [pc, #8]	; (8011d88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011d7e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8011d80:	bf00      	nop
 8011d82:	3708      	adds	r7, #8
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	2000cdac 	.word	0x2000cdac

08011d8c <_GLOBAL__sub_I_touchgfx_fonts>:
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	af00      	add	r7, sp, #0
 8011d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011d94:	2001      	movs	r0, #1
 8011d96:	f7ff ffd7 	bl	8011d48 <_Z41__static_initialization_and_destruction_0ii>
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	4a05      	ldr	r2, [pc, #20]	; (8011dbc <_ZN19FrontendApplicationD1Ev+0x20>)
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	601a      	str	r2, [r3, #0]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fe fc79 	bl	80106a4 <_ZN23FrontendApplicationBaseD1Ev>
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	4618      	mov	r0, r3
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	080296a0 	.word	0x080296a0

08011dc0 <_ZN19FrontendApplicationD0Ev>:
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7ff ffe7 	bl	8011d9c <_ZN19FrontendApplicationD1Ev>
 8011dce:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f015 f871 	bl	8026eba <_ZdlPvj>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3708      	adds	r7, #8
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}

08011de2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011de2:	b580      	push	{r7, lr}
 8011de4:	b082      	sub	sp, #8
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8011df0:	4618      	mov	r0, r3
 8011df2:	f000 f82d 	bl	8011e50 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f005 f811 	bl	8016e20 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011dfe:	bf00      	nop
 8011e00:	3708      	adds	r7, #8
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
	...

08011e08 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	68b9      	ldr	r1, [r7, #8]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7fe fc92 	bl	8010744 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011e20:	4a03      	ldr	r2, [pc, #12]	; (8011e30 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	601a      	str	r2, [r3, #0]
{

}
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3710      	adds	r7, #16
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	080296a0 	.word	0x080296a0

08011e34 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	601a      	str	r2, [r3, #0]
{

}
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	4618      	mov	r0, r3
 8011e46:	370c      	adds	r7, #12
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011e50:	b480      	push	{r7}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]

}
 8011e58:	bf00      	nop
 8011e5a:	370c      	adds	r7, #12
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr

08011e64 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011e64:	b480      	push	{r7}
 8011e66:	b083      	sub	sp, #12
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
    {
    }
 8011e6c:	bf00      	nop
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011e78:	b480      	push	{r7}
 8011e7a:	b083      	sub	sp, #12
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
    {
    }
 8011e80:	bf00      	nop
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr

08011e8c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
    {
 8011e94:	4a04      	ldr	r2, [pc, #16]	; (8011ea8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	601a      	str	r2, [r3, #0]
    }
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	370c      	adds	r7, #12
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr
 8011ea8:	0802972c 	.word	0x0802972c

08011eac <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
    }
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7ff ffe9 	bl	8011e8c <_ZN8touchgfx9PresenterD1Ev>
 8011eba:	2104      	movs	r1, #4
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f014 fffc 	bl	8026eba <_ZdlPvj>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
    {
 8011ed4:	4a04      	ldr	r2, [pc, #16]	; (8011ee8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	601a      	str	r2, [r3, #0]
    }
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	4618      	mov	r0, r3
 8011ede:	370c      	adds	r7, #12
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr
 8011ee8:	0802972c 	.word	0x0802972c

08011eec <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	4a06      	ldr	r2, [pc, #24]	; (8011f10 <_ZN13ModelListenerC1Ev+0x24>)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	601a      	str	r2, [r3, #0]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2200      	movs	r2, #0
 8011efe:	605a      	str	r2, [r3, #4]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	4618      	mov	r0, r3
 8011f04:	370c      	adds	r7, #12
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	0802971c 	.word	0x0802971c

08011f14 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	4a04      	ldr	r2, [pc, #16]	; (8011f30 <_ZN13ModelListenerD1Ev+0x1c>)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	4618      	mov	r0, r3
 8011f26:	370c      	adds	r7, #12
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr
 8011f30:	0802971c 	.word	0x0802971c

08011f34 <_ZN13ModelListenerD0Ev>:
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b082      	sub	sp, #8
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f7ff ffe9 	bl	8011f14 <_ZN13ModelListenerD1Ev>
 8011f42:	2108      	movs	r1, #8
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f014 ffb8 	bl	8026eba <_ZdlPvj>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <_ZN16screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screen1Presenter() {}
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	4a09      	ldr	r2, [pc, #36]	; (8011f84 <_ZN16screen1PresenterD1Ev+0x30>)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	601a      	str	r2, [r3, #0]
 8011f62:	4a09      	ldr	r2, [pc, #36]	; (8011f88 <_ZN16screen1PresenterD1Ev+0x34>)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	605a      	str	r2, [r3, #4]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	3304      	adds	r3, #4
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7ff ffd1 	bl	8011f14 <_ZN13ModelListenerD1Ev>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7ff ff89 	bl	8011e8c <_ZN8touchgfx9PresenterD1Ev>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	080296f4 	.word	0x080296f4
 8011f88:	0802970c 	.word	0x0802970c

08011f8c <_ZThn4_N16screen1PresenterD1Ev>:
 8011f8c:	f1a0 0004 	sub.w	r0, r0, #4
 8011f90:	e7e0      	b.n	8011f54 <_ZN16screen1PresenterD1Ev>
 8011f92:	bf00      	nop

08011f94 <_ZN16screen1PresenterD0Ev>:
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f7ff ffd9 	bl	8011f54 <_ZN16screen1PresenterD1Ev>
 8011fa2:	2110      	movs	r1, #16
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f014 ff88 	bl	8026eba <_ZdlPvj>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	4618      	mov	r0, r3
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <_ZThn4_N16screen1PresenterD0Ev>:
 8011fb4:	f1a0 0004 	sub.w	r0, r0, #4
 8011fb8:	e7ec      	b.n	8011f94 <_ZN16screen1PresenterD0Ev>
	...

08011fbc <_ZN16screen1PresenterC1ER11screen1View>:
#include <gui/screen1_screen/screen1View.hpp>
#include <gui/screen1_screen/screen1Presenter.hpp>

screen1Presenter::screen1Presenter(screen1View& v)
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6039      	str	r1, [r7, #0]
    : view(v)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7ff ff7f 	bl	8011ecc <_ZN8touchgfx9PresenterC1Ev>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	3304      	adds	r3, #4
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7ff ff8a 	bl	8011eec <_ZN13ModelListenerC1Ev>
 8011fd8:	4a06      	ldr	r2, [pc, #24]	; (8011ff4 <_ZN16screen1PresenterC1ER11screen1View+0x38>)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	601a      	str	r2, [r3, #0]
 8011fde:	4a06      	ldr	r2, [pc, #24]	; (8011ff8 <_ZN16screen1PresenterC1ER11screen1View+0x3c>)
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	605a      	str	r2, [r3, #4]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	683a      	ldr	r2, [r7, #0]
 8011fe8:	60da      	str	r2, [r3, #12]
{

}
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	4618      	mov	r0, r3
 8011fee:	3708      	adds	r7, #8
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	080296f4 	.word	0x080296f4
 8011ff8:	0802970c 	.word	0x0802970c

08011ffc <_ZN16screen1Presenter8activateEv>:

void screen1Presenter::activate()
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]

}
 8012004:	bf00      	nop
 8012006:	370c      	adds	r7, #12
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr

08012010 <_ZN16screen1Presenter10deactivateEv>:

void screen1Presenter::deactivate()
{
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]

}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <_ZN11screen1ViewD1Ev>:

class screen1View : public screen1ViewBase
{
public:
    screen1View();
    virtual ~screen1View() {}
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	4a05      	ldr	r2, [pc, #20]	; (8012044 <_ZN11screen1ViewD1Ev+0x20>)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	601a      	str	r2, [r3, #0]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	4618      	mov	r0, r3
 8012036:	f7ff fbd7 	bl	80117e8 <_ZN15screen1ViewBaseD1Ev>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	08029744 	.word	0x08029744

08012048 <_ZN11screen1ViewD0Ev>:
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f7ff ffe7 	bl	8012024 <_ZN11screen1ViewD1Ev>
 8012056:	21e8      	movs	r1, #232	; 0xe8
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f014 ff2e 	bl	8026eba <_ZdlPvj>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <_ZN11screen1ViewC1Ev>:
#include <gui/screen1_screen/screen1View.hpp>

screen1View::screen1View()
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4618      	mov	r0, r3
 8012074:	f7ff fab8 	bl	80115e8 <_ZN15screen1ViewBaseC1Ev>
 8012078:	4a03      	ldr	r2, [pc, #12]	; (8012088 <_ZN11screen1ViewC1Ev+0x20>)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	601a      	str	r2, [r3, #0]
{

}
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	4618      	mov	r0, r3
 8012082:	3708      	adds	r7, #8
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	08029744 	.word	0x08029744

0801208c <_ZN11screen1View11setupScreenEv>:

void screen1View::setupScreen()
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
    screen1ViewBase::setupScreen();
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	4618      	mov	r0, r3
 8012098:	f7ff fbd8 	bl	801184c <_ZN15screen1ViewBase11setupScreenEv>
}
 801209c:	bf00      	nop
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <_ZN11screen1View14tearDownScreenEv>:

void screen1View::tearDownScreen()
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
    screen1ViewBase::tearDownScreen();
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7ff f858 	bl	8011164 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80120b4:	bf00      	nop
 80120b6:	3708      	adds	r7, #8
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
    {
 80120c4:	4a04      	ldr	r2, [pc, #16]	; (80120d8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	601a      	str	r2, [r3, #0]
    }
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	4618      	mov	r0, r3
 80120ce:	370c      	adds	r7, #12
 80120d0:	46bd      	mov	sp, r7
 80120d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d6:	4770      	bx	lr
 80120d8:	08029790 	.word	0x08029790

080120dc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
    }
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f7ff ffe9 	bl	80120bc <_ZN8touchgfx15TouchControllerD1Ev>
 80120ea:	2104      	movs	r1, #4
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f014 fee4 	bl	8026eba <_ZdlPvj>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	4618      	mov	r0, r3
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012104:	bf00      	nop
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 801211c:	2300      	movs	r3, #0
}
 801211e:	4618      	mov	r0, r3
 8012120:	3714      	adds	r7, #20
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr
	...

0801212c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	4a05      	ldr	r2, [pc, #20]	; (801214c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	601a      	str	r2, [r3, #0]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	4618      	mov	r0, r3
 801213e:	f7ff ffbd 	bl	80120bc <_ZN8touchgfx15TouchControllerD1Ev>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	4618      	mov	r0, r3
 8012146:	3708      	adds	r7, #8
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}
 801214c:	08029778 	.word	0x08029778

08012150 <_ZN20STM32TouchControllerD0Ev>:
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff ffe7 	bl	801212c <_ZN20STM32TouchControllerD1Ev>
 801215e:	2104      	movs	r1, #4
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f014 feaa 	bl	8026eba <_ZdlPvj>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8012170:	b480      	push	{r7}
 8012172:	af00      	add	r7, sp, #0

}
 8012174:	bf00      	nop
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr
	...

08012180 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	4603      	mov	r3, r0
 8012188:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801218a:	79fb      	ldrb	r3, [r7, #7]
 801218c:	2b03      	cmp	r3, #3
 801218e:	d80c      	bhi.n	80121aa <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8012190:	a201      	add	r2, pc, #4	; (adr r2, 8012198 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8012192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012196:	bf00      	nop
 8012198:	080121a9 	.word	0x080121a9
 801219c:	080121a9 	.word	0x080121a9
 80121a0:	080121a9 	.word	0x080121a9
 80121a4:	080121a9 	.word	0x080121a9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 80121a8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80121aa:	bf00      	nop
 80121ac:	370c      	adds	r7, #12
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop

080121b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b083      	sub	sp, #12
 80121bc:	af00      	add	r7, sp, #0
 80121be:	4603      	mov	r3, r0
 80121c0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80121c2:	79fb      	ldrb	r3, [r7, #7]
 80121c4:	2b03      	cmp	r3, #3
 80121c6:	d80c      	bhi.n	80121e2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80121c8:	a201      	add	r2, pc, #4	; (adr r2, 80121d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80121ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ce:	bf00      	nop
 80121d0:	080121e1 	.word	0x080121e1
 80121d4:	080121e1 	.word	0x080121e1
 80121d8:	080121e1 	.word	0x080121e1
 80121dc:	080121e1 	.word	0x080121e1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80121e0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80121e2:	bf00      	nop
 80121e4:	370c      	adds	r7, #12
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop

080121f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80121f0:	b480      	push	{r7}
 80121f2:	b083      	sub	sp, #12
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	4603      	mov	r3, r0
 80121f8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80121fa:	79fb      	ldrb	r3, [r7, #7]
 80121fc:	2b03      	cmp	r3, #3
 80121fe:	d80c      	bhi.n	801221a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8012200:	a201      	add	r2, pc, #4	; (adr r2, 8012208 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8012202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012206:	bf00      	nop
 8012208:	08012219 	.word	0x08012219
 801220c:	08012219 	.word	0x08012219
 8012210:	08012219 	.word	0x08012219
 8012214:	08012219 	.word	0x08012219
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8012218:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801221a:	bf00      	nop
 801221c:	370c      	adds	r7, #12
 801221e:	46bd      	mov	sp, r7
 8012220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012224:	4770      	bx	lr
 8012226:	bf00      	nop

08012228 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012228:	b480      	push	{r7}
 801222a:	b083      	sub	sp, #12
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
    {
 8012230:	4a04      	ldr	r2, [pc, #16]	; (8012244 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	601a      	str	r2, [r3, #0]
    }
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	4618      	mov	r0, r3
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr
 8012244:	08029bc8 	.word	0x08029bc8

08012248 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
    }
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7ff ffe9 	bl	8012228 <_ZN8touchgfx3HALD1Ev>
 8012256:	217c      	movs	r1, #124	; 0x7c
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f014 fe2e 	bl	8026eba <_ZdlPvj>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	460b      	mov	r3, r1
 8012272:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	78fa      	ldrb	r2, [r7, #3]
 8012278:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2201      	movs	r2, #1
 8012280:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 8012284:	bf00      	nop
 8012286:	370c      	adds	r7, #12
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr

08012290 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	460b      	mov	r3, r1
 801229a:	807b      	strh	r3, [r7, #2]
 801229c:	4613      	mov	r3, r2
 801229e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80122a0:	4b0c      	ldr	r3, [pc, #48]	; (80122d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80122a2:	881b      	ldrh	r3, [r3, #0]
 80122a4:	887a      	ldrh	r2, [r7, #2]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d304      	bcc.n	80122b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80122aa:	4b0b      	ldr	r3, [pc, #44]	; (80122d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	883a      	ldrh	r2, [r7, #0]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d205      	bcs.n	80122c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80122b4:	4b09      	ldr	r3, [pc, #36]	; (80122dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80122b6:	4a0a      	ldr	r2, [pc, #40]	; (80122e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80122b8:	219e      	movs	r1, #158	; 0x9e
 80122ba:	480a      	ldr	r0, [pc, #40]	; (80122e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80122bc:	f014 fe2a 	bl	8026f14 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80122c0:	4a09      	ldr	r2, [pc, #36]	; (80122e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80122c2:	887b      	ldrh	r3, [r7, #2]
 80122c4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80122c6:	4a09      	ldr	r2, [pc, #36]	; (80122ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80122c8:	883b      	ldrh	r3, [r7, #0]
 80122ca:	8013      	strh	r3, [r2, #0]
    }
 80122cc:	bf00      	nop
 80122ce:	3708      	adds	r7, #8
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	2000f388 	.word	0x2000f388
 80122d8:	2000f38a 	.word	0x2000f38a
 80122dc:	08028784 	.word	0x08028784
 80122e0:	080287e8 	.word	0x080287e8
 80122e4:	0802882c 	.word	0x0802882c
 80122e8:	2000f38e 	.word	0x2000f38e
 80122ec:	2000f390 	.word	0x2000f390

080122f0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d009      	beq.n	8012316 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	685a      	ldr	r2, [r3, #4]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4610      	mov	r0, r2
 8012310:	4798      	blx	r3
 8012312:	4603      	mov	r3, r0
 8012314:	e000      	b.n	8012318 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8012316:	2300      	movs	r3, #0
    }
 8012318:	4618      	mov	r0, r3
 801231a:	3708      	adds	r7, #8
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f002 fd13 	bl	8014d54 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	33ac      	adds	r3, #172	; 0xac
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	4798      	blx	r3
    }
 801233a:	bf00      	nop
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8012342:	b480      	push	{r7}
 8012344:	b083      	sub	sp, #12
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
 801234a:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 801234c:	2300      	movs	r3, #0
    }
 801234e:	4618      	mov	r0, r3
 8012350:	370c      	adds	r7, #12
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr
	...

0801235c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d106      	bne.n	801237e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012370:	4b0f      	ldr	r3, [pc, #60]	; (80123b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8012372:	4a10      	ldr	r2, [pc, #64]	; (80123b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8012374:	f240 21d2 	movw	r1, #722	; 0x2d2
 8012378:	480f      	ldr	r0, [pc, #60]	; (80123b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801237a:	f014 fdcb 	bl	8026f14 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	68ba      	ldr	r2, [r7, #8]
 8012382:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2b00      	cmp	r3, #0
 801238e:	bf14      	ite	ne
 8012390:	2301      	movne	r3, #1
 8012392:	2300      	moveq	r3, #0
 8012394:	b2da      	uxtb	r2, r3
 8012396:	4b09      	ldr	r3, [pc, #36]	; (80123bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012398:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	338c      	adds	r3, #140	; 0x8c
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	6839      	ldr	r1, [r7, #0]
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	4798      	blx	r3
    }
 80123a8:	bf00      	nop
 80123aa:	3710      	adds	r7, #16
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	08028870 	.word	0x08028870
 80123b4:	080288a8 	.word	0x080288a8
 80123b8:	0802882c 	.word	0x0802882c
 80123bc:	2000f392 	.word	0x2000f392

080123c0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80123c0:	b480      	push	{r7}
 80123c2:	b083      	sub	sp, #12
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	683a      	ldr	r2, [r7, #0]
 80123ce:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	bf14      	ite	ne
 80123d6:	2301      	movne	r3, #1
 80123d8:	2300      	moveq	r3, #0
 80123da:	b2da      	uxtb	r2, r3
 80123dc:	4b03      	ldr	r3, [pc, #12]	; (80123ec <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80123de:	701a      	strb	r2, [r3, #0]
    }
 80123e0:	bf00      	nop
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr
 80123ec:	2000f393 	.word	0x2000f393

080123f0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80123f0:	b480      	push	{r7}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80123f8:	2300      	movs	r3, #0
    }
 80123fa:	4618      	mov	r0, r3
 80123fc:	370c      	adds	r7, #12
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8012406:	b580      	push	{r7, lr}
 8012408:	b082      	sub	sp, #8
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
 801240e:	460b      	mov	r3, r1
 8012410:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012416:	2b00      	cmp	r3, #0
 8012418:	d004      	beq.n	8012424 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801241e:	887a      	ldrh	r2, [r7, #2]
 8012420:	4610      	mov	r0, r2
 8012422:	4798      	blx	r3
        }
    }
 8012424:	bf00      	nop
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 801242c:	b480      	push	{r7}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8012434:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8012438:	4618      	mov	r0, r3
 801243a:	370c      	adds	r7, #12
 801243c:	46bd      	mov	sp, r7
 801243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012442:	4770      	bx	lr

08012444 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	685a      	ldr	r2, [r3, #4]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	3318      	adds	r3, #24
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	4610      	mov	r0, r2
 801245c:	4798      	blx	r3
 801245e:	4603      	mov	r3, r0
    }
 8012460:	4618      	mov	r0, r3
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8012468:	b480      	push	{r7}
 801246a:	b085      	sub	sp, #20
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801247c:	429a      	cmp	r2, r3
 801247e:	d011      	beq.n	80124a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012480:	4b14      	ldr	r3, [pc, #80]	; (80124d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d11e      	bne.n	80124c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8012488:	4b13      	ldr	r3, [pc, #76]	; (80124d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801248e:	4b13      	ldr	r3, [pc, #76]	; (80124dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012490:	881a      	ldrh	r2, [r3, #0]
 8012492:	4b11      	ldr	r3, [pc, #68]	; (80124d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012494:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8012496:	4a11      	ldr	r2, [pc, #68]	; (80124dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012498:	89bb      	ldrh	r3, [r7, #12]
 801249a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 801249c:	4b0d      	ldr	r3, [pc, #52]	; (80124d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801249e:	2201      	movs	r2, #1
 80124a0:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80124a2:	e010      	b.n	80124c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80124a4:	4b0b      	ldr	r3, [pc, #44]	; (80124d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00c      	beq.n	80124c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80124ac:	4b0a      	ldr	r3, [pc, #40]	; (80124d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80124ae:	881b      	ldrh	r3, [r3, #0]
 80124b0:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80124b2:	4b0a      	ldr	r3, [pc, #40]	; (80124dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80124b4:	881a      	ldrh	r2, [r3, #0]
 80124b6:	4b08      	ldr	r3, [pc, #32]	; (80124d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80124b8:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80124ba:	4a08      	ldr	r2, [pc, #32]	; (80124dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80124bc:	89fb      	ldrh	r3, [r7, #14]
 80124be:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80124c0:	4b04      	ldr	r3, [pc, #16]	; (80124d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80124c2:	2200      	movs	r2, #0
 80124c4:	701a      	strb	r2, [r3, #0]
    }
 80124c6:	bf00      	nop
 80124c8:	3714      	adds	r7, #20
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr
 80124d2:	bf00      	nop
 80124d4:	2000f38c 	.word	0x2000f38c
 80124d8:	2000f38a 	.word	0x2000f38a
 80124dc:	2000f388 	.word	0x2000f388

080124e0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
    {
    }
 80124e8:	bf00      	nop
 80124ea:	370c      	adds	r7, #12
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 80124f4:	b480      	push	{r7}
 80124f6:	b083      	sub	sp, #12
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
    {
    }
 80124fc:	bf00      	nop
 80124fe:	370c      	adds	r7, #12
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr

08012508 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	4618      	mov	r0, r3
 8012514:	f001 fe7c 	bl	8014210 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012518:	bf00      	nop
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	4a05      	ldr	r2, [pc, #20]	; (8012540 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	601a      	str	r2, [r3, #0]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4618      	mov	r0, r3
 8012532:	f7ff fe79 	bl	8012228 <_ZN8touchgfx3HALD1Ev>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	4618      	mov	r0, r3
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	080299f4 	.word	0x080299f4

08012544 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012544:	b580      	push	{r7, lr}
 8012546:	b082      	sub	sp, #8
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7ff ffe7 	bl	8012520 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012552:	217c      	movs	r1, #124	; 0x7c
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f014 fcb0 	bl	8026eba <_ZdlPvj>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4618      	mov	r0, r3
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	4618      	mov	r0, r3
 8012570:	f7ff ffca 	bl	8012508 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8012574:	bf00      	nop
 8012576:	3708      	adds	r7, #8
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	f000 ffc6 	bl	8013518 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801258c:	bf00      	nop
 801258e:	3708      	adds	r7, #8
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	4618      	mov	r0, r3
 80125a0:	f001 f82a 	bl	80135f8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80125a4:	4603      	mov	r3, r0
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}

080125ae <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b082      	sub	sp, #8
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	6078      	str	r0, [r7, #4]
 80125b6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6839      	ldr	r1, [r7, #0]
 80125bc:	4618      	mov	r0, r3
 80125be:	f001 f826 	bl	801360e <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80125c2:	bf00      	nop
 80125c4:	3708      	adds	r7, #8
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}

080125ca <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80125ca:	b580      	push	{r7, lr}
 80125cc:	b082      	sub	sp, #8
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
 80125d2:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6839      	ldr	r1, [r7, #0]
 80125d8:	4618      	mov	r0, r3
 80125da:	f001 f823 	bl	8013624 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80125de:	bf00      	nop
 80125e0:	3708      	adds	r7, #8
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b084      	sub	sp, #16
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	60f8      	str	r0, [r7, #12]
 80125ee:	60b9      	str	r1, [r7, #8]
 80125f0:	607a      	str	r2, [r7, #4]
 80125f2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80125f4:	68f8      	ldr	r0, [r7, #12]
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	68b9      	ldr	r1, [r7, #8]
 80125fc:	f001 f855 	bl	80136aa <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012600:	4603      	mov	r3, r0
}
 8012602:	4618      	mov	r0, r3
 8012604:	3710      	adds	r7, #16
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801260a:	b580      	push	{r7, lr}
 801260c:	b082      	sub	sp, #8
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4618      	mov	r0, r3
 8012616:	f000 ffa3 	bl	8013560 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801261a:	bf00      	nop
 801261c:	3708      	adds	r7, #8
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}

08012622 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8012622:	b580      	push	{r7, lr}
 8012624:	b082      	sub	sp, #8
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4618      	mov	r0, r3
 801262e:	f000 ffa1 	bl	8013574 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8012632:	bf00      	nop
 8012634:	3708      	adds	r7, #8
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801263a:	b580      	push	{r7, lr}
 801263c:	b082      	sub	sp, #8
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4618      	mov	r0, r3
 8012646:	f000 ff9f 	bl	8013588 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801264a:	bf00      	nop
 801264c:	3708      	adds	r7, #8
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b082      	sub	sp, #8
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	4618      	mov	r0, r3
 801265e:	f000 ff9d 	bl	801359c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8012662:	bf00      	nop
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}

0801266a <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 801266a:	b580      	push	{r7, lr}
 801266c:	b082      	sub	sp, #8
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4618      	mov	r0, r3
 8012676:	f000 ff9b 	bl	80135b0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 801267a:	4603      	mov	r3, r0
}
 801267c:	4618      	mov	r0, r3
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4618      	mov	r0, r3
 8012690:	f000 ff9b 	bl	80135ca <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8012694:	bf00      	nop
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	4a05      	ldr	r2, [pc, #20]	; (80126bc <_ZN11TouchGFXHALD1Ev+0x20>)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7ff ff37 	bl	8012520 <_ZN20TouchGFXGeneratedHALD1Ev>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4618      	mov	r0, r3
 80126b6:	3708      	adds	r7, #8
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	080297a8 	.word	0x080297a8

080126c0 <_ZN11TouchGFXHALD0Ev>:
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f7ff ffe7 	bl	801269c <_ZN11TouchGFXHALD1Ev>
 80126ce:	217c      	movs	r1, #124	; 0x7c
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f014 fbf2 	bl	8026eba <_ZdlPvj>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	4618      	mov	r0, r3
 80126da:	3708      	adds	r7, #8
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80126e4:	2200      	movs	r2, #0
 80126e6:	2101      	movs	r1, #1
 80126e8:	2001      	movs	r0, #1
 80126ea:	f7fa f8cc 	bl	800c886 <osSemaphoreNew>
 80126ee:	4603      	mov	r3, r0
 80126f0:	4a0f      	ldr	r2, [pc, #60]	; (8012730 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80126f2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80126f4:	4b0e      	ldr	r3, [pc, #56]	; (8012730 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d105      	bne.n	8012708 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80126fc:	4b0d      	ldr	r3, [pc, #52]	; (8012734 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80126fe:	4a0e      	ldr	r2, [pc, #56]	; (8012738 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012700:	2128      	movs	r1, #40	; 0x28
 8012702:	480e      	ldr	r0, [pc, #56]	; (801273c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012704:	f014 fc06 	bl	8026f14 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8012708:	2200      	movs	r2, #0
 801270a:	2104      	movs	r1, #4
 801270c:	2001      	movs	r0, #1
 801270e:	f7fa f9cd 	bl	800caac <osMessageQueueNew>
 8012712:	4603      	mov	r3, r0
 8012714:	4a0a      	ldr	r2, [pc, #40]	; (8012740 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8012716:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8012718:	4b09      	ldr	r3, [pc, #36]	; (8012740 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d105      	bne.n	801272c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8012720:	4b08      	ldr	r3, [pc, #32]	; (8012744 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8012722:	4a05      	ldr	r2, [pc, #20]	; (8012738 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012724:	212c      	movs	r1, #44	; 0x2c
 8012726:	4805      	ldr	r0, [pc, #20]	; (801273c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012728:	f014 fbf4 	bl	8026f14 <__assert_func>
}
 801272c:	bf00      	nop
 801272e:	bd80      	pop	{r7, pc}
 8012730:	2000cdb8 	.word	0x2000cdb8
 8012734:	080288f8 	.word	0x080288f8
 8012738:	08028944 	.word	0x08028944
 801273c:	08028974 	.word	0x08028974
 8012740:	2000cdbc 	.word	0x2000cdbc
 8012744:	080289a0 	.word	0x080289a0

08012748 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012748:	b580      	push	{r7, lr}
 801274a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 801274c:	4b04      	ldr	r3, [pc, #16]	; (8012760 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f04f 31ff 	mov.w	r1, #4294967295
 8012754:	4618      	mov	r0, r3
 8012756:	f7fa f91f 	bl	800c998 <osSemaphoreAcquire>
}
 801275a:	bf00      	nop
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	2000cdb8 	.word	0x2000cdb8

08012764 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012764:	b580      	push	{r7, lr}
 8012766:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012768:	4b03      	ldr	r3, [pc, #12]	; (8012778 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4618      	mov	r0, r3
 801276e:	f7fa f95f 	bl	800ca30 <osSemaphoreRelease>
}
 8012772:	bf00      	nop
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	2000cdb8 	.word	0x2000cdb8

0801277c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801277c:	b580      	push	{r7, lr}
 801277e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8012780:	4b03      	ldr	r3, [pc, #12]	; (8012790 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2100      	movs	r1, #0
 8012786:	4618      	mov	r0, r3
 8012788:	f7fa f906 	bl	800c998 <osSemaphoreAcquire>
}
 801278c:	bf00      	nop
 801278e:	bd80      	pop	{r7, pc}
 8012790:	2000cdb8 	.word	0x2000cdb8

08012794 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012794:	b580      	push	{r7, lr}
 8012796:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012798:	4b03      	ldr	r3, [pc, #12]	; (80127a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	4618      	mov	r0, r3
 801279e:	f7fa f947 	bl	800ca30 <osSemaphoreRelease>
}
 80127a2:	bf00      	nop
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	bf00      	nop
 80127a8:	2000cdb8 	.word	0x2000cdb8

080127ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80127b0:	4b04      	ldr	r3, [pc, #16]	; (80127c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80127b2:	6818      	ldr	r0, [r3, #0]
 80127b4:	2300      	movs	r3, #0
 80127b6:	2200      	movs	r2, #0
 80127b8:	4903      	ldr	r1, [pc, #12]	; (80127c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80127ba:	f7fa f9e9 	bl	800cb90 <osMessageQueuePut>
}
 80127be:	bf00      	nop
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	2000cdbc 	.word	0x2000cdbc
 80127c8:	2000001c 	.word	0x2000001c

080127cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80127d2:	4b09      	ldr	r3, [pc, #36]	; (80127f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80127d4:	6818      	ldr	r0, [r3, #0]
 80127d6:	1d39      	adds	r1, r7, #4
 80127d8:	2300      	movs	r3, #0
 80127da:	2200      	movs	r2, #0
 80127dc:	f7fa fa32 	bl	800cc44 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80127e0:	4b05      	ldr	r3, [pc, #20]	; (80127f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80127e2:	6818      	ldr	r0, [r3, #0]
 80127e4:	1d39      	adds	r1, r7, #4
 80127e6:	f04f 33ff 	mov.w	r3, #4294967295
 80127ea:	2200      	movs	r2, #0
 80127ec:	f7fa fa2a 	bl	800cc44 <osMessageQueueGet>
}
 80127f0:	bf00      	nop
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	2000cdbc 	.word	0x2000cdbc

080127fc <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
        : color(0)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2200      	movs	r2, #0
 8012808:	601a      	str	r2, [r3, #0]
    }
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4618      	mov	r0, r3
 801280e:	370c      	adds	r7, #12
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr

08012818 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
    {
 8012820:	4a04      	ldr	r2, [pc, #16]	; (8012834 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	601a      	str	r2, [r3, #0]
    }
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4618      	mov	r0, r3
 801282a:	370c      	adds	r7, #12
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr
 8012834:	080298d0 	.word	0x080298d0

08012838 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
    }
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f7ff ffe9 	bl	8012818 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012846:	2104      	movs	r1, #4
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f014 fb36 	bl	8026eba <_ZdlPvj>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4618      	mov	r0, r3
 8012852:	3708      	adds	r7, #8
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
    {
    }
 8012860:	bf00      	nop
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 801286c:	b480      	push	{r7}
 801286e:	b083      	sub	sp, #12
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8012874:	2300      	movs	r3, #0
    }
 8012876:	4618      	mov	r0, r3
 8012878:	370c      	adds	r7, #12
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr
	...

08012884 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
    {
 801288c:	4a04      	ldr	r2, [pc, #16]	; (80128a0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	601a      	str	r2, [r3, #0]
    }
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	4618      	mov	r0, r3
 8012896:	370c      	adds	r7, #12
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr
 80128a0:	08029ca0 	.word	0x08029ca0

080128a4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
    }
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7ff ffe9 	bl	8012884 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80128b2:	210c      	movs	r1, #12
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f014 fb00 	bl	8026eba <_ZdlPvj>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	4618      	mov	r0, r3
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80128ce:	4a09      	ldr	r2, [pc, #36]	; (80128f4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	601a      	str	r2, [r3, #0]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	683a      	ldr	r2, [r7, #0]
 80128d8:	605a      	str	r2, [r3, #4]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	721a      	strb	r2, [r3, #8]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	725a      	strb	r2, [r3, #9]
    {
    }
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	370c      	adds	r7, #12
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr
 80128f4:	08029ca0 	.word	0x08029ca0

080128f8 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 80128f8:	b480      	push	{r7}
 80128fa:	b083      	sub	sp, #12
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
    {
    }
 8012900:	bf00      	nop
 8012902:	370c      	adds	r7, #12
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr

0801290c <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
    {
    }
 8012914:	bf00      	nop
 8012916:	370c      	adds	r7, #12
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr

08012920 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	330c      	adds	r3, #12
 801292c:	4618      	mov	r0, r3
 801292e:	f7ff ff65 	bl	80127fc <_ZN8touchgfx9colortypeC1Ev>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	4618      	mov	r0, r3
 8012936:	3708      	adds	r7, #8
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	330c      	adds	r3, #12
 801294a:	4619      	mov	r1, r3
 801294c:	4610      	mov	r0, r2
 801294e:	f7ff ffb9 	bl	80128c4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012952:	4a0b      	ldr	r2, [pc, #44]	; (8012980 <_ZN8STM32DMAC1Ev+0x44>)
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	601a      	str	r2, [r3, #0]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f103 000c 	add.w	r0, r3, #12
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	3320      	adds	r3, #32
 8012962:	2201      	movs	r2, #1
 8012964:	4619      	mov	r1, r3
 8012966:	f002 fb2f 	bl	8014fc8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	3320      	adds	r3, #32
 801296e:	4618      	mov	r0, r3
 8012970:	f7ff ffd6 	bl	8012920 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	4618      	mov	r0, r3
 8012978:	3708      	adds	r7, #8
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	08029880 	.word	0x08029880

08012984 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 801298c:	2300      	movs	r3, #0
}
 801298e:	4618      	mov	r0, r3
 8012990:	370c      	adds	r7, #12
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr
	...

0801299c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 80129a6:	4b03      	ldr	r3, [pc, #12]	; (80129b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 80129a8:	4a03      	ldr	r2, [pc, #12]	; (80129b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 80129aa:	2122      	movs	r1, #34	; 0x22
 80129ac:	4803      	ldr	r0, [pc, #12]	; (80129bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 80129ae:	f014 fab1 	bl	8026f14 <__assert_func>
 80129b2:	bf00      	nop
 80129b4:	080289e4 	.word	0x080289e4
 80129b8:	08028a08 	.word	0x08028a08
 80129bc:	08028a48 	.word	0x08028a48

080129c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 80129ca:	4b03      	ldr	r3, [pc, #12]	; (80129d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 80129cc:	4a03      	ldr	r2, [pc, #12]	; (80129dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 80129ce:	2127      	movs	r1, #39	; 0x27
 80129d0:	4803      	ldr	r0, [pc, #12]	; (80129e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 80129d2:	f014 fa9f 	bl	8026f14 <__assert_func>
 80129d6:	bf00      	nop
 80129d8:	080289e4 	.word	0x080289e4
 80129dc:	08028a74 	.word	0x08028a74
 80129e0:	08028a48 	.word	0x08028a48

080129e4 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b082      	sub	sp, #8
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	4a08      	ldr	r2, [pc, #32]	; (8012a10 <_ZN8STM32DMAD1Ev+0x2c>)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	601a      	str	r2, [r3, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	330c      	adds	r3, #12
 80129f6:	4618      	mov	r0, r3
 80129f8:	f000 f81c 	bl	8012a34 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7ff ff40 	bl	8012884 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	4618      	mov	r0, r3
 8012a08:	3708      	adds	r7, #8
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	08029880 	.word	0x08029880

08012a14 <_ZN8STM32DMAD0Ev>:
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7ff ffe1 	bl	80129e4 <_ZN8STM32DMAD1Ev>
 8012a22:	2144      	movs	r1, #68	; 0x44
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f014 fa48 	bl	8026eba <_ZdlPvj>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	4a05      	ldr	r2, [pc, #20]	; (8012a54 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	601a      	str	r2, [r3, #0]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7ff fee7 	bl	8012818 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3708      	adds	r7, #8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	08029cf0 	.word	0x08029cf0

08012a58 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7ff ffe7 	bl	8012a34 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012a66:	2114      	movs	r1, #20
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f014 fa26 	bl	8026eba <_ZdlPvj>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	4618      	mov	r0, r3
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8012a78:	b480      	push	{r7}
 8012a7a:	b083      	sub	sp, #12
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8012a80:	4a04      	ldr	r2, [pc, #16]	; (8012a94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6013      	str	r3, [r2, #0]
    }
 8012a86:	bf00      	nop
 8012a88:	370c      	adds	r7, #12
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a90:	4770      	bx	lr
 8012a92:	bf00      	nop
 8012a94:	2000f3f0 	.word	0x2000f3f0

08012a98 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012a98:	b480      	push	{r7}
 8012a9a:	b085      	sub	sp, #20
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
 8012aa4:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8012aa6:	4a0b      	ldr	r2, [pc, #44]	; (8012ad4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	68ba      	ldr	r2, [r7, #8]
 8012ab0:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	683a      	ldr	r2, [r7, #0]
 8012abc:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	69ba      	ldr	r2, [r7, #24]
 8012ac2:	611a      	str	r2, [r3, #16]
    {
    }
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3714      	adds	r7, #20
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	080299b8 	.word	0x080299b8

08012ad8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
    {
 8012ae0:	4a04      	ldr	r2, [pc, #16]	; (8012af4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	601a      	str	r2, [r3, #0]
    }
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	4618      	mov	r0, r3
 8012aea:	370c      	adds	r7, #12
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr
 8012af4:	080299b8 	.word	0x080299b8

08012af8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
    }
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7ff ffe9 	bl	8012ad8 <_ZN8touchgfx7MVPHeapD1Ev>
 8012b06:	2114      	movs	r1, #20
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f014 f9d6 	bl	8026eba <_ZdlPvj>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4618      	mov	r0, r3
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8012b18:	b480      	push	{r7}
 8012b1a:	b083      	sub	sp, #12
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
    {
 8012b20:	4a04      	ldr	r2, [pc, #16]	; (8012b34 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	601a      	str	r2, [r3, #0]
    }
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr
 8012b34:	08029ed4 	.word	0x08029ed4

08012b38 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
    }
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f7ff ffe9 	bl	8012b18 <_ZN8touchgfx3LCDD1Ev>
 8012b46:	2108      	movs	r1, #8
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f014 f9b6 	bl	8026eba <_ZdlPvj>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	4618      	mov	r0, r3
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8012b58:	b480      	push	{r7}
 8012b5a:	b083      	sub	sp, #12
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
            : startX(0),
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2200      	movs	r2, #0
 8012b64:	801a      	strh	r2, [r3, #0]
              startY(0),
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	805a      	strh	r2, [r3, #2]
              downX(0),
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	809a      	strh	r2, [r3, #4]
              downY(0),
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2200      	movs	r2, #0
 8012b76:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2200      	movs	r2, #0
 8012b82:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	739a      	strb	r2, [r3, #14]
        {
        }
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	4618      	mov	r0, r3
 8012b94:	370c      	adds	r7, #12
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr

08012b9e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8012b9e:	b580      	push	{r7, lr}
 8012ba0:	b082      	sub	sp, #8
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7ff ffd5 	bl	8012b58 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	611a      	str	r2, [r3, #16]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	829a      	strh	r2, [r3, #20]
    {
    }
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3708      	adds	r7, #8
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b084      	sub	sp, #16
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
 8012bd0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8012bd2:	4a55      	ldr	r2, [pc, #340]	; (8012d28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	68ba      	ldr	r2, [r7, #8]
 8012bdc:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	683a      	ldr	r2, [r7, #0]
 8012be8:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	2200      	movs	r2, #0
 8012bee:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	619a      	str	r2, [r3, #24]
          gestures(),
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	331c      	adds	r3, #28
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7ff ffcc 	bl	8012b9e <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2200      	movs	r2, #0
 8012c12:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2200      	movs	r2, #0
 8012c18:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2200      	movs	r2, #0
 8012c24:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2201      	movs	r2, #1
 8012c32:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	2200      	movs	r2, #0
 8012c42:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	3350      	adds	r3, #80	; 0x50
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7fe f874 	bl	8010d3e <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2200      	movs	r2, #0
 8012c62:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2200      	movs	r2, #0
 8012c68:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	2201      	movs	r2, #1
 8012c74:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2200      	movs	r2, #0
 8012c84:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	2200      	movs	r2, #0
 8012c94:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	2200      	movs	r2, #0
 8012cac:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2201      	movs	r2, #1
 8012cda:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 8012cde:	4a13      	ldr	r2, [pc, #76]	; (8012d2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8012ce4:	4a12      	ldr	r2, [pc, #72]	; (8012d30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8012ce6:	8b3b      	ldrh	r3, [r7, #24]
 8012ce8:	8013      	strh	r3, [r2, #0]
 8012cea:	4b11      	ldr	r3, [pc, #68]	; (8012d30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8012cec:	881a      	ldrh	r2, [r3, #0]
 8012cee:	4b11      	ldr	r3, [pc, #68]	; (8012d34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8012cf0:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8012cf2:	4a11      	ldr	r2, [pc, #68]	; (8012d38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8012cf4:	8bbb      	ldrh	r3, [r7, #28]
 8012cf6:	8013      	strh	r3, [r2, #0]
 8012cf8:	4b0f      	ldr	r3, [pc, #60]	; (8012d38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8012cfa:	881a      	ldrh	r2, [r3, #0]
 8012cfc:	4b0f      	ldr	r3, [pc, #60]	; (8012d3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8012cfe:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8012d00:	4b0f      	ldr	r3, [pc, #60]	; (8012d40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012d06:	8b3a      	ldrh	r2, [r7, #24]
 8012d08:	8bbb      	ldrh	r3, [r7, #28]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	bf34      	ite	cc
 8012d0e:	2301      	movcc	r3, #1
 8012d10:	2300      	movcs	r3, #0
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	461a      	mov	r2, r3
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3710      	adds	r7, #16
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	08029bc8 	.word	0x08029bc8
 8012d2c:	2000f394 	.word	0x2000f394
 8012d30:	2000f388 	.word	0x2000f388
 8012d34:	2000f38e 	.word	0x2000f38e
 8012d38:	2000f38a 	.word	0x2000f38a
 8012d3c:	2000f390 	.word	0x2000f390
 8012d40:	2000f38c 	.word	0x2000f38c

08012d44 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b082      	sub	sp, #8
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreen1ScreenNoTransition();
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7fd fd59 	bl	8010808 <_ZN23FrontendApplicationBase29gotoscreen1ScreenNoTransitionEv>
    }
 8012d56:	bf00      	nop
 8012d58:	3708      	adds	r7, #8
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
	...

08012d60 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b086      	sub	sp, #24
 8012d64:	af02      	add	r7, sp, #8
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
 8012d6c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8012d6e:	68f8      	ldr	r0, [r7, #12]
 8012d70:	69bb      	ldr	r3, [r7, #24]
 8012d72:	9300      	str	r3, [sp, #0]
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	68b9      	ldr	r1, [r7, #8]
 8012d7a:	f7ff fe8d 	bl	8012a98 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8012d7e:	4a04      	ldr	r2, [pc, #16]	; (8012d90 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	601a      	str	r2, [r3, #0]
    {

    }
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	4618      	mov	r0, r3
 8012d88:	3710      	adds	r7, #16
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	080299a4 	.word	0x080299a4

08012d94 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012d94:	b580      	push	{r7, lr}
 8012d96:	af00      	add	r7, sp, #0
 8012d98:	4801      	ldr	r0, [pc, #4]	; (8012da0 <__tcf_0+0xc>)
 8012d9a:	f000 f965 	bl	8013068 <_ZN12FrontendHeapD1Ev>
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	2000cdc0 	.word	0x2000cdc0

08012da4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012da4:	b580      	push	{r7, lr}
 8012da6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012da8:	4b11      	ldr	r3, [pc, #68]	; (8012df0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012daa:	e8d3 3faf 	lda	r3, [r3]
 8012dae:	f003 0301 	and.w	r3, r3, #1
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	bf0c      	ite	eq
 8012db6:	2301      	moveq	r3, #1
 8012db8:	2300      	movne	r3, #0
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d013      	beq.n	8012de8 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012dc0:	480b      	ldr	r0, [pc, #44]	; (8012df0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012dc2:	f014 f87c 	bl	8026ebe <__cxa_guard_acquire>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	bf14      	ite	ne
 8012dcc:	2301      	movne	r3, #1
 8012dce:	2300      	moveq	r3, #0
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d008      	beq.n	8012de8 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012dd6:	4807      	ldr	r0, [pc, #28]	; (8012df4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8012dd8:	f000 f868 	bl	8012eac <_ZN12FrontendHeapC1Ev>
 8012ddc:	4806      	ldr	r0, [pc, #24]	; (8012df8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012dde:	f014 f8b7 	bl	8026f50 <atexit>
 8012de2:	4803      	ldr	r0, [pc, #12]	; (8012df0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012de4:	f014 f877 	bl	8026ed6 <__cxa_guard_release>
        return instance;
 8012de8:	4b02      	ldr	r3, [pc, #8]	; (8012df4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8012dea:	4618      	mov	r0, r3
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	2000d050 	.word	0x2000d050
 8012df4:	2000cdc0 	.word	0x2000cdc0
 8012df8:	08012d95 	.word	0x08012d95

08012dfc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	4a05      	ldr	r2, [pc, #20]	; (8012e1c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	601a      	str	r2, [r3, #0]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7ff fe63 	bl	8012ad8 <_ZN8touchgfx7MVPHeapD1Ev>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	4618      	mov	r0, r3
 8012e16:	3708      	adds	r7, #8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	080299a4 	.word	0x080299a4

08012e20 <_ZN16FrontendHeapBaseD0Ev>:
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7ff ffe7 	bl	8012dfc <_ZN16FrontendHeapBaseD1Ev>
 8012e2e:	2114      	movs	r1, #20
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f014 f842 	bl	8026eba <_ZdlPvj>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3708      	adds	r7, #8
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f000 ff42 	bl	8013cd4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012e50:	4a03      	ldr	r2, [pc, #12]	; (8012e60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3708      	adds	r7, #8
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	08029970 	.word	0x08029970

08012e64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f000 ff30 	bl	8013cd4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012e74:	4a03      	ldr	r2, [pc, #12]	; (8012e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	601a      	str	r2, [r3, #0]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	0802993c 	.word	0x0802993c

08012e88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	4618      	mov	r0, r3
 8012e94:	f000 ff1e 	bl	8013cd4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012e98:	4a03      	ldr	r2, [pc, #12]	; (8012ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	601a      	str	r2, [r3, #0]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	08029908 	.word	0x08029908

08012eac <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012eac:	b590      	push	{r4, r7, lr}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af02      	add	r7, sp, #8
 8012eb2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f103 0114 	add.w	r1, r3, #20
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f503 748e 	add.w	r4, r3, #284	; 0x11c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f503 739a 	add.w	r3, r3, #308	; 0x134
                     app(model, *this)
 8012ece:	9300      	str	r3, [sp, #0]
 8012ed0:	4623      	mov	r3, r4
 8012ed2:	f7ff ff45 	bl	8012d60 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012ed6:	4a18      	ldr	r2, [pc, #96]	; (8012f38 <_ZN12FrontendHeapC1Ev+0x8c>)
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	601a      	str	r2, [r3, #0]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	3314      	adds	r3, #20
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7ff ffad 	bl	8012e40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	332c      	adds	r3, #44	; 0x2c
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff ffba 	bl	8012e64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7ff ffc6 	bl	8012e88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7fe ff96 	bl	8011e34 <_ZN5ModelC1Ev>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f503 709a 	add.w	r0, r3, #308	; 0x134
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	4619      	mov	r1, r3
 8012f18:	f7fe ff76 	bl	8011e08 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8012f24:	4619      	mov	r1, r3
 8012f26:	4610      	mov	r0, r2
 8012f28:	f7ff ff0c 	bl	8012d44 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	370c      	adds	r7, #12
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd90      	pop	{r4, r7, pc}
 8012f36:	bf00      	nop
 8012f38:	080298f4 	.word	0x080298f4

08012f3c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b086      	sub	sp, #24
 8012f40:	af02      	add	r7, sp, #8
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	60b9      	str	r1, [r7, #8]
 8012f46:	607a      	str	r2, [r7, #4]
 8012f48:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8012f4a:	68f8      	ldr	r0, [r7, #12]
 8012f4c:	8bbb      	ldrh	r3, [r7, #28]
 8012f4e:	9301      	str	r3, [sp, #4]
 8012f50:	8b3b      	ldrh	r3, [r7, #24]
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	68b9      	ldr	r1, [r7, #8]
 8012f5a:	f7ff fe33 	bl	8012bc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8012f5e:	4a04      	ldr	r2, [pc, #16]	; (8012f70 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	601a      	str	r2, [r3, #0]
    }
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	4618      	mov	r0, r3
 8012f68:	3710      	adds	r7, #16
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	080299f4 	.word	0x080299f4

08012f74 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b086      	sub	sp, #24
 8012f78:	af02      	add	r7, sp, #8
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
 8012f80:	603b      	str	r3, [r7, #0]
 8012f82:	68f8      	ldr	r0, [r7, #12]
 8012f84:	8bbb      	ldrh	r3, [r7, #28]
 8012f86:	9301      	str	r3, [sp, #4]
 8012f88:	8b3b      	ldrh	r3, [r7, #24]
 8012f8a:	9300      	str	r3, [sp, #0]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	68b9      	ldr	r1, [r7, #8]
 8012f92:	f7ff ffd3 	bl	8012f3c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012f96:	4a04      	ldr	r2, [pc, #16]	; (8012fa8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	601a      	str	r2, [r3, #0]
    }
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop
 8012fa8:	080297a8 	.word	0x080297a8

08012fac <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012fac:	b480      	push	{r7}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	4a04      	ldr	r2, [pc, #16]	; (8012fc8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	601a      	str	r2, [r3, #0]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	370c      	adds	r7, #12
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr
 8012fc8:	08029790 	.word	0x08029790

08012fcc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7ff ffe8 	bl	8012fac <_ZN8touchgfx15TouchControllerC1Ev>
 8012fdc:	4a03      	ldr	r2, [pc, #12]	; (8012fec <_ZN20STM32TouchControllerC1Ev+0x20>)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	601a      	str	r2, [r3, #0]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3708      	adds	r7, #8
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	08029778 	.word	0x08029778

08012ff0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 320);

void touchgfx_init()
{
 8012ff0:	b590      	push	{r4, r7, lr}
 8012ff2:	b085      	sub	sp, #20
 8012ff4:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012ff6:	f7fe fcd7 	bl	80119a8 <_ZN14BitmapDatabase11getInstanceEv>
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	f7fe fcde 	bl	80119bc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013000:	4603      	mov	r3, r0
 8013002:	4619      	mov	r1, r3
 8013004:	2300      	movs	r3, #0
 8013006:	9300      	str	r3, [sp, #0]
 8013008:	2300      	movs	r3, #0
 801300a:	2200      	movs	r2, #0
 801300c:	4620      	mov	r0, r4
 801300e:	f006 fb2f 	bl	8019670 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8013012:	4809      	ldr	r0, [pc, #36]	; (8013038 <touchgfx_init+0x48>)
 8013014:	f7ff fd30 	bl	8012a78 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013018:	2000      	movs	r0, #0
 801301a:	f7fe fe13 	bl	8011c44 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801301e:	4807      	ldr	r0, [pc, #28]	; (801303c <touchgfx_init+0x4c>)
 8013020:	f006 fa8e 	bl	8019540 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013024:	f7ff febe 	bl	8012da4 <_ZN12FrontendHeap11getInstanceEv>
 8013028:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801302a:	4805      	ldr	r0, [pc, #20]	; (8013040 <touchgfx_init+0x50>)
 801302c:	f7ff faa6 	bl	801257c <_ZN11TouchGFXHAL10initializeEv>
}
 8013030:	bf00      	nop
 8013032:	370c      	adds	r7, #12
 8013034:	46bd      	mov	sp, r7
 8013036:	bd90      	pop	{r4, r7, pc}
 8013038:	2000d120 	.word	0x2000d120
 801303c:	20000020 	.word	0x20000020
 8013040:	2000d124 	.word	0x2000d124

08013044 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8013044:	b480      	push	{r7}
 8013046:	af00      	add	r7, sp, #0
}
 8013048:	bf00      	nop
 801304a:	46bd      	mov	sp, r7
 801304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013050:	4770      	bx	lr
	...

08013054 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013054:	b580      	push	{r7, lr}
 8013056:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8013058:	4802      	ldr	r0, [pc, #8]	; (8013064 <touchgfx_taskEntry+0x10>)
 801305a:	f001 f942 	bl	80142e2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801305e:	bf00      	nop
 8013060:	bd80      	pop	{r7, pc}
 8013062:	bf00      	nop
 8013064:	2000d124 	.word	0x2000d124

08013068 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	4a10      	ldr	r2, [pc, #64]	; (80130b4 <_ZN12FrontendHeapD1Ev+0x4c>)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	601a      	str	r2, [r3, #0]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801307c:	4618      	mov	r0, r3
 801307e:	f7fe fe8d 	bl	8011d9c <_ZN19FrontendApplicationD1Ev>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013088:	4618      	mov	r0, r3
 801308a:	f000 f827 	bl	80130dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	332c      	adds	r3, #44	; 0x2c
 8013092:	4618      	mov	r0, r3
 8013094:	f000 f844 	bl	8013120 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	3314      	adds	r3, #20
 801309c:	4618      	mov	r0, r3
 801309e:	f000 f861 	bl	8013164 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7ff fea9 	bl	8012dfc <_ZN16FrontendHeapBaseD1Ev>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	4618      	mov	r0, r3
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	080298f4 	.word	0x080298f4

080130b8 <_ZN12FrontendHeapD0Ev>:
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f7ff ffd1 	bl	8013068 <_ZN12FrontendHeapD1Ev>
 80130c6:	f44f 7124 	mov.w	r1, #656	; 0x290
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f013 fef5 	bl	8026eba <_ZdlPvj>
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	4618      	mov	r0, r3
 80130d4:	3708      	adds	r7, #8
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
	...

080130dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	4a05      	ldr	r2, [pc, #20]	; (80130fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	601a      	str	r2, [r3, #0]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4618      	mov	r0, r3
 80130ee:	f000 fdf0 	bl	8013cd2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	4618      	mov	r0, r3
 80130f6:	3708      	adds	r7, #8
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	08029908 	.word	0x08029908

08013100 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f7ff ffe7 	bl	80130dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801310e:	2114      	movs	r1, #20
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f013 fed2 	bl	8026eba <_ZdlPvj>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	4618      	mov	r0, r3
 801311a:	3708      	adds	r7, #8
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	4a05      	ldr	r2, [pc, #20]	; (8013140 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	601a      	str	r2, [r3, #0]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	4618      	mov	r0, r3
 8013132:	f000 fdce 	bl	8013cd2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	4618      	mov	r0, r3
 801313a:	3708      	adds	r7, #8
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}
 8013140:	0802993c 	.word	0x0802993c

08013144 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f7ff ffe7 	bl	8013120 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013152:	21f0      	movs	r1, #240	; 0xf0
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f013 feb0 	bl	8026eba <_ZdlPvj>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4618      	mov	r0, r3
 801315e:	3708      	adds	r7, #8
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013164:	b580      	push	{r7, lr}
 8013166:	b082      	sub	sp, #8
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
 801316c:	4a05      	ldr	r2, [pc, #20]	; (8013184 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	601a      	str	r2, [r3, #0]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4618      	mov	r0, r3
 8013176:	f000 fdac 	bl	8013cd2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4618      	mov	r0, r3
 801317e:	3708      	adds	r7, #8
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	08029970 	.word	0x08029970

08013188 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f7ff ffe7 	bl	8013164 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013196:	2118      	movs	r1, #24
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f013 fe8e 	bl	8026eba <_ZdlPvj>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	4618      	mov	r0, r3
 80131a2:	3708      	adds	r7, #8
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	4a05      	ldr	r2, [pc, #20]	; (80131c8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	601a      	str	r2, [r3, #0]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7ff fcad 	bl	8012b18 <_ZN8touchgfx3LCDD1Ev>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	4618      	mov	r0, r3
 80131c2:	3708      	adds	r7, #8
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	0802a33c 	.word	0x0802a33c

080131cc <_ZN8touchgfx8LCD16bppD0Ev>:
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7ff ffe7 	bl	80131a8 <_ZN8touchgfx8LCD16bppD1Ev>
 80131da:	2184      	movs	r1, #132	; 0x84
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f013 fe6c 	bl	8026eba <_ZdlPvj>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	4618      	mov	r0, r3
 80131e6:	3708      	adds	r7, #8
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <_Z41__static_initialization_and_destruction_0ii>:
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af02      	add	r7, sp, #8
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d119      	bne.n	8013230 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013202:	4293      	cmp	r3, r2
 8013204:	d114      	bne.n	8013230 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8013206:	4818      	ldr	r0, [pc, #96]	; (8013268 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013208:	f7ff fee0 	bl	8012fcc <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 801320c:	4817      	ldr	r0, [pc, #92]	; (801326c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801320e:	f7ff fb95 	bl	801293c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8013212:	4817      	ldr	r0, [pc, #92]	; (8013270 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013214:	f00a fcf4 	bl	801dc00 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 320);
 8013218:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801321c:	9301      	str	r3, [sp, #4]
 801321e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013222:	9300      	str	r3, [sp, #0]
 8013224:	4b10      	ldr	r3, [pc, #64]	; (8013268 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013226:	4a12      	ldr	r2, [pc, #72]	; (8013270 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013228:	4910      	ldr	r1, [pc, #64]	; (801326c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801322a:	4812      	ldr	r0, [pc, #72]	; (8013274 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801322c:	f7ff fea2 	bl	8012f74 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d113      	bne.n	801325e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801323c:	4293      	cmp	r3, r2
 801323e:	d10e      	bne.n	801325e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013240:	480c      	ldr	r0, [pc, #48]	; (8013274 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013242:	f7ff fa2b 	bl	801269c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013246:	480c      	ldr	r0, [pc, #48]	; (8013278 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8013248:	f7fc fd48 	bl	800fcdc <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801324c:	4808      	ldr	r0, [pc, #32]	; (8013270 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801324e:	f7ff ffab 	bl	80131a8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8013252:	4806      	ldr	r0, [pc, #24]	; (801326c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013254:	f7ff fbc6 	bl	80129e4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8013258:	4803      	ldr	r0, [pc, #12]	; (8013268 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801325a:	f7fe ff67 	bl	801212c <_ZN20STM32TouchControllerD1Ev>
}
 801325e:	bf00      	nop
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	2000d054 	.word	0x2000d054
 801326c:	2000d058 	.word	0x2000d058
 8013270:	2000d09c 	.word	0x2000d09c
 8013274:	2000d124 	.word	0x2000d124
 8013278:	20000020 	.word	0x20000020

0801327c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013284:	2301      	movs	r3, #1
    }
 8013286:	4618      	mov	r0, r3
 8013288:	370c      	adds	r7, #12
 801328a:	46bd      	mov	sp, r7
 801328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013290:	4770      	bx	lr

08013292 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8013292:	b480      	push	{r7}
 8013294:	b083      	sub	sp, #12
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801329a:	230c      	movs	r3, #12
    }
 801329c:	4618      	mov	r0, r3
 801329e:	370c      	adds	r7, #12
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr

080132a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	460b      	mov	r3, r1
 80132b2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80132b4:	887a      	ldrh	r2, [r7, #2]
 80132b6:	4613      	mov	r3, r2
 80132b8:	005b      	lsls	r3, r3, #1
 80132ba:	4413      	add	r3, r2
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	3308      	adds	r3, #8
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	4413      	add	r3, r2
    }
 80132c4:	4618      	mov	r0, r3
 80132c6:	370c      	adds	r7, #12
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80132d0:	b480      	push	{r7}
 80132d2:	b083      	sub	sp, #12
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	460b      	mov	r3, r1
 80132da:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80132dc:	887a      	ldrh	r2, [r7, #2]
 80132de:	4613      	mov	r3, r2
 80132e0:	005b      	lsls	r3, r3, #1
 80132e2:	4413      	add	r3, r2
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	3308      	adds	r3, #8
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	4413      	add	r3, r2
    }
 80132ec:	4618      	mov	r0, r3
 80132ee:	370c      	adds	r7, #12
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr

080132f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80132f8:	b480      	push	{r7}
 80132fa:	b083      	sub	sp, #12
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013300:	2301      	movs	r3, #1
    }
 8013302:	4618      	mov	r0, r3
 8013304:	370c      	adds	r7, #12
 8013306:	46bd      	mov	sp, r7
 8013308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330c:	4770      	bx	lr

0801330e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801330e:	b480      	push	{r7}
 8013310:	b083      	sub	sp, #12
 8013312:	af00      	add	r7, sp, #0
 8013314:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013316:	23e8      	movs	r3, #232	; 0xe8
    }
 8013318:	4618      	mov	r0, r3
 801331a:	370c      	adds	r7, #12
 801331c:	46bd      	mov	sp, r7
 801331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013322:	4770      	bx	lr

08013324 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013324:	b480      	push	{r7}
 8013326:	b083      	sub	sp, #12
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	460b      	mov	r3, r1
 801332e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013330:	887b      	ldrh	r3, [r7, #2]
 8013332:	22e8      	movs	r2, #232	; 0xe8
 8013334:	fb02 f303 	mul.w	r3, r2, r3
 8013338:	3308      	adds	r3, #8
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	4413      	add	r3, r2
    }
 801333e:	4618      	mov	r0, r3
 8013340:	370c      	adds	r7, #12
 8013342:	46bd      	mov	sp, r7
 8013344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013348:	4770      	bx	lr

0801334a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801334a:	b480      	push	{r7}
 801334c:	b083      	sub	sp, #12
 801334e:	af00      	add	r7, sp, #0
 8013350:	6078      	str	r0, [r7, #4]
 8013352:	460b      	mov	r3, r1
 8013354:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013356:	887b      	ldrh	r3, [r7, #2]
 8013358:	22e8      	movs	r2, #232	; 0xe8
 801335a:	fb02 f303 	mul.w	r3, r2, r3
 801335e:	3308      	adds	r3, #8
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	4413      	add	r3, r2
    }
 8013364:	4618      	mov	r0, r3
 8013366:	370c      	adds	r7, #12
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr

08013370 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013370:	b480      	push	{r7}
 8013372:	b083      	sub	sp, #12
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013378:	2301      	movs	r3, #1
    }
 801337a:	4618      	mov	r0, r3
 801337c:	370c      	adds	r7, #12
 801337e:	46bd      	mov	sp, r7
 8013380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013384:	4770      	bx	lr

08013386 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013386:	b480      	push	{r7}
 8013388:	b083      	sub	sp, #12
 801338a:	af00      	add	r7, sp, #0
 801338c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801338e:	2310      	movs	r3, #16
    }
 8013390:	4618      	mov	r0, r3
 8013392:	370c      	adds	r7, #12
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	460b      	mov	r3, r1
 80133a6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80133a8:	887b      	ldrh	r3, [r7, #2]
 80133aa:	011b      	lsls	r3, r3, #4
 80133ac:	3308      	adds	r3, #8
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	4413      	add	r3, r2
    }
 80133b2:	4618      	mov	r0, r3
 80133b4:	370c      	adds	r7, #12
 80133b6:	46bd      	mov	sp, r7
 80133b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133bc:	4770      	bx	lr

080133be <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80133be:	b480      	push	{r7}
 80133c0:	b083      	sub	sp, #12
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
 80133c6:	460b      	mov	r3, r1
 80133c8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80133ca:	887b      	ldrh	r3, [r7, #2]
 80133cc:	011b      	lsls	r3, r3, #4
 80133ce:	3308      	adds	r3, #8
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	4413      	add	r3, r2
    }
 80133d4:	4618      	mov	r0, r3
 80133d6:	370c      	adds	r7, #12
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr

080133e0 <_GLOBAL__sub_I_touchgfx_init>:
 80133e0:	b580      	push	{r7, lr}
 80133e2:	af00      	add	r7, sp, #0
 80133e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80133e8:	2001      	movs	r0, #1
 80133ea:	f7ff feff 	bl	80131ec <_Z41__static_initialization_and_destruction_0ii>
 80133ee:	bd80      	pop	{r7, pc}

080133f0 <_GLOBAL__sub_D_touchgfx_init>:
 80133f0:	b580      	push	{r7, lr}
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80133f8:	2000      	movs	r0, #0
 80133fa:	f7ff fef7 	bl	80131ec <_Z41__static_initialization_and_destruction_0ii>
 80133fe:	bd80      	pop	{r7, pc}

08013400 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
    {
 8013408:	4a04      	ldr	r2, [pc, #16]	; (801341c <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x1c>)
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	601a      	str	r2, [r3, #0]
    }
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4618      	mov	r0, r3
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341a:	4770      	bx	lr
 801341c:	08029acc 	.word	0x08029acc

08013420 <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
    }
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f7ff ffe9 	bl	8013400 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 801342e:	2104      	movs	r1, #4
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f013 fd42 	bl	8026eba <_ZdlPvj>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	4618      	mov	r0, r3
 801343a:	3708      	adds	r7, #8
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013440:	b480      	push	{r7}
 8013442:	b083      	sub	sp, #12
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 801344e:	3301      	adds	r3, #1
 8013450:	b2da      	uxtb	r2, r3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 8013458:	bf00      	nop
 801345a:	370c      	adds	r7, #12
 801345c:	46bd      	mov	sp, r7
 801345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013462:	4770      	bx	lr

08013464 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	683a      	ldr	r2, [r7, #0]
 8013472:	619a      	str	r2, [r3, #24]
    }
 8013474:	bf00      	nop
 8013476:	370c      	adds	r7, #12
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr

08013480 <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>:
    FrameBufferAllocator* getFrameBufferAllocator()
 8013480:	b480      	push	{r7}
 8013482:	b083      	sub	sp, #12
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
        return frameBufferAllocator;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	699b      	ldr	r3, [r3, #24]
    }
 801348c:	4618      	mov	r0, r3
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr

08013498 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	460b      	mov	r3, r1
 80134a2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80134a4:	78fb      	ldrb	r3, [r7, #3]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d002      	beq.n	80134b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80134aa:	78fb      	ldrb	r3, [r7, #3]
 80134ac:	2b02      	cmp	r3, #2
 80134ae:	d105      	bne.n	80134bc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	78fa      	ldrb	r2, [r7, #3]
 80134b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80134b8:	2301      	movs	r3, #1
 80134ba:	e027      	b.n	801350c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80134bc:	78fb      	ldrb	r3, [r7, #3]
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d123      	bne.n	801350a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d014      	beq.n	80134f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	339c      	adds	r3, #156	; 0x9c
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	4798      	blx	r3
 80134d6:	4603      	mov	r3, r0
 80134d8:	461a      	mov	r2, r3
 80134da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80134de:	429a      	cmp	r2, r3
 80134e0:	d008      	beq.n	80134f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80134e2:	4b0c      	ldr	r3, [pc, #48]	; (8013514 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	f083 0301 	eor.w	r3, r3, #1
 80134ea:	b2db      	uxtb	r3, r3
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d001      	beq.n	80134f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80134f0:	2301      	movs	r3, #1
 80134f2:	e000      	b.n	80134f6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80134f4:	2300      	movs	r3, #0
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d005      	beq.n	8013506 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	78fa      	ldrb	r2, [r7, #3]
 80134fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8013502:	2301      	movs	r3, #1
 8013504:	e002      	b.n	801350c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013506:	2300      	movs	r3, #0
 8013508:	e000      	b.n	801350c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801350a:	2300      	movs	r3, #0
    }
 801350c:	4618      	mov	r0, r3
 801350e:	3708      	adds	r7, #8
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	2000f392 	.word	0x2000f392

08013518 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
                   3, /* number of blocks */
                   2  /* bytes per pixel */
                   > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 8013518:	b5b0      	push	{r4, r5, r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	4618      	mov	r0, r3
 8013524:	f000 fec9 	bl	80142ba <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013528:	687d      	ldr	r5, [r7, #4]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	3364      	adds	r3, #100	; 0x64
 8013530:	681c      	ldr	r4, [r3, #0]
 8013532:	f003 fbf3 	bl	8016d1c <_ZN8touchgfx11Application11getInstanceEv>
 8013536:	4603      	mov	r3, r0
 8013538:	4619      	mov	r1, r3
 801353a:	4628      	mov	r0, r5
 801353c:	47a0      	blx	r4
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	4906      	ldr	r1, [pc, #24]	; (801355c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8013542:	4618      	mov	r0, r3
 8013544:	f7ff ff8e 	bl	8013464 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2102      	movs	r1, #2
 801354c:	4618      	mov	r0, r3
 801354e:	f7ff ffa3 	bl	8013498 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 8013552:	bf00      	nop
 8013554:	3708      	adds	r7, #8
 8013556:	46bd      	mov	sp, r7
 8013558:	bdb0      	pop	{r4, r5, r7, pc}
 801355a:	bf00      	nop
 801355c:	2000d1a0 	.word	0x2000d1a0

08013560 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013560:	b480      	push	{r7}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
}
 8013568:	bf00      	nop
 801356a:	370c      	adds	r7, #12
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
}
 801357c:	bf00      	nop
 801357e:	370c      	adds	r7, #12
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr

08013588 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013588:	b480      	push	{r7}
 801358a:	b083      	sub	sp, #12
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
}
 8013590:	bf00      	nop
 8013592:	370c      	adds	r7, #12
 8013594:	46bd      	mov	sp, r7
 8013596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359a:	4770      	bx	lr

0801359c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801359c:	b480      	push	{r7}
 801359e:	b083      	sub	sp, #12
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
}
 80135a4:	bf00      	nop
 80135a6:	370c      	adds	r7, #12
 80135a8:	46bd      	mov	sp, r7
 80135aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ae:	4770      	bx	lr

080135b0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f000 fe64 	bl	8014288 <_ZN8touchgfx3HAL10beginFrameEv>
 80135c0:	4603      	mov	r3, r0
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3708      	adds	r7, #8
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80135ca:	b580      	push	{r7, lr}
 80135cc:	b082      	sub	sp, #8
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    // Wait until all blocks have been transmitted
    while (touchgfxDisplayDriverTransmitActive()){}
 80135d2:	bf00      	nop
 80135d4:	f7ee fade 	bl	8001b94 <touchgfxDisplayDriverTransmitActive>
 80135d8:	4603      	mov	r3, r0
 80135da:	2b00      	cmp	r3, #0
 80135dc:	bf14      	ite	ne
 80135de:	2301      	movne	r3, #1
 80135e0:	2300      	moveq	r3, #0
 80135e2:	b2db      	uxtb	r3, r3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d1f5      	bne.n	80135d4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xa>

    HAL::endFrame();
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	4618      	mov	r0, r3
 80135ec:	f000 fe58 	bl	80142a0 <_ZN8touchgfx3HAL8endFrameEv>
}
 80135f0:	bf00      	nop
 80135f2:	3708      	adds	r7, #8
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80135f8:	b480      	push	{r7}
 80135fa:	b083      	sub	sp, #12
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 8013600:	2300      	movs	r3, #0
}
 8013602:	4618      	mov	r0, r3
 8013604:	370c      	adds	r7, #12
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr

0801360e <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801360e:	b480      	push	{r7}
 8013610:	b083      	sub	sp, #12
 8013612:	af00      	add	r7, sp, #0
 8013614:	6078      	str	r0, [r7, #4]
 8013616:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8013618:	bf00      	nop
 801361a:	370c      	adds	r7, #12
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr

08013624 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b088      	sub	sp, #32
 8013628:	af02      	add	r7, sp, #8
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6839      	ldr	r1, [r7, #0]
 8013632:	4618      	mov	r0, r3
 8013634:	f000 fdf2 	bl	801421c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Once flushFrameBuffer() is called by the framework a block is already for transfer
    // Mark it ready for transfer and transmit it if user defined method isTransmittingData() does not return false
    // If data is not being transmitted, transfer the data with user defined method transmitFrameBufferBlock().
    frameBufferAllocator->markBlockReadyForTransfer();
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	699a      	ldr	r2, [r3, #24]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	699b      	ldr	r3, [r3, #24]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	3304      	adds	r3, #4
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	4610      	mov	r0, r2
 8013648:	4798      	blx	r3
    if (!touchgfxDisplayDriverTransmitActive())
 801364a:	f7ee faa3 	bl	8001b94 <touchgfxDisplayDriverTransmitActive>
 801364e:	4603      	mov	r3, r0
 8013650:	2b00      	cmp	r3, #0
 8013652:	bf0c      	ite	eq
 8013654:	2301      	moveq	r3, #1
 8013656:	2300      	movne	r3, #0
 8013658:	b2db      	uxtb	r3, r3
 801365a:	2b00      	cmp	r3, #0
 801365c:	d021      	beq.n	80136a2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x7e>
    {
        touchgfx::Rect r;
 801365e:	f107 030c 	add.w	r3, r7, #12
 8013662:	4618      	mov	r0, r3
 8013664:	f7fd fb6b 	bl	8010d3e <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = frameBufferAllocator->getBlockForTransfer(r);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	699a      	ldr	r2, [r3, #24]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	699b      	ldr	r3, [r3, #24]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	330c      	adds	r3, #12
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f107 010c 	add.w	r1, r7, #12
 801367a:	4610      	mov	r0, r2
 801367c:	4798      	blx	r3
 801367e:	6178      	str	r0, [r7, #20]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8013680:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013684:	b299      	uxth	r1, r3
 8013686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801368a:	b29a      	uxth	r2, r3
 801368c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013690:	b298      	uxth	r0, r3
 8013692:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013696:	b29b      	uxth	r3, r3
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	4603      	mov	r3, r0
 801369c:	6978      	ldr	r0, [r7, #20]
 801369e:	f7ee fa8b 	bl	8001bb8 <touchgfxDisplayDriverTransmitBlock>
    }
}
 80136a2:	bf00      	nop
 80136a4:	3718      	adds	r7, #24
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}

080136aa <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80136aa:	b580      	push	{r7, lr}
 80136ac:	b084      	sub	sp, #16
 80136ae:	af00      	add	r7, sp, #0
 80136b0:	60f8      	str	r0, [r7, #12]
 80136b2:	60b9      	str	r1, [r7, #8]
 80136b4:	607a      	str	r2, [r7, #4]
 80136b6:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	687a      	ldr	r2, [r7, #4]
 80136be:	68b9      	ldr	r1, [r7, #8]
 80136c0:	f000 ff1d 	bl	80144fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80136c4:	4603      	mov	r3, r0
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3710      	adds	r7, #16
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}

080136ce <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
void FrameBufferAllocatorWaitOnTransfer()
{
 80136ce:	b480      	push	{r7}
 80136d0:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
   */
}
 80136d2:	bf00      	nop
 80136d4:	46bd      	mov	sp, r7
 80136d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136da:	4770      	bx	lr

080136dc <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
void FrameBufferAllocatorSignalBlockDrawn()
{
 80136dc:	b480      	push	{r7}
 80136de:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
   */
}
 80136e0:	bf00      	nop
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr

080136ea <_ZN8touchgfx16startNewTransferEv>:

// A user must call touchgfx::startNewTransfer(); once transmitFrameBufferBlock() has successfully sent a block.
void startNewTransfer()
{
 80136ea:	b580      	push	{r7, lr}
 80136ec:	b086      	sub	sp, #24
 80136ee:	af02      	add	r7, sp, #8
    FrameBufferAllocator* fba = HAL::getInstance()->getFrameBufferAllocator();
 80136f0:	f7fc fe8e 	bl	8010410 <_ZN8touchgfx3HAL11getInstanceEv>
 80136f4:	4603      	mov	r3, r0
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7ff fec2 	bl	8013480 <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>
 80136fc:	60f8      	str	r0, [r7, #12]

  // Free the previous transmitted block, marking it ready for rendering
    fba->freeBlockAfterTransfer();
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	3318      	adds	r3, #24
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	68f8      	ldr	r0, [r7, #12]
 8013708:	4798      	blx	r3
    if (fba->hasBlockReadyForTransfer())
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	3308      	adds	r3, #8
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	68f8      	ldr	r0, [r7, #12]
 8013714:	4798      	blx	r3
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d01d      	beq.n	8013758 <_ZN8touchgfx16startNewTransferEv+0x6e>
    {
        touchgfx::Rect r;
 801371c:	463b      	mov	r3, r7
 801371e:	4618      	mov	r0, r3
 8013720:	f7fd fb0d 	bl	8010d3e <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = fba->getBlockForTransfer(r);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	330c      	adds	r3, #12
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	463a      	mov	r2, r7
 801372e:	4611      	mov	r1, r2
 8013730:	68f8      	ldr	r0, [r7, #12]
 8013732:	4798      	blx	r3
 8013734:	60b8      	str	r0, [r7, #8]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8013736:	f9b7 3000 	ldrsh.w	r3, [r7]
 801373a:	b299      	uxth	r1, r3
 801373c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013740:	b29a      	uxth	r2, r3
 8013742:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013746:	b298      	uxth	r0, r3
 8013748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801374c:	b29b      	uxth	r3, r3
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	4603      	mov	r3, r0
 8013752:	68b8      	ldr	r0, [r7, #8]
 8013754:	f7ee fa30 	bl	8001bb8 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8013758:	bf00      	nop
 801375a:	3710      	adds	r7, #16
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 8013760:	b580      	push	{r7, lr}
 8013762:	af00      	add	r7, sp, #0
  // After completed transmission start new transfer if blocks are ready.
    touchgfx::startNewTransfer();
 8013764:	f7ff ffc1 	bl	80136ea <_ZN8touchgfx16startNewTransferEv>
}
 8013768:	bf00      	nop
 801376a:	bd80      	pop	{r7, pc}

0801376c <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 8013770:	f7fc fe4e 	bl	8010410 <_ZN8touchgfx3HAL11getInstanceEv>
 8013774:	4603      	mov	r3, r0
 8013776:	4618      	mov	r0, r3
 8013778:	f7ff fe62 	bl	8013440 <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 801377c:	f7ff f816 	bl	80127ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8013780:	bf00      	nop
 8013782:	bd80      	pop	{r7, pc}

08013784 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	4a04      	ldr	r2, [pc, #16]	; (80137a0 <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x1c>)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	601a      	str	r2, [r3, #0]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4618      	mov	r0, r3
 8013796:	370c      	adds	r7, #12
 8013798:	46bd      	mov	sp, r7
 801379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379e:	4770      	bx	lr
 80137a0:	08029acc 	.word	0x08029acc

080137a4 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 80137a4:	b5b0      	push	{r4, r5, r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
    {
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7ff ffe8 	bl	8013784 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 80137b4:	4a1a      	ldr	r2, [pc, #104]	; (8013820 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EEC1Ev+0x7c>)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	601a      	str	r2, [r3, #0]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80137c0:	3308      	adds	r3, #8
 80137c2:	2402      	movs	r4, #2
 80137c4:	461d      	mov	r5, r3
 80137c6:	e004      	b.n	80137d2 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EEC1Ev+0x2e>
 80137c8:	4628      	mov	r0, r5
 80137ca:	f7fd fab8 	bl	8010d3e <_ZN8touchgfx4RectC1Ev>
 80137ce:	3508      	adds	r5, #8
 80137d0:	3c01      	subs	r4, #1
 80137d2:	2c00      	cmp	r4, #0
 80137d4:	daf8      	bge.n	80137c8 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EEC1Ev+0x24>
        sendingBlock = -1;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80137dc:	461a      	mov	r2, r3
 80137de:	f04f 33ff 	mov.w	r3, #4294967295
 80137e2:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
        drawingBlock = -1;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80137ec:	461a      	mov	r2, r3
 80137ee:	f04f 33ff 	mov.w	r3, #4294967295
 80137f2:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
        for (uint32_t i = 0; i < blocks; i++)
 80137f6:	2300      	movs	r3, #0
 80137f8:	60fb      	str	r3, [r7, #12]
 80137fa:	e008      	b.n	801380e <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EEC1Ev+0x6a>
        {
            state[i] = EMPTY;
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	4413      	add	r3, r2
 8013802:	3304      	adds	r3, #4
 8013804:	2200      	movs	r2, #0
 8013806:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	3301      	adds	r3, #1
 801380c:	60fb      	str	r3, [r7, #12]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2b02      	cmp	r3, #2
 8013812:	d9f3      	bls.n	80137fc <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EEC1Ev+0x58>
        }
    }
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	4618      	mov	r0, r3
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bdb0      	pop	{r4, r5, r7, pc}
 801381e:	bf00      	nop
 8013820:	080299c8 	.word	0x080299c8

08013824 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	4a05      	ldr	r2, [pc, #20]	; (8013844 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EED1Ev+0x20>)
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	601a      	str	r2, [r3, #0]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4618      	mov	r0, r3
 8013836:	f7ff fde3 	bl	8013400 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	080299c8 	.word	0x080299c8

08013848 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EED0Ev>:
 8013848:	b580      	push	{r7, lr}
 801384a:	b082      	sub	sp, #8
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7ff ffe7 	bl	8013824 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EED1Ev>
 8013856:	f242 11e8 	movw	r1, #8680	; 0x21e8
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f013 fb2d 	bl	8026eba <_ZdlPvj>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4618      	mov	r0, r3
 8013864:	3708      	adds	r7, #8
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
	...

0801386c <_Z41__static_initialization_and_destruction_0ii>:
 801386c:	b580      	push	{r7, lr}
 801386e:	b082      	sub	sp, #8
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2b01      	cmp	r3, #1
 801387a:	d107      	bne.n	801388c <_Z41__static_initialization_and_destruction_0ii+0x20>
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013882:	4293      	cmp	r3, r2
 8013884:	d102      	bne.n	801388c <_Z41__static_initialization_and_destruction_0ii+0x20>
                   > blockAllocator;
 8013886:	4809      	ldr	r0, [pc, #36]	; (80138ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8013888:	f7ff ff8c 	bl	80137a4 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EEC1Ev>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d107      	bne.n	80138a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013898:	4293      	cmp	r3, r2
 801389a:	d102      	bne.n	80138a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 801389c:	4803      	ldr	r0, [pc, #12]	; (80138ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801389e:	f7ff ffc1 	bl	8013824 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EED1Ev>
}
 80138a2:	bf00      	nop
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	2000d1a0 	.word	0x2000d1a0

080138b0 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b086      	sub	sp, #24
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	4608      	mov	r0, r1
 80138ba:	4611      	mov	r1, r2
 80138bc:	461a      	mov	r2, r3
 80138be:	4603      	mov	r3, r0
 80138c0:	817b      	strh	r3, [r7, #10]
 80138c2:	460b      	mov	r3, r1
 80138c4:	813b      	strh	r3, [r7, #8]
 80138c6:	4613      	mov	r3, r2
 80138c8:	80fb      	strh	r3, [r7, #6]
    {
        drawingBlock++;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80138d0:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80138d4:	3301      	adds	r3, #1
 80138d6:	68fa      	ldr	r2, [r7, #12]
 80138d8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80138dc:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
        if (drawingBlock == blocks)
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80138e6:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80138ea:	2b03      	cmp	r3, #3
 80138ec:	d109      	bne.n	8013902 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13allocateBlockEttttPPh+0x52>
        {
            drawingBlock = 0;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80138f4:	461a      	mov	r2, r3
 80138f6:	2300      	movs	r3, #0
 80138f8:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
        }
        while (state[drawingBlock] != EMPTY)
 80138fc:	e001      	b.n	8013902 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13allocateBlockEttttPPh+0x52>
        {
            FrameBufferAllocatorWaitOnTransfer();
 80138fe:	f7ff fee6 	bl	80136ce <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013908:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 801390c:	68fa      	ldr	r2, [r7, #12]
 801390e:	4413      	add	r3, r2
 8013910:	791b      	ldrb	r3, [r3, #4]
 8013912:	b2db      	uxtb	r3, r3
 8013914:	2b00      	cmp	r3, #0
 8013916:	bf14      	ite	ne
 8013918:	2301      	movne	r3, #1
 801391a:	2300      	moveq	r3, #0
 801391c:	b2db      	uxtb	r3, r3
 801391e:	2b00      	cmp	r3, #0
 8013920:	d1ed      	bne.n	80138fe <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13allocateBlockEttttPPh+0x4e>
        }
        assert(state[drawingBlock] == EMPTY);
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013928:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 801392c:	68fa      	ldr	r2, [r7, #12]
 801392e:	4413      	add	r3, r2
 8013930:	791b      	ldrb	r3, [r3, #4]
 8013932:	b2db      	uxtb	r3, r3
 8013934:	2b00      	cmp	r3, #0
 8013936:	d005      	beq.n	8013944 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13allocateBlockEttttPPh+0x94>
 8013938:	4b38      	ldr	r3, [pc, #224]	; (8013a1c <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13allocateBlockEttttPPh+0x16c>)
 801393a:	4a39      	ldr	r2, [pc, #228]	; (8013a20 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 801393c:	21aa      	movs	r1, #170	; 0xaa
 801393e:	4839      	ldr	r0, [pc, #228]	; (8013a24 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 8013940:	f013 fae8 	bl	8026f14 <__assert_func>
        state[drawingBlock] = ALLOCATED;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801394a:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 801394e:	68fa      	ldr	r2, [r7, #12]
 8013950:	4413      	add	r3, r2
 8013952:	2201      	movs	r2, #1
 8013954:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 8013956:	88fb      	ldrh	r3, [r7, #6]
 8013958:	005b      	lsls	r3, r3, #1
 801395a:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	f44f 6234 	mov.w	r2, #2880	; 0xb40
 8013962:	fbb2 f3f3 	udiv	r3, r2, r3
 8013966:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801396e:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8013972:	f44f 6234 	mov.w	r2, #2880	; 0xb40
 8013976:	fb02 f303 	mul.w	r3, r2, r3
 801397a:	3308      	adds	r3, #8
 801397c:	68fa      	ldr	r2, [r7, #12]
 801397e:	441a      	add	r2, r3
 8013980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013982:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801398a:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 801398e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	f202 4239 	addw	r2, r2, #1081	; 0x439
 8013998:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        blockRect[drawingBlock].y = y;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80139a2:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80139a6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80139aa:	68fa      	ldr	r2, [r7, #12]
 80139ac:	f203 4339 	addw	r3, r3, #1081	; 0x439
 80139b0:	00db      	lsls	r3, r3, #3
 80139b2:	4413      	add	r3, r2
 80139b4:	460a      	mov	r2, r1
 80139b6:	805a      	strh	r2, [r3, #2]
        blockRect[drawingBlock].width = width;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80139be:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80139c2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80139c6:	68fa      	ldr	r2, [r7, #12]
 80139c8:	f203 4339 	addw	r3, r3, #1081	; 0x439
 80139cc:	00db      	lsls	r3, r3, #3
 80139ce:	4413      	add	r3, r2
 80139d0:	460a      	mov	r2, r1
 80139d2:	809a      	strh	r2, [r3, #4]
        blockRect[drawingBlock].height = MIN(height, lines);
 80139d4:	8c3a      	ldrh	r2, [r7, #32]
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	429a      	cmp	r2, r3
 80139da:	bfa8      	it	ge
 80139dc:	461a      	movge	r2, r3
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80139e4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80139e8:	b211      	sxth	r1, r2
 80139ea:	68fa      	ldr	r2, [r7, #12]
 80139ec:	f203 4339 	addw	r3, r3, #1081	; 0x439
 80139f0:	00db      	lsls	r3, r3, #3
 80139f2:	4413      	add	r3, r2
 80139f4:	460a      	mov	r2, r1
 80139f6:	80da      	strh	r2, [r3, #6]
        return blockRect[drawingBlock].height;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80139fe:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8013a02:	68fa      	ldr	r2, [r7, #12]
 8013a04:	f203 4339 	addw	r3, r3, #1081	; 0x439
 8013a08:	00db      	lsls	r3, r3, #3
 8013a0a:	4413      	add	r3, r2
 8013a0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013a10:	b29b      	uxth	r3, r3
    }
 8013a12:	4618      	mov	r0, r3
 8013a14:	3718      	adds	r7, #24
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	08028c28 	.word	0x08028c28
 8013a20:	08028c48 	.word	0x08028c48
 8013a24:	08028d7c 	.word	0x08028d7c

08013a28 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013a36:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8013a3a:	687a      	ldr	r2, [r7, #4]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	791b      	ldrb	r3, [r3, #4]
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d005      	beq.n	8013a52 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE25markBlockReadyForTransferEv+0x2a>
 8013a46:	4b0a      	ldr	r3, [pc, #40]	; (8013a70 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 8013a48:	4a0a      	ldr	r2, [pc, #40]	; (8013a74 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 8013a4a:	21b9      	movs	r1, #185	; 0xb9
 8013a4c:	480a      	ldr	r0, [pc, #40]	; (8013a78 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE25markBlockReadyForTransferEv+0x50>)
 8013a4e:	f013 fa61 	bl	8026f14 <__assert_func>
        state[drawingBlock] = DRAWN;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013a58:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	4413      	add	r3, r2
 8013a60:	2202      	movs	r2, #2
 8013a62:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 8013a64:	f7ff fe3a 	bl	80136dc <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 8013a68:	bf00      	nop
 8013a6a:	3708      	adds	r7, #8
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	08028dd0 	.word	0x08028dd0
 8013a74:	08028df4 	.word	0x08028df4
 8013a78:	08028d7c 	.word	0x08028d7c

08013a7c <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 8013a7c:	b480      	push	{r7}
 8013a7e:	b085      	sub	sp, #20
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 8013a84:	2300      	movs	r3, #0
 8013a86:	60fb      	str	r3, [r7, #12]
 8013a88:	e011      	b.n	8013aae <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE24hasBlockReadyForTransferEv+0x32>
        {
            if (state[i] == DRAWN)
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	4413      	add	r3, r2
 8013a90:	3304      	adds	r3, #4
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	b2db      	uxtb	r3, r3
 8013a96:	2b02      	cmp	r3, #2
 8013a98:	bf0c      	ite	eq
 8013a9a:	2301      	moveq	r3, #1
 8013a9c:	2300      	movne	r3, #0
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d001      	beq.n	8013aa8 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE24hasBlockReadyForTransferEv+0x2c>
            {
                return true;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	e006      	b.n	8013ab6 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE24hasBlockReadyForTransferEv+0x3a>
        for (uint32_t i = 0; i < blocks; i++)
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	3301      	adds	r3, #1
 8013aac:	60fb      	str	r3, [r7, #12]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2b02      	cmp	r3, #2
 8013ab2:	d9ea      	bls.n	8013a8a <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE24hasBlockReadyForTransferEv+0xe>
            }
        }
        return false;
 8013ab4:	2300      	movs	r3, #0
    }
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3714      	adds	r7, #20
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr
	...

08013ac4 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b082      	sub	sp, #8
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013ad4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013ad8:	3301      	adds	r3, #1
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8013ae0:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
        if (sendingBlock == blocks)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013aea:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013aee:	2b03      	cmp	r3, #3
 8013af0:	d106      	bne.n	8013b00 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x3c>
        {
            sendingBlock = 0;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013af8:	461a      	mov	r2, r3
 8013afa:	2300      	movs	r3, #0
 8013afc:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
        }
        assert(state[sendingBlock] == DRAWN);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013b06:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	791b      	ldrb	r3, [r3, #4]
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	d005      	beq.n	8013b22 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x5e>
 8013b16:	4b16      	ldr	r3, [pc, #88]	; (8013b70 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xac>)
 8013b18:	4a16      	ldr	r2, [pc, #88]	; (8013b74 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb0>)
 8013b1a:	21dd      	movs	r1, #221	; 0xdd
 8013b1c:	4816      	ldr	r0, [pc, #88]	; (8013b78 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb4>)
 8013b1e:	f013 f9f9 	bl	8026f14 <__assert_func>
        rect = blockRect[sendingBlock];
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013b28:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013b2c:	683a      	ldr	r2, [r7, #0]
 8013b2e:	6879      	ldr	r1, [r7, #4]
 8013b30:	f203 4339 	addw	r3, r3, #1081	; 0x439
 8013b34:	00db      	lsls	r3, r3, #3
 8013b36:	440b      	add	r3, r1
 8013b38:	cb03      	ldmia	r3!, {r0, r1}
 8013b3a:	6010      	str	r0, [r2, #0]
 8013b3c:	6051      	str	r1, [r2, #4]
        state[sendingBlock] = SENDING;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013b44:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	4413      	add	r3, r2
 8013b4c:	2203      	movs	r2, #3
 8013b4e:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013b56:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013b5a:	f44f 6234 	mov.w	r2, #2880	; 0xb40
 8013b5e:	fb02 f303 	mul.w	r3, r2, r3
 8013b62:	3308      	adds	r3, #8
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	4413      	add	r3, r2
    }
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	08028ec8 	.word	0x08028ec8
 8013b74:	08028ee8 	.word	0x08028ee8
 8013b78:	08028d7c 	.word	0x08028d7c

08013b7c <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b084      	sub	sp, #16
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013b8a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013b8e:	3301      	adds	r3, #1
 8013b90:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	2b03      	cmp	r3, #3
 8013b96:	d101      	bne.n	8013b9c <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE20peekBlockForTransferEv+0x20>
        {
            nextSendingBlock = 0;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	4413      	add	r3, r2
 8013ba2:	3304      	adds	r3, #4
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	b2db      	uxtb	r3, r3
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d005      	beq.n	8013bb8 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE20peekBlockForTransferEv+0x3c>
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 8013bae:	4a08      	ldr	r2, [pc, #32]	; (8013bd0 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 8013bb0:	21ea      	movs	r1, #234	; 0xea
 8013bb2:	4808      	ldr	r0, [pc, #32]	; (8013bd4 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 8013bb4:	f013 f9ae 	bl	8026f14 <__assert_func>
        return blockRect[nextSendingBlock];
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f203 4339 	addw	r3, r3, #1081	; 0x439
 8013bbe:	00db      	lsls	r3, r3, #3
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	4413      	add	r3, r2
    }
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3710      	adds	r7, #16
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}
 8013bcc:	08028fe8 	.word	0x08028fe8
 8013bd0:	0802900c 	.word	0x0802900c
 8013bd4:	08028d7c 	.word	0x08028d7c

08013bd8 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 8013bd8:	b480      	push	{r7}
 8013bda:	b085      	sub	sp, #20
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013be6:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8013bea:	3301      	adds	r3, #1
 8013bec:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2b03      	cmp	r3, #3
 8013bf2:	d101      	bne.n	8013bf8 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE13hasEmptyBlockEv+0x20>
        {
            nextDrawingBlock = 0;
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	4413      	add	r3, r2
 8013bfe:	3304      	adds	r3, #4
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	bf0c      	ite	eq
 8013c08:	2301      	moveq	r3, #1
 8013c0a:	2300      	movne	r3, #0
 8013c0c:	b2db      	uxtb	r3, r3
    }
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3714      	adds	r7, #20
 8013c12:	46bd      	mov	sp, r7
 8013c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c18:	4770      	bx	lr
	...

08013c1c <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013c2a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	4413      	add	r3, r2
 8013c32:	791b      	ldrb	r3, [r3, #4]
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	2b03      	cmp	r3, #3
 8013c38:	d005      	beq.n	8013c46 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE22freeBlockAfterTransferEv+0x2a>
 8013c3a:	4b09      	ldr	r3, [pc, #36]	; (8013c60 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 8013c3c:	4a09      	ldr	r2, [pc, #36]	; (8013c64 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 8013c3e:	21ff      	movs	r1, #255	; 0xff
 8013c40:	4809      	ldr	r0, [pc, #36]	; (8013c68 <_ZN8touchgfx18ManyBlockAllocatorILm2880ELm3ELm2EE22freeBlockAfterTransferEv+0x4c>)
 8013c42:	f013 f967 	bl	8026f14 <__assert_func>
        state[sendingBlock] = EMPTY;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013c4c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013c50:	687a      	ldr	r2, [r7, #4]
 8013c52:	4413      	add	r3, r2
 8013c54:	2200      	movs	r2, #0
 8013c56:	711a      	strb	r2, [r3, #4]
    }
 8013c58:	bf00      	nop
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	080290ec 	.word	0x080290ec
 8013c64:	0802910c 	.word	0x0802910c
 8013c68:	08028d7c 	.word	0x08028d7c

08013c6c <_GLOBAL__sub_I__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	af00      	add	r7, sp, #0
 8013c70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013c74:	2001      	movs	r0, #1
 8013c76:	f7ff fdf9 	bl	801386c <_Z41__static_initialization_and_destruction_0ii>
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <_GLOBAL__sub_D__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013c84:	2000      	movs	r0, #0
 8013c86:	f7ff fdf1 	bl	801386c <_Z41__static_initialization_and_destruction_0ii>
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013c8c:	8880      	ldrh	r0, [r0, #4]
 8013c8e:	4770      	bx	lr

08013c90 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013c90:	b570      	push	{r4, r5, r6, lr}
 8013c92:	6803      	ldr	r3, [r0, #0]
 8013c94:	4605      	mov	r5, r0
 8013c96:	460c      	mov	r4, r1
 8013c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c9a:	2100      	movs	r1, #0
 8013c9c:	4798      	blx	r3
 8013c9e:	682b      	ldr	r3, [r5, #0]
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	6a1b      	ldr	r3, [r3, #32]
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	4798      	blx	r3
 8013ca8:	1ba4      	subs	r4, r4, r6
 8013caa:	b2a4      	uxth	r4, r4
 8013cac:	fbb4 f0f0 	udiv	r0, r4, r0
 8013cb0:	bd70      	pop	{r4, r5, r6, pc}

08013cb2 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	8083      	strh	r3, [r0, #4]
 8013cb6:	4770      	bx	lr

08013cb8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013cb8:	b510      	push	{r4, lr}
 8013cba:	4604      	mov	r4, r0
 8013cbc:	6803      	ldr	r3, [r0, #0]
 8013cbe:	8881      	ldrh	r1, [r0, #4]
 8013cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc2:	4798      	blx	r3
 8013cc4:	88a3      	ldrh	r3, [r4, #4]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	80a3      	strh	r3, [r4, #4]
 8013cca:	bd10      	pop	{r4, pc}

08013ccc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013ccc:	6803      	ldr	r3, [r0, #0]
 8013cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd0:	4718      	bx	r3

08013cd2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013cd2:	4770      	bx	lr

08013cd4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013cd4:	4a02      	ldr	r2, [pc, #8]	; (8013ce0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013cd6:	6002      	str	r2, [r0, #0]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	8082      	strh	r2, [r0, #4]
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	08029af8 	.word	0x08029af8

08013ce4 <_ZN8touchgfx9Container13getFirstChildEv>:
 8013ce4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013ce6:	4770      	bx	lr

08013ce8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013ce8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013cea:	2000      	movs	r0, #0
 8013cec:	b12b      	cbz	r3, 8013cfa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013cee:	b920      	cbnz	r0, 8013cfa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013cf0:	1a5a      	subs	r2, r3, r1
 8013cf2:	4250      	negs	r0, r2
 8013cf4:	4150      	adcs	r0, r2
 8013cf6:	699b      	ldr	r3, [r3, #24]
 8013cf8:	e7f8      	b.n	8013cec <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013cfa:	4770      	bx	lr

08013cfc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	6148      	str	r0, [r1, #20]
 8013d00:	618b      	str	r3, [r1, #24]
 8013d02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013d04:	b913      	cbnz	r3, 8013d0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8013d06:	6281      	str	r1, [r0, #40]	; 0x28
 8013d08:	4770      	bx	lr
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	699a      	ldr	r2, [r3, #24]
 8013d0e:	2a00      	cmp	r2, #0
 8013d10:	d1fb      	bne.n	8013d0a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013d12:	6199      	str	r1, [r3, #24]
 8013d14:	4770      	bx	lr

08013d16 <_ZN8touchgfx9Container9removeAllEv>:
 8013d16:	2200      	movs	r2, #0
 8013d18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013d1a:	b123      	cbz	r3, 8013d26 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013d1c:	6999      	ldr	r1, [r3, #24]
 8013d1e:	6281      	str	r1, [r0, #40]	; 0x28
 8013d20:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013d24:	e7f8      	b.n	8013d18 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013d26:	4770      	bx	lr

08013d28 <_ZN8touchgfx9Container6unlinkEv>:
 8013d28:	2300      	movs	r3, #0
 8013d2a:	6283      	str	r3, [r0, #40]	; 0x28
 8013d2c:	4770      	bx	lr

08013d2e <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013d2e:	2200      	movs	r2, #0
 8013d30:	8002      	strh	r2, [r0, #0]
 8013d32:	8042      	strh	r2, [r0, #2]
 8013d34:	8082      	strh	r2, [r0, #4]
 8013d36:	80c2      	strh	r2, [r0, #6]
 8013d38:	4770      	bx	lr

08013d3a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013d3a:	b570      	push	{r4, r5, r6, lr}
 8013d3c:	460d      	mov	r5, r1
 8013d3e:	4616      	mov	r6, r2
 8013d40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013d42:	b13c      	cbz	r4, 8013d54 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013d44:	6823      	ldr	r3, [r4, #0]
 8013d46:	4620      	mov	r0, r4
 8013d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d4a:	4632      	mov	r2, r6
 8013d4c:	4629      	mov	r1, r5
 8013d4e:	4798      	blx	r3
 8013d50:	69a4      	ldr	r4, [r4, #24]
 8013d52:	e7f6      	b.n	8013d42 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013d54:	bd70      	pop	{r4, r5, r6, pc}

08013d56 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013d56:	b538      	push	{r3, r4, r5, lr}
 8013d58:	460d      	mov	r5, r1
 8013d5a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013d5c:	b134      	cbz	r4, 8013d6c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013d5e:	682b      	ldr	r3, [r5, #0]
 8013d60:	4621      	mov	r1, r4
 8013d62:	689b      	ldr	r3, [r3, #8]
 8013d64:	4628      	mov	r0, r5
 8013d66:	4798      	blx	r3
 8013d68:	69a4      	ldr	r4, [r4, #24]
 8013d6a:	e7f7      	b.n	8013d5c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013d6c:	bd38      	pop	{r3, r4, r5, pc}

08013d6e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013d6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013d70:	b19b      	cbz	r3, 8013d9a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013d72:	428b      	cmp	r3, r1
 8013d74:	d109      	bne.n	8013d8a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013d76:	2100      	movs	r1, #0
 8013d78:	699a      	ldr	r2, [r3, #24]
 8013d7a:	6159      	str	r1, [r3, #20]
 8013d7c:	6282      	str	r2, [r0, #40]	; 0x28
 8013d7e:	b902      	cbnz	r2, 8013d82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013d80:	4770      	bx	lr
 8013d82:	6199      	str	r1, [r3, #24]
 8013d84:	4770      	bx	lr
 8013d86:	4613      	mov	r3, r2
 8013d88:	b13a      	cbz	r2, 8013d9a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013d8a:	699a      	ldr	r2, [r3, #24]
 8013d8c:	428a      	cmp	r2, r1
 8013d8e:	d1fa      	bne.n	8013d86 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013d90:	698a      	ldr	r2, [r1, #24]
 8013d92:	619a      	str	r2, [r3, #24]
 8013d94:	2300      	movs	r3, #0
 8013d96:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013d9a:	4770      	bx	lr

08013d9c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013d9c:	b410      	push	{r4}
 8013d9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013da0:	4604      	mov	r4, r0
 8013da2:	b92b      	cbnz	r3, 8013db0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013da4:	6803      	ldr	r3, [r0, #0]
 8013da6:	4611      	mov	r1, r2
 8013da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dae:	4718      	bx	r3
 8013db0:	b941      	cbnz	r1, 8013dc4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013db2:	6193      	str	r3, [r2, #24]
 8013db4:	6282      	str	r2, [r0, #40]	; 0x28
 8013db6:	6154      	str	r4, [r2, #20]
 8013db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dbc:	4770      	bx	lr
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	d0f9      	beq.n	8013db8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013dc4:	4299      	cmp	r1, r3
 8013dc6:	6998      	ldr	r0, [r3, #24]
 8013dc8:	d1f9      	bne.n	8013dbe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013dca:	6190      	str	r0, [r2, #24]
 8013dcc:	618a      	str	r2, [r1, #24]
 8013dce:	e7f2      	b.n	8013db6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013dd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd4:	461f      	mov	r7, r3
 8013dd6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013dda:	460d      	mov	r5, r1
 8013ddc:	4616      	mov	r6, r2
 8013dde:	b103      	cbz	r3, 8013de2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013de0:	6038      	str	r0, [r7, #0]
 8013de2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013de4:	b314      	cbz	r4, 8013e2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013de6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013dea:	b1eb      	cbz	r3, 8013e28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013dec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013df0:	428d      	cmp	r5, r1
 8013df2:	db19      	blt.n	8013e28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013df4:	8923      	ldrh	r3, [r4, #8]
 8013df6:	b289      	uxth	r1, r1
 8013df8:	440b      	add	r3, r1
 8013dfa:	b21b      	sxth	r3, r3
 8013dfc:	429d      	cmp	r5, r3
 8013dfe:	da13      	bge.n	8013e28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e00:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013e04:	4296      	cmp	r6, r2
 8013e06:	db0f      	blt.n	8013e28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e08:	8963      	ldrh	r3, [r4, #10]
 8013e0a:	b292      	uxth	r2, r2
 8013e0c:	4413      	add	r3, r2
 8013e0e:	b21b      	sxth	r3, r3
 8013e10:	429e      	cmp	r6, r3
 8013e12:	da09      	bge.n	8013e28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e14:	6823      	ldr	r3, [r4, #0]
 8013e16:	1ab2      	subs	r2, r6, r2
 8013e18:	1a69      	subs	r1, r5, r1
 8013e1a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8013e1e:	b212      	sxth	r2, r2
 8013e20:	463b      	mov	r3, r7
 8013e22:	b209      	sxth	r1, r1
 8013e24:	4620      	mov	r0, r4
 8013e26:	47c0      	blx	r8
 8013e28:	69a4      	ldr	r4, [r4, #24]
 8013e2a:	e7db      	b.n	8013de4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	4c6c      	ldr	r4, [pc, #432]	; (8013fe8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8013e36:	b0a1      	sub	sp, #132	; 0x84
 8013e38:	6824      	ldr	r4, [r4, #0]
 8013e3a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013e3c:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013e40:	2400      	movs	r4, #0
 8013e42:	802c      	strh	r4, [r5, #0]
 8013e44:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013e46:	4606      	mov	r6, r0
 8013e48:	802c      	strh	r4, [r5, #0]
 8013e4a:	601c      	str	r4, [r3, #0]
 8013e4c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013e50:	9303      	str	r3, [sp, #12]
 8013e52:	f7ff ffbd 	bl	8013dd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013e56:	f1b9 0f03 	cmp.w	r9, #3
 8013e5a:	f340 80bf 	ble.w	8013fdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8013e5e:	4631      	mov	r1, r6
 8013e60:	a80c      	add	r0, sp, #48	; 0x30
 8013e62:	f004 f86d 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e66:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013e6a:	9306      	str	r3, [sp, #24]
 8013e6c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013e70:	9307      	str	r3, [sp, #28]
 8013e72:	9b03      	ldr	r3, [sp, #12]
 8013e74:	f8d3 a000 	ldr.w	sl, [r3]
 8013e78:	f1ba 0f00 	cmp.w	sl, #0
 8013e7c:	f000 80b1 	beq.w	8013fe2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8013e80:	4651      	mov	r1, sl
 8013e82:	a810      	add	r0, sp, #64	; 0x40
 8013e84:	f004 f85c 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e88:	2002      	movs	r0, #2
 8013e8a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8013e8e:	9b01      	ldr	r3, [sp, #4]
 8013e90:	fb91 f1f0 	sdiv	r1, r1, r0
 8013e94:	9a06      	ldr	r2, [sp, #24]
 8013e96:	189d      	adds	r5, r3, r2
 8013e98:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8013e9c:	9a07      	ldr	r2, [sp, #28]
 8013e9e:	4419      	add	r1, r3
 8013ea0:	9b02      	ldr	r3, [sp, #8]
 8013ea2:	1a6d      	subs	r5, r5, r1
 8013ea4:	4413      	add	r3, r2
 8013ea6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8013eaa:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013eae:	fb92 f2f0 	sdiv	r2, r2, r0
 8013eb2:	440a      	add	r2, r1
 8013eb4:	1a9b      	subs	r3, r3, r2
 8013eb6:	435b      	muls	r3, r3
 8013eb8:	fb05 3505 	mla	r5, r5, r5, r3
 8013ebc:	4f4b      	ldr	r7, [pc, #300]	; (8013fec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013ebe:	ac10      	add	r4, sp, #64	; 0x40
 8013ec0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ec4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ec8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ecc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013ed4:	2303      	movs	r3, #3
 8013ed6:	f1b9 0f0c 	cmp.w	r9, #12
 8013eda:	bfda      	itte	le
 8013edc:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013ee0:	fb92 f8f3 	sdivle	r8, r2, r3
 8013ee4:	4698      	movgt	r8, r3
 8013ee6:	2400      	movs	r4, #0
 8013ee8:	f8cd 9000 	str.w	r9, [sp]
 8013eec:	1c63      	adds	r3, r4, #1
 8013eee:	9308      	str	r3, [sp, #32]
 8013ef0:	9b00      	ldr	r3, [sp, #0]
 8013ef2:	f04f 0b00 	mov.w	fp, #0
 8013ef6:	fb93 f3f8 	sdiv	r3, r3, r8
 8013efa:	f004 0401 	and.w	r4, r4, #1
 8013efe:	aa10      	add	r2, sp, #64	; 0x40
 8013f00:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	3404      	adds	r4, #4
 8013f08:	9304      	str	r3, [sp, #16]
 8013f0a:	9a04      	ldr	r2, [sp, #16]
 8013f0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013f10:	fb13 f302 	smulbb	r3, r3, r2
 8013f14:	9a01      	ldr	r2, [sp, #4]
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	1899      	adds	r1, r3, r2
 8013f1a:	9305      	str	r3, [sp, #20]
 8013f1c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013f20:	b209      	sxth	r1, r1
 8013f22:	4299      	cmp	r1, r3
 8013f24:	db4d      	blt.n	8013fc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f26:	8932      	ldrh	r2, [r6, #8]
 8013f28:	4413      	add	r3, r2
 8013f2a:	b21b      	sxth	r3, r3
 8013f2c:	4299      	cmp	r1, r3
 8013f2e:	da48      	bge.n	8013fc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f30:	9b04      	ldr	r3, [sp, #16]
 8013f32:	6827      	ldr	r7, [r4, #0]
 8013f34:	fb17 f703 	smulbb	r7, r7, r3
 8013f38:	9b02      	ldr	r3, [sp, #8]
 8013f3a:	b2bf      	uxth	r7, r7
 8013f3c:	18fa      	adds	r2, r7, r3
 8013f3e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013f42:	b212      	sxth	r2, r2
 8013f44:	429a      	cmp	r2, r3
 8013f46:	db3c      	blt.n	8013fc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f48:	8970      	ldrh	r0, [r6, #10]
 8013f4a:	4403      	add	r3, r0
 8013f4c:	b21b      	sxth	r3, r3
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	da37      	bge.n	8013fc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f52:	2300      	movs	r3, #0
 8013f54:	4630      	mov	r0, r6
 8013f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f58:	ab0b      	add	r3, sp, #44	; 0x2c
 8013f5a:	f7ff ff39 	bl	8013dd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013f5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f60:	b37a      	cbz	r2, 8013fc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f62:	4552      	cmp	r2, sl
 8013f64:	d02d      	beq.n	8013fc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f66:	4611      	mov	r1, r2
 8013f68:	a80e      	add	r0, sp, #56	; 0x38
 8013f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8013f6c:	f003 ffe8 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f70:	f04f 0e02 	mov.w	lr, #2
 8013f74:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8013f78:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8013f7c:	fb91 f1fe 	sdiv	r1, r1, lr
 8013f80:	fb9c fcfe 	sdiv	ip, ip, lr
 8013f84:	9a06      	ldr	r2, [sp, #24]
 8013f86:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013f8a:	9b01      	ldr	r3, [sp, #4]
 8013f8c:	4401      	add	r1, r0
 8013f8e:	4413      	add	r3, r2
 8013f90:	1a58      	subs	r0, r3, r1
 8013f92:	9a07      	ldr	r2, [sp, #28]
 8013f94:	9b02      	ldr	r3, [sp, #8]
 8013f96:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013f9a:	4413      	add	r3, r2
 8013f9c:	448c      	add	ip, r1
 8013f9e:	eba3 030c 	sub.w	r3, r3, ip
 8013fa2:	435b      	muls	r3, r3
 8013fa4:	fb00 3300 	mla	r3, r0, r0, r3
 8013fa8:	42ab      	cmp	r3, r5
 8013faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fac:	d208      	bcs.n	8013fc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8013fae:	461d      	mov	r5, r3
 8013fb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013fb2:	9803      	ldr	r0, [sp, #12]
 8013fb4:	6001      	str	r1, [r0, #0]
 8013fb6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013fb8:	9805      	ldr	r0, [sp, #20]
 8013fba:	8008      	strh	r0, [r1, #0]
 8013fbc:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013fbe:	800f      	strh	r7, [r1, #0]
 8013fc0:	4692      	mov	sl, r2
 8013fc2:	f10b 0b01 	add.w	fp, fp, #1
 8013fc6:	f1bb 0f04 	cmp.w	fp, #4
 8013fca:	f104 0408 	add.w	r4, r4, #8
 8013fce:	d19c      	bne.n	8013f0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8013fd0:	9b00      	ldr	r3, [sp, #0]
 8013fd2:	9c08      	ldr	r4, [sp, #32]
 8013fd4:	444b      	add	r3, r9
 8013fd6:	4544      	cmp	r4, r8
 8013fd8:	9300      	str	r3, [sp, #0]
 8013fda:	d187      	bne.n	8013eec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8013fdc:	b021      	add	sp, #132	; 0x84
 8013fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe2:	f04f 35ff 	mov.w	r5, #4294967295
 8013fe6:	e769      	b.n	8013ebc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013fe8:	2000f394 	.word	0x2000f394
 8013fec:	080291dc 	.word	0x080291dc

08013ff0 <_ZN8touchgfx4RectaNERKS0_>:
 8013ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ff4:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013ff8:	888c      	ldrh	r4, [r1, #4]
 8013ffa:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013ffe:	443c      	add	r4, r7
 8014000:	b2a4      	uxth	r4, r4
 8014002:	fa0f f884 	sxth.w	r8, r4
 8014006:	45c1      	cmp	r9, r8
 8014008:	da2f      	bge.n	801406a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801400a:	8882      	ldrh	r2, [r0, #4]
 801400c:	444a      	add	r2, r9
 801400e:	b292      	uxth	r2, r2
 8014010:	fa0f fe82 	sxth.w	lr, r2
 8014014:	4577      	cmp	r7, lr
 8014016:	da28      	bge.n	801406a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014018:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801401c:	88cb      	ldrh	r3, [r1, #6]
 801401e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014022:	442b      	add	r3, r5
 8014024:	b21b      	sxth	r3, r3
 8014026:	429e      	cmp	r6, r3
 8014028:	da1f      	bge.n	801406a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801402a:	88c3      	ldrh	r3, [r0, #6]
 801402c:	4433      	add	r3, r6
 801402e:	b29b      	uxth	r3, r3
 8014030:	fa0f fc83 	sxth.w	ip, r3
 8014034:	4565      	cmp	r5, ip
 8014036:	da18      	bge.n	801406a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014038:	454f      	cmp	r7, r9
 801403a:	bfb8      	it	lt
 801403c:	464f      	movlt	r7, r9
 801403e:	42b5      	cmp	r5, r6
 8014040:	bfb8      	it	lt
 8014042:	4635      	movlt	r5, r6
 8014044:	45f0      	cmp	r8, lr
 8014046:	bfd8      	it	le
 8014048:	4622      	movle	r2, r4
 801404a:	1bd2      	subs	r2, r2, r7
 801404c:	8082      	strh	r2, [r0, #4]
 801404e:	884a      	ldrh	r2, [r1, #2]
 8014050:	88c9      	ldrh	r1, [r1, #6]
 8014052:	8007      	strh	r7, [r0, #0]
 8014054:	440a      	add	r2, r1
 8014056:	b292      	uxth	r2, r2
 8014058:	b211      	sxth	r1, r2
 801405a:	458c      	cmp	ip, r1
 801405c:	bfa8      	it	ge
 801405e:	4613      	movge	r3, r2
 8014060:	1b5b      	subs	r3, r3, r5
 8014062:	80c3      	strh	r3, [r0, #6]
 8014064:	8045      	strh	r5, [r0, #2]
 8014066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801406a:	2300      	movs	r3, #0
 801406c:	8003      	strh	r3, [r0, #0]
 801406e:	8043      	strh	r3, [r0, #2]
 8014070:	8083      	strh	r3, [r0, #4]
 8014072:	80c3      	strh	r3, [r0, #6]
 8014074:	e7f7      	b.n	8014066 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014076 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014076:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	dd06      	ble.n	801408c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801407e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014082:	2800      	cmp	r0, #0
 8014084:	bfcc      	ite	gt
 8014086:	2000      	movgt	r0, #0
 8014088:	2001      	movle	r0, #1
 801408a:	4770      	bx	lr
 801408c:	2001      	movs	r0, #1
 801408e:	4770      	bx	lr

08014090 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014090:	2300      	movs	r3, #0
 8014092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014096:	4604      	mov	r4, r0
 8014098:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801409a:	8003      	strh	r3, [r0, #0]
 801409c:	8043      	strh	r3, [r0, #2]
 801409e:	8083      	strh	r3, [r0, #4]
 80140a0:	80c3      	strh	r3, [r0, #6]
 80140a2:	2d00      	cmp	r5, #0
 80140a4:	d040      	beq.n	8014128 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80140a6:	1d28      	adds	r0, r5, #4
 80140a8:	f7ff ffe5 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80140ac:	b988      	cbnz	r0, 80140d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80140ae:	4620      	mov	r0, r4
 80140b0:	f7ff ffe1 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80140b4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80140b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80140bc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80140c0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80140c4:	b138      	cbz	r0, 80140d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80140c6:	8022      	strh	r2, [r4, #0]
 80140c8:	8063      	strh	r3, [r4, #2]
 80140ca:	f8a4 e004 	strh.w	lr, [r4, #4]
 80140ce:	f8a4 c006 	strh.w	ip, [r4, #6]
 80140d2:	69ad      	ldr	r5, [r5, #24]
 80140d4:	e7e5      	b.n	80140a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80140d6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80140da:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80140de:	4290      	cmp	r0, r2
 80140e0:	4607      	mov	r7, r0
 80140e2:	bfa8      	it	ge
 80140e4:	4617      	movge	r7, r2
 80140e6:	4299      	cmp	r1, r3
 80140e8:	460e      	mov	r6, r1
 80140ea:	bfa8      	it	ge
 80140ec:	461e      	movge	r6, r3
 80140ee:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80140f2:	4472      	add	r2, lr
 80140f4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80140f8:	4440      	add	r0, r8
 80140fa:	4471      	add	r1, lr
 80140fc:	4463      	add	r3, ip
 80140fe:	b200      	sxth	r0, r0
 8014100:	b212      	sxth	r2, r2
 8014102:	b209      	sxth	r1, r1
 8014104:	b21b      	sxth	r3, r3
 8014106:	4290      	cmp	r0, r2
 8014108:	bfac      	ite	ge
 801410a:	ebc7 0200 	rsbge	r2, r7, r0
 801410e:	ebc7 0202 	rsblt	r2, r7, r2
 8014112:	4299      	cmp	r1, r3
 8014114:	bfac      	ite	ge
 8014116:	ebc6 0301 	rsbge	r3, r6, r1
 801411a:	ebc6 0303 	rsblt	r3, r6, r3
 801411e:	8027      	strh	r7, [r4, #0]
 8014120:	8066      	strh	r6, [r4, #2]
 8014122:	80a2      	strh	r2, [r4, #4]
 8014124:	80e3      	strh	r3, [r4, #6]
 8014126:	e7d4      	b.n	80140d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014128:	4620      	mov	r0, r4
 801412a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801412e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801412e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014132:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014136:	b383      	cbz	r3, 801419a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014138:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801413a:	b374      	cbz	r4, 801419a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801413c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014140:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014144:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014148:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801414c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014150:	b303      	cbz	r3, 8014194 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014152:	4668      	mov	r0, sp
 8014154:	1d21      	adds	r1, r4, #4
 8014156:	f8ad 5000 	strh.w	r5, [sp]
 801415a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801415e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014162:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014166:	f7ff ff43 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 801416a:	4668      	mov	r0, sp
 801416c:	f7ff ff83 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014170:	b980      	cbnz	r0, 8014194 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014172:	f8bd 3000 	ldrh.w	r3, [sp]
 8014176:	88a2      	ldrh	r2, [r4, #4]
 8014178:	4669      	mov	r1, sp
 801417a:	1a9b      	subs	r3, r3, r2
 801417c:	f8ad 3000 	strh.w	r3, [sp]
 8014180:	88e2      	ldrh	r2, [r4, #6]
 8014182:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014186:	4620      	mov	r0, r4
 8014188:	1a9b      	subs	r3, r3, r2
 801418a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801418e:	6823      	ldr	r3, [r4, #0]
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	4798      	blx	r3
 8014194:	69a4      	ldr	r4, [r4, #24]
 8014196:	2c00      	cmp	r4, #0
 8014198:	d1d8      	bne.n	801414c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801419a:	b002      	add	sp, #8
 801419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141a0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80141a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141a2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80141a6:	460d      	mov	r5, r1
 80141a8:	4616      	mov	r6, r2
 80141aa:	b323      	cbz	r3, 80141f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80141ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80141ae:	b314      	cbz	r4, 80141f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80141b0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80141b4:	b1eb      	cbz	r3, 80141f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80141b6:	466b      	mov	r3, sp
 80141b8:	6828      	ldr	r0, [r5, #0]
 80141ba:	6869      	ldr	r1, [r5, #4]
 80141bc:	c303      	stmia	r3!, {r0, r1}
 80141be:	4668      	mov	r0, sp
 80141c0:	1d21      	adds	r1, r4, #4
 80141c2:	f7ff ff15 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 80141c6:	4668      	mov	r0, sp
 80141c8:	f7ff ff55 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80141cc:	b988      	cbnz	r0, 80141f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80141ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80141d2:	88a2      	ldrh	r2, [r4, #4]
 80141d4:	4669      	mov	r1, sp
 80141d6:	1a9b      	subs	r3, r3, r2
 80141d8:	f8ad 3000 	strh.w	r3, [sp]
 80141dc:	88e2      	ldrh	r2, [r4, #6]
 80141de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80141e2:	4620      	mov	r0, r4
 80141e4:	1a9b      	subs	r3, r3, r2
 80141e6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80141ea:	6823      	ldr	r3, [r4, #0]
 80141ec:	4632      	mov	r2, r6
 80141ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80141f0:	4798      	blx	r3
 80141f2:	69a4      	ldr	r4, [r4, #24]
 80141f4:	e7db      	b.n	80141ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80141f6:	b002      	add	sp, #8
 80141f8:	bd70      	pop	{r4, r5, r6, pc}

080141fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80141fa:	b513      	push	{r0, r1, r4, lr}
 80141fc:	6803      	ldr	r3, [r0, #0]
 80141fe:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8014202:	2300      	movs	r3, #0
 8014204:	e9cd 3300 	strd	r3, r3, [sp]
 8014208:	466b      	mov	r3, sp
 801420a:	47a0      	blx	r4
 801420c:	b002      	add	sp, #8
 801420e:	bd10      	pop	{r4, pc}

08014210 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014210:	2301      	movs	r3, #1
 8014212:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014216:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 801421a:	4770      	bx	lr

0801421c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801421c:	2301      	movs	r3, #1
 801421e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014222:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8014226:	4770      	bx	lr

08014228 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014228:	2201      	movs	r2, #1
 801422a:	6843      	ldr	r3, [r0, #4]
 801422c:	725a      	strb	r2, [r3, #9]
 801422e:	6840      	ldr	r0, [r0, #4]
 8014230:	6803      	ldr	r3, [r0, #0]
 8014232:	691b      	ldr	r3, [r3, #16]
 8014234:	4718      	bx	r3

08014236 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014236:	6840      	ldr	r0, [r0, #4]
 8014238:	6803      	ldr	r3, [r0, #0]
 801423a:	689b      	ldr	r3, [r3, #8]
 801423c:	4718      	bx	r3

0801423e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801423e:	b530      	push	{r4, r5, lr}
 8014240:	b08b      	sub	sp, #44	; 0x2c
 8014242:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8014246:	6804      	ldr	r4, [r0, #0]
 8014248:	9509      	str	r5, [sp, #36]	; 0x24
 801424a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801424e:	9508      	str	r5, [sp, #32]
 8014250:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8014254:	9507      	str	r5, [sp, #28]
 8014256:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801425a:	9506      	str	r5, [sp, #24]
 801425c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8014260:	9505      	str	r5, [sp, #20]
 8014262:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8014266:	9504      	str	r5, [sp, #16]
 8014268:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801426c:	9503      	str	r5, [sp, #12]
 801426e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014272:	9502      	str	r5, [sp, #8]
 8014274:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8014278:	e9cd 3500 	strd	r3, r5, [sp]
 801427c:	4613      	mov	r3, r2
 801427e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8014280:	2200      	movs	r2, #0
 8014282:	47a0      	blx	r4
 8014284:	b00b      	add	sp, #44	; 0x2c
 8014286:	bd30      	pop	{r4, r5, pc}

08014288 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014288:	4b04      	ldr	r3, [pc, #16]	; (801429c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	b123      	cbz	r3, 8014298 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801428e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8014292:	f080 0001 	eor.w	r0, r0, #1
 8014296:	4770      	bx	lr
 8014298:	2001      	movs	r0, #1
 801429a:	4770      	bx	lr
 801429c:	2000f392 	.word	0x2000f392

080142a0 <_ZN8touchgfx3HAL8endFrameEv>:
 80142a0:	b510      	push	{r4, lr}
 80142a2:	4604      	mov	r4, r0
 80142a4:	6840      	ldr	r0, [r0, #4]
 80142a6:	6803      	ldr	r3, [r0, #0]
 80142a8:	689b      	ldr	r3, [r3, #8]
 80142aa:	4798      	blx	r3
 80142ac:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 80142b0:	b113      	cbz	r3, 80142b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80142b2:	2301      	movs	r3, #1
 80142b4:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80142b8:	bd10      	pop	{r4, pc}

080142ba <_ZN8touchgfx3HAL10initializeEv>:
 80142ba:	b510      	push	{r4, lr}
 80142bc:	4604      	mov	r4, r0
 80142be:	f7fe fa0f 	bl	80126e0 <_ZN8touchgfx10OSWrappers10initializeEv>
 80142c2:	f7fd ff55 	bl	8012170 <_ZN8touchgfx4GPIO4initEv>
 80142c6:	6860      	ldr	r0, [r4, #4]
 80142c8:	6803      	ldr	r3, [r0, #0]
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	4798      	blx	r3
 80142ce:	68e0      	ldr	r0, [r4, #12]
 80142d0:	6803      	ldr	r3, [r0, #0]
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	4798      	blx	r3
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	4620      	mov	r0, r4
 80142da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142e0:	4718      	bx	r3

080142e2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80142e2:	4604      	mov	r4, r0
 80142e4:	b508      	push	{r3, lr}
 80142e6:	6803      	ldr	r3, [r0, #0]
 80142e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80142ec:	4798      	blx	r3
 80142ee:	6823      	ldr	r3, [r4, #0]
 80142f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80142f2:	4620      	mov	r0, r4
 80142f4:	4798      	blx	r3
 80142f6:	f7fe fa69 	bl	80127cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80142fa:	6823      	ldr	r3, [r4, #0]
 80142fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142fe:	e7f8      	b.n	80142f2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014300 <_ZN8touchgfx3HAL4tickEv>:
 8014300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014302:	6803      	ldr	r3, [r0, #0]
 8014304:	4604      	mov	r4, r0
 8014306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801430a:	4798      	blx	r3
 801430c:	4d59      	ldr	r5, [pc, #356]	; (8014474 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801430e:	2800      	cmp	r0, #0
 8014310:	f000 8095 	beq.w	801443e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8014314:	2600      	movs	r6, #0
 8014316:	2001      	movs	r0, #1
 8014318:	f7fd ff32 	bl	8012180 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801431c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8014320:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014324:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014328:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 801432c:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8014330:	b133      	cbz	r3, 8014340 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014332:	6823      	ldr	r3, [r4, #0]
 8014334:	4620      	mov	r0, r4
 8014336:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801433a:	4798      	blx	r3
 801433c:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8014340:	2601      	movs	r6, #1
 8014342:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014346:	6862      	ldr	r2, [r4, #4]
 8014348:	f083 0301 	eor.w	r3, r3, #1
 801434c:	7253      	strb	r3, [r2, #9]
 801434e:	702e      	strb	r6, [r5, #0]
 8014350:	f002 fce4 	bl	8016d1c <_ZN8touchgfx11Application11getInstanceEv>
 8014354:	6803      	ldr	r3, [r0, #0]
 8014356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014358:	4798      	blx	r3
 801435a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801435e:	b90b      	cbnz	r3, 8014364 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014360:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8014364:	f002 fcda 	bl	8016d1c <_ZN8touchgfx11Application11getInstanceEv>
 8014368:	6803      	ldr	r3, [r0, #0]
 801436a:	695b      	ldr	r3, [r3, #20]
 801436c:	4798      	blx	r3
 801436e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8014370:	6803      	ldr	r3, [r0, #0]
 8014372:	691b      	ldr	r3, [r3, #16]
 8014374:	4798      	blx	r3
 8014376:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801437a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 801437e:	3b01      	subs	r3, #1
 8014380:	b2db      	uxtb	r3, r3
 8014382:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014386:	b10a      	cbz	r2, 801438c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014388:	2b00      	cmp	r3, #0
 801438a:	d1eb      	bne.n	8014364 <_ZN8touchgfx3HAL4tickEv+0x64>
 801438c:	4a3a      	ldr	r2, [pc, #232]	; (8014478 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801438e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8014392:	7813      	ldrb	r3, [r2, #0]
 8014394:	3301      	adds	r3, #1
 8014396:	b25b      	sxtb	r3, r3
 8014398:	4299      	cmp	r1, r3
 801439a:	7013      	strb	r3, [r2, #0]
 801439c:	dc10      	bgt.n	80143c0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801439e:	2300      	movs	r3, #0
 80143a0:	68e0      	ldr	r0, [r4, #12]
 80143a2:	7013      	strb	r3, [r2, #0]
 80143a4:	6803      	ldr	r3, [r0, #0]
 80143a6:	aa03      	add	r2, sp, #12
 80143a8:	68db      	ldr	r3, [r3, #12]
 80143aa:	a902      	add	r1, sp, #8
 80143ac:	4798      	blx	r3
 80143ae:	6823      	ldr	r3, [r4, #0]
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d050      	beq.n	8014456 <_ZN8touchgfx3HAL4tickEv+0x156>
 80143b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80143b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80143bc:	4620      	mov	r0, r4
 80143be:	4798      	blx	r3
 80143c0:	2300      	movs	r3, #0
 80143c2:	6960      	ldr	r0, [r4, #20]
 80143c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80143c8:	b158      	cbz	r0, 80143e2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80143ca:	6803      	ldr	r3, [r0, #0]
 80143cc:	f10d 0107 	add.w	r1, sp, #7
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	4798      	blx	r3
 80143d4:	b128      	cbz	r0, 80143e2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80143d6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80143d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80143dc:	6803      	ldr	r3, [r0, #0]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	4798      	blx	r3
 80143e2:	f104 001c 	add.w	r0, r4, #28
 80143e6:	f012 fcb3 	bl	8026d50 <_ZN8touchgfx8Gestures4tickEv>
 80143ea:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80143ee:	b30b      	cbz	r3, 8014434 <_ZN8touchgfx3HAL4tickEv+0x134>
 80143f0:	6920      	ldr	r0, [r4, #16]
 80143f2:	6803      	ldr	r3, [r0, #0]
 80143f4:	691b      	ldr	r3, [r3, #16]
 80143f6:	4798      	blx	r3
 80143f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80143fa:	4606      	mov	r6, r0
 80143fc:	b903      	cbnz	r3, 8014400 <_ZN8touchgfx3HAL4tickEv+0x100>
 80143fe:	6760      	str	r0, [r4, #116]	; 0x74
 8014400:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8014402:	4a1e      	ldr	r2, [pc, #120]	; (801447c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014404:	1af3      	subs	r3, r6, r3
 8014406:	4293      	cmp	r3, r2
 8014408:	d914      	bls.n	8014434 <_ZN8touchgfx3HAL4tickEv+0x134>
 801440a:	6920      	ldr	r0, [r4, #16]
 801440c:	6803      	ldr	r3, [r0, #0]
 801440e:	699b      	ldr	r3, [r3, #24]
 8014410:	4798      	blx	r3
 8014412:	2264      	movs	r2, #100	; 0x64
 8014414:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8014416:	1af3      	subs	r3, r6, r3
 8014418:	fbb3 f3f2 	udiv	r3, r3, r2
 801441c:	fbb0 f0f3 	udiv	r0, r0, r3
 8014420:	2800      	cmp	r0, #0
 8014422:	dc1d      	bgt.n	8014460 <_ZN8touchgfx3HAL4tickEv+0x160>
 8014424:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8014428:	6920      	ldr	r0, [r4, #16]
 801442a:	2100      	movs	r1, #0
 801442c:	6803      	ldr	r3, [r0, #0]
 801442e:	69db      	ldr	r3, [r3, #28]
 8014430:	4798      	blx	r3
 8014432:	6766      	str	r6, [r4, #116]	; 0x74
 8014434:	f002 fc72 	bl	8016d1c <_ZN8touchgfx11Application11getInstanceEv>
 8014438:	6803      	ldr	r3, [r0, #0]
 801443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801443c:	4798      	blx	r3
 801443e:	6823      	ldr	r3, [r4, #0]
 8014440:	4620      	mov	r0, r4
 8014442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014446:	4798      	blx	r3
 8014448:	2001      	movs	r0, #1
 801444a:	f7fd feb5 	bl	80121b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801444e:	2300      	movs	r3, #0
 8014450:	702b      	strb	r3, [r5, #0]
 8014452:	b004      	add	sp, #16
 8014454:	bd70      	pop	{r4, r5, r6, pc}
 8014456:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801445a:	4620      	mov	r0, r4
 801445c:	4798      	blx	r3
 801445e:	e7af      	b.n	80143c0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014460:	2863      	cmp	r0, #99	; 0x63
 8014462:	bfcb      	itete	gt
 8014464:	2300      	movgt	r3, #0
 8014466:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801446a:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 801446e:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8014472:	e7d9      	b.n	8014428 <_ZN8touchgfx3HAL4tickEv+0x128>
 8014474:	2000f398 	.word	0x2000f398
 8014478:	2000f399 	.word	0x2000f399
 801447c:	05f5e100 	.word	0x05f5e100

08014480 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014480:	b510      	push	{r4, lr}
 8014482:	4604      	mov	r4, r0
 8014484:	f7fe f96e 	bl	8012764 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014488:	2200      	movs	r2, #0
 801448a:	6863      	ldr	r3, [r4, #4]
 801448c:	729a      	strb	r2, [r3, #10]
 801448e:	bd10      	pop	{r4, pc}

08014490 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014490:	65c1      	str	r1, [r0, #92]	; 0x5c
 8014492:	301c      	adds	r0, #28
 8014494:	f012 bc5a 	b.w	8026d4c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014498 <_ZN8touchgfx3HAL5touchEll>:
 8014498:	b530      	push	{r4, r5, lr}
 801449a:	4604      	mov	r4, r0
 801449c:	b087      	sub	sp, #28
 801449e:	a804      	add	r0, sp, #16
 80144a0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80144a4:	f002 fa2c 	bl	8016900 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80144a8:	9b04      	ldr	r3, [sp, #16]
 80144aa:	a906      	add	r1, sp, #24
 80144ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80144b0:	9b05      	ldr	r3, [sp, #20]
 80144b2:	a803      	add	r0, sp, #12
 80144b4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80144b8:	f002 fa74 	bl	80169a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80144bc:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 80144c0:	f104 001c 	add.w	r0, r4, #28
 80144c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80144c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80144cc:	b189      	cbz	r1, 80144f2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80144ce:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 80144d2:	9300      	str	r3, [sp, #0]
 80144d4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80144d8:	4613      	mov	r3, r2
 80144da:	462a      	mov	r2, r5
 80144dc:	f012 fc46 	bl	8026d6c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80144e0:	b128      	cbz	r0, 80144ee <_ZN8touchgfx3HAL5touchEll+0x56>
 80144e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80144e6:	6623      	str	r3, [r4, #96]	; 0x60
 80144e8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80144ec:	6663      	str	r3, [r4, #100]	; 0x64
 80144ee:	b007      	add	sp, #28
 80144f0:	bd30      	pop	{r4, r5, pc}
 80144f2:	f012 fc7b 	bl	8026dec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80144f6:	2301      	movs	r3, #1
 80144f8:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80144fc:	e7f1      	b.n	80144e2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080144fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80144fe:	b510      	push	{r4, lr}
 8014500:	2b00      	cmp	r3, #0
 8014502:	d046      	beq.n	8014592 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014504:	ea81 0002 	eor.w	r0, r1, r2
 8014508:	07c4      	lsls	r4, r0, #31
 801450a:	d508      	bpl.n	801451e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801450c:	440b      	add	r3, r1
 801450e:	3a01      	subs	r2, #1
 8014510:	428b      	cmp	r3, r1
 8014512:	d93e      	bls.n	8014592 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014514:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014518:	f801 0b01 	strb.w	r0, [r1], #1
 801451c:	e7f8      	b.n	8014510 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801451e:	07d0      	lsls	r0, r2, #31
 8014520:	bf42      	ittt	mi
 8014522:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014526:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801452a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801452e:	2b01      	cmp	r3, #1
 8014530:	d911      	bls.n	8014556 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014532:	ea81 0402 	eor.w	r4, r1, r2
 8014536:	07a4      	lsls	r4, r4, #30
 8014538:	4610      	mov	r0, r2
 801453a:	d022      	beq.n	8014582 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801453c:	f023 0401 	bic.w	r4, r3, #1
 8014540:	440c      	add	r4, r1
 8014542:	428c      	cmp	r4, r1
 8014544:	4602      	mov	r2, r0
 8014546:	d904      	bls.n	8014552 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014548:	8812      	ldrh	r2, [r2, #0]
 801454a:	3002      	adds	r0, #2
 801454c:	f821 2b02 	strh.w	r2, [r1], #2
 8014550:	e7f7      	b.n	8014542 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014552:	f003 0301 	and.w	r3, r3, #1
 8014556:	f023 0003 	bic.w	r0, r3, #3
 801455a:	4408      	add	r0, r1
 801455c:	4288      	cmp	r0, r1
 801455e:	4614      	mov	r4, r2
 8014560:	d904      	bls.n	801456c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014562:	6824      	ldr	r4, [r4, #0]
 8014564:	3204      	adds	r2, #4
 8014566:	f841 4b04 	str.w	r4, [r1], #4
 801456a:	e7f7      	b.n	801455c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801456c:	f003 0303 	and.w	r3, r3, #3
 8014570:	440b      	add	r3, r1
 8014572:	3a01      	subs	r2, #1
 8014574:	428b      	cmp	r3, r1
 8014576:	d90c      	bls.n	8014592 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014578:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801457c:	f801 0b01 	strb.w	r0, [r1], #1
 8014580:	e7f8      	b.n	8014574 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014582:	0790      	lsls	r0, r2, #30
 8014584:	d0e7      	beq.n	8014556 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014586:	f832 0b02 	ldrh.w	r0, [r2], #2
 801458a:	3b02      	subs	r3, #2
 801458c:	f821 0b02 	strh.w	r0, [r1], #2
 8014590:	e7e1      	b.n	8014556 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014592:	2001      	movs	r0, #1
 8014594:	bd10      	pop	{r4, pc}

08014596 <_ZN8touchgfx3HAL7noTouchEv>:
 8014596:	b510      	push	{r4, lr}
 8014598:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 801459c:	4604      	mov	r4, r0
 801459e:	b153      	cbz	r3, 80145b6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80145a0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 80145a4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 80145a8:	2101      	movs	r1, #1
 80145aa:	301c      	adds	r0, #28
 80145ac:	f012 fc1e 	bl	8026dec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80145b0:	2300      	movs	r3, #0
 80145b2:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80145b6:	bd10      	pop	{r4, pc}

080145b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80145b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145bc:	4604      	mov	r4, r0
 80145be:	2000      	movs	r0, #0
 80145c0:	b085      	sub	sp, #20
 80145c2:	ad04      	add	r5, sp, #16
 80145c4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80145c8:	69a0      	ldr	r0, [r4, #24]
 80145ca:	4699      	mov	r9, r3
 80145cc:	6806      	ldr	r6, [r0, #0]
 80145ce:	9501      	str	r5, [sp, #4]
 80145d0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80145d4:	460f      	mov	r7, r1
 80145d6:	9500      	str	r5, [sp, #0]
 80145d8:	6835      	ldr	r5, [r6, #0]
 80145da:	4690      	mov	r8, r2
 80145dc:	47a8      	blx	r5
 80145de:	4d10      	ldr	r5, [pc, #64]	; (8014620 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80145e0:	4606      	mov	r6, r0
 80145e2:	f8a5 9000 	strh.w	r9, [r5]
 80145e6:	f7fb ff1f 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 80145ea:	6803      	ldr	r3, [r0, #0]
 80145ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ee:	4798      	blx	r3
 80145f0:	b128      	cbz	r0, 80145fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80145f2:	2801      	cmp	r0, #1
 80145f4:	d00b      	beq.n	801460e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80145f6:	4630      	mov	r0, r6
 80145f8:	b005      	add	sp, #20
 80145fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145fe:	882b      	ldrh	r3, [r5, #0]
 8014600:	fb08 7203 	mla	r2, r8, r3, r7
 8014604:	9b03      	ldr	r3, [sp, #12]
 8014606:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801460a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801460c:	e7f3      	b.n	80145f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801460e:	882a      	ldrh	r2, [r5, #0]
 8014610:	9b03      	ldr	r3, [sp, #12]
 8014612:	fb08 7202 	mla	r2, r8, r2, r7
 8014616:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801461a:	1a9a      	subs	r2, r3, r2
 801461c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801461e:	e7ea      	b.n	80145f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014620:	2000f38e 	.word	0x2000f38e

08014624 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014626:	b08b      	sub	sp, #44	; 0x2c
 8014628:	4617      	mov	r7, r2
 801462a:	4604      	mov	r4, r0
 801462c:	460e      	mov	r6, r1
 801462e:	461d      	mov	r5, r3
 8014630:	f7fb fefa 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 8014634:	6803      	ldr	r3, [r0, #0]
 8014636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014638:	4798      	blx	r3
 801463a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801463e:	9007      	str	r0, [sp, #28]
 8014640:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014644:	4b0d      	ldr	r3, [pc, #52]	; (801467c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014646:	6822      	ldr	r2, [r4, #0]
 8014648:	881b      	ldrh	r3, [r3, #0]
 801464a:	4631      	mov	r1, r6
 801464c:	9306      	str	r3, [sp, #24]
 801464e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014652:	4620      	mov	r0, r4
 8014654:	9305      	str	r3, [sp, #20]
 8014656:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801465a:	9304      	str	r3, [sp, #16]
 801465c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014660:	9303      	str	r3, [sp, #12]
 8014662:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014666:	9302      	str	r3, [sp, #8]
 8014668:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801466c:	e9cd 5300 	strd	r5, r3, [sp]
 8014670:	463b      	mov	r3, r7
 8014672:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8014674:	2200      	movs	r2, #0
 8014676:	47a8      	blx	r5
 8014678:	b00b      	add	sp, #44	; 0x2c
 801467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801467c:	2000f38e 	.word	0x2000f38e

08014680 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014684:	4698      	mov	r8, r3
 8014686:	6803      	ldr	r3, [r0, #0]
 8014688:	b08b      	sub	sp, #44	; 0x2c
 801468a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801468c:	4b14      	ldr	r3, [pc, #80]	; (80146e0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801468e:	4617      	mov	r7, r2
 8014690:	f8b3 9000 	ldrh.w	r9, [r3]
 8014694:	460e      	mov	r6, r1
 8014696:	4604      	mov	r4, r0
 8014698:	f7fb fec6 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 801469c:	6803      	ldr	r3, [r0, #0]
 801469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a0:	4798      	blx	r3
 80146a2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80146a6:	2200      	movs	r2, #0
 80146a8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80146ac:	2302      	movs	r3, #2
 80146ae:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80146b2:	2301      	movs	r3, #1
 80146b4:	9305      	str	r3, [sp, #20]
 80146b6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80146ba:	4631      	mov	r1, r6
 80146bc:	9304      	str	r3, [sp, #16]
 80146be:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80146c2:	4620      	mov	r0, r4
 80146c4:	9303      	str	r3, [sp, #12]
 80146c6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80146ca:	9302      	str	r3, [sp, #8]
 80146cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80146d0:	e9cd 8300 	strd	r8, r3, [sp]
 80146d4:	463b      	mov	r3, r7
 80146d6:	47a8      	blx	r5
 80146d8:	b00b      	add	sp, #44	; 0x2c
 80146da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146de:	bf00      	nop
 80146e0:	2000f38e 	.word	0x2000f38e

080146e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80146e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146e8:	4698      	mov	r8, r3
 80146ea:	6803      	ldr	r3, [r0, #0]
 80146ec:	b087      	sub	sp, #28
 80146ee:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80146f0:	4b10      	ldr	r3, [pc, #64]	; (8014734 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80146f2:	460e      	mov	r6, r1
 80146f4:	f8b3 9000 	ldrh.w	r9, [r3]
 80146f8:	4617      	mov	r7, r2
 80146fa:	4604      	mov	r4, r0
 80146fc:	f7fb fe94 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 8014700:	6803      	ldr	r3, [r0, #0]
 8014702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014704:	4798      	blx	r3
 8014706:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801470a:	f8cd 900c 	str.w	r9, [sp, #12]
 801470e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014712:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014716:	463a      	mov	r2, r7
 8014718:	9302      	str	r3, [sp, #8]
 801471a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801471e:	4631      	mov	r1, r6
 8014720:	9301      	str	r3, [sp, #4]
 8014722:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014726:	4620      	mov	r0, r4
 8014728:	9300      	str	r3, [sp, #0]
 801472a:	4643      	mov	r3, r8
 801472c:	47a8      	blx	r5
 801472e:	b007      	add	sp, #28
 8014730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014734:	2000f38e 	.word	0x2000f38e

08014738 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801473c:	4604      	mov	r4, r0
 801473e:	b08f      	sub	sp, #60	; 0x3c
 8014740:	4610      	mov	r0, r2
 8014742:	460d      	mov	r5, r1
 8014744:	4691      	mov	r9, r2
 8014746:	461e      	mov	r6, r3
 8014748:	f004 ff12 	bl	8019570 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801474c:	2800      	cmp	r0, #0
 801474e:	f000 809d 	beq.w	801488c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014752:	6823      	ldr	r3, [r4, #0]
 8014754:	4620      	mov	r0, r4
 8014756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014758:	4798      	blx	r3
 801475a:	6823      	ldr	r3, [r4, #0]
 801475c:	f8df b190 	ldr.w	fp, [pc, #400]	; 80148f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014762:	4620      	mov	r0, r4
 8014764:	4798      	blx	r3
 8014766:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80148f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801476a:	f8bb 3000 	ldrh.w	r3, [fp]
 801476e:	4f5d      	ldr	r7, [pc, #372]	; (80148e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014770:	9301      	str	r3, [sp, #4]
 8014772:	f8ba 3000 	ldrh.w	r3, [sl]
 8014776:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801477a:	9302      	str	r3, [sp, #8]
 801477c:	883b      	ldrh	r3, [r7, #0]
 801477e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014782:	9303      	str	r3, [sp, #12]
 8014784:	4b58      	ldr	r3, [pc, #352]	; (80148e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014786:	4640      	mov	r0, r8
 8014788:	881a      	ldrh	r2, [r3, #0]
 801478a:	9305      	str	r3, [sp, #20]
 801478c:	9204      	str	r2, [sp, #16]
 801478e:	f004 ff83 	bl	8019698 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014792:	8038      	strh	r0, [r7, #0]
 8014794:	4640      	mov	r0, r8
 8014796:	f004 ffb3 	bl	8019700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801479a:	9b05      	ldr	r3, [sp, #20]
 801479c:	b280      	uxth	r0, r0
 801479e:	8018      	strh	r0, [r3, #0]
 80147a0:	4b52      	ldr	r3, [pc, #328]	; (80148ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d174      	bne.n	8014892 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80147a8:	883b      	ldrh	r3, [r7, #0]
 80147aa:	f8aa 0000 	strh.w	r0, [sl]
 80147ae:	f8ab 3000 	strh.w	r3, [fp]
 80147b2:	4648      	mov	r0, r9
 80147b4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80147b8:	f004 feda 	bl	8019570 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80147bc:	2200      	movs	r2, #0
 80147be:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80147c2:	4611      	mov	r1, r2
 80147c4:	4628      	mov	r0, r5
 80147c6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80147ca:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80147ce:	f7fc fb8a 	bl	8010ee6 <_ZN8touchgfx8Drawable5setXYEss>
 80147d2:	2301      	movs	r3, #1
 80147d4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80147d8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80147dc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	dd5c      	ble.n	801489e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80147e4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	dd58      	ble.n	801489e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80147ec:	462a      	mov	r2, r5
 80147ee:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80147f2:	ab0a      	add	r3, sp, #40	; 0x28
 80147f4:	6851      	ldr	r1, [r2, #4]
 80147f6:	c303      	stmia	r3!, {r0, r1}
 80147f8:	4631      	mov	r1, r6
 80147fa:	a80a      	add	r0, sp, #40	; 0x28
 80147fc:	f7ff fbf8 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 8014800:	2100      	movs	r1, #0
 8014802:	4b38      	ldr	r3, [pc, #224]	; (80148e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014804:	910c      	str	r1, [sp, #48]	; 0x30
 8014806:	f9b3 2000 	ldrsh.w	r2, [r3]
 801480a:	4b37      	ldr	r3, [pc, #220]	; (80148e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801480c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014814:	aa0a      	add	r2, sp, #40	; 0x28
 8014816:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801481a:	ab08      	add	r3, sp, #32
 801481c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014820:	e883 0003 	stmia.w	r3, {r0, r1}
 8014824:	4618      	mov	r0, r3
 8014826:	a90c      	add	r1, sp, #48	; 0x30
 8014828:	f7ff fbe2 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 801482c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801482e:	2b00      	cmp	r3, #0
 8014830:	d13c      	bne.n	80148ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014832:	2000      	movs	r0, #0
 8014834:	2600      	movs	r6, #0
 8014836:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 801483a:	696b      	ldr	r3, [r5, #20]
 801483c:	682a      	ldr	r2, [r5, #0]
 801483e:	616e      	str	r6, [r5, #20]
 8014840:	9305      	str	r3, [sp, #20]
 8014842:	6892      	ldr	r2, [r2, #8]
 8014844:	a908      	add	r1, sp, #32
 8014846:	4628      	mov	r0, r5
 8014848:	4790      	blx	r2
 801484a:	9b05      	ldr	r3, [sp, #20]
 801484c:	4652      	mov	r2, sl
 801484e:	616b      	str	r3, [r5, #20]
 8014850:	4649      	mov	r1, r9
 8014852:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8014856:	4628      	mov	r0, r5
 8014858:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801485c:	f7fc fb43 	bl	8010ee6 <_ZN8touchgfx8Drawable5setXYEss>
 8014860:	9a01      	ldr	r2, [sp, #4]
 8014862:	4b23      	ldr	r3, [pc, #140]	; (80148f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014864:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014868:	801a      	strh	r2, [r3, #0]
 801486a:	9a02      	ldr	r2, [sp, #8]
 801486c:	4b21      	ldr	r3, [pc, #132]	; (80148f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801486e:	4620      	mov	r0, r4
 8014870:	801a      	strh	r2, [r3, #0]
 8014872:	9a03      	ldr	r2, [sp, #12]
 8014874:	4b1b      	ldr	r3, [pc, #108]	; (80148e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014876:	801a      	strh	r2, [r3, #0]
 8014878:	4b1b      	ldr	r3, [pc, #108]	; (80148e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801487a:	9a04      	ldr	r2, [sp, #16]
 801487c:	801a      	strh	r2, [r3, #0]
 801487e:	6823      	ldr	r3, [r4, #0]
 8014880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014882:	4798      	blx	r3
 8014884:	6823      	ldr	r3, [r4, #0]
 8014886:	4620      	mov	r0, r4
 8014888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801488a:	4798      	blx	r3
 801488c:	b00f      	add	sp, #60	; 0x3c
 801488e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014892:	883b      	ldrh	r3, [r7, #0]
 8014894:	f8ab 0000 	strh.w	r0, [fp]
 8014898:	f8aa 3000 	strh.w	r3, [sl]
 801489c:	e789      	b.n	80147b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801489e:	462a      	mov	r2, r5
 80148a0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80148a4:	ab0a      	add	r3, sp, #40	; 0x28
 80148a6:	6851      	ldr	r1, [r2, #4]
 80148a8:	c303      	stmia	r3!, {r0, r1}
 80148aa:	e7a9      	b.n	8014800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80148ac:	a807      	add	r0, sp, #28
 80148ae:	f005 f863 	bl	8019978 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80148b2:	4606      	mov	r6, r0
 80148b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80148b6:	6803      	ldr	r3, [r0, #0]
 80148b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ba:	4798      	blx	r3
 80148bc:	4286      	cmp	r6, r0
 80148be:	d1b8      	bne.n	8014832 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80148c0:	f7fb fdb2 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 80148c4:	6803      	ldr	r3, [r0, #0]
 80148c6:	4606      	mov	r6, r0
 80148c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148ca:	a807      	add	r0, sp, #28
 80148cc:	9305      	str	r3, [sp, #20]
 80148ce:	f005 f853 	bl	8019978 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80148d2:	9b05      	ldr	r3, [sp, #20]
 80148d4:	4601      	mov	r1, r0
 80148d6:	4630      	mov	r0, r6
 80148d8:	4798      	blx	r3
 80148da:	f080 0001 	eor.w	r0, r0, #1
 80148de:	b2c0      	uxtb	r0, r0
 80148e0:	e7a8      	b.n	8014834 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80148e2:	bf00      	nop
 80148e4:	2000f388 	.word	0x2000f388
 80148e8:	2000f38a 	.word	0x2000f38a
 80148ec:	2000f38c 	.word	0x2000f38c
 80148f0:	2000f38e 	.word	0x2000f38e
 80148f4:	2000f390 	.word	0x2000f390

080148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80148f8:	b510      	push	{r4, lr}
 80148fa:	4b07      	ldr	r3, [pc, #28]	; (8014918 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80148fc:	4604      	mov	r4, r0
 80148fe:	781b      	ldrb	r3, [r3, #0]
 8014900:	b13b      	cbz	r3, 8014912 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014902:	6803      	ldr	r3, [r0, #0]
 8014904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014906:	4798      	blx	r3
 8014908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801490a:	4283      	cmp	r3, r0
 801490c:	d101      	bne.n	8014912 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801490e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8014910:	bd10      	pop	{r4, pc}
 8014912:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014914:	e7fc      	b.n	8014910 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014916:	bf00      	nop
 8014918:	2000f392 	.word	0x2000f392

0801491c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014920:	461d      	mov	r5, r3
 8014922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014926:	2400      	movs	r4, #0
 8014928:	b08a      	sub	sp, #40	; 0x28
 801492a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801492e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014932:	4690      	mov	r8, r2
 8014934:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014938:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801493c:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8014940:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014944:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014948:	4607      	mov	r7, r0
 801494a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801494e:	9404      	str	r4, [sp, #16]
 8014950:	f88d 4020 	strb.w	r4, [sp, #32]
 8014954:	f7ff ffd0 	bl	80148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014958:	fb06 8505 	mla	r5, r6, r5, r8
 801495c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	9505      	str	r5, [sp, #20]
 8014964:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014968:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801496c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8014970:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014974:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014978:	6803      	ldr	r3, [r0, #0]
 801497a:	a901      	add	r1, sp, #4
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	4798      	blx	r3
 8014980:	b00a      	add	sp, #40	; 0x28
 8014982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014986 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801498a:	2400      	movs	r4, #0
 801498c:	461d      	mov	r5, r3
 801498e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014992:	4691      	mov	r9, r2
 8014994:	b08b      	sub	sp, #44	; 0x2c
 8014996:	4688      	mov	r8, r1
 8014998:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801499c:	4607      	mov	r7, r0
 801499e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149a2:	9404      	str	r4, [sp, #16]
 80149a4:	f7ff ffa8 	bl	80148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80149a8:	fb06 9505 	mla	r5, r6, r5, r9
 80149ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80149b0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80149b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80149b8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	9505      	str	r5, [sp, #20]
 80149c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80149c4:	f8ad 401c 	strh.w	r4, [sp, #28]
 80149c8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80149cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80149d0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80149d4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80149d8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80149dc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80149e0:	6803      	ldr	r3, [r0, #0]
 80149e2:	a901      	add	r1, sp, #4
 80149e4:	685b      	ldr	r3, [r3, #4]
 80149e6:	4798      	blx	r3
 80149e8:	b00b      	add	sp, #44	; 0x2c
 80149ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080149f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80149f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f4:	4698      	mov	r8, r3
 80149f6:	2300      	movs	r3, #0
 80149f8:	b08a      	sub	sp, #40	; 0x28
 80149fa:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80149fe:	4606      	mov	r6, r0
 8014a00:	2d0b      	cmp	r5, #11
 8014a02:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8014a06:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8014a0a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8014a0e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8014a12:	9304      	str	r3, [sp, #16]
 8014a14:	d137      	bne.n	8014a86 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8014a16:	2380      	movs	r3, #128	; 0x80
 8014a18:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014a1c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014a20:	f88d 0020 	strb.w	r0, [sp, #32]
 8014a24:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014a2c:	4630      	mov	r0, r6
 8014a2e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014a32:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014a36:	9203      	str	r2, [sp, #12]
 8014a38:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a3c:	f7ff ff5c 	bl	80148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014a40:	2c0b      	cmp	r4, #11
 8014a42:	bf8c      	ite	hi
 8014a44:	2100      	movhi	r1, #0
 8014a46:	4b1b      	ldrls	r3, [pc, #108]	; (8014ab4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014a48:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014a4c:	bf98      	it	ls
 8014a4e:	5d19      	ldrbls	r1, [r3, r4]
 8014a50:	fb02 8307 	mla	r3, r2, r7, r8
 8014a54:	10c9      	asrs	r1, r1, #3
 8014a56:	fb01 0003 	mla	r0, r1, r3, r0
 8014a5a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014a5e:	9005      	str	r0, [sp, #20]
 8014a60:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014a64:	2300      	movs	r3, #0
 8014a66:	6870      	ldr	r0, [r6, #4]
 8014a68:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014a6c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014a70:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014a74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014a78:	6803      	ldr	r3, [r0, #0]
 8014a7a:	a901      	add	r1, sp, #4
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	4798      	blx	r3
 8014a80:	b00a      	add	sp, #40	; 0x28
 8014a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a86:	2d02      	cmp	r5, #2
 8014a88:	d109      	bne.n	8014a9e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8014a8a:	28ff      	cmp	r0, #255	; 0xff
 8014a8c:	d105      	bne.n	8014a9a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014a8e:	f1bc 0f00 	cmp.w	ip, #0
 8014a92:	bf14      	ite	ne
 8014a94:	2340      	movne	r3, #64	; 0x40
 8014a96:	2320      	moveq	r3, #32
 8014a98:	e7be      	b.n	8014a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014a9a:	2340      	movs	r3, #64	; 0x40
 8014a9c:	e7bc      	b.n	8014a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014a9e:	28ff      	cmp	r0, #255	; 0xff
 8014aa0:	d105      	bne.n	8014aae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014aa2:	f1bc 0f00 	cmp.w	ip, #0
 8014aa6:	bf14      	ite	ne
 8014aa8:	2304      	movne	r3, #4
 8014aaa:	2301      	moveq	r3, #1
 8014aac:	e7b4      	b.n	8014a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014aae:	2304      	movs	r3, #4
 8014ab0:	e7b2      	b.n	8014a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014ab2:	bf00      	nop
 8014ab4:	08029bb4 	.word	0x08029bb4

08014ab8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014abc:	b08b      	sub	sp, #44	; 0x2c
 8014abe:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8014ac2:	461d      	mov	r5, r3
 8014ac4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014ac8:	bf14      	ite	ne
 8014aca:	2308      	movne	r3, #8
 8014acc:	2302      	moveq	r3, #2
 8014ace:	2400      	movs	r4, #0
 8014ad0:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8014ad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ad8:	4688      	mov	r8, r1
 8014ada:	4693      	mov	fp, r2
 8014adc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8014ae0:	9404      	str	r4, [sp, #16]
 8014ae2:	4607      	mov	r7, r0
 8014ae4:	f7ff ff08 	bl	80148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ae8:	2e0b      	cmp	r6, #11
 8014aea:	bf98      	it	ls
 8014aec:	4b15      	ldrls	r3, [pc, #84]	; (8014b44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014aee:	fb05 b50a 	mla	r5, r5, sl, fp
 8014af2:	bf98      	it	ls
 8014af4:	5d9c      	ldrbls	r4, [r3, r6]
 8014af6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014afa:	10e4      	asrs	r4, r4, #3
 8014afc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014b00:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014b04:	fb04 0405 	mla	r4, r4, r5, r0
 8014b08:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	9405      	str	r4, [sp, #20]
 8014b16:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014b1a:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014b1e:	f8cd 8010 	str.w	r8, [sp, #16]
 8014b22:	f88d 9020 	strb.w	r9, [sp, #32]
 8014b26:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8014b2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014b2e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8014b32:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8014b36:	6803      	ldr	r3, [r0, #0]
 8014b38:	a901      	add	r1, sp, #4
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	4798      	blx	r3
 8014b3e:	b00b      	add	sp, #44	; 0x2c
 8014b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b44:	08029bb4 	.word	0x08029bb4

08014b48 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b4c:	461e      	mov	r6, r3
 8014b4e:	4b0a      	ldr	r3, [pc, #40]	; (8014b78 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014b50:	460f      	mov	r7, r1
 8014b52:	881d      	ldrh	r5, [r3, #0]
 8014b54:	4690      	mov	r8, r2
 8014b56:	f7fb fc67 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 8014b5a:	6803      	ldr	r3, [r0, #0]
 8014b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b5e:	4798      	blx	r3
 8014b60:	280b      	cmp	r0, #11
 8014b62:	bf8e      	itee	hi
 8014b64:	2400      	movhi	r4, #0
 8014b66:	4b05      	ldrls	r3, [pc, #20]	; (8014b7c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014b68:	5c1c      	ldrbls	r4, [r3, r0]
 8014b6a:	fb08 7005 	mla	r0, r8, r5, r7
 8014b6e:	10e4      	asrs	r4, r4, #3
 8014b70:	fb04 6000 	mla	r0, r4, r0, r6
 8014b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b78:	2000f38e 	.word	0x2000f38e
 8014b7c:	08029bb4 	.word	0x08029bb4

08014b80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b82:	2500      	movs	r5, #0
 8014b84:	b08b      	sub	sp, #44	; 0x2c
 8014b86:	461f      	mov	r7, r3
 8014b88:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014b8c:	4604      	mov	r4, r0
 8014b8e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014b92:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014b96:	4616      	mov	r6, r2
 8014b98:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014b9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014ba0:	9504      	str	r5, [sp, #16]
 8014ba2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014ba6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014baa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014bae:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014bb2:	f88d 3020 	strb.w	r3, [sp, #32]
 8014bb6:	f7ff fe9f 	bl	80148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014bba:	463a      	mov	r2, r7
 8014bbc:	4631      	mov	r1, r6
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	f7ff ffc1 	bl	8014b48 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014bc6:	4b0e      	ldr	r3, [pc, #56]	; (8014c00 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8014bc8:	9005      	str	r0, [sp, #20]
 8014bca:	881b      	ldrh	r3, [r3, #0]
 8014bcc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014bd0:	f7fb fc2a 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 8014bd4:	6803      	ldr	r3, [r0, #0]
 8014bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bd8:	4798      	blx	r3
 8014bda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014bdc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8014be0:	9304      	str	r3, [sp, #16]
 8014be2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014be6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014bea:	6860      	ldr	r0, [r4, #4]
 8014bec:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014bf0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8014bf4:	6803      	ldr	r3, [r0, #0]
 8014bf6:	a901      	add	r1, sp, #4
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	4798      	blx	r3
 8014bfc:	b00b      	add	sp, #44	; 0x2c
 8014bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c00:	2000f38e 	.word	0x2000f38e

08014c04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c06:	b08d      	sub	sp, #52	; 0x34
 8014c08:	466b      	mov	r3, sp
 8014c0a:	e883 0006 	stmia.w	r3, {r1, r2}
 8014c0e:	2300      	movs	r3, #0
 8014c10:	2501      	movs	r5, #1
 8014c12:	9306      	str	r3, [sp, #24]
 8014c14:	6803      	ldr	r3, [r0, #0]
 8014c16:	9503      	str	r5, [sp, #12]
 8014c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	f8bd 6000 	ldrh.w	r6, [sp]
 8014c20:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014c24:	4798      	blx	r3
 8014c26:	463a      	mov	r2, r7
 8014c28:	4631      	mov	r1, r6
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	f7ff ff8b 	bl	8014b48 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014c32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014c34:	9004      	str	r0, [sp, #16]
 8014c36:	9307      	str	r3, [sp, #28]
 8014c38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014c3c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014c40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014c44:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014c48:	4b0e      	ldr	r3, [pc, #56]	; (8014c84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8014c4a:	881b      	ldrh	r3, [r3, #0]
 8014c4c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014c50:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014c54:	f7fb fbe8 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 8014c58:	6803      	ldr	r3, [r0, #0]
 8014c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c5c:	4798      	blx	r3
 8014c5e:	23ff      	movs	r3, #255	; 0xff
 8014c60:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014c64:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014c68:	6860      	ldr	r0, [r4, #4]
 8014c6a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014c6e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014c72:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014c76:	6803      	ldr	r3, [r0, #0]
 8014c78:	a903      	add	r1, sp, #12
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	4798      	blx	r3
 8014c7e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014c80:	b00d      	add	sp, #52	; 0x34
 8014c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c84:	2000f38e 	.word	0x2000f38e

08014c88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c8c:	b08c      	sub	sp, #48	; 0x30
 8014c8e:	466d      	mov	r5, sp
 8014c90:	461e      	mov	r6, r3
 8014c92:	2300      	movs	r3, #0
 8014c94:	e885 0006 	stmia.w	r5, {r1, r2}
 8014c98:	2501      	movs	r5, #1
 8014c9a:	9306      	str	r3, [sp, #24]
 8014c9c:	6803      	ldr	r3, [r0, #0]
 8014c9e:	9503      	str	r5, [sp, #12]
 8014ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ca2:	4604      	mov	r4, r0
 8014ca4:	f8bd 7000 	ldrh.w	r7, [sp]
 8014ca8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014cac:	4798      	blx	r3
 8014cae:	4642      	mov	r2, r8
 8014cb0:	4639      	mov	r1, r7
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	f7ff ff47 	bl	8014b48 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014cba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014cbe:	9004      	str	r0, [sp, #16]
 8014cc0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014cc4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014cc8:	9607      	str	r6, [sp, #28]
 8014cca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014cce:	4b10      	ldr	r3, [pc, #64]	; (8014d10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8014cd0:	881b      	ldrh	r3, [r3, #0]
 8014cd2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014cd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cd8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014cdc:	f7fb fba4 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 8014ce0:	6803      	ldr	r3, [r0, #0]
 8014ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ce4:	4798      	blx	r3
 8014ce6:	23ff      	movs	r3, #255	; 0xff
 8014ce8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014cec:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014cf0:	6860      	ldr	r0, [r4, #4]
 8014cf2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014cf6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014cfa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014cfe:	6803      	ldr	r3, [r0, #0]
 8014d00:	a903      	add	r1, sp, #12
 8014d02:	685b      	ldr	r3, [r3, #4]
 8014d04:	4798      	blx	r3
 8014d06:	4630      	mov	r0, r6
 8014d08:	b00c      	add	sp, #48	; 0x30
 8014d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d0e:	bf00      	nop
 8014d10:	2000f38e 	.word	0x2000f38e

08014d14 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8014d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d16:	b085      	sub	sp, #20
 8014d18:	ac02      	add	r4, sp, #8
 8014d1a:	e884 0006 	stmia.w	r4, {r1, r2}
 8014d1e:	4605      	mov	r5, r0
 8014d20:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014d24:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8014d28:	f7ff fde6 	bl	80148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014d2c:	463a      	mov	r2, r7
 8014d2e:	4603      	mov	r3, r0
 8014d30:	4631      	mov	r1, r6
 8014d32:	4628      	mov	r0, r5
 8014d34:	f7ff ff08 	bl	8014b48 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014d38:	4a05      	ldr	r2, [pc, #20]	; (8014d50 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8014d3a:	682b      	ldr	r3, [r5, #0]
 8014d3c:	8812      	ldrh	r2, [r2, #0]
 8014d3e:	9200      	str	r2, [sp, #0]
 8014d40:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8014d42:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014d46:	4603      	mov	r3, r0
 8014d48:	4628      	mov	r0, r5
 8014d4a:	47b0      	blx	r6
 8014d4c:	b005      	add	sp, #20
 8014d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d50:	2000f38e 	.word	0x2000f38e

08014d54 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014d54:	b570      	push	{r4, r5, r6, lr}
 8014d56:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	b19b      	cbz	r3, 8014d86 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014d5e:	2002      	movs	r0, #2
 8014d60:	f7fd fa46 	bl	80121f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014d64:	2300      	movs	r3, #0
 8014d66:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8014d6a:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8014d6e:	6823      	ldr	r3, [r4, #0]
 8014d70:	4620      	mov	r0, r4
 8014d72:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8014d76:	f7ff fdbf 	bl	80148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014d7a:	462b      	mov	r3, r5
 8014d7c:	4601      	mov	r1, r0
 8014d7e:	4620      	mov	r0, r4
 8014d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d84:	4718      	bx	r3
 8014d86:	bd70      	pop	{r4, r5, r6, pc}

08014d88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014d88:	b538      	push	{r3, r4, r5, lr}
 8014d8a:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8014d8e:	4604      	mov	r4, r0
 8014d90:	428b      	cmp	r3, r1
 8014d92:	460d      	mov	r5, r1
 8014d94:	d006      	beq.n	8014da4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8014d96:	6803      	ldr	r3, [r0, #0]
 8014d98:	b929      	cbnz	r1, 8014da6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8014d9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014d9e:	4798      	blx	r3
 8014da0:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8014da4:	bd38      	pop	{r3, r4, r5, pc}
 8014da6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014daa:	e7f8      	b.n	8014d9e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014dac <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014dac:	b510      	push	{r4, lr}
 8014dae:	4b0d      	ldr	r3, [pc, #52]	; (8014de4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014db0:	4604      	mov	r4, r0
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	b95b      	cbnz	r3, 8014dce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014db6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014dba:	2b02      	cmp	r3, #2
 8014dbc:	d007      	beq.n	8014dce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014dbe:	6840      	ldr	r0, [r0, #4]
 8014dc0:	f000 f90e 	bl	8014fe0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014dc4:	b118      	cbz	r0, 8014dce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014dc6:	6862      	ldr	r2, [r4, #4]
 8014dc8:	7a53      	ldrb	r3, [r2, #9]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d0fc      	beq.n	8014dc8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014dce:	f7fd fcbb 	bl	8012748 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	2100      	movs	r1, #0
 8014dd6:	f7ff ffd7 	bl	8014d88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f7ff fd8c 	bl	80148f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014de0:	bd10      	pop	{r4, pc}
 8014de2:	bf00      	nop
 8014de4:	2000f392 	.word	0x2000f392

08014de8 <_ZN8touchgfx13DMA_Interface5flushEv>:
 8014de8:	6803      	ldr	r3, [r0, #0]
 8014dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dec:	4718      	bx	r3

08014dee <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014dee:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014df2:	1a13      	subs	r3, r2, r0
 8014df4:	4258      	negs	r0, r3
 8014df6:	4158      	adcs	r0, r3
 8014df8:	4770      	bx	lr

08014dfa <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014dfa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014dfe:	1a9b      	subs	r3, r3, r2
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	bfdc      	itt	le
 8014e04:	6882      	ldrle	r2, [r0, #8]
 8014e06:	189b      	addle	r3, r3, r2
 8014e08:	2b01      	cmp	r3, #1
 8014e0a:	bfcc      	ite	gt
 8014e0c:	2000      	movgt	r0, #0
 8014e0e:	2001      	movle	r0, #1
 8014e10:	4770      	bx	lr

08014e12 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014e12:	6902      	ldr	r2, [r0, #16]
 8014e14:	6843      	ldr	r3, [r0, #4]
 8014e16:	2024      	movs	r0, #36	; 0x24
 8014e18:	fb00 3002 	mla	r0, r0, r2, r3
 8014e1c:	4770      	bx	lr

08014e1e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8014e1e:	6803      	ldr	r3, [r0, #0]
 8014e20:	691b      	ldr	r3, [r3, #16]
 8014e22:	4718      	bx	r3

08014e24 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014e24:	2301      	movs	r3, #1
 8014e26:	b570      	push	{r4, r5, r6, lr}
 8014e28:	7203      	strb	r3, [r0, #8]
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	6840      	ldr	r0, [r0, #4]
 8014e2e:	6803      	ldr	r3, [r0, #0]
 8014e30:	699b      	ldr	r3, [r3, #24]
 8014e32:	4798      	blx	r3
 8014e34:	6803      	ldr	r3, [r0, #0]
 8014e36:	4605      	mov	r5, r0
 8014e38:	2b40      	cmp	r3, #64	; 0x40
 8014e3a:	d00c      	beq.n	8014e56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e3c:	d810      	bhi.n	8014e60 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014e3e:	2b04      	cmp	r3, #4
 8014e40:	d01d      	beq.n	8014e7e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014e42:	d804      	bhi.n	8014e4e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d006      	beq.n	8014e56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e48:	2b02      	cmp	r3, #2
 8014e4a:	d02c      	beq.n	8014ea6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014e4c:	bd70      	pop	{r4, r5, r6, pc}
 8014e4e:	2b08      	cmp	r3, #8
 8014e50:	d01d      	beq.n	8014e8e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014e52:	2b20      	cmp	r3, #32
 8014e54:	d1fa      	bne.n	8014e4c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8014e56:	6823      	ldr	r3, [r4, #0]
 8014e58:	4620      	mov	r0, r4
 8014e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e5c:	4798      	blx	r3
 8014e5e:	e013      	b.n	8014e88 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e64:	d0f7      	beq.n	8014e56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e66:	d804      	bhi.n	8014e72 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014e68:	2b80      	cmp	r3, #128	; 0x80
 8014e6a:	d0f4      	beq.n	8014e56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e70:	e7f0      	b.n	8014e54 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e76:	d0ee      	beq.n	8014e56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014e7c:	e7e5      	b.n	8014e4a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014e7e:	6823      	ldr	r3, [r4, #0]
 8014e80:	7f01      	ldrb	r1, [r0, #28]
 8014e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e84:	4620      	mov	r0, r4
 8014e86:	4798      	blx	r3
 8014e88:	6823      	ldr	r3, [r4, #0]
 8014e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e8c:	e006      	b.n	8014e9c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014e8e:	6823      	ldr	r3, [r4, #0]
 8014e90:	7f01      	ldrb	r1, [r0, #28]
 8014e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e94:	4620      	mov	r0, r4
 8014e96:	4798      	blx	r3
 8014e98:	6823      	ldr	r3, [r4, #0]
 8014e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e9c:	4629      	mov	r1, r5
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ea4:	4718      	bx	r3
 8014ea6:	6823      	ldr	r3, [r4, #0]
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014eac:	4798      	blx	r3
 8014eae:	e7f3      	b.n	8014e98 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014eb0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014eb0:	4770      	bx	lr

08014eb2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014eb2:	4770      	bx	lr

08014eb4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014eb4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014eb8:	1ad2      	subs	r2, r2, r3
 8014eba:	2a00      	cmp	r2, #0
 8014ebc:	b510      	push	{r4, lr}
 8014ebe:	bfdc      	itt	le
 8014ec0:	6884      	ldrle	r4, [r0, #8]
 8014ec2:	1912      	addle	r2, r2, r4
 8014ec4:	2a01      	cmp	r2, #1
 8014ec6:	dd16      	ble.n	8014ef6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8014ec8:	2424      	movs	r4, #36	; 0x24
 8014eca:	6842      	ldr	r2, [r0, #4]
 8014ecc:	fb04 2303 	mla	r3, r4, r3, r2
 8014ed0:	f101 0220 	add.w	r2, r1, #32
 8014ed4:	f851 4b04 	ldr.w	r4, [r1], #4
 8014ed8:	4291      	cmp	r1, r2
 8014eda:	f843 4b04 	str.w	r4, [r3], #4
 8014ede:	d1f9      	bne.n	8014ed4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014ee0:	780a      	ldrb	r2, [r1, #0]
 8014ee2:	701a      	strb	r2, [r3, #0]
 8014ee4:	68c3      	ldr	r3, [r0, #12]
 8014ee6:	6882      	ldr	r2, [r0, #8]
 8014ee8:	3301      	adds	r3, #1
 8014eea:	429a      	cmp	r2, r3
 8014eec:	bfd8      	it	le
 8014eee:	1a9b      	suble	r3, r3, r2
 8014ef0:	f3bf 8f5b 	dmb	ish
 8014ef4:	60c3      	str	r3, [r0, #12]
 8014ef6:	bd10      	pop	{r4, pc}

08014ef8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014ef8:	6903      	ldr	r3, [r0, #16]
 8014efa:	6882      	ldr	r2, [r0, #8]
 8014efc:	3301      	adds	r3, #1
 8014efe:	429a      	cmp	r2, r3
 8014f00:	bfd8      	it	le
 8014f02:	1a9b      	suble	r3, r3, r2
 8014f04:	f3bf 8f5b 	dmb	ish
 8014f08:	6103      	str	r3, [r0, #16]
 8014f0a:	4770      	bx	lr

08014f0c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014f0c:	b570      	push	{r4, r5, r6, lr}
 8014f0e:	4604      	mov	r4, r0
 8014f10:	460e      	mov	r6, r1
 8014f12:	6860      	ldr	r0, [r4, #4]
 8014f14:	6803      	ldr	r3, [r0, #0]
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	4798      	blx	r3
 8014f1a:	2800      	cmp	r0, #0
 8014f1c:	d1f9      	bne.n	8014f12 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014f1e:	4d0d      	ldr	r5, [pc, #52]	; (8014f54 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014f20:	6828      	ldr	r0, [r5, #0]
 8014f22:	6803      	ldr	r3, [r0, #0]
 8014f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f26:	4798      	blx	r3
 8014f28:	f7fd fc28 	bl	801277c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014f2c:	6828      	ldr	r0, [r5, #0]
 8014f2e:	2101      	movs	r1, #1
 8014f30:	f7ff ff2a 	bl	8014d88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014f34:	6860      	ldr	r0, [r4, #4]
 8014f36:	4631      	mov	r1, r6
 8014f38:	6803      	ldr	r3, [r0, #0]
 8014f3a:	689b      	ldr	r3, [r3, #8]
 8014f3c:	4798      	blx	r3
 8014f3e:	6823      	ldr	r3, [r4, #0]
 8014f40:	4620      	mov	r0, r4
 8014f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f44:	4798      	blx	r3
 8014f46:	6828      	ldr	r0, [r5, #0]
 8014f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f4c:	6803      	ldr	r3, [r0, #0]
 8014f4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f50:	4718      	bx	r3
 8014f52:	bf00      	nop
 8014f54:	2000f394 	.word	0x2000f394

08014f58 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014f58:	b508      	push	{r3, lr}
 8014f5a:	f7fd fbf5 	bl	8012748 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f62:	f7fd bbff 	b.w	8012764 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014f66 <_ZN8touchgfx13DMA_Interface5startEv>:
 8014f66:	b510      	push	{r4, lr}
 8014f68:	4604      	mov	r4, r0
 8014f6a:	6840      	ldr	r0, [r0, #4]
 8014f6c:	6803      	ldr	r3, [r0, #0]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	4798      	blx	r3
 8014f72:	b948      	cbnz	r0, 8014f88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014f74:	7a63      	ldrb	r3, [r4, #9]
 8014f76:	b13b      	cbz	r3, 8014f88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014f78:	7a23      	ldrb	r3, [r4, #8]
 8014f7a:	b92b      	cbnz	r3, 8014f88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014f7c:	6823      	ldr	r3, [r4, #0]
 8014f7e:	4620      	mov	r0, r4
 8014f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f86:	4718      	bx	r3
 8014f88:	bd10      	pop	{r4, pc}

08014f8a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014f8a:	b570      	push	{r4, r5, r6, lr}
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	6840      	ldr	r0, [r0, #4]
 8014f90:	6803      	ldr	r3, [r0, #0]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	4798      	blx	r3
 8014f96:	4605      	mov	r5, r0
 8014f98:	b930      	cbnz	r0, 8014fa8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014f9a:	7a23      	ldrb	r3, [r4, #8]
 8014f9c:	b123      	cbz	r3, 8014fa8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014f9e:	6860      	ldr	r0, [r4, #4]
 8014fa0:	6803      	ldr	r3, [r0, #0]
 8014fa2:	695b      	ldr	r3, [r3, #20]
 8014fa4:	4798      	blx	r3
 8014fa6:	7225      	strb	r5, [r4, #8]
 8014fa8:	6860      	ldr	r0, [r4, #4]
 8014faa:	6803      	ldr	r3, [r0, #0]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	4798      	blx	r3
 8014fb0:	b928      	cbnz	r0, 8014fbe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014fb2:	6823      	ldr	r3, [r4, #0]
 8014fb4:	4620      	mov	r0, r4
 8014fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fbc:	4718      	bx	r3
 8014fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fc2:	f7fd bbe7 	b.w	8012794 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08014fc8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014fc8:	6082      	str	r2, [r0, #8]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	b510      	push	{r4, lr}
 8014fce:	4c03      	ldr	r4, [pc, #12]	; (8014fdc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014fd0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014fd4:	e9c0 4100 	strd	r4, r1, [r0]
 8014fd8:	bd10      	pop	{r4, pc}
 8014fda:	bf00      	nop
 8014fdc:	08029cf0 	.word	0x08029cf0

08014fe0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014fe0:	6840      	ldr	r0, [r0, #4]
 8014fe2:	6803      	ldr	r3, [r0, #0]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	4718      	bx	r3

08014fe8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8014fe8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8014fec:	4770      	bx	lr

08014fee <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8014fee:	b510      	push	{r4, lr}
 8014ff0:	4604      	mov	r4, r0
 8014ff2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014ff4:	b150      	cbz	r0, 801500c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8014ff6:	6803      	ldr	r3, [r0, #0]
 8014ff8:	68db      	ldr	r3, [r3, #12]
 8014ffa:	4798      	blx	r3
 8014ffc:	b130      	cbz	r0, 801500c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8014ffe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015000:	4621      	mov	r1, r4
 8015002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015006:	6803      	ldr	r3, [r0, #0]
 8015008:	689b      	ldr	r3, [r3, #8]
 801500a:	4718      	bx	r3
 801500c:	bd10      	pop	{r4, pc}

0801500e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801500e:	790b      	ldrb	r3, [r1, #4]
 8015010:	b570      	push	{r4, r5, r6, lr}
 8015012:	2b00      	cmp	r3, #0
 8015014:	bf0c      	ite	eq
 8015016:	2301      	moveq	r3, #1
 8015018:	2300      	movne	r3, #0
 801501a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801501e:	4604      	mov	r4, r0
 8015020:	460e      	mov	r6, r1
 8015022:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8015026:	d109      	bne.n	801503c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8015028:	b14d      	cbz	r5, 801503e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801502a:	7933      	ldrb	r3, [r6, #4]
 801502c:	2b01      	cmp	r3, #1
 801502e:	d10c      	bne.n	801504a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8015030:	6823      	ldr	r3, [r4, #0]
 8015032:	4620      	mov	r0, r4
 8015034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801503a:	4718      	bx	r3
 801503c:	b12d      	cbz	r5, 801504a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801503e:	6823      	ldr	r3, [r4, #0]
 8015040:	4620      	mov	r0, r4
 8015042:	695b      	ldr	r3, [r3, #20]
 8015044:	4798      	blx	r3
 8015046:	2d00      	cmp	r5, #0
 8015048:	d1ef      	bne.n	801502a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801504a:	bd70      	pop	{r4, r5, r6, pc}

0801504c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801504c:	2300      	movs	r3, #0
 801504e:	8083      	strh	r3, [r0, #4]
 8015050:	80c3      	strh	r3, [r0, #6]
 8015052:	8003      	strh	r3, [r0, #0]
 8015054:	8043      	strh	r3, [r0, #2]
 8015056:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801505a:	2bff      	cmp	r3, #255	; 0xff
 801505c:	bf01      	itttt	eq
 801505e:	890b      	ldrheq	r3, [r1, #8]
 8015060:	8083      	strheq	r3, [r0, #4]
 8015062:	894b      	ldrheq	r3, [r1, #10]
 8015064:	80c3      	strheq	r3, [r0, #6]
 8015066:	4770      	bx	lr

08015068 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801506a:	4604      	mov	r4, r0
 801506c:	466b      	mov	r3, sp
 801506e:	6808      	ldr	r0, [r1, #0]
 8015070:	6849      	ldr	r1, [r1, #4]
 8015072:	c303      	stmia	r3!, {r0, r1}
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	4669      	mov	r1, sp
 8015078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801507a:	4620      	mov	r0, r4
 801507c:	4798      	blx	r3
 801507e:	4b08      	ldr	r3, [pc, #32]	; (80150a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8015086:	b10a      	cbz	r2, 801508c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015088:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801508a:	b900      	cbnz	r0, 801508e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801508c:	6898      	ldr	r0, [r3, #8]
 801508e:	6803      	ldr	r3, [r0, #0]
 8015090:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015092:	6a1d      	ldr	r5, [r3, #32]
 8015094:	4669      	mov	r1, sp
 8015096:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801509a:	47a8      	blx	r5
 801509c:	b003      	add	sp, #12
 801509e:	bd30      	pop	{r4, r5, pc}
 80150a0:	2000f394 	.word	0x2000f394

080150a4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80150a4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80150a8:	b12a      	cbz	r2, 80150b6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80150aa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80150ae:	b112      	cbz	r2, 80150b6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80150b0:	6803      	ldr	r3, [r0, #0]
 80150b2:	695b      	ldr	r3, [r3, #20]
 80150b4:	4718      	bx	r3
 80150b6:	4770      	bx	lr

080150b8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80150b8:	b570      	push	{r4, r5, r6, lr}
 80150ba:	4605      	mov	r5, r0
 80150bc:	880b      	ldrh	r3, [r1, #0]
 80150be:	4604      	mov	r4, r0
 80150c0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80150c2:	8813      	ldrh	r3, [r2, #0]
 80150c4:	f825 3f30 	strh.w	r3, [r5, #48]!
 80150c8:	4628      	mov	r0, r5
 80150ca:	f004 fae5 	bl	8019698 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80150ce:	4606      	mov	r6, r0
 80150d0:	4628      	mov	r0, r5
 80150d2:	f004 fb15 	bl	8019700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80150d6:	4605      	mov	r5, r0
 80150d8:	6823      	ldr	r3, [r4, #0]
 80150da:	4631      	mov	r1, r6
 80150dc:	4620      	mov	r0, r4
 80150de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150e0:	4798      	blx	r3
 80150e2:	6823      	ldr	r3, [r4, #0]
 80150e4:	4629      	mov	r1, r5
 80150e6:	4620      	mov	r0, r4
 80150e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150ee:	4718      	bx	r3

080150f0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80150f0:	b510      	push	{r4, lr}
 80150f2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80150f6:	4604      	mov	r4, r0
 80150f8:	2bff      	cmp	r3, #255	; 0xff
 80150fa:	d006      	beq.n	801510a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80150fc:	2300      	movs	r3, #0
 80150fe:	8003      	strh	r3, [r0, #0]
 8015100:	8043      	strh	r3, [r0, #2]
 8015102:	8083      	strh	r3, [r0, #4]
 8015104:	80c3      	strh	r3, [r0, #6]
 8015106:	4620      	mov	r0, r4
 8015108:	bd10      	pop	{r4, pc}
 801510a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801510e:	b11b      	cbz	r3, 8015118 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8015110:	3130      	adds	r1, #48	; 0x30
 8015112:	f004 fb29 	bl	8019768 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015116:	e7f6      	b.n	8015106 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8015118:	312e      	adds	r1, #46	; 0x2e
 801511a:	e7fa      	b.n	8015112 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801511c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801511c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015120:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8015124:	b08a      	sub	sp, #40	; 0x28
 8015126:	4604      	mov	r4, r0
 8015128:	4688      	mov	r8, r1
 801512a:	2b00      	cmp	r3, #0
 801512c:	d066      	beq.n	80151fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801512e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015130:	a805      	add	r0, sp, #20
 8015132:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015136:	f004 faaf 	bl	8019698 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801513a:	4607      	mov	r7, r0
 801513c:	a805      	add	r0, sp, #20
 801513e:	f004 fadf 	bl	8019700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015142:	2300      	movs	r3, #0
 8015144:	f9b8 6000 	ldrsh.w	r6, [r8]
 8015148:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801514c:	9306      	str	r3, [sp, #24]
 801514e:	4432      	add	r2, r6
 8015150:	b292      	uxth	r2, r2
 8015152:	fa0f fc82 	sxth.w	ip, r2
 8015156:	459c      	cmp	ip, r3
 8015158:	dd52      	ble.n	8015200 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801515a:	42b7      	cmp	r7, r6
 801515c:	dd50      	ble.n	8015200 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801515e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8015162:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015166:	442b      	add	r3, r5
 8015168:	b29b      	uxth	r3, r3
 801516a:	b219      	sxth	r1, r3
 801516c:	2900      	cmp	r1, #0
 801516e:	dd47      	ble.n	8015200 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8015170:	42a8      	cmp	r0, r5
 8015172:	dd45      	ble.n	8015200 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8015174:	4567      	cmp	r7, ip
 8015176:	bfb8      	it	lt
 8015178:	b2ba      	uxthlt	r2, r7
 801517a:	4288      	cmp	r0, r1
 801517c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8015180:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8015184:	bfb8      	it	lt
 8015186:	b283      	uxthlt	r3, r0
 8015188:	1b92      	subs	r2, r2, r6
 801518a:	1b5b      	subs	r3, r3, r5
 801518c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015190:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015194:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015198:	f8ad 501a 	strh.w	r5, [sp, #26]
 801519c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d026      	beq.n	80151f6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80151a8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	dd22      	ble.n	80151f6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80151b0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	dd1e      	ble.n	80151f6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80151b8:	2300      	movs	r3, #0
 80151ba:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80151be:	6823      	ldr	r3, [r4, #0]
 80151c0:	a908      	add	r1, sp, #32
 80151c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151c4:	4620      	mov	r0, r4
 80151c6:	4798      	blx	r3
 80151c8:	4b0f      	ldr	r3, [pc, #60]	; (8015208 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80151d0:	b10a      	cbz	r2, 80151d6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80151d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80151d4:	b900      	cbnz	r0, 80151d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80151d6:	6898      	ldr	r0, [r3, #8]
 80151d8:	2501      	movs	r5, #1
 80151da:	6801      	ldr	r1, [r0, #0]
 80151dc:	9502      	str	r5, [sp, #8]
 80151de:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80151e2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80151e6:	9401      	str	r4, [sp, #4]
 80151e8:	ac06      	add	r4, sp, #24
 80151ea:	9400      	str	r4, [sp, #0]
 80151ec:	688c      	ldr	r4, [r1, #8]
 80151ee:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80151f2:	a905      	add	r1, sp, #20
 80151f4:	47a0      	blx	r4
 80151f6:	b00a      	add	sp, #40	; 0x28
 80151f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151fc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80151fe:	e797      	b.n	8015130 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8015200:	2300      	movs	r3, #0
 8015202:	9307      	str	r3, [sp, #28]
 8015204:	e7ca      	b.n	801519c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8015206:	bf00      	nop
 8015208:	2000f394 	.word	0x2000f394

0801520c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801520c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8015210:	b12a      	cbz	r2, 801521e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8015212:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015216:	b112      	cbz	r2, 801521e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8015218:	6803      	ldr	r3, [r0, #0]
 801521a:	695b      	ldr	r3, [r3, #20]
 801521c:	4718      	bx	r3
 801521e:	4770      	bx	lr

08015220 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8015220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015224:	4604      	mov	r4, r0
 8015226:	b08d      	sub	sp, #52	; 0x34
 8015228:	460f      	mov	r7, r1
 801522a:	f7ff ff77 	bl	801511c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801522e:	4a55      	ldr	r2, [pc, #340]	; (8015384 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8015230:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015232:	8812      	ldrh	r2, [r2, #0]
 8015234:	429a      	cmp	r2, r3
 8015236:	f240 8082 	bls.w	801533e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801523a:	4d53      	ldr	r5, [pc, #332]	; (8015388 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 801523c:	682a      	ldr	r2, [r5, #0]
 801523e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015242:	4b52      	ldr	r3, [pc, #328]	; (801538c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801524a:	2200      	movs	r2, #0
 801524c:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015250:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8015254:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 8015258:	2a03      	cmp	r2, #3
 801525a:	d811      	bhi.n	8015280 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801525c:	e8df f002 	tbb	[pc, r2]
 8015260:	89727902 	.word	0x89727902
 8015264:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015268:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801526c:	1ad2      	subs	r2, r2, r3
 801526e:	2002      	movs	r0, #2
 8015270:	fb92 f2f0 	sdiv	r2, r2, r0
 8015274:	f8ad 1010 	strh.w	r1, [sp, #16]
 8015278:	f8ad 200e 	strh.w	r2, [sp, #14]
 801527c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015280:	f10d 0914 	add.w	r9, sp, #20
 8015284:	f10d 080c 	add.w	r8, sp, #12
 8015288:	e898 0003 	ldmia.w	r8, {r0, r1}
 801528c:	e889 0003 	stmia.w	r9, {r0, r1}
 8015290:	4639      	mov	r1, r7
 8015292:	4648      	mov	r0, r9
 8015294:	f7fe feac 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 8015298:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801529c:	2b00      	cmp	r3, #0
 801529e:	dd4e      	ble.n	801533e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80152a0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	dd4a      	ble.n	801533e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80152a8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80152ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80152b0:	4641      	mov	r1, r8
 80152b2:	1a9b      	subs	r3, r3, r2
 80152b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80152b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80152bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80152c0:	4620      	mov	r0, r4
 80152c2:	1a9b      	subs	r3, r3, r2
 80152c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80152c8:	6823      	ldr	r3, [r4, #0]
 80152ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152cc:	4798      	blx	r3
 80152ce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d053      	beq.n	801537e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 80152d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80152d8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80152da:	682b      	ldr	r3, [r5, #0]
 80152dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80152e0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80152e4:	785b      	ldrb	r3, [r3, #1]
 80152e6:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 80152ea:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80152ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80152f2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80152f6:	2300      	movs	r3, #0
 80152f8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80152fc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8015300:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8015304:	4b22      	ldr	r3, [pc, #136]	; (8015390 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8015306:	9209      	str	r2, [sp, #36]	; 0x24
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	9607      	str	r6, [sp, #28]
 801530c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8015310:	f88d 5020 	strb.w	r5, [sp, #32]
 8015314:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015318:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801531c:	b10a      	cbz	r2, 8015322 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801531e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015320:	b904      	cbnz	r4, 8015324 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8015322:	689c      	ldr	r4, [r3, #8]
 8015324:	4b1b      	ldr	r3, [pc, #108]	; (8015394 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8015326:	6818      	ldr	r0, [r3, #0]
 8015328:	f7fc fce2 	bl	8011cf0 <_ZNK8touchgfx5Texts7getTextEt>
 801532c:	ab07      	add	r3, sp, #28
 801532e:	9001      	str	r0, [sp, #4]
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	e898 0006 	ldmia.w	r8, {r1, r2}
 8015336:	464b      	mov	r3, r9
 8015338:	4620      	mov	r0, r4
 801533a:	f7fc fc6a 	bl	8011c12 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801533e:	b00d      	add	sp, #52	; 0x34
 8015340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015344:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015348:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801534c:	1ad2      	subs	r2, r2, r3
 801534e:	3201      	adds	r2, #1
 8015350:	e78d      	b.n	801526e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8015352:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015356:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801535a:	1ad2      	subs	r2, r2, r3
 801535c:	3201      	adds	r2, #1
 801535e:	2002      	movs	r0, #2
 8015360:	fb92 f2f0 	sdiv	r2, r2, r0
 8015364:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015368:	f8ad 200c 	strh.w	r2, [sp, #12]
 801536c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015370:	e786      	b.n	8015280 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8015372:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015376:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801537a:	1ad2      	subs	r2, r2, r3
 801537c:	e7ef      	b.n	801535e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 801537e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015380:	e7aa      	b.n	80152d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 8015382:	bf00      	nop
 8015384:	2000f3e8 	.word	0x2000f3e8
 8015388:	2000f3e4 	.word	0x2000f3e4
 801538c:	2000f3ec 	.word	0x2000f3ec
 8015390:	2000f394 	.word	0x2000f394
 8015394:	2000f3f0 	.word	0x2000f3f0

08015398 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8015398:	2101      	movs	r1, #1
 801539a:	2200      	movs	r2, #0
 801539c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80153a0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80153a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80153a8:	b510      	push	{r4, lr}
 80153aa:	4c10      	ldr	r4, [pc, #64]	; (80153ec <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80153ac:	8082      	strh	r2, [r0, #4]
 80153ae:	6004      	str	r4, [r0, #0]
 80153b0:	4c0f      	ldr	r4, [pc, #60]	; (80153f0 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 80153b2:	80c2      	strh	r2, [r0, #6]
 80153b4:	8102      	strh	r2, [r0, #8]
 80153b6:	8142      	strh	r2, [r0, #10]
 80153b8:	8182      	strh	r2, [r0, #12]
 80153ba:	81c2      	strh	r2, [r0, #14]
 80153bc:	8202      	strh	r2, [r0, #16]
 80153be:	8242      	strh	r2, [r0, #18]
 80153c0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80153c4:	61c2      	str	r2, [r0, #28]
 80153c6:	8402      	strh	r2, [r0, #32]
 80153c8:	8442      	strh	r2, [r0, #34]	; 0x22
 80153ca:	6282      	str	r2, [r0, #40]	; 0x28
 80153cc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80153d0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80153d2:	8601      	strh	r1, [r0, #48]	; 0x30
 80153d4:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80153d8:	6344      	str	r4, [r0, #52]	; 0x34
 80153da:	8701      	strh	r1, [r0, #56]	; 0x38
 80153dc:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80153e0:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80153e4:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 80153e8:	bd10      	pop	{r4, pc}
 80153ea:	bf00      	nop
 80153ec:	08029e60 	.word	0x08029e60
 80153f0:	08029394 	.word	0x08029394

080153f4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80153f4:	b510      	push	{r4, lr}
 80153f6:	6803      	ldr	r3, [r0, #0]
 80153f8:	460c      	mov	r4, r1
 80153fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153fc:	4798      	blx	r3
 80153fe:	1b03      	subs	r3, r0, r4
 8015400:	4258      	negs	r0, r3
 8015402:	4158      	adcs	r0, r3
 8015404:	bd10      	pop	{r4, pc}
	...

08015408 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015408:	4b01      	ldr	r3, [pc, #4]	; (8015410 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801540a:	6019      	str	r1, [r3, #0]
 801540c:	4770      	bx	lr
 801540e:	bf00      	nop
 8015410:	2000f39c 	.word	0x2000f39c

08015414 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015418:	4696      	mov	lr, r2
 801541a:	4614      	mov	r4, r2
 801541c:	4605      	mov	r5, r0
 801541e:	460e      	mov	r6, r1
 8015420:	461f      	mov	r7, r3
 8015422:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015426:	b097      	sub	sp, #92	; 0x5c
 8015428:	f10d 0c1c 	add.w	ip, sp, #28
 801542c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015430:	f8de 3000 	ldr.w	r3, [lr]
 8015434:	f104 0e14 	add.w	lr, r4, #20
 8015438:	f8cc 3000 	str.w	r3, [ip]
 801543c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015440:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015444:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015448:	f8de 3000 	ldr.w	r3, [lr]
 801544c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015450:	f8cc 3000 	str.w	r3, [ip]
 8015454:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015458:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801545c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015460:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8015464:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8015468:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801546c:	f8de 3000 	ldr.w	r3, [lr]
 8015470:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015472:	f8cc 3000 	str.w	r3, [ip]
 8015476:	9201      	str	r2, [sp, #4]
 8015478:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801547c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801547e:	682b      	ldr	r3, [r5, #0]
 8015480:	9200      	str	r2, [sp, #0]
 8015482:	f8cd 8008 	str.w	r8, [sp, #8]
 8015486:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801548a:	aa07      	add	r2, sp, #28
 801548c:	463b      	mov	r3, r7
 801548e:	4631      	mov	r1, r6
 8015490:	4628      	mov	r0, r5
 8015492:	47d8      	blx	fp
 8015494:	46a6      	mov	lr, r4
 8015496:	f10d 0c1c 	add.w	ip, sp, #28
 801549a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801549e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154a2:	f8de 3000 	ldr.w	r3, [lr]
 80154a6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80154aa:	f8cc 3000 	str.w	r3, [ip]
 80154ae:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80154b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154ba:	f8de 3000 	ldr.w	r3, [lr]
 80154be:	343c      	adds	r4, #60	; 0x3c
 80154c0:	f8cc 3000 	str.w	r3, [ip]
 80154c4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80154c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	4631      	mov	r1, r6
 80154d2:	f8cc 3000 	str.w	r3, [ip]
 80154d6:	682b      	ldr	r3, [r5, #0]
 80154d8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80154dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80154de:	f8cd 8008 	str.w	r8, [sp, #8]
 80154e2:	9201      	str	r2, [sp, #4]
 80154e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80154e6:	4628      	mov	r0, r5
 80154e8:	9200      	str	r2, [sp, #0]
 80154ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80154ec:	aa07      	add	r2, sp, #28
 80154ee:	463b      	mov	r3, r7
 80154f0:	47a0      	blx	r4
 80154f2:	b017      	add	sp, #92	; 0x5c
 80154f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080154f8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80154f8:	2000      	movs	r0, #0
 80154fa:	4770      	bx	lr

080154fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80154fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015500:	b08d      	sub	sp, #52	; 0x34
 8015502:	4688      	mov	r8, r1
 8015504:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015506:	f8d3 c000 	ldr.w	ip, [r3]
 801550a:	680f      	ldr	r7, [r1, #0]
 801550c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8015510:	eba7 070c 	sub.w	r7, r7, ip
 8015514:	42bc      	cmp	r4, r7
 8015516:	bfa8      	it	ge
 8015518:	463c      	movge	r4, r7
 801551a:	ee07 4a90 	vmov	s15, r4
 801551e:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015522:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015526:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801552a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801552e:	edd3 6a07 	vldr	s13, [r3, #28]
 8015532:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015536:	ee65 4a24 	vmul.f32	s9, s10, s9
 801553a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801553e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015542:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8015546:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801554a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801554e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015550:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8015554:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015558:	f9ba 1000 	ldrsh.w	r1, [sl]
 801555c:	eb09 0e0c 	add.w	lr, r9, ip
 8015560:	4571      	cmp	r1, lr
 8015562:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015566:	ee32 1a05 	vadd.f32	s2, s4, s10
 801556a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801556e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015572:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015576:	f340 808c 	ble.w	8015692 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801557a:	eba1 060e 	sub.w	r6, r1, lr
 801557e:	fb96 f5f4 	sdiv	r5, r6, r4
 8015582:	ee07 5a10 	vmov	s14, r5
 8015586:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801558a:	2d00      	cmp	r5, #0
 801558c:	fb04 6615 	mls	r6, r4, r5, r6
 8015590:	eea7 0a04 	vfma.f32	s0, s14, s8
 8015594:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015598:	eea7 1a05 	vfma.f32	s2, s14, s10
 801559c:	dd12      	ble.n	80155c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801559e:	ee70 6a44 	vsub.f32	s13, s0, s8
 80155a2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80155a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155aa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80155ae:	bf14      	ite	ne
 80155b0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80155b4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80155b8:	ee31 2a45 	vsub.f32	s4, s2, s10
 80155bc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80155c0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80155c4:	fb05 f204 	mul.w	r2, r5, r4
 80155c8:	1abf      	subs	r7, r7, r2
 80155ca:	4494      	add	ip, r2
 80155cc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80155d0:	4411      	add	r1, r2
 80155d2:	eb09 020c 	add.w	r2, r9, ip
 80155d6:	443a      	add	r2, r7
 80155d8:	b209      	sxth	r1, r1
 80155da:	428a      	cmp	r2, r1
 80155dc:	bfc4      	itt	gt
 80155de:	eba1 0209 	subgt.w	r2, r1, r9
 80155e2:	eba2 070c 	subgt.w	r7, r2, ip
 80155e6:	2f00      	cmp	r7, #0
 80155e8:	dd50      	ble.n	801568c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80155ea:	fb97 f1f4 	sdiv	r1, r7, r4
 80155ee:	fb04 7211 	mls	r2, r4, r1, r7
 80155f2:	b90a      	cbnz	r2, 80155f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80155f4:	4622      	mov	r2, r4
 80155f6:	3901      	subs	r1, #1
 80155f8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80155fc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015600:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015604:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015608:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801560c:	ee17 7a90 	vmov	r7, s15
 8015610:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015614:	eef0 6a42 	vmov.f32	s13, s4
 8015618:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801561c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015620:	ee17 ca90 	vmov	ip, s15
 8015624:	eeb0 7a61 	vmov.f32	s14, s3
 8015628:	6840      	ldr	r0, [r0, #4]
 801562a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801562e:	f8d0 a000 	ldr.w	sl, [r0]
 8015632:	900b      	str	r0, [sp, #44]	; 0x2c
 8015634:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015636:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801563a:	9008      	str	r0, [sp, #32]
 801563c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801563e:	695b      	ldr	r3, [r3, #20]
 8015640:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015644:	fb9c fcf4 	sdiv	ip, ip, r4
 8015648:	445b      	add	r3, fp
 801564a:	9307      	str	r3, [sp, #28]
 801564c:	ee16 3a90 	vmov	r3, s13
 8015650:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015654:	fb0c 3306 	mla	r3, ip, r6, r3
 8015658:	fb97 f7f4 	sdiv	r7, r7, r4
 801565c:	9302      	str	r3, [sp, #8]
 801565e:	ee17 3a10 	vmov	r3, s14
 8015662:	2900      	cmp	r1, #0
 8015664:	bfcc      	ite	gt
 8015666:	46a1      	movgt	r9, r4
 8015668:	4691      	movle	r9, r2
 801566a:	44b6      	add	lr, r6
 801566c:	fb04 e505 	mla	r5, r4, r5, lr
 8015670:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015674:	fb07 3706 	mla	r7, r7, r6, r3
 8015678:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801567c:	e9cd 4700 	strd	r4, r7, [sp]
 8015680:	eba9 0306 	sub.w	r3, r9, r6
 8015684:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015688:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801568a:	47a0      	blx	r4
 801568c:	b00d      	add	sp, #52	; 0x34
 801568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015692:	2500      	movs	r5, #0
 8015694:	462e      	mov	r6, r5
 8015696:	e799      	b.n	80155cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801569c:	461d      	mov	r5, r3
 801569e:	b0db      	sub	sp, #364	; 0x16c
 80156a0:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80156a4:	910f      	str	r1, [sp, #60]	; 0x3c
 80156a6:	930a      	str	r3, [sp, #40]	; 0x28
 80156a8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80156ac:	9009      	str	r0, [sp, #36]	; 0x24
 80156ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80156b0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80156b4:	4614      	mov	r4, r2
 80156b6:	9310      	str	r3, [sp, #64]	; 0x40
 80156b8:	6803      	ldr	r3, [r0, #0]
 80156ba:	4629      	mov	r1, r5
 80156bc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80156be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80156c2:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80156c6:	47b8      	blx	r7
 80156c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ca:	6058      	str	r0, [r3, #4]
 80156cc:	2800      	cmp	r0, #0
 80156ce:	f000 83a1 	beq.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80156d2:	ed94 7a02 	vldr	s14, [r4, #8]
 80156d6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80156da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80156de:	682b      	ldr	r3, [r5, #0]
 80156e0:	9314      	str	r3, [sp, #80]	; 0x50
 80156e2:	686b      	ldr	r3, [r5, #4]
 80156e4:	9315      	str	r3, [sp, #84]	; 0x54
 80156e6:	4bc1      	ldr	r3, [pc, #772]	; (80159ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80156e8:	7819      	ldrb	r1, [r3, #0]
 80156ea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80156ee:	2900      	cmp	r1, #0
 80156f0:	bf16      	itet	ne
 80156f2:	4619      	movne	r1, r3
 80156f4:	4611      	moveq	r1, r2
 80156f6:	4613      	movne	r3, r2
 80156f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156fc:	9116      	str	r1, [sp, #88]	; 0x58
 80156fe:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015702:	f240 8387 	bls.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015706:	ed94 7a07 	vldr	s14, [r4, #28]
 801570a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801570e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015712:	f240 837f 	bls.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015716:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801571a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801571e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015722:	f240 8377 	bls.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015726:	6822      	ldr	r2, [r4, #0]
 8015728:	4bb1      	ldr	r3, [pc, #708]	; (80159f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801572a:	429a      	cmp	r2, r3
 801572c:	f2c0 8372 	blt.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015730:	49b0      	ldr	r1, [pc, #704]	; (80159f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015732:	6963      	ldr	r3, [r4, #20]
 8015734:	428a      	cmp	r2, r1
 8015736:	f300 836d 	bgt.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801573a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801573e:	48ae      	ldr	r0, [pc, #696]	; (80159f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015740:	33ff      	adds	r3, #255	; 0xff
 8015742:	4283      	cmp	r3, r0
 8015744:	f200 8366 	bhi.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801574a:	4dac      	ldr	r5, [pc, #688]	; (80159fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801574c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015750:	33ff      	adds	r3, #255	; 0xff
 8015752:	42ab      	cmp	r3, r5
 8015754:	f200 835e 	bhi.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015758:	6862      	ldr	r2, [r4, #4]
 801575a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801575e:	33ff      	adds	r3, #255	; 0xff
 8015760:	4283      	cmp	r3, r0
 8015762:	f200 8357 	bhi.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015766:	69a1      	ldr	r1, [r4, #24]
 8015768:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801576c:	33ff      	adds	r3, #255	; 0xff
 801576e:	4283      	cmp	r3, r0
 8015770:	f200 8350 	bhi.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015774:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015776:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801577a:	30ff      	adds	r0, #255	; 0xff
 801577c:	42a8      	cmp	r0, r5
 801577e:	f200 8349 	bhi.w	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015782:	428a      	cmp	r2, r1
 8015784:	f280 8110 	bge.w	80159a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015788:	429a      	cmp	r2, r3
 801578a:	f300 8119 	bgt.w	80159c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801578e:	4299      	cmp	r1, r3
 8015790:	f280 811d 	bge.w	80159ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015794:	2502      	movs	r5, #2
 8015796:	2701      	movs	r7, #1
 8015798:	46a9      	mov	r9, r5
 801579a:	46b8      	mov	r8, r7
 801579c:	f04f 0a00 	mov.w	sl, #0
 80157a0:	4621      	mov	r1, r4
 80157a2:	a849      	add	r0, sp, #292	; 0x124
 80157a4:	f003 fcae 	bl	8019104 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80157a8:	4622      	mov	r2, r4
 80157aa:	4653      	mov	r3, sl
 80157ac:	a949      	add	r1, sp, #292	; 0x124
 80157ae:	f8cd 9000 	str.w	r9, [sp]
 80157b2:	a819      	add	r0, sp, #100	; 0x64
 80157b4:	f003 fdd8 	bl	8019368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80157b8:	4622      	mov	r2, r4
 80157ba:	4653      	mov	r3, sl
 80157bc:	a949      	add	r1, sp, #292	; 0x124
 80157be:	f8cd 8000 	str.w	r8, [sp]
 80157c2:	a829      	add	r0, sp, #164	; 0xa4
 80157c4:	f003 fdd0 	bl	8019368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80157c8:	4643      	mov	r3, r8
 80157ca:	4622      	mov	r2, r4
 80157cc:	a949      	add	r1, sp, #292	; 0x124
 80157ce:	f8cd 9000 	str.w	r9, [sp]
 80157d2:	a839      	add	r0, sp, #228	; 0xe4
 80157d4:	f003 fdc8 	bl	8019368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80157d8:	42af      	cmp	r7, r5
 80157da:	bfb5      	itete	lt
 80157dc:	2300      	movlt	r3, #0
 80157de:	2301      	movge	r3, #1
 80157e0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80157e2:	930e      	strge	r3, [sp, #56]	; 0x38
 80157e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157e6:	af12      	add	r7, sp, #72	; 0x48
 80157e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80157ec:	bfb9      	ittee	lt
 80157ee:	ad29      	addlt	r5, sp, #164	; 0xa4
 80157f0:	ac19      	addlt	r4, sp, #100	; 0x64
 80157f2:	ad19      	addge	r5, sp, #100	; 0x64
 80157f4:	ac29      	addge	r4, sp, #164	; 0xa4
 80157f6:	e887 0003 	stmia.w	r7, {r0, r1}
 80157fa:	b928      	cbnz	r0, 8015808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80157fc:	4b80      	ldr	r3, [pc, #512]	; (8015a00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80157fe:	6818      	ldr	r0, [r3, #0]
 8015800:	6803      	ldr	r3, [r0, #0]
 8015802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015804:	4798      	blx	r3
 8015806:	6038      	str	r0, [r7, #0]
 8015808:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801580a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801580e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015812:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015814:	930c      	str	r3, [sp, #48]	; 0x30
 8015816:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015818:	6963      	ldr	r3, [r4, #20]
 801581a:	440b      	add	r3, r1
 801581c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015820:	4408      	add	r0, r1
 8015822:	b200      	sxth	r0, r0
 8015824:	4283      	cmp	r3, r0
 8015826:	900d      	str	r0, [sp, #52]	; 0x34
 8015828:	f280 80dd 	bge.w	80159e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801582c:	428b      	cmp	r3, r1
 801582e:	da08      	bge.n	8015842 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015830:	2a00      	cmp	r2, #0
 8015832:	dd06      	ble.n	8015842 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015834:	1acb      	subs	r3, r1, r3
 8015836:	429a      	cmp	r2, r3
 8015838:	f2c0 80e4 	blt.w	8015a04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801583c:	2b00      	cmp	r3, #0
 801583e:	f300 80e2 	bgt.w	8015a06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015842:	6967      	ldr	r7, [r4, #20]
 8015844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015846:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801584a:	443b      	add	r3, r7
 801584c:	461f      	mov	r7, r3
 801584e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015850:	1bdf      	subs	r7, r3, r7
 8015852:	4297      	cmp	r7, r2
 8015854:	bfa8      	it	ge
 8015856:	4617      	movge	r7, r2
 8015858:	2f00      	cmp	r7, #0
 801585a:	f340 8166 	ble.w	8015b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801585e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015860:	6829      	ldr	r1, [r5, #0]
 8015862:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015866:	f9bb 3000 	ldrsh.w	r3, [fp]
 801586a:	4411      	add	r1, r2
 801586c:	4299      	cmp	r1, r3
 801586e:	6820      	ldr	r0, [r4, #0]
 8015870:	dd1a      	ble.n	80158a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015872:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015876:	4402      	add	r2, r0
 8015878:	440b      	add	r3, r1
 801587a:	b21b      	sxth	r3, r3
 801587c:	429a      	cmp	r2, r3
 801587e:	dc13      	bgt.n	80158a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015880:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015884:	a912      	add	r1, sp, #72	; 0x48
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	9206      	str	r2, [sp, #24]
 801588a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801588c:	9500      	str	r5, [sp, #0]
 801588e:	9205      	str	r2, [sp, #20]
 8015890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015892:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015894:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015898:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801589a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801589e:	aa49      	add	r2, sp, #292	; 0x124
 80158a0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80158a4:	4623      	mov	r3, r4
 80158a6:	47c8      	blx	r9
 80158a8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80158ac:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80158b0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80158b4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80158b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80158bc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80158c0:	ed94 6a08 	vldr	s12, [r4, #32]
 80158c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80158c8:	edd4 6a07 	vldr	s13, [r4, #28]
 80158cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80158d0:	441a      	add	r2, r3
 80158d2:	6963      	ldr	r3, [r4, #20]
 80158d4:	68a1      	ldr	r1, [r4, #8]
 80158d6:	3301      	adds	r3, #1
 80158d8:	6163      	str	r3, [r4, #20]
 80158da:	69a3      	ldr	r3, [r4, #24]
 80158dc:	6022      	str	r2, [r4, #0]
 80158de:	3b01      	subs	r3, #1
 80158e0:	61a3      	str	r3, [r4, #24]
 80158e2:	6923      	ldr	r3, [r4, #16]
 80158e4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80158e8:	440b      	add	r3, r1
 80158ea:	68e1      	ldr	r1, [r4, #12]
 80158ec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80158f0:	428b      	cmp	r3, r1
 80158f2:	edc4 6a07 	vstr	s13, [r4, #28]
 80158f6:	6123      	str	r3, [r4, #16]
 80158f8:	db15      	blt.n	8015926 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80158fa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80158fe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015902:	edc4 6a07 	vstr	s13, [r4, #28]
 8015906:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801590a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801590e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015912:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015916:	ee77 7a27 	vadd.f32	s15, s14, s15
 801591a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801591e:	3201      	adds	r2, #1
 8015920:	1a5b      	subs	r3, r3, r1
 8015922:	6022      	str	r2, [r4, #0]
 8015924:	6123      	str	r3, [r4, #16]
 8015926:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801592a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801592e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015932:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015936:	ee37 7a27 	vadd.f32	s14, s14, s15
 801593a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801593e:	ed95 6a08 	vldr	s12, [r5, #32]
 8015942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015946:	edd5 6a07 	vldr	s13, [r5, #28]
 801594a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801594e:	441a      	add	r2, r3
 8015950:	696b      	ldr	r3, [r5, #20]
 8015952:	68a9      	ldr	r1, [r5, #8]
 8015954:	3301      	adds	r3, #1
 8015956:	616b      	str	r3, [r5, #20]
 8015958:	69ab      	ldr	r3, [r5, #24]
 801595a:	602a      	str	r2, [r5, #0]
 801595c:	3b01      	subs	r3, #1
 801595e:	61ab      	str	r3, [r5, #24]
 8015960:	692b      	ldr	r3, [r5, #16]
 8015962:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015966:	440b      	add	r3, r1
 8015968:	68e9      	ldr	r1, [r5, #12]
 801596a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801596e:	428b      	cmp	r3, r1
 8015970:	edc5 6a07 	vstr	s13, [r5, #28]
 8015974:	612b      	str	r3, [r5, #16]
 8015976:	db15      	blt.n	80159a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015978:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801597c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015980:	edc5 6a07 	vstr	s13, [r5, #28]
 8015984:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015988:	ee36 7a87 	vadd.f32	s14, s13, s14
 801598c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015990:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015998:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801599c:	3201      	adds	r2, #1
 801599e:	1a5b      	subs	r3, r3, r1
 80159a0:	602a      	str	r2, [r5, #0]
 80159a2:	612b      	str	r3, [r5, #16]
 80159a4:	3f01      	subs	r7, #1
 80159a6:	e757      	b.n	8015858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80159a8:	4299      	cmp	r1, r3
 80159aa:	dc13      	bgt.n	80159d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80159ac:	429a      	cmp	r2, r3
 80159ae:	da14      	bge.n	80159da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80159b0:	2502      	movs	r5, #2
 80159b2:	2703      	movs	r7, #3
 80159b4:	46a9      	mov	r9, r5
 80159b6:	f04f 0800 	mov.w	r8, #0
 80159ba:	f04f 0a01 	mov.w	sl, #1
 80159be:	e6ef      	b.n	80157a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80159c0:	2501      	movs	r5, #1
 80159c2:	2700      	movs	r7, #0
 80159c4:	46a9      	mov	r9, r5
 80159c6:	46b8      	mov	r8, r7
 80159c8:	f04f 0a02 	mov.w	sl, #2
 80159cc:	e6e8      	b.n	80157a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80159ce:	2501      	movs	r5, #1
 80159d0:	2702      	movs	r7, #2
 80159d2:	e6e1      	b.n	8015798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80159d4:	2500      	movs	r5, #0
 80159d6:	2701      	movs	r7, #1
 80159d8:	e7f4      	b.n	80159c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80159da:	2702      	movs	r7, #2
 80159dc:	2503      	movs	r5, #3
 80159de:	f04f 0900 	mov.w	r9, #0
 80159e2:	46b8      	mov	r8, r7
 80159e4:	e7e9      	b.n	80159ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80159e6:	4613      	mov	r3, r2
 80159e8:	e728      	b.n	801583c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80159ea:	bf00      	nop
 80159ec:	2000f38c 	.word	0x2000f38c
 80159f0:	fffd8f01 	.word	0xfffd8f01
 80159f4:	00027100 	.word	0x00027100
 80159f8:	0004e1ff 	.word	0x0004e1ff
 80159fc:	0004e1fe 	.word	0x0004e1fe
 8015a00:	2000f394 	.word	0x2000f394
 8015a04:	4613      	mov	r3, r2
 8015a06:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8015a0a:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015a0e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015a12:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015a16:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015a1a:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015a1e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015a22:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015a26:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015a2a:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015a2e:	469e      	mov	lr, r3
 8015a30:	469c      	mov	ip, r3
 8015a32:	f04f 0900 	mov.w	r9, #0
 8015a36:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015a38:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015a3a:	9111      	str	r1, [sp, #68]	; 0x44
 8015a3c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8015a40:	f1bc 0f00 	cmp.w	ip, #0
 8015a44:	d147      	bne.n	8015ad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015a46:	eb03 0c07 	add.w	ip, r3, r7
 8015a4a:	1ad7      	subs	r7, r2, r3
 8015a4c:	f1b9 0f00 	cmp.w	r9, #0
 8015a50:	d009      	beq.n	8015a66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015a52:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8015a56:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8015a5a:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8015a5e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8015a62:	9029      	str	r0, [sp, #164]	; 0xa4
 8015a64:	912d      	str	r1, [sp, #180]	; 0xb4
 8015a66:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015a6a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015a6e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015a72:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015a76:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015a7a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015a7e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015a82:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015a86:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015a8a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015a8e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015a92:	f04f 0800 	mov.w	r8, #0
 8015a96:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015a98:	9111      	str	r1, [sp, #68]	; 0x44
 8015a9a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015a9e:	f1be 0f00 	cmp.w	lr, #0
 8015aa2:	d031      	beq.n	8015b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015aa4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015aa6:	4450      	add	r0, sl
 8015aa8:	4431      	add	r1, r6
 8015aaa:	4549      	cmp	r1, r9
 8015aac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015ab0:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015ab4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015ab8:	db08      	blt.n	8015acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015aba:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015abe:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015ac2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015ac6:	3001      	adds	r0, #1
 8015ac8:	eba1 0109 	sub.w	r1, r1, r9
 8015acc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015ad0:	f04f 0801 	mov.w	r8, #1
 8015ad4:	e7e3      	b.n	8015a9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015ad6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015ad8:	4450      	add	r0, sl
 8015ada:	4431      	add	r1, r6
 8015adc:	4541      	cmp	r1, r8
 8015ade:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015ae2:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015ae6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015aea:	db08      	blt.n	8015afe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015aec:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015af0:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015af4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015af8:	3001      	adds	r0, #1
 8015afa:	eba1 0108 	sub.w	r1, r1, r8
 8015afe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015b02:	f04f 0901 	mov.w	r9, #1
 8015b06:	e79b      	b.n	8015a40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015b08:	449c      	add	ip, r3
 8015b0a:	1aff      	subs	r7, r7, r3
 8015b0c:	f1b8 0f00 	cmp.w	r8, #0
 8015b10:	d009      	beq.n	8015b26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015b12:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015b16:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015b1a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015b1e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015b22:	9019      	str	r0, [sp, #100]	; 0x64
 8015b24:	911d      	str	r1, [sp, #116]	; 0x74
 8015b26:	1ad2      	subs	r2, r2, r3
 8015b28:	e68b      	b.n	8015842 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b2c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	f000 80d1 	beq.w	8015cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015b34:	ad19      	add	r5, sp, #100	; 0x64
 8015b36:	ac39      	add	r4, sp, #228	; 0xe4
 8015b38:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015b3a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015b3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b42:	930c      	str	r3, [sp, #48]	; 0x30
 8015b44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b46:	6963      	ldr	r3, [r4, #20]
 8015b48:	440b      	add	r3, r1
 8015b4a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015b4e:	4408      	add	r0, r1
 8015b50:	b200      	sxth	r0, r0
 8015b52:	4283      	cmp	r3, r0
 8015b54:	900d      	str	r0, [sp, #52]	; 0x34
 8015b56:	f280 80c1 	bge.w	8015cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015b5a:	428b      	cmp	r3, r1
 8015b5c:	da08      	bge.n	8015b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015b5e:	2a00      	cmp	r2, #0
 8015b60:	dd06      	ble.n	8015b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015b62:	1acb      	subs	r3, r1, r3
 8015b64:	429a      	cmp	r2, r3
 8015b66:	f2c0 80bb 	blt.w	8015ce0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	f300 80b9 	bgt.w	8015ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015b70:	6967      	ldr	r7, [r4, #20]
 8015b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b74:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015b78:	443b      	add	r3, r7
 8015b7a:	461f      	mov	r7, r3
 8015b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b7e:	1bdf      	subs	r7, r3, r7
 8015b80:	4297      	cmp	r7, r2
 8015b82:	bfa8      	it	ge
 8015b84:	4617      	movge	r7, r2
 8015b86:	2f00      	cmp	r7, #0
 8015b88:	f340 813c 	ble.w	8015e04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015b8c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015b8e:	6829      	ldr	r1, [r5, #0]
 8015b90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015b94:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015b98:	4411      	add	r1, r2
 8015b9a:	4299      	cmp	r1, r3
 8015b9c:	6820      	ldr	r0, [r4, #0]
 8015b9e:	dd1a      	ble.n	8015bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015ba0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015ba4:	4402      	add	r2, r0
 8015ba6:	440b      	add	r3, r1
 8015ba8:	b21b      	sxth	r3, r3
 8015baa:	429a      	cmp	r2, r3
 8015bac:	dc13      	bgt.n	8015bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015bae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bb2:	a912      	add	r1, sp, #72	; 0x48
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	9206      	str	r2, [sp, #24]
 8015bb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015bba:	9500      	str	r5, [sp, #0]
 8015bbc:	9205      	str	r2, [sp, #20]
 8015bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015bc2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015bc6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015bc8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015bcc:	aa49      	add	r2, sp, #292	; 0x124
 8015bce:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8015bd2:	4623      	mov	r3, r4
 8015bd4:	47c8      	blx	r9
 8015bd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015bda:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015bde:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015be2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015bea:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015bee:	ed94 6a08 	vldr	s12, [r4, #32]
 8015bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015bf6:	edd4 6a07 	vldr	s13, [r4, #28]
 8015bfa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015bfe:	441a      	add	r2, r3
 8015c00:	6963      	ldr	r3, [r4, #20]
 8015c02:	68a1      	ldr	r1, [r4, #8]
 8015c04:	3301      	adds	r3, #1
 8015c06:	6163      	str	r3, [r4, #20]
 8015c08:	69a3      	ldr	r3, [r4, #24]
 8015c0a:	6022      	str	r2, [r4, #0]
 8015c0c:	3b01      	subs	r3, #1
 8015c0e:	61a3      	str	r3, [r4, #24]
 8015c10:	6923      	ldr	r3, [r4, #16]
 8015c12:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015c16:	440b      	add	r3, r1
 8015c18:	68e1      	ldr	r1, [r4, #12]
 8015c1a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015c1e:	428b      	cmp	r3, r1
 8015c20:	edc4 6a07 	vstr	s13, [r4, #28]
 8015c24:	6123      	str	r3, [r4, #16]
 8015c26:	db15      	blt.n	8015c54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015c28:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015c2c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015c30:	edc4 6a07 	vstr	s13, [r4, #28]
 8015c34:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015c38:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015c3c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015c40:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c48:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015c4c:	3201      	adds	r2, #1
 8015c4e:	1a5b      	subs	r3, r3, r1
 8015c50:	6022      	str	r2, [r4, #0]
 8015c52:	6123      	str	r3, [r4, #16]
 8015c54:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c5c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015c60:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c68:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015c6c:	ed95 6a08 	vldr	s12, [r5, #32]
 8015c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015c74:	edd5 6a07 	vldr	s13, [r5, #28]
 8015c78:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015c7c:	441a      	add	r2, r3
 8015c7e:	696b      	ldr	r3, [r5, #20]
 8015c80:	68a9      	ldr	r1, [r5, #8]
 8015c82:	3301      	adds	r3, #1
 8015c84:	616b      	str	r3, [r5, #20]
 8015c86:	69ab      	ldr	r3, [r5, #24]
 8015c88:	602a      	str	r2, [r5, #0]
 8015c8a:	3b01      	subs	r3, #1
 8015c8c:	61ab      	str	r3, [r5, #24]
 8015c8e:	692b      	ldr	r3, [r5, #16]
 8015c90:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015c94:	440b      	add	r3, r1
 8015c96:	68e9      	ldr	r1, [r5, #12]
 8015c98:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015c9c:	428b      	cmp	r3, r1
 8015c9e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015ca2:	612b      	str	r3, [r5, #16]
 8015ca4:	db15      	blt.n	8015cd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015ca6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015caa:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015cae:	edc5 6a07 	vstr	s13, [r5, #28]
 8015cb2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015cb6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015cba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015cbe:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cc6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015cca:	3201      	adds	r2, #1
 8015ccc:	1a5b      	subs	r3, r3, r1
 8015cce:	602a      	str	r2, [r5, #0]
 8015cd0:	612b      	str	r3, [r5, #16]
 8015cd2:	3f01      	subs	r7, #1
 8015cd4:	e757      	b.n	8015b86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015cd6:	ad39      	add	r5, sp, #228	; 0xe4
 8015cd8:	ac19      	add	r4, sp, #100	; 0x64
 8015cda:	e72d      	b.n	8015b38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015cdc:	4613      	mov	r3, r2
 8015cde:	e744      	b.n	8015b6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015ce0:	4613      	mov	r3, r2
 8015ce2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8015ce6:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8015cea:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8015cee:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8015cf2:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015cf6:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015cfa:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8015cfe:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8015d02:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8015d06:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8015d0a:	469e      	mov	lr, r3
 8015d0c:	461f      	mov	r7, r3
 8015d0e:	f04f 0900 	mov.w	r9, #0
 8015d12:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015d14:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8015d18:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015d1a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8015d1e:	960e      	str	r6, [sp, #56]	; 0x38
 8015d20:	2f00      	cmp	r7, #0
 8015d22:	d146      	bne.n	8015db2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015d24:	449c      	add	ip, r3
 8015d26:	1ad7      	subs	r7, r2, r3
 8015d28:	f1b9 0f00 	cmp.w	r9, #0
 8015d2c:	d009      	beq.n	8015d42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8015d2e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8015d32:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8015d36:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8015d3a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8015d3e:	9039      	str	r0, [sp, #228]	; 0xe4
 8015d40:	913d      	str	r1, [sp, #244]	; 0xf4
 8015d42:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015d46:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015d4a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015d4e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015d52:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015d56:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015d5a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015d5e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015d62:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015d66:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015d6a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015d6e:	f04f 0800 	mov.w	r8, #0
 8015d72:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015d74:	910e      	str	r1, [sp, #56]	; 0x38
 8015d76:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015d7a:	f1be 0f00 	cmp.w	lr, #0
 8015d7e:	d030      	beq.n	8015de2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015d80:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015d82:	4450      	add	r0, sl
 8015d84:	4431      	add	r1, r6
 8015d86:	4549      	cmp	r1, r9
 8015d88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015d8c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015d90:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015d94:	db08      	blt.n	8015da8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015d96:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015d9a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015d9e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015da2:	3001      	adds	r0, #1
 8015da4:	eba1 0109 	sub.w	r1, r1, r9
 8015da8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015dac:	f04f 0801 	mov.w	r8, #1
 8015db0:	e7e3      	b.n	8015d7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015db2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015db4:	4450      	add	r0, sl
 8015db6:	4431      	add	r1, r6
 8015db8:	4541      	cmp	r1, r8
 8015dba:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015dbe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015dc2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015dc6:	db08      	blt.n	8015dda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015dc8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015dcc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015dd0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015dd4:	3001      	adds	r0, #1
 8015dd6:	eba1 0108 	sub.w	r1, r1, r8
 8015dda:	3f01      	subs	r7, #1
 8015ddc:	f04f 0901 	mov.w	r9, #1
 8015de0:	e79e      	b.n	8015d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015de2:	449c      	add	ip, r3
 8015de4:	1aff      	subs	r7, r7, r3
 8015de6:	f1b8 0f00 	cmp.w	r8, #0
 8015dea:	d009      	beq.n	8015e00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015dec:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015df0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015df4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015df8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015dfc:	9019      	str	r0, [sp, #100]	; 0x64
 8015dfe:	911d      	str	r1, [sp, #116]	; 0x74
 8015e00:	1ad2      	subs	r2, r2, r3
 8015e02:	e6b5      	b.n	8015b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	b923      	cbnz	r3, 8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015e0a:	4b04      	ldr	r3, [pc, #16]	; (8015e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015e0c:	6818      	ldr	r0, [r3, #0]
 8015e0e:	6803      	ldr	r3, [r0, #0]
 8015e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e12:	4798      	blx	r3
 8015e14:	b05b      	add	sp, #364	; 0x16c
 8015e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e1a:	bf00      	nop
 8015e1c:	2000f394 	.word	0x2000f394

08015e20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8015e20:	b570      	push	{r4, r5, r6, lr}
 8015e22:	4604      	mov	r4, r0
 8015e24:	2500      	movs	r5, #0
 8015e26:	9805      	ldr	r0, [sp, #20]
 8015e28:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015e2c:	6061      	str	r1, [r4, #4]
 8015e2e:	8263      	strh	r3, [r4, #18]
 8015e30:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8015e34:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015e38:	8025      	strh	r5, [r4, #0]
 8015e3a:	7221      	strb	r1, [r4, #8]
 8015e3c:	7266      	strb	r6, [r4, #9]
 8015e3e:	60e0      	str	r0, [r4, #12]
 8015e40:	8222      	strh	r2, [r4, #16]
 8015e42:	82a3      	strh	r3, [r4, #20]
 8015e44:	82e5      	strh	r5, [r4, #22]
 8015e46:	8325      	strh	r5, [r4, #24]
 8015e48:	8365      	strh	r5, [r4, #26]
 8015e4a:	83a5      	strh	r5, [r4, #28]
 8015e4c:	83e5      	strh	r5, [r4, #30]
 8015e4e:	8425      	strh	r5, [r4, #32]
 8015e50:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8015e54:	b32e      	cbz	r6, 8015ea2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015e56:	6803      	ldr	r3, [r0, #0]
 8015e58:	695b      	ldr	r3, [r3, #20]
 8015e5a:	4798      	blx	r3
 8015e5c:	4606      	mov	r6, r0
 8015e5e:	b300      	cbz	r0, 8015ea2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015e60:	68e0      	ldr	r0, [r4, #12]
 8015e62:	4631      	mov	r1, r6
 8015e64:	6803      	ldr	r3, [r0, #0]
 8015e66:	68db      	ldr	r3, [r3, #12]
 8015e68:	4798      	blx	r3
 8015e6a:	4605      	mov	r5, r0
 8015e6c:	b1c8      	cbz	r0, 8015ea2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015e6e:	7b43      	ldrb	r3, [r0, #13]
 8015e70:	7a82      	ldrb	r2, [r0, #10]
 8015e72:	005b      	lsls	r3, r3, #1
 8015e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e78:	4313      	orrs	r3, r2
 8015e7a:	8423      	strh	r3, [r4, #32]
 8015e7c:	7a63      	ldrb	r3, [r4, #9]
 8015e7e:	2b06      	cmp	r3, #6
 8015e80:	d10f      	bne.n	8015ea2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015e82:	68e0      	ldr	r0, [r4, #12]
 8015e84:	462a      	mov	r2, r5
 8015e86:	6803      	ldr	r3, [r0, #0]
 8015e88:	4631      	mov	r1, r6
 8015e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e8c:	4798      	blx	r3
 8015e8e:	7b6b      	ldrb	r3, [r5, #13]
 8015e90:	005b      	lsls	r3, r3, #1
 8015e92:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015e96:	7aab      	ldrb	r3, [r5, #10]
 8015e98:	4313      	orrs	r3, r2
 8015e9a:	4418      	add	r0, r3
 8015e9c:	8c23      	ldrh	r3, [r4, #32]
 8015e9e:	4418      	add	r0, r3
 8015ea0:	8420      	strh	r0, [r4, #32]
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	bd70      	pop	{r4, r5, r6, pc}

08015ea6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eaa:	2400      	movs	r4, #0
 8015eac:	4681      	mov	r9, r0
 8015eae:	4688      	mov	r8, r1
 8015eb0:	4692      	mov	sl, r2
 8015eb2:	469b      	mov	fp, r3
 8015eb4:	4627      	mov	r7, r4
 8015eb6:	4625      	mov	r5, r4
 8015eb8:	4626      	mov	r6, r4
 8015eba:	b085      	sub	sp, #20
 8015ebc:	4554      	cmp	r4, sl
 8015ebe:	da2a      	bge.n	8015f16 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	9303      	str	r3, [sp, #12]
 8015ec4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015ec8:	429d      	cmp	r5, r3
 8015eca:	d004      	beq.n	8015ed6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015ecc:	f242 030b 	movw	r3, #8203	; 0x200b
 8015ed0:	429d      	cmp	r5, r3
 8015ed2:	bf18      	it	ne
 8015ed4:	462f      	movne	r7, r5
 8015ed6:	ab03      	add	r3, sp, #12
 8015ed8:	4642      	mov	r2, r8
 8015eda:	4659      	mov	r1, fp
 8015edc:	4648      	mov	r0, r9
 8015ede:	f002 ff27 	bl	8018d30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015ee2:	4605      	mov	r5, r0
 8015ee4:	b1b8      	cbz	r0, 8015f16 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015ee6:	280a      	cmp	r0, #10
 8015ee8:	d015      	beq.n	8015f16 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015eea:	9a03      	ldr	r2, [sp, #12]
 8015eec:	b18a      	cbz	r2, 8015f12 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015eee:	7b50      	ldrb	r0, [r2, #13]
 8015ef0:	7a93      	ldrb	r3, [r2, #10]
 8015ef2:	0040      	lsls	r0, r0, #1
 8015ef4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015ef8:	4303      	orrs	r3, r0
 8015efa:	9301      	str	r3, [sp, #4]
 8015efc:	f8d8 3000 	ldr.w	r3, [r8]
 8015f00:	4639      	mov	r1, r7
 8015f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f04:	4640      	mov	r0, r8
 8015f06:	8895      	ldrh	r5, [r2, #4]
 8015f08:	4798      	blx	r3
 8015f0a:	9b01      	ldr	r3, [sp, #4]
 8015f0c:	4418      	add	r0, r3
 8015f0e:	4406      	add	r6, r0
 8015f10:	b2b6      	uxth	r6, r6
 8015f12:	3401      	adds	r4, #1
 8015f14:	e7d2      	b.n	8015ebc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015f16:	4630      	mov	r0, r6
 8015f18:	b005      	add	sp, #20
 8015f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f1e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015f1e:	2a02      	cmp	r2, #2
 8015f20:	b530      	push	{r4, r5, lr}
 8015f22:	d011      	beq.n	8015f48 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015f24:	2a03      	cmp	r2, #3
 8015f26:	d01c      	beq.n	8015f62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015f28:	2a01      	cmp	r2, #1
 8015f2a:	d10c      	bne.n	8015f46 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015f2c:	888b      	ldrh	r3, [r1, #4]
 8015f2e:	8801      	ldrh	r1, [r0, #0]
 8015f30:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015f34:	1a5b      	subs	r3, r3, r1
 8015f36:	8844      	ldrh	r4, [r0, #2]
 8015f38:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015f3c:	1a9b      	subs	r3, r3, r2
 8015f3e:	8004      	strh	r4, [r0, #0]
 8015f40:	8043      	strh	r3, [r0, #2]
 8015f42:	8081      	strh	r1, [r0, #4]
 8015f44:	80c2      	strh	r2, [r0, #6]
 8015f46:	bd30      	pop	{r4, r5, pc}
 8015f48:	88cb      	ldrh	r3, [r1, #6]
 8015f4a:	8842      	ldrh	r2, [r0, #2]
 8015f4c:	1a9b      	subs	r3, r3, r2
 8015f4e:	88c2      	ldrh	r2, [r0, #6]
 8015f50:	1a9b      	subs	r3, r3, r2
 8015f52:	888a      	ldrh	r2, [r1, #4]
 8015f54:	8801      	ldrh	r1, [r0, #0]
 8015f56:	8043      	strh	r3, [r0, #2]
 8015f58:	1a52      	subs	r2, r2, r1
 8015f5a:	8881      	ldrh	r1, [r0, #4]
 8015f5c:	1a52      	subs	r2, r2, r1
 8015f5e:	8002      	strh	r2, [r0, #0]
 8015f60:	e7f1      	b.n	8015f46 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015f62:	88cb      	ldrh	r3, [r1, #6]
 8015f64:	8841      	ldrh	r1, [r0, #2]
 8015f66:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015f6a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015f6e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015f72:	1a5b      	subs	r3, r3, r1
 8015f74:	1a9b      	subs	r3, r3, r2
 8015f76:	8003      	strh	r3, [r0, #0]
 8015f78:	8045      	strh	r5, [r0, #2]
 8015f7a:	8082      	strh	r2, [r0, #4]
 8015f7c:	80c4      	strh	r4, [r0, #6]
 8015f7e:	e7e2      	b.n	8015f46 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f84:	b09f      	sub	sp, #124	; 0x7c
 8015f86:	9116      	str	r1, [sp, #88]	; 0x58
 8015f88:	9317      	str	r3, [sp, #92]	; 0x5c
 8015f8a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015f8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015f8e:	8809      	ldrh	r1, [r1, #0]
 8015f90:	889b      	ldrh	r3, [r3, #4]
 8015f92:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8015f96:	440b      	add	r3, r1
 8015f98:	b21b      	sxth	r3, r3
 8015f9a:	9310      	str	r3, [sp, #64]	; 0x40
 8015f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8015fa0:	9212      	str	r2, [sp, #72]	; 0x48
 8015fa2:	7b19      	ldrb	r1, [r3, #12]
 8015fa4:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8015fa8:	7adb      	ldrb	r3, [r3, #11]
 8015faa:	9011      	str	r0, [sp, #68]	; 0x44
 8015fac:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8015fb0:	9114      	str	r1, [sp, #80]	; 0x50
 8015fb2:	9315      	str	r3, [sp, #84]	; 0x54
 8015fb4:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8015fb8:	2a00      	cmp	r2, #0
 8015fba:	d06a      	beq.n	8016092 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015fbc:	f898 3010 	ldrb.w	r3, [r8, #16]
 8015fc0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015fc2:	2b06      	cmp	r3, #6
 8015fc4:	bf14      	ite	ne
 8015fc6:	2301      	movne	r3, #1
 8015fc8:	2302      	moveq	r3, #2
 8015fca:	4413      	add	r3, r2
 8015fcc:	f04f 0900 	mov.w	r9, #0
 8015fd0:	464c      	mov	r4, r9
 8015fd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fd4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015fd8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8015fdc:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	f280 808f 	bge.w	8016104 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8015fec:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8015ff0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015ff4:	429c      	cmp	r4, r3
 8015ff6:	d006      	beq.n	8016006 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8015ff8:	f242 020b 	movw	r2, #8203	; 0x200b
 8015ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ffe:	4294      	cmp	r4, r2
 8016000:	bf18      	it	ne
 8016002:	4623      	movne	r3, r4
 8016004:	930d      	str	r3, [sp, #52]	; 0x34
 8016006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016008:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801600a:	f8d8 2000 	ldr.w	r2, [r8]
 801600e:	428b      	cmp	r3, r1
 8016010:	db41      	blt.n	8016096 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8016012:	6813      	ldr	r3, [r2, #0]
 8016014:	4610      	mov	r0, r2
 8016016:	695b      	ldr	r3, [r3, #20]
 8016018:	4798      	blx	r3
 801601a:	4604      	mov	r4, r0
 801601c:	f8d8 0000 	ldr.w	r0, [r8]
 8016020:	aa1d      	add	r2, sp, #116	; 0x74
 8016022:	6803      	ldr	r3, [r0, #0]
 8016024:	4621      	mov	r1, r4
 8016026:	689d      	ldr	r5, [r3, #8]
 8016028:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801602c:	47a8      	blx	r5
 801602e:	901c      	str	r0, [sp, #112]	; 0x70
 8016030:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016034:	429c      	cmp	r4, r3
 8016036:	f000 80eb 	beq.w	8016210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801603a:	f242 030b 	movw	r3, #8203	; 0x200b
 801603e:	429c      	cmp	r4, r3
 8016040:	f000 80e6 	beq.w	8016210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016044:	2c00      	cmp	r4, #0
 8016046:	f000 80f8 	beq.w	801623a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 801604a:	2c0a      	cmp	r4, #10
 801604c:	d060      	beq.n	8016110 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801604e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016050:	b36a      	cbz	r2, 80160ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8016052:	8894      	ldrh	r4, [r2, #4]
 8016054:	f1bb 0f00 	cmp.w	fp, #0
 8016058:	d03b      	beq.n	80160d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801605a:	f892 900d 	ldrb.w	r9, [r2, #13]
 801605e:	f1bb 0f01 	cmp.w	fp, #1
 8016062:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8016066:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801606a:	f892 900a 	ldrb.w	r9, [r2, #10]
 801606e:	ea49 0903 	orr.w	r9, r9, r3
 8016072:	d134      	bne.n	80160de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8016074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016076:	eba6 0609 	sub.w	r6, r6, r9
 801607a:	2b00      	cmp	r3, #0
 801607c:	d14f      	bne.n	801611e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801607e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016080:	eb09 0306 	add.w	r3, r9, r6
 8016084:	4413      	add	r3, r2
 8016086:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016088:	f9b2 2000 	ldrsh.w	r2, [r2]
 801608c:	4293      	cmp	r3, r2
 801608e:	da51      	bge.n	8016134 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8016090:	e038      	b.n	8016104 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8016092:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016094:	e79a      	b.n	8015fcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8016096:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801609a:	9301      	str	r3, [sp, #4]
 801609c:	ab1d      	add	r3, sp, #116	; 0x74
 801609e:	9300      	str	r3, [sp, #0]
 80160a0:	4659      	mov	r1, fp
 80160a2:	ab1c      	add	r3, sp, #112	; 0x70
 80160a4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80160a6:	f002 fe8c 	bl	8018dc2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80160aa:	4604      	mov	r4, r0
 80160ac:	e7c0      	b.n	8016030 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80160ae:	f8d8 0000 	ldr.w	r0, [r8]
 80160b2:	6803      	ldr	r3, [r0, #0]
 80160b4:	691b      	ldr	r3, [r3, #16]
 80160b6:	4798      	blx	r3
 80160b8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80160bc:	4298      	cmp	r0, r3
 80160be:	f000 80a7 	beq.w	8016210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80160c2:	f242 030b 	movw	r3, #8203	; 0x200b
 80160c6:	4298      	cmp	r0, r3
 80160c8:	f000 80a2 	beq.w	8016210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80160cc:	f1bb 0f00 	cmp.w	fp, #0
 80160d0:	d100      	bne.n	80160d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80160d2:	444e      	add	r6, r9
 80160d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80160d6:	2a00      	cmp	r2, #0
 80160d8:	d1bf      	bne.n	801605a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80160da:	4691      	mov	r9, r2
 80160dc:	e098      	b.n	8016210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80160de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	f000 80ac 	beq.w	801623e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2be>
 80160e6:	f1bb 0f00 	cmp.w	fp, #0
 80160ea:	d118      	bne.n	801611e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80160ec:	f8d8 0000 	ldr.w	r0, [r8]
 80160f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80160f2:	6803      	ldr	r3, [r0, #0]
 80160f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160f6:	4798      	blx	r3
 80160f8:	4406      	add	r6, r0
 80160fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160fe:	1af3      	subs	r3, r6, r3
 8016100:	4293      	cmp	r3, r2
 8016102:	dd17      	ble.n	8016134 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8016104:	2c00      	cmp	r4, #0
 8016106:	f000 8098 	beq.w	801623a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 801610a:	2c0a      	cmp	r4, #10
 801610c:	f040 8086 	bne.w	801621c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8016110:	240a      	movs	r4, #10
 8016112:	fab4 f084 	clz	r0, r4
 8016116:	0940      	lsrs	r0, r0, #5
 8016118:	b01f      	add	sp, #124	; 0x7c
 801611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801611e:	f8d8 0000 	ldr.w	r0, [r8]
 8016122:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016124:	6803      	ldr	r3, [r0, #0]
 8016126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016128:	4798      	blx	r3
 801612a:	f1bb 0f01 	cmp.w	fp, #1
 801612e:	eba6 0600 	sub.w	r6, r6, r0
 8016132:	d0a4      	beq.n	801607e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8016134:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016136:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016138:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801613c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8016140:	7b43      	ldrb	r3, [r0, #13]
 8016142:	4431      	add	r1, r6
 8016144:	015b      	lsls	r3, r3, #5
 8016146:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801614a:	7983      	ldrb	r3, [r0, #6]
 801614c:	4313      	orrs	r3, r2
 801614e:	440b      	add	r3, r1
 8016150:	42bb      	cmp	r3, r7
 8016152:	db5d      	blt.n	8016210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016156:	4299      	cmp	r1, r3
 8016158:	da5a      	bge.n	8016210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801615a:	f8d8 0000 	ldr.w	r0, [r8]
 801615e:	42b7      	cmp	r7, r6
 8016160:	6803      	ldr	r3, [r0, #0]
 8016162:	bfc8      	it	gt
 8016164:	1bbf      	subgt	r7, r7, r6
 8016166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016168:	bfcc      	ite	gt
 801616a:	b2bf      	uxthgt	r7, r7
 801616c:	2700      	movle	r7, #0
 801616e:	4798      	blx	r3
 8016170:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016172:	7b5a      	ldrb	r2, [r3, #13]
 8016174:	00d1      	lsls	r1, r2, #3
 8016176:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801617a:	7a19      	ldrb	r1, [r3, #8]
 801617c:	4329      	orrs	r1, r5
 801617e:	0655      	lsls	r5, r2, #25
 8016180:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8016182:	bf44      	itt	mi
 8016184:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8016188:	b209      	sxthmi	r1, r1
 801618a:	1945      	adds	r5, r0, r5
 801618c:	1a6d      	subs	r5, r5, r1
 801618e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016190:	b2ad      	uxth	r5, r5
 8016192:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016196:	fa0f fa85 	sxth.w	sl, r5
 801619a:	4551      	cmp	r1, sl
 801619c:	dd3c      	ble.n	8016218 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801619e:	0112      	lsls	r2, r2, #4
 80161a0:	79d8      	ldrb	r0, [r3, #7]
 80161a2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80161a6:	4302      	orrs	r2, r0
 80161a8:	4492      	add	sl, r2
 80161aa:	4551      	cmp	r1, sl
 80161ac:	dc30      	bgt.n	8016210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80161ae:	468a      	mov	sl, r1
 80161b0:	1b4d      	subs	r5, r1, r5
 80161b2:	b22d      	sxth	r5, r5
 80161b4:	9319      	str	r3, [sp, #100]	; 0x64
 80161b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80161b8:	f8d8 0000 	ldr.w	r0, [r8]
 80161bc:	681a      	ldr	r2, [r3, #0]
 80161be:	6801      	ldr	r1, [r0, #0]
 80161c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80161c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80161c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80161c6:	9218      	str	r2, [sp, #96]	; 0x60
 80161c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80161ca:	4788      	blx	r1
 80161cc:	f898 1006 	ldrb.w	r1, [r8, #6]
 80161d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80161d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80161d4:	f898 100e 	ldrb.w	r1, [r8, #14]
 80161d8:	b2ad      	uxth	r5, r5
 80161da:	910a      	str	r1, [sp, #40]	; 0x28
 80161dc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80161e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80161e2:	9109      	str	r1, [sp, #36]	; 0x24
 80161e4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80161e8:	9305      	str	r3, [sp, #20]
 80161ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80161ec:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80161f0:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80161f4:	4437      	add	r7, r6
 80161f6:	9304      	str	r3, [sp, #16]
 80161f8:	b23f      	sxth	r7, r7
 80161fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80161fc:	9206      	str	r2, [sp, #24]
 80161fe:	f8cd a004 	str.w	sl, [sp, #4]
 8016202:	9700      	str	r7, [sp, #0]
 8016204:	681a      	ldr	r2, [r3, #0]
 8016206:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801620c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801620e:	47a8      	blx	r5
 8016210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016212:	3301      	adds	r3, #1
 8016214:	930e      	str	r3, [sp, #56]	; 0x38
 8016216:	e6e1      	b.n	8015fdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8016218:	2500      	movs	r5, #0
 801621a:	e7cb      	b.n	80161b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801621c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801621e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016220:	3501      	adds	r5, #1
 8016222:	429d      	cmp	r5, r3
 8016224:	f6bf af75 	bge.w	8016112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8016228:	4659      	mov	r1, fp
 801622a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801622c:	f7fb fc40 	bl	8011ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016230:	4604      	mov	r4, r0
 8016232:	b110      	cbz	r0, 801623a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8016234:	280a      	cmp	r0, #10
 8016236:	d1f2      	bne.n	801621e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8016238:	e76a      	b.n	8016110 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801623a:	2400      	movs	r4, #0
 801623c:	e769      	b.n	8016112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801623e:	f1bb 0f00 	cmp.w	fp, #0
 8016242:	f43f af5a 	beq.w	80160fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8016246:	e775      	b.n	8016134 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08016248 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8016248:	b530      	push	{r4, r5, lr}
 801624a:	8ac4      	ldrh	r4, [r0, #22]
 801624c:	8b45      	ldrh	r5, [r0, #26]
 801624e:	8343      	strh	r3, [r0, #26]
 8016250:	442c      	add	r4, r5
 8016252:	1ae4      	subs	r4, r4, r3
 8016254:	82c4      	strh	r4, [r0, #22]
 8016256:	8b83      	ldrh	r3, [r0, #28]
 8016258:	8b04      	ldrh	r4, [r0, #24]
 801625a:	4422      	add	r2, r4
 801625c:	440c      	add	r4, r1
 801625e:	1a59      	subs	r1, r3, r1
 8016260:	83c2      	strh	r2, [r0, #30]
 8016262:	8304      	strh	r4, [r0, #24]
 8016264:	8381      	strh	r1, [r0, #28]
 8016266:	bd30      	pop	{r4, r5, pc}

08016268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8016268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801626c:	4604      	mov	r4, r0
 801626e:	8a47      	ldrh	r7, [r0, #18]
 8016270:	68c0      	ldr	r0, [r0, #12]
 8016272:	b085      	sub	sp, #20
 8016274:	6803      	ldr	r3, [r0, #0]
 8016276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016278:	4798      	blx	r3
 801627a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801627e:	7a63      	ldrb	r3, [r4, #9]
 8016280:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8016284:	42b7      	cmp	r7, r6
 8016286:	f103 33ff 	add.w	r3, r3, #4294967295
 801628a:	bfac      	ite	ge
 801628c:	f04f 0900 	movge.w	r9, #0
 8016290:	f04f 0901 	movlt.w	r9, #1
 8016294:	2b05      	cmp	r3, #5
 8016296:	d804      	bhi.n	80162a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 8016298:	e8df f003 	tbb	[pc, r3]
 801629c:	460e0852 	.word	0x460e0852
 80162a0:	4b4b      	.short	0x4b4b
 80162a2:	2500      	movs	r5, #0
 80162a4:	46a9      	mov	r9, r5
 80162a6:	462e      	mov	r6, r5
 80162a8:	462f      	mov	r7, r5
 80162aa:	e00d      	b.n	80162c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80162ac:	42b7      	cmp	r7, r6
 80162ae:	bfb4      	ite	lt
 80162b0:	2600      	movlt	r6, #0
 80162b2:	2601      	movge	r6, #1
 80162b4:	2500      	movs	r5, #0
 80162b6:	e7f7      	b.n	80162a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 80162b8:	464d      	mov	r5, r9
 80162ba:	f04f 0900 	mov.w	r9, #0
 80162be:	42b7      	cmp	r7, r6
 80162c0:	bfb4      	ite	lt
 80162c2:	2600      	movlt	r6, #0
 80162c4:	2601      	movge	r6, #1
 80162c6:	464f      	mov	r7, r9
 80162c8:	f04f 0800 	mov.w	r8, #0
 80162cc:	f8a4 8016 	strh.w	r8, [r4, #22]
 80162d0:	f8a4 8018 	strh.w	r8, [r4, #24]
 80162d4:	f8cd 8004 	str.w	r8, [sp, #4]
 80162d8:	2300      	movs	r3, #0
 80162da:	9303      	str	r3, [sp, #12]
 80162dc:	8823      	ldrh	r3, [r4, #0]
 80162de:	2b20      	cmp	r3, #32
 80162e0:	d032      	beq.n	8016348 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe0>
 80162e2:	f242 010b 	movw	r1, #8203	; 0x200b
 80162e6:	1a5a      	subs	r2, r3, r1
 80162e8:	f1d2 0a00 	rsbs	sl, r2, #0
 80162ec:	eb4a 0a02 	adc.w	sl, sl, r2
 80162f0:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80162f4:	4293      	cmp	r3, r2
 80162f6:	d008      	beq.n	801630a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80162f8:	428b      	cmp	r3, r1
 80162fa:	9a01      	ldr	r2, [sp, #4]
 80162fc:	bf16      	itet	ne
 80162fe:	461a      	movne	r2, r3
 8016300:	f04f 0a01 	moveq.w	sl, #1
 8016304:	f04f 0a00 	movne.w	sl, #0
 8016308:	9201      	str	r2, [sp, #4]
 801630a:	ab03      	add	r3, sp, #12
 801630c:	68e2      	ldr	r2, [r4, #12]
 801630e:	7a21      	ldrb	r1, [r4, #8]
 8016310:	6860      	ldr	r0, [r4, #4]
 8016312:	f002 fd0d 	bl	8018d30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016316:	8020      	strh	r0, [r4, #0]
 8016318:	b9d0      	cbnz	r0, 8016350 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe8>
 801631a:	2300      	movs	r3, #0
 801631c:	8ba2      	ldrh	r2, [r4, #28]
 801631e:	4611      	mov	r1, r2
 8016320:	4620      	mov	r0, r4
 8016322:	f7ff ff91 	bl	8016248 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016326:	e06d      	b.n	8016404 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 8016328:	2500      	movs	r5, #0
 801632a:	2701      	movs	r7, #1
 801632c:	46a9      	mov	r9, r5
 801632e:	462e      	mov	r6, r5
 8016330:	e7ca      	b.n	80162c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016332:	2500      	movs	r5, #0
 8016334:	42b7      	cmp	r7, r6
 8016336:	bfb4      	ite	lt
 8016338:	2700      	movlt	r7, #0
 801633a:	2701      	movge	r7, #1
 801633c:	462e      	mov	r6, r5
 801633e:	e7c3      	b.n	80162c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016340:	2500      	movs	r5, #0
 8016342:	2601      	movs	r6, #1
 8016344:	46a9      	mov	r9, r5
 8016346:	e7af      	b.n	80162a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8016348:	9301      	str	r3, [sp, #4]
 801634a:	f04f 0a01 	mov.w	sl, #1
 801634e:	e7dc      	b.n	801630a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8016350:	8b63      	ldrh	r3, [r4, #26]
 8016352:	280a      	cmp	r0, #10
 8016354:	f103 0301 	add.w	r3, r3, #1
 8016358:	8363      	strh	r3, [r4, #26]
 801635a:	d0de      	beq.n	801631a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801635c:	9a03      	ldr	r2, [sp, #12]
 801635e:	bb62      	cbnz	r2, 80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x152>
 8016360:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016364:	4298      	cmp	r0, r3
 8016366:	d003      	beq.n	8016370 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 8016368:	f242 030b 	movw	r3, #8203	; 0x200b
 801636c:	4298      	cmp	r0, r3
 801636e:	d1b3      	bne.n	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016370:	8823      	ldrh	r3, [r4, #0]
 8016372:	8ba1      	ldrh	r1, [r4, #28]
 8016374:	2b20      	cmp	r3, #32
 8016376:	d003      	beq.n	8016380 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x118>
 8016378:	f242 000b 	movw	r0, #8203	; 0x200b
 801637c:	4283      	cmp	r3, r0
 801637e:	d131      	bne.n	80163e4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17c>
 8016380:	f1ba 0f00 	cmp.w	sl, #0
 8016384:	bf0a      	itet	eq
 8016386:	4688      	moveq	r8, r1
 8016388:	4650      	movne	r0, sl
 801638a:	2001      	moveq	r0, #1
 801638c:	440a      	add	r2, r1
 801638e:	8b23      	ldrh	r3, [r4, #24]
 8016390:	b292      	uxth	r2, r2
 8016392:	83a2      	strh	r2, [r4, #28]
 8016394:	4413      	add	r3, r2
 8016396:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801639a:	f1b9 0f00 	cmp.w	r9, #0
 801639e:	d102      	bne.n	80163a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x13e>
 80163a0:	2d00      	cmp	r5, #0
 80163a2:	d042      	beq.n	801642a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c2>
 80163a4:	b300      	cbz	r0, 80163e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 80163a6:	8c21      	ldrh	r1, [r4, #32]
 80163a8:	4419      	add	r1, r3
 80163aa:	458c      	cmp	ip, r1
 80163ac:	da37      	bge.n	801641e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 80163ae:	8ae1      	ldrh	r1, [r4, #22]
 80163b0:	2900      	cmp	r1, #0
 80163b2:	d034      	beq.n	801641e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 80163b4:	4563      	cmp	r3, ip
 80163b6:	dd8f      	ble.n	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80163b8:	e01d      	b.n	80163f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x18e>
 80163ba:	8893      	ldrh	r3, [r2, #4]
 80163bc:	9901      	ldr	r1, [sp, #4]
 80163be:	8023      	strh	r3, [r4, #0]
 80163c0:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80163c4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80163c8:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 80163cc:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80163d0:	ea4b 0b00 	orr.w	fp, fp, r0
 80163d4:	68e0      	ldr	r0, [r4, #12]
 80163d6:	6803      	ldr	r3, [r0, #0]
 80163d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163da:	4798      	blx	r3
 80163dc:	eb0b 0200 	add.w	r2, fp, r0
 80163e0:	b292      	uxth	r2, r2
 80163e2:	e7c5      	b.n	8016370 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 80163e4:	2000      	movs	r0, #0
 80163e6:	e7d1      	b.n	801638c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x124>
 80163e8:	4563      	cmp	r3, ip
 80163ea:	f77f af75 	ble.w	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80163ee:	8ae3      	ldrh	r3, [r4, #22]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	f43f af71 	beq.w	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80163f6:	2301      	movs	r3, #1
 80163f8:	8c22      	ldrh	r2, [r4, #32]
 80163fa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80163fe:	8be3      	ldrh	r3, [r4, #30]
 8016400:	4413      	add	r3, r2
 8016402:	83e3      	strh	r3, [r4, #30]
 8016404:	68e0      	ldr	r0, [r4, #12]
 8016406:	6803      	ldr	r3, [r0, #0]
 8016408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801640a:	4798      	blx	r3
 801640c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016410:	4418      	add	r0, r3
 8016412:	8a63      	ldrh	r3, [r4, #18]
 8016414:	1a18      	subs	r0, r3, r0
 8016416:	8260      	strh	r0, [r4, #18]
 8016418:	b005      	add	sp, #20
 801641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801641e:	2300      	movs	r3, #0
 8016420:	4611      	mov	r1, r2
 8016422:	4620      	mov	r0, r4
 8016424:	f7ff ff10 	bl	8016248 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016428:	e756      	b.n	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801642a:	4563      	cmp	r3, ip
 801642c:	dd14      	ble.n	8016458 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f0>
 801642e:	b117      	cbz	r7, 8016436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ce>
 8016430:	2301      	movs	r3, #1
 8016432:	460a      	mov	r2, r1
 8016434:	e773      	b.n	801631e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8016436:	2e00      	cmp	r6, #0
 8016438:	f43f af4e 	beq.w	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801643c:	2800      	cmp	r0, #0
 801643e:	f47f af4b 	bne.w	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016442:	f1ba 0f00 	cmp.w	sl, #0
 8016446:	d002      	beq.n	801644e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e6>
 8016448:	2301      	movs	r3, #1
 801644a:	4642      	mov	r2, r8
 801644c:	e768      	b.n	8016320 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801644e:	8ae3      	ldrh	r3, [r4, #22]
 8016450:	2b00      	cmp	r3, #0
 8016452:	f43f af41 	beq.w	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016456:	e7d5      	b.n	8016404 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 8016458:	2800      	cmp	r0, #0
 801645a:	f47f af3d 	bne.w	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801645e:	f1ba 0f00 	cmp.w	sl, #0
 8016462:	f43f af39 	beq.w	80162d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016466:	2301      	movs	r3, #1
 8016468:	4642      	mov	r2, r8
 801646a:	e7da      	b.n	8016422 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>

0801646c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016470:	b0e3      	sub	sp, #396	; 0x18c
 8016472:	461c      	mov	r4, r3
 8016474:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8016476:	4683      	mov	fp, r0
 8016478:	4688      	mov	r8, r1
 801647a:	2b00      	cmp	r3, #0
 801647c:	f000 8112 	beq.w	80166a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016480:	6823      	ldr	r3, [r4, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	f000 810e 	beq.w	80166a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016488:	7ba3      	ldrb	r3, [r4, #14]
 801648a:	2b00      	cmp	r3, #0
 801648c:	f000 810a 	beq.w	80166a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016490:	ad0a      	add	r5, sp, #40	; 0x28
 8016492:	462b      	mov	r3, r5
 8016494:	6810      	ldr	r0, [r2, #0]
 8016496:	6851      	ldr	r1, [r2, #4]
 8016498:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801649c:	c303      	stmia	r3!, {r0, r1}
 801649e:	2100      	movs	r1, #0
 80164a0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80164a4:	910c      	str	r1, [sp, #48]	; 0x30
 80164a6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80164aa:	a90c      	add	r1, sp, #48	; 0x30
 80164ac:	79a2      	ldrb	r2, [r4, #6]
 80164ae:	4628      	mov	r0, r5
 80164b0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80164b4:	f7ff fd33 	bl	8015f1e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80164b8:	a90c      	add	r1, sp, #48	; 0x30
 80164ba:	4608      	mov	r0, r1
 80164bc:	79a2      	ldrb	r2, [r4, #6]
 80164be:	f7ff fd2e 	bl	8015f1e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80164c2:	a817      	add	r0, sp, #92	; 0x5c
 80164c4:	f002 f8f2 	bl	80186ac <_ZN8touchgfx12TextProviderC1Ev>
 80164c8:	6820      	ldr	r0, [r4, #0]
 80164ca:	6803      	ldr	r3, [r0, #0]
 80164cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80164ce:	4798      	blx	r3
 80164d0:	4606      	mov	r6, r0
 80164d2:	6820      	ldr	r0, [r4, #0]
 80164d4:	6803      	ldr	r3, [r0, #0]
 80164d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164d8:	4798      	blx	r3
 80164da:	4633      	mov	r3, r6
 80164dc:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80164de:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80164e0:	9000      	str	r0, [sp, #0]
 80164e2:	a817      	add	r0, sp, #92	; 0x5c
 80164e4:	f002 f935 	bl	8018752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80164e8:	6820      	ldr	r0, [r4, #0]
 80164ea:	f894 a004 	ldrb.w	sl, [r4, #4]
 80164ee:	6803      	ldr	r3, [r0, #0]
 80164f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164f2:	4798      	blx	r3
 80164f4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80164f8:	6823      	ldr	r3, [r4, #0]
 80164fa:	4607      	mov	r7, r0
 80164fc:	4406      	add	r6, r0
 80164fe:	a830      	add	r0, sp, #192	; 0xc0
 8016500:	f893 9009 	ldrb.w	r9, [r3, #9]
 8016504:	f002 f8d2 	bl	80186ac <_ZN8touchgfx12TextProviderC1Ev>
 8016508:	7c23      	ldrb	r3, [r4, #16]
 801650a:	b17b      	cbz	r3, 801652c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801650c:	6820      	ldr	r0, [r4, #0]
 801650e:	6803      	ldr	r3, [r0, #0]
 8016510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016512:	4798      	blx	r3
 8016514:	9009      	str	r0, [sp, #36]	; 0x24
 8016516:	6820      	ldr	r0, [r4, #0]
 8016518:	6802      	ldr	r2, [r0, #0]
 801651a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801651c:	4790      	blx	r2
 801651e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016520:	9000      	str	r0, [sp, #0]
 8016522:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8016524:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8016526:	a830      	add	r0, sp, #192	; 0xc0
 8016528:	f002 f913 	bl	8018752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801652c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016530:	7be2      	ldrb	r2, [r4, #15]
 8016532:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8016536:	1a8a      	subs	r2, r1, r2
 8016538:	7c21      	ldrb	r1, [r4, #16]
 801653a:	b292      	uxth	r2, r2
 801653c:	9103      	str	r1, [sp, #12]
 801653e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8016542:	a80e      	add	r0, sp, #56	; 0x38
 8016544:	9102      	str	r1, [sp, #8]
 8016546:	6821      	ldr	r1, [r4, #0]
 8016548:	9101      	str	r1, [sp, #4]
 801654a:	7961      	ldrb	r1, [r4, #5]
 801654c:	9100      	str	r1, [sp, #0]
 801654e:	a930      	add	r1, sp, #192	; 0xc0
 8016550:	f7ff fc66 	bl	8015e20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016554:	2e00      	cmp	r6, #0
 8016556:	dc5b      	bgt.n	8016610 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8016558:	f04f 0900 	mov.w	r9, #0
 801655c:	af17      	add	r7, sp, #92	; 0x5c
 801655e:	7c23      	ldrb	r3, [r4, #16]
 8016560:	2b00      	cmp	r3, #0
 8016562:	f000 80b1 	beq.w	80166c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016566:	a80e      	add	r0, sp, #56	; 0x38
 8016568:	f7ff fe7e 	bl	8016268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801656c:	f1ba 0f00 	cmp.w	sl, #0
 8016570:	f000 80a5 	beq.w	80166be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016574:	7c23      	ldrb	r3, [r4, #16]
 8016576:	2264      	movs	r2, #100	; 0x64
 8016578:	4639      	mov	r1, r7
 801657a:	a849      	add	r0, sp, #292	; 0x124
 801657c:	9309      	str	r3, [sp, #36]	; 0x24
 801657e:	f010 fff4 	bl	802756a <memcpy>
 8016582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016584:	2b00      	cmp	r3, #0
 8016586:	f000 80a7 	beq.w	80166d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801658a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801658e:	7922      	ldrb	r2, [r4, #4]
 8016590:	2a01      	cmp	r2, #1
 8016592:	f040 808a 	bne.w	80166aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8016596:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801659a:	1ac0      	subs	r0, r0, r3
 801659c:	2302      	movs	r3, #2
 801659e:	fb90 f0f3 	sdiv	r0, r0, r3
 80165a2:	b200      	sxth	r0, r0
 80165a4:	7c23      	ldrb	r3, [r4, #16]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f000 808b 	beq.w	80166c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80165ac:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 80165b0:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 80165b4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80165b8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80165bc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80165c0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80165c4:	4410      	add	r0, r2
 80165c6:	b200      	sxth	r0, r0
 80165c8:	9000      	str	r0, [sp, #0]
 80165ca:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80165ce:	4642      	mov	r2, r8
 80165d0:	2100      	movs	r1, #0
 80165d2:	4658      	mov	r0, fp
 80165d4:	f7ff fcd4 	bl	8015f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80165d8:	2800      	cmp	r0, #0
 80165da:	d163      	bne.n	80166a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80165dc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80165e0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80165e4:	b2b2      	uxth	r2, r6
 80165e6:	4413      	add	r3, r2
 80165e8:	1a8a      	subs	r2, r1, r2
 80165ea:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80165ee:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 80165f2:	b21b      	sxth	r3, r3
 80165f4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80165f8:	2a00      	cmp	r2, #0
 80165fa:	d153      	bne.n	80166a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80165fc:	6822      	ldr	r2, [r4, #0]
 80165fe:	8869      	ldrh	r1, [r5, #2]
 8016600:	7a12      	ldrb	r2, [r2, #8]
 8016602:	1a9b      	subs	r3, r3, r2
 8016604:	88ea      	ldrh	r2, [r5, #6]
 8016606:	440a      	add	r2, r1
 8016608:	b212      	sxth	r2, r2
 801660a:	4293      	cmp	r3, r2
 801660c:	dda7      	ble.n	801655e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801660e:	e049      	b.n	80166a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016610:	7c23      	ldrb	r3, [r4, #16]
 8016612:	444f      	add	r7, r9
 8016614:	b1c3      	cbz	r3, 8016648 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8016616:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801661a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801661e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016622:	443b      	add	r3, r7
 8016624:	4293      	cmp	r3, r2
 8016626:	da97      	bge.n	8016558 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016628:	a80e      	add	r0, sp, #56	; 0x38
 801662a:	f7ff fe1d 	bl	8016268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801662e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8016632:	3b01      	subs	r3, #1
 8016634:	b29b      	uxth	r3, r3
 8016636:	454b      	cmp	r3, r9
 8016638:	9309      	str	r3, [sp, #36]	; 0x24
 801663a:	d021      	beq.n	8016680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801663c:	7961      	ldrb	r1, [r4, #5]
 801663e:	a817      	add	r0, sp, #92	; 0x5c
 8016640:	f7fb fa36 	bl	8011ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016646:	e7f4      	b.n	8016632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8016648:	fa1f f986 	uxth.w	r9, r6
 801664c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016650:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016654:	443b      	add	r3, r7
 8016656:	4293      	cmp	r3, r2
 8016658:	f6bf af7e 	bge.w	8016558 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801665c:	a817      	add	r0, sp, #92	; 0x5c
 801665e:	f002 fc35 	bl	8018ecc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016662:	b1f8      	cbz	r0, 80166a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016664:	280a      	cmp	r0, #10
 8016666:	d1f1      	bne.n	801664c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016668:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801666c:	444b      	add	r3, r9
 801666e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016672:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8016676:	eba3 0309 	sub.w	r3, r3, r9
 801667a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801667e:	e7e5      	b.n	801664c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016680:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8016684:	b2b3      	uxth	r3, r6
 8016686:	441a      	add	r2, r3
 8016688:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801668c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8016690:	1ad3      	subs	r3, r2, r3
 8016692:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016696:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801669a:	b11b      	cbz	r3, 80166a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801669c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d0ba      	beq.n	801661a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80166a4:	b063      	add	sp, #396	; 0x18c
 80166a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166aa:	2a02      	cmp	r2, #2
 80166ac:	d105      	bne.n	80166ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80166ae:	7be2      	ldrb	r2, [r4, #15]
 80166b0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80166b4:	1a80      	subs	r0, r0, r2
 80166b6:	1ac0      	subs	r0, r0, r3
 80166b8:	e773      	b.n	80165a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80166ba:	2000      	movs	r0, #0
 80166bc:	e772      	b.n	80165a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80166be:	7be0      	ldrb	r0, [r4, #15]
 80166c0:	e770      	b.n	80165a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80166c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80166c6:	e773      	b.n	80165b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80166c8:	f1ba 0f00 	cmp.w	sl, #0
 80166cc:	d0f7      	beq.n	80166be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80166ce:	2264      	movs	r2, #100	; 0x64
 80166d0:	4639      	mov	r1, r7
 80166d2:	a849      	add	r0, sp, #292	; 0x124
 80166d4:	f010 ff49 	bl	802756a <memcpy>
 80166d8:	2300      	movs	r3, #0
 80166da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80166de:	6821      	ldr	r1, [r4, #0]
 80166e0:	a849      	add	r0, sp, #292	; 0x124
 80166e2:	f7ff fbe0 	bl	8015ea6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80166e6:	b203      	sxth	r3, r0
 80166e8:	e751      	b.n	801658e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080166ea <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80166ea:	2b03      	cmp	r3, #3
 80166ec:	d818      	bhi.n	8016720 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80166ee:	e8df f003 	tbb	[pc, r3]
 80166f2:	0602      	.short	0x0602
 80166f4:	130d      	.short	0x130d
 80166f6:	f9b0 2000 	ldrsh.w	r2, [r0]
 80166fa:	1850      	adds	r0, r2, r1
 80166fc:	4770      	bx	lr
 80166fe:	8803      	ldrh	r3, [r0, #0]
 8016700:	8880      	ldrh	r0, [r0, #4]
 8016702:	4418      	add	r0, r3
 8016704:	b200      	sxth	r0, r0
 8016706:	1a80      	subs	r0, r0, r2
 8016708:	3801      	subs	r0, #1
 801670a:	4770      	bx	lr
 801670c:	8803      	ldrh	r3, [r0, #0]
 801670e:	8880      	ldrh	r0, [r0, #4]
 8016710:	4418      	add	r0, r3
 8016712:	b200      	sxth	r0, r0
 8016714:	1a40      	subs	r0, r0, r1
 8016716:	e7f7      	b.n	8016708 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016718:	f9b0 0000 	ldrsh.w	r0, [r0]
 801671c:	4410      	add	r0, r2
 801671e:	4770      	bx	lr
 8016720:	2000      	movs	r0, #0
 8016722:	4770      	bx	lr

08016724 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016724:	2b03      	cmp	r3, #3
 8016726:	d817      	bhi.n	8016758 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8016728:	e8df f003 	tbb	[pc, r3]
 801672c:	10090602 	.word	0x10090602
 8016730:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016734:	1850      	adds	r0, r2, r1
 8016736:	4770      	bx	lr
 8016738:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801673c:	e7fa      	b.n	8016734 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801673e:	8843      	ldrh	r3, [r0, #2]
 8016740:	88c0      	ldrh	r0, [r0, #6]
 8016742:	4418      	add	r0, r3
 8016744:	b200      	sxth	r0, r0
 8016746:	1a80      	subs	r0, r0, r2
 8016748:	3801      	subs	r0, #1
 801674a:	4770      	bx	lr
 801674c:	8843      	ldrh	r3, [r0, #2]
 801674e:	88c0      	ldrh	r0, [r0, #6]
 8016750:	4418      	add	r0, r3
 8016752:	b200      	sxth	r0, r0
 8016754:	1a40      	subs	r0, r0, r1
 8016756:	e7f7      	b.n	8016748 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016758:	2000      	movs	r0, #0
 801675a:	4770      	bx	lr

0801675c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801675c:	2200      	movs	r2, #0
 801675e:	4b01      	ldr	r3, [pc, #4]	; (8016764 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016760:	601a      	str	r2, [r3, #0]
 8016762:	4770      	bx	lr
 8016764:	2000f39c 	.word	0x2000f39c

08016768 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016768:	4603      	mov	r3, r0
 801676a:	b1c8      	cbz	r0, 80167a0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801676c:	0c02      	lsrs	r2, r0, #16
 801676e:	0412      	lsls	r2, r2, #16
 8016770:	b9a2      	cbnz	r2, 801679c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016772:	0403      	lsls	r3, r0, #16
 8016774:	2010      	movs	r0, #16
 8016776:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801677a:	bf04      	itt	eq
 801677c:	021b      	lsleq	r3, r3, #8
 801677e:	3008      	addeq	r0, #8
 8016780:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016784:	bf04      	itt	eq
 8016786:	011b      	lsleq	r3, r3, #4
 8016788:	3004      	addeq	r0, #4
 801678a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801678e:	bf04      	itt	eq
 8016790:	009b      	lsleq	r3, r3, #2
 8016792:	3002      	addeq	r0, #2
 8016794:	2b00      	cmp	r3, #0
 8016796:	db04      	blt.n	80167a2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016798:	3001      	adds	r0, #1
 801679a:	4770      	bx	lr
 801679c:	2000      	movs	r0, #0
 801679e:	e7ea      	b.n	8016776 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80167a0:	2020      	movs	r0, #32
 80167a2:	4770      	bx	lr

080167a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80167a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a8:	b087      	sub	sp, #28
 80167aa:	460d      	mov	r5, r1
 80167ac:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80167b0:	4616      	mov	r6, r2
 80167b2:	4698      	mov	r8, r3
 80167b4:	4601      	mov	r1, r0
 80167b6:	b120      	cbz	r0, 80167c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80167b8:	b11a      	cbz	r2, 80167c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80167ba:	2d1f      	cmp	r5, #31
 80167bc:	d801      	bhi.n	80167c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80167be:	2b1f      	cmp	r3, #31
 80167c0:	d904      	bls.n	80167cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80167c2:	2000      	movs	r0, #0
 80167c4:	6038      	str	r0, [r7, #0]
 80167c6:	b007      	add	sp, #28
 80167c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167cc:	b97d      	cbnz	r5, 80167ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80167ce:	b143      	cbz	r3, 80167e2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80167d0:	4602      	mov	r2, r0
 80167d2:	e9cd 4700 	strd	r4, r7, [sp]
 80167d6:	462b      	mov	r3, r5
 80167d8:	4641      	mov	r1, r8
 80167da:	4630      	mov	r0, r6
 80167dc:	f7ff ffe2 	bl	80167a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80167e0:	e7f1      	b.n	80167c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80167e2:	f04f 33ff 	mov.w	r3, #4294967295
 80167e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80167ea:	603b      	str	r3, [r7, #0]
 80167ec:	e7eb      	b.n	80167c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80167ee:	fa32 fa05 	lsrs.w	sl, r2, r5
 80167f2:	d106      	bne.n	8016802 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80167f4:	4346      	muls	r6, r0
 80167f6:	fbb6 f0f4 	udiv	r0, r6, r4
 80167fa:	fb04 6610 	mls	r6, r4, r0, r6
 80167fe:	603e      	str	r6, [r7, #0]
 8016800:	e7e1      	b.n	80167c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016802:	fa00 fb05 	lsl.w	fp, r0, r5
 8016806:	fbbb f9f4 	udiv	r9, fp, r4
 801680a:	2201      	movs	r2, #1
 801680c:	fb0a f309 	mul.w	r3, sl, r9
 8016810:	40aa      	lsls	r2, r5
 8016812:	3a01      	subs	r2, #1
 8016814:	4016      	ands	r6, r2
 8016816:	4630      	mov	r0, r6
 8016818:	9303      	str	r3, [sp, #12]
 801681a:	f7ff ffa5 	bl	8016768 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801681e:	462b      	mov	r3, r5
 8016820:	460a      	mov	r2, r1
 8016822:	e9cd 4700 	strd	r4, r7, [sp]
 8016826:	4601      	mov	r1, r0
 8016828:	4630      	mov	r0, r6
 801682a:	f7ff ffbb 	bl	80167a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801682e:	fb04 b919 	mls	r9, r4, r9, fp
 8016832:	4606      	mov	r6, r0
 8016834:	4648      	mov	r0, r9
 8016836:	eb05 0108 	add.w	r1, r5, r8
 801683a:	f7ff ff95 	bl	8016768 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801683e:	ab05      	add	r3, sp, #20
 8016840:	e9cd 4300 	strd	r4, r3, [sp]
 8016844:	464a      	mov	r2, r9
 8016846:	4603      	mov	r3, r0
 8016848:	4650      	mov	r0, sl
 801684a:	f7ff ffab 	bl	80167a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801684e:	6839      	ldr	r1, [r7, #0]
 8016850:	9a05      	ldr	r2, [sp, #20]
 8016852:	9b03      	ldr	r3, [sp, #12]
 8016854:	4411      	add	r1, r2
 8016856:	fbb1 f2f4 	udiv	r2, r1, r4
 801685a:	fb04 1412 	mls	r4, r4, r2, r1
 801685e:	18d3      	adds	r3, r2, r3
 8016860:	441e      	add	r6, r3
 8016862:	4430      	add	r0, r6
 8016864:	603c      	str	r4, [r7, #0]
 8016866:	e7ae      	b.n	80167c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08016868 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801686c:	b085      	sub	sp, #20
 801686e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016870:	f1b0 0900 	subs.w	r9, r0, #0
 8016874:	461d      	mov	r5, r3
 8016876:	bfbf      	itttt	lt
 8016878:	6823      	ldrlt	r3, [r4, #0]
 801687a:	f1c9 0900 	rsblt	r9, r9, #0
 801687e:	425b      	neglt	r3, r3
 8016880:	6023      	strlt	r3, [r4, #0]
 8016882:	bfb4      	ite	lt
 8016884:	f04f 36ff 	movlt.w	r6, #4294967295
 8016888:	2601      	movge	r6, #1
 801688a:	2a00      	cmp	r2, #0
 801688c:	4617      	mov	r7, r2
 801688e:	da04      	bge.n	801689a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016890:	6823      	ldr	r3, [r4, #0]
 8016892:	4257      	negs	r7, r2
 8016894:	425b      	negs	r3, r3
 8016896:	4276      	negs	r6, r6
 8016898:	6023      	str	r3, [r4, #0]
 801689a:	2d00      	cmp	r5, #0
 801689c:	4638      	mov	r0, r7
 801689e:	bfba      	itte	lt
 80168a0:	426d      	neglt	r5, r5
 80168a2:	f04f 38ff 	movlt.w	r8, #4294967295
 80168a6:	f04f 0801 	movge.w	r8, #1
 80168aa:	f7ff ff5d 	bl	8016768 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80168ae:	ab03      	add	r3, sp, #12
 80168b0:	e9cd 5300 	strd	r5, r3, [sp]
 80168b4:	463a      	mov	r2, r7
 80168b6:	4603      	mov	r3, r0
 80168b8:	4648      	mov	r0, r9
 80168ba:	f7ff ff73 	bl	80167a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80168be:	6823      	ldr	r3, [r4, #0]
 80168c0:	9a03      	ldr	r2, [sp, #12]
 80168c2:	4546      	cmp	r6, r8
 80168c4:	441a      	add	r2, r3
 80168c6:	fb92 f3f5 	sdiv	r3, r2, r5
 80168ca:	4418      	add	r0, r3
 80168cc:	fb05 2313 	mls	r3, r5, r3, r2
 80168d0:	bf18      	it	ne
 80168d2:	4240      	negne	r0, r0
 80168d4:	1c72      	adds	r2, r6, #1
 80168d6:	6023      	str	r3, [r4, #0]
 80168d8:	d105      	bne.n	80168e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80168da:	2b00      	cmp	r3, #0
 80168dc:	f1c3 0200 	rsb	r2, r3, #0
 80168e0:	db0b      	blt.n	80168fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80168e2:	6022      	str	r2, [r4, #0]
 80168e4:	e006      	b.n	80168f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80168e6:	2e01      	cmp	r6, #1
 80168e8:	d104      	bne.n	80168f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	da02      	bge.n	80168f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80168ee:	442b      	add	r3, r5
 80168f0:	3801      	subs	r0, #1
 80168f2:	6023      	str	r3, [r4, #0]
 80168f4:	b005      	add	sp, #20
 80168f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168fa:	3801      	subs	r0, #1
 80168fc:	1b52      	subs	r2, r2, r5
 80168fe:	e7f0      	b.n	80168e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08016900 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016900:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016904:	4c1c      	ldr	r4, [pc, #112]	; (8016978 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016906:	4605      	mov	r5, r0
 8016908:	69a3      	ldr	r3, [r4, #24]
 801690a:	6807      	ldr	r7, [r0, #0]
 801690c:	b92b      	cbnz	r3, 801691a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801690e:	6840      	ldr	r0, [r0, #4]
 8016910:	e9c5 7000 	strd	r7, r0, [r5]
 8016914:	b004      	add	sp, #16
 8016916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801691a:	f04f 0802 	mov.w	r8, #2
 801691e:	fb93 f1f8 	sdiv	r1, r3, r8
 8016922:	68a2      	ldr	r2, [r4, #8]
 8016924:	ae04      	add	r6, sp, #16
 8016926:	440a      	add	r2, r1
 8016928:	f846 2d04 	str.w	r2, [r6, #-4]!
 801692c:	69e1      	ldr	r1, [r4, #28]
 801692e:	463a      	mov	r2, r7
 8016930:	9600      	str	r6, [sp, #0]
 8016932:	6820      	ldr	r0, [r4, #0]
 8016934:	f7ff ff98 	bl	8016868 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016938:	69a3      	ldr	r3, [r4, #24]
 801693a:	4607      	mov	r7, r0
 801693c:	686a      	ldr	r2, [r5, #4]
 801693e:	6a21      	ldr	r1, [r4, #32]
 8016940:	9600      	str	r6, [sp, #0]
 8016942:	6860      	ldr	r0, [r4, #4]
 8016944:	f7ff ff90 	bl	8016868 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016948:	69a3      	ldr	r3, [r4, #24]
 801694a:	6962      	ldr	r2, [r4, #20]
 801694c:	fb93 f8f8 	sdiv	r8, r3, r8
 8016950:	4442      	add	r2, r8
 8016952:	9203      	str	r2, [sp, #12]
 8016954:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016956:	682a      	ldr	r2, [r5, #0]
 8016958:	4407      	add	r7, r0
 801695a:	9600      	str	r6, [sp, #0]
 801695c:	68e0      	ldr	r0, [r4, #12]
 801695e:	f7ff ff83 	bl	8016868 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016962:	9600      	str	r6, [sp, #0]
 8016964:	4680      	mov	r8, r0
 8016966:	69a3      	ldr	r3, [r4, #24]
 8016968:	686a      	ldr	r2, [r5, #4]
 801696a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801696c:	6920      	ldr	r0, [r4, #16]
 801696e:	f7ff ff7b 	bl	8016868 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016972:	4440      	add	r0, r8
 8016974:	e7cc      	b.n	8016910 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016976:	bf00      	nop
 8016978:	2000f3a0 	.word	0x2000f3a0

0801697c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801697c:	4b07      	ldr	r3, [pc, #28]	; (801699c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801697e:	781b      	ldrb	r3, [r3, #0]
 8016980:	2b01      	cmp	r3, #1
 8016982:	d109      	bne.n	8016998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016984:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016988:	f9b0 2000 	ldrsh.w	r2, [r0]
 801698c:	8003      	strh	r3, [r0, #0]
 801698e:	4b04      	ldr	r3, [pc, #16]	; (80169a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016990:	881b      	ldrh	r3, [r3, #0]
 8016992:	3b01      	subs	r3, #1
 8016994:	1a9b      	subs	r3, r3, r2
 8016996:	800b      	strh	r3, [r1, #0]
 8016998:	4770      	bx	lr
 801699a:	bf00      	nop
 801699c:	2000f38c 	.word	0x2000f38c
 80169a0:	2000f388 	.word	0x2000f388

080169a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80169a4:	b510      	push	{r4, lr}
 80169a6:	4b07      	ldr	r3, [pc, #28]	; (80169c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	2b01      	cmp	r3, #1
 80169ac:	d108      	bne.n	80169c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80169ae:	4b06      	ldr	r3, [pc, #24]	; (80169c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80169b0:	880c      	ldrh	r4, [r1, #0]
 80169b2:	881b      	ldrh	r3, [r3, #0]
 80169b4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80169b8:	3b01      	subs	r3, #1
 80169ba:	1b1b      	subs	r3, r3, r4
 80169bc:	8003      	strh	r3, [r0, #0]
 80169be:	800a      	strh	r2, [r1, #0]
 80169c0:	bd10      	pop	{r4, pc}
 80169c2:	bf00      	nop
 80169c4:	2000f38c 	.word	0x2000f38c
 80169c8:	2000f388 	.word	0x2000f388

080169cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80169cc:	b510      	push	{r4, lr}
 80169ce:	4b0a      	ldr	r3, [pc, #40]	; (80169f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80169d0:	781b      	ldrb	r3, [r3, #0]
 80169d2:	2b01      	cmp	r3, #1
 80169d4:	d10e      	bne.n	80169f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80169d6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80169da:	8843      	ldrh	r3, [r0, #2]
 80169dc:	f9b0 4000 	ldrsh.w	r4, [r0]
 80169e0:	18ca      	adds	r2, r1, r3
 80169e2:	4b06      	ldr	r3, [pc, #24]	; (80169fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80169e4:	8044      	strh	r4, [r0, #2]
 80169e6:	881b      	ldrh	r3, [r3, #0]
 80169e8:	1a9b      	subs	r3, r3, r2
 80169ea:	8003      	strh	r3, [r0, #0]
 80169ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80169f0:	8081      	strh	r1, [r0, #4]
 80169f2:	80c3      	strh	r3, [r0, #6]
 80169f4:	bd10      	pop	{r4, pc}
 80169f6:	bf00      	nop
 80169f8:	2000f38c 	.word	0x2000f38c
 80169fc:	2000f388 	.word	0x2000f388

08016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016a00:	4b08      	ldr	r3, [pc, #32]	; (8016a24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	2b01      	cmp	r3, #1
 8016a06:	d10c      	bne.n	8016a22 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016a08:	8803      	ldrh	r3, [r0, #0]
 8016a0a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016a0e:	8842      	ldrh	r2, [r0, #2]
 8016a10:	8002      	strh	r2, [r0, #0]
 8016a12:	185a      	adds	r2, r3, r1
 8016a14:	4b04      	ldr	r3, [pc, #16]	; (8016a28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016a16:	881b      	ldrh	r3, [r3, #0]
 8016a18:	1a9b      	subs	r3, r3, r2
 8016a1a:	8043      	strh	r3, [r0, #2]
 8016a1c:	88c3      	ldrh	r3, [r0, #6]
 8016a1e:	80c1      	strh	r1, [r0, #6]
 8016a20:	8083      	strh	r3, [r0, #4]
 8016a22:	4770      	bx	lr
 8016a24:	2000f38c 	.word	0x2000f38c
 8016a28:	2000f388 	.word	0x2000f388

08016a2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016a2c:	b510      	push	{r4, lr}
 8016a2e:	4b07      	ldr	r3, [pc, #28]	; (8016a4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	2b01      	cmp	r3, #1
 8016a34:	d108      	bne.n	8016a48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016a36:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016a3a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016a3e:	8003      	strh	r3, [r0, #0]
 8016a40:	8893      	ldrh	r3, [r2, #4]
 8016a42:	3b01      	subs	r3, #1
 8016a44:	1b1b      	subs	r3, r3, r4
 8016a46:	800b      	strh	r3, [r1, #0]
 8016a48:	bd10      	pop	{r4, pc}
 8016a4a:	bf00      	nop
 8016a4c:	2000f38c 	.word	0x2000f38c

08016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016a50:	b510      	push	{r4, lr}
 8016a52:	4b0a      	ldr	r3, [pc, #40]	; (8016a7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016a54:	460a      	mov	r2, r1
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	2b01      	cmp	r3, #1
 8016a5a:	d10d      	bne.n	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016a5c:	8881      	ldrh	r1, [r0, #4]
 8016a5e:	8803      	ldrh	r3, [r0, #0]
 8016a60:	440b      	add	r3, r1
 8016a62:	4601      	mov	r1, r0
 8016a64:	3b01      	subs	r3, #1
 8016a66:	f821 3b02 	strh.w	r3, [r1], #2
 8016a6a:	f7ff ffdf 	bl	8016a2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016a6e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016a72:	88c2      	ldrh	r2, [r0, #6]
 8016a74:	80c3      	strh	r3, [r0, #6]
 8016a76:	8082      	strh	r2, [r0, #4]
 8016a78:	bd10      	pop	{r4, pc}
 8016a7a:	bf00      	nop
 8016a7c:	2000f38c 	.word	0x2000f38c

08016a80 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016a80:	2100      	movs	r1, #0
 8016a82:	4b06      	ldr	r3, [pc, #24]	; (8016a9c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016a84:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8016a88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016a8c:	4b04      	ldr	r3, [pc, #16]	; (8016aa0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016a8e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8016a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a96:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8016a9a:	4770      	bx	lr
 8016a9c:	2000f388 	.word	0x2000f388
 8016aa0:	2000f38a 	.word	0x2000f38a

08016aa4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016aa4:	4b03      	ldr	r3, [pc, #12]	; (8016ab4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016aa6:	6818      	ldr	r0, [r3, #0]
 8016aa8:	b110      	cbz	r0, 8016ab0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016aaa:	6803      	ldr	r3, [r0, #0]
 8016aac:	699b      	ldr	r3, [r3, #24]
 8016aae:	4718      	bx	r3
 8016ab0:	4770      	bx	lr
 8016ab2:	bf00      	nop
 8016ab4:	2000f3d0 	.word	0x2000f3d0

08016ab8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016ab8:	4770      	bx	lr
	...

08016abc <_ZN8touchgfx11Application4drawEv>:
 8016abc:	b507      	push	{r0, r1, r2, lr}
 8016abe:	2100      	movs	r1, #0
 8016ac0:	4b08      	ldr	r3, [pc, #32]	; (8016ae4 <_ZN8touchgfx11Application4drawEv+0x28>)
 8016ac2:	9100      	str	r1, [sp, #0]
 8016ac4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ac8:	4b07      	ldr	r3, [pc, #28]	; (8016ae8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016aca:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ad2:	4669      	mov	r1, sp
 8016ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016ad8:	6803      	ldr	r3, [r0, #0]
 8016ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016adc:	4798      	blx	r3
 8016ade:	b003      	add	sp, #12
 8016ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ae4:	2000f388 	.word	0x2000f388
 8016ae8:	2000f38a 	.word	0x2000f38a

08016aec <_ZN8touchgfx11Application10invalidateEv>:
 8016aec:	2100      	movs	r1, #0
 8016aee:	4b09      	ldr	r3, [pc, #36]	; (8016b14 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016af0:	b082      	sub	sp, #8
 8016af2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016af6:	4b08      	ldr	r3, [pc, #32]	; (8016b18 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016af8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b00:	9100      	str	r1, [sp, #0]
 8016b02:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b06:	6803      	ldr	r3, [r0, #0]
 8016b08:	aa02      	add	r2, sp, #8
 8016b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b0c:	e912 0006 	ldmdb	r2, {r1, r2}
 8016b10:	b002      	add	sp, #8
 8016b12:	4718      	bx	r3
 8016b14:	2000f388 	.word	0x2000f388
 8016b18:	2000f38a 	.word	0x2000f38a

08016b1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016b1c:	4b03      	ldr	r3, [pc, #12]	; (8016b2c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016b1e:	6818      	ldr	r0, [r3, #0]
 8016b20:	b110      	cbz	r0, 8016b28 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016b22:	6803      	ldr	r3, [r0, #0]
 8016b24:	69db      	ldr	r3, [r3, #28]
 8016b26:	4718      	bx	r3
 8016b28:	4770      	bx	lr
 8016b2a:	bf00      	nop
 8016b2c:	2000f3d0 	.word	0x2000f3d0

08016b30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016b30:	4b03      	ldr	r3, [pc, #12]	; (8016b40 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016b32:	6818      	ldr	r0, [r3, #0]
 8016b34:	b110      	cbz	r0, 8016b3c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016b36:	6803      	ldr	r3, [r0, #0]
 8016b38:	6a1b      	ldr	r3, [r3, #32]
 8016b3a:	4718      	bx	r3
 8016b3c:	4770      	bx	lr
 8016b3e:	bf00      	nop
 8016b40:	2000f3d0 	.word	0x2000f3d0

08016b44 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016b44:	2300      	movs	r3, #0
 8016b46:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8016b4a:	4770      	bx	lr

08016b4c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016b4c:	4b03      	ldr	r3, [pc, #12]	; (8016b5c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016b4e:	6818      	ldr	r0, [r3, #0]
 8016b50:	b110      	cbz	r0, 8016b58 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016b52:	6803      	ldr	r3, [r0, #0]
 8016b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b56:	4718      	bx	r3
 8016b58:	4770      	bx	lr
 8016b5a:	bf00      	nop
 8016b5c:	2000f3d0 	.word	0x2000f3d0

08016b60 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016b60:	b510      	push	{r4, lr}
 8016b62:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016b66:	888a      	ldrh	r2, [r1, #4]
 8016b68:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016b6c:	4422      	add	r2, r4
 8016b6e:	b212      	sxth	r2, r2
 8016b70:	4293      	cmp	r3, r2
 8016b72:	da15      	bge.n	8016ba0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016b74:	8882      	ldrh	r2, [r0, #4]
 8016b76:	4413      	add	r3, r2
 8016b78:	b21b      	sxth	r3, r3
 8016b7a:	429c      	cmp	r4, r3
 8016b7c:	da10      	bge.n	8016ba0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016b7e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016b82:	88c9      	ldrh	r1, [r1, #6]
 8016b84:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016b88:	4419      	add	r1, r3
 8016b8a:	b209      	sxth	r1, r1
 8016b8c:	428a      	cmp	r2, r1
 8016b8e:	da07      	bge.n	8016ba0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016b90:	88c0      	ldrh	r0, [r0, #6]
 8016b92:	4410      	add	r0, r2
 8016b94:	b200      	sxth	r0, r0
 8016b96:	4283      	cmp	r3, r0
 8016b98:	bfac      	ite	ge
 8016b9a:	2000      	movge	r0, #0
 8016b9c:	2001      	movlt	r0, #1
 8016b9e:	bd10      	pop	{r4, pc}
 8016ba0:	2000      	movs	r0, #0
 8016ba2:	e7fc      	b.n	8016b9e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016ba4 <_ZN8touchgfx4Rect10restrictToEss>:
 8016ba4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016ba8:	b510      	push	{r4, lr}
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	da04      	bge.n	8016bb8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016bae:	8884      	ldrh	r4, [r0, #4]
 8016bb0:	4423      	add	r3, r4
 8016bb2:	8083      	strh	r3, [r0, #4]
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	8003      	strh	r3, [r0, #0]
 8016bb8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016bbc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016bc0:	1b09      	subs	r1, r1, r4
 8016bc2:	428b      	cmp	r3, r1
 8016bc4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016bc8:	bfc8      	it	gt
 8016bca:	8081      	strhgt	r1, [r0, #4]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	da04      	bge.n	8016bda <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016bd0:	88c1      	ldrh	r1, [r0, #6]
 8016bd2:	440b      	add	r3, r1
 8016bd4:	80c3      	strh	r3, [r0, #6]
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	8043      	strh	r3, [r0, #2]
 8016bda:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016bde:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016be2:	1a52      	subs	r2, r2, r1
 8016be4:	4293      	cmp	r3, r2
 8016be6:	bfc8      	it	gt
 8016be8:	80c2      	strhgt	r2, [r0, #6]
 8016bea:	bd10      	pop	{r4, pc}

08016bec <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016bec:	b510      	push	{r4, lr}
 8016bee:	460c      	mov	r4, r1
 8016bf0:	4b0f      	ldr	r3, [pc, #60]	; (8016c30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016bf2:	4620      	mov	r0, r4
 8016bf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016bf8:	4b0e      	ldr	r3, [pc, #56]	; (8016c34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016bfa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016bfe:	f7ff ffd1 	bl	8016ba4 <_ZN8touchgfx4Rect10restrictToEss>
 8016c02:	4b0d      	ldr	r3, [pc, #52]	; (8016c38 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016c04:	6818      	ldr	r0, [r3, #0]
 8016c06:	b190      	cbz	r0, 8016c2e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016c08:	6803      	ldr	r3, [r0, #0]
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	689b      	ldr	r3, [r3, #8]
 8016c0e:	4798      	blx	r3
 8016c10:	4b0a      	ldr	r3, [pc, #40]	; (8016c3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016c12:	6818      	ldr	r0, [r3, #0]
 8016c14:	b118      	cbz	r0, 8016c1e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016c16:	6803      	ldr	r3, [r0, #0]
 8016c18:	4621      	mov	r1, r4
 8016c1a:	689b      	ldr	r3, [r3, #8]
 8016c1c:	4798      	blx	r3
 8016c1e:	4b08      	ldr	r3, [pc, #32]	; (8016c40 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016c20:	4621      	mov	r1, r4
 8016c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c26:	6818      	ldr	r0, [r3, #0]
 8016c28:	6803      	ldr	r3, [r0, #0]
 8016c2a:	69db      	ldr	r3, [r3, #28]
 8016c2c:	4718      	bx	r3
 8016c2e:	bd10      	pop	{r4, pc}
 8016c30:	2000f38a 	.word	0x2000f38a
 8016c34:	2000f388 	.word	0x2000f388
 8016c38:	2000f3d0 	.word	0x2000f3d0
 8016c3c:	2000f3cc 	.word	0x2000f3cc
 8016c40:	2000f394 	.word	0x2000f394

08016c44 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c46:	4606      	mov	r6, r0
 8016c48:	4608      	mov	r0, r1
 8016c4a:	460f      	mov	r7, r1
 8016c4c:	f7fd fa13 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c50:	b9e8      	cbnz	r0, 8016c8e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016c52:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016c56:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016c5a:	42a5      	cmp	r5, r4
 8016c5c:	db17      	blt.n	8016c8e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016c5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016c62:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	db11      	blt.n	8016c8e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016c6a:	88b9      	ldrh	r1, [r7, #4]
 8016c6c:	440d      	add	r5, r1
 8016c6e:	88b1      	ldrh	r1, [r6, #4]
 8016c70:	b22d      	sxth	r5, r5
 8016c72:	440c      	add	r4, r1
 8016c74:	b224      	sxth	r4, r4
 8016c76:	42a5      	cmp	r5, r4
 8016c78:	dc09      	bgt.n	8016c8e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016c7a:	88f8      	ldrh	r0, [r7, #6]
 8016c7c:	4410      	add	r0, r2
 8016c7e:	88f2      	ldrh	r2, [r6, #6]
 8016c80:	b200      	sxth	r0, r0
 8016c82:	4413      	add	r3, r2
 8016c84:	b21b      	sxth	r3, r3
 8016c86:	4298      	cmp	r0, r3
 8016c88:	bfcc      	ite	gt
 8016c8a:	2000      	movgt	r0, #0
 8016c8c:	2001      	movle	r0, #1
 8016c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016c90 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c92:	4604      	mov	r4, r0
 8016c94:	4608      	mov	r0, r1
 8016c96:	460d      	mov	r5, r1
 8016c98:	f7fd f9ed 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c9c:	b978      	cbnz	r0, 8016cbe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016c9e:	4620      	mov	r0, r4
 8016ca0:	f7fd f9e9 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ca4:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016ca8:	b150      	cbz	r0, 8016cc0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016caa:	8026      	strh	r6, [r4, #0]
 8016cac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016cb0:	8063      	strh	r3, [r4, #2]
 8016cb2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016cb6:	80a3      	strh	r3, [r4, #4]
 8016cb8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016cbc:	80e3      	strh	r3, [r4, #6]
 8016cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cc0:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016cc4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016cc8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016ccc:	42b1      	cmp	r1, r6
 8016cce:	460f      	mov	r7, r1
 8016cd0:	bfa8      	it	ge
 8016cd2:	4637      	movge	r7, r6
 8016cd4:	4293      	cmp	r3, r2
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	bfa8      	it	ge
 8016cda:	4610      	movge	r0, r2
 8016cdc:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016ce0:	88ed      	ldrh	r5, [r5, #6]
 8016ce2:	4466      	add	r6, ip
 8016ce4:	442a      	add	r2, r5
 8016ce6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016cea:	88e5      	ldrh	r5, [r4, #6]
 8016cec:	4461      	add	r1, ip
 8016cee:	442b      	add	r3, r5
 8016cf0:	b236      	sxth	r6, r6
 8016cf2:	b209      	sxth	r1, r1
 8016cf4:	b212      	sxth	r2, r2
 8016cf6:	b21b      	sxth	r3, r3
 8016cf8:	428e      	cmp	r6, r1
 8016cfa:	bfac      	ite	ge
 8016cfc:	ebc7 0106 	rsbge	r1, r7, r6
 8016d00:	ebc7 0101 	rsblt	r1, r7, r1
 8016d04:	429a      	cmp	r2, r3
 8016d06:	bfac      	ite	ge
 8016d08:	ebc0 0202 	rsbge	r2, r0, r2
 8016d0c:	ebc0 0203 	rsblt	r2, r0, r3
 8016d10:	8027      	strh	r7, [r4, #0]
 8016d12:	8060      	strh	r0, [r4, #2]
 8016d14:	80a1      	strh	r1, [r4, #4]
 8016d16:	80e2      	strh	r2, [r4, #6]
 8016d18:	e7d1      	b.n	8016cbe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016d1c <_ZN8touchgfx11Application11getInstanceEv>:
 8016d1c:	4b01      	ldr	r3, [pc, #4]	; (8016d24 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016d1e:	6818      	ldr	r0, [r3, #0]
 8016d20:	4770      	bx	lr
 8016d22:	bf00      	nop
 8016d24:	2000f3e0 	.word	0x2000f3e0

08016d28 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016d28:	2300      	movs	r3, #0
 8016d2a:	b510      	push	{r4, lr}
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8016d32:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8016d36:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8016d3a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016d3e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8016d42:	429a      	cmp	r2, r3
 8016d44:	d90e      	bls.n	8016d64 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8016d46:	18e2      	adds	r2, r4, r3
 8016d48:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8016d4c:	b122      	cbz	r2, 8016d58 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016d4e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8016d52:	6803      	ldr	r3, [r0, #0]
 8016d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d56:	4798      	blx	r3
 8016d58:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8016d62:	e7ea      	b.n	8016d3a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016d64:	bd10      	pop	{r4, pc}

08016d66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8016d66:	2300      	movs	r3, #0
 8016d68:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8016d6c:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8016d70:	30a4      	adds	r0, #164	; 0xa4
 8016d72:	f802 3b01 	strb.w	r3, [r2], #1
 8016d76:	4282      	cmp	r2, r0
 8016d78:	d1fb      	bne.n	8016d72 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8016d7a:	4770      	bx	lr

08016d7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016d7c:	b570      	push	{r4, r5, r6, lr}
 8016d7e:	4c0b      	ldr	r4, [pc, #44]	; (8016dac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016d80:	4605      	mov	r5, r0
 8016d82:	6820      	ldr	r0, [r4, #0]
 8016d84:	460e      	mov	r6, r1
 8016d86:	b110      	cbz	r0, 8016d8e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8016d88:	6803      	ldr	r3, [r0, #0]
 8016d8a:	695b      	ldr	r3, [r3, #20]
 8016d8c:	4798      	blx	r3
 8016d8e:	1d28      	adds	r0, r5, #4
 8016d90:	f7ff ffe9 	bl	8016d66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016d94:	6026      	str	r6, [r4, #0]
 8016d96:	6833      	ldr	r3, [r6, #0]
 8016d98:	4630      	mov	r0, r6
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	4798      	blx	r3
 8016d9e:	682b      	ldr	r3, [r5, #0]
 8016da0:	4628      	mov	r0, r5
 8016da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016da8:	4718      	bx	r3
 8016daa:	bf00      	nop
 8016dac:	2000f3d0 	.word	0x2000f3d0

08016db0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016db0:	2300      	movs	r3, #0
 8016db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016db4:	461a      	mov	r2, r3
 8016db6:	461c      	mov	r4, r3
 8016db8:	461d      	mov	r5, r3
 8016dba:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8016dbe:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8016dc2:	459c      	cmp	ip, r3
 8016dc4:	dd1a      	ble.n	8016dfc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016dc6:	18c6      	adds	r6, r0, r3
 8016dc8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8016dcc:	b16e      	cbz	r6, 8016dea <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	d008      	beq.n	8016de4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8016dd2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016dd6:	fa1f fe82 	uxth.w	lr, r2
 8016dda:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8016dde:	1887      	adds	r7, r0, r2
 8016de0:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8016de4:	3201      	adds	r2, #1
 8016de6:	3301      	adds	r3, #1
 8016de8:	e7eb      	b.n	8016dc2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8016dea:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8016dee:	4299      	cmp	r1, r3
 8016df0:	bfa8      	it	ge
 8016df2:	3501      	addge	r5, #1
 8016df4:	429e      	cmp	r6, r3
 8016df6:	bfc8      	it	gt
 8016df8:	3401      	addgt	r4, #1
 8016dfa:	e7f4      	b.n	8016de6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8016dfc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8016e00:	1b49      	subs	r1, r1, r5
 8016e02:	1b1b      	subs	r3, r3, r4
 8016e04:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8016e08:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8016e0c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8016e10:	4293      	cmp	r3, r2
 8016e12:	dd03      	ble.n	8016e1c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8016e14:	3b01      	subs	r3, #1
 8016e16:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8016e1a:	e7f7      	b.n	8016e0c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016e20 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016e20:	b570      	push	{r4, r5, r6, lr}
 8016e22:	4d16      	ldr	r5, [pc, #88]	; (8016e7c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016e24:	4604      	mov	r4, r0
 8016e26:	6828      	ldr	r0, [r5, #0]
 8016e28:	b140      	cbz	r0, 8016e3c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016e2a:	7a03      	ldrb	r3, [r0, #8]
 8016e2c:	b933      	cbnz	r3, 8016e3c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016e2e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8016e32:	6803      	ldr	r3, [r0, #0]
 8016e34:	689b      	ldr	r3, [r3, #8]
 8016e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e3a:	4718      	bx	r3
 8016e3c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8016e40:	4e0f      	ldr	r6, [pc, #60]	; (8016e80 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8016e42:	b973      	cbnz	r3, 8016e62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016e44:	b168      	cbz	r0, 8016e62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016e46:	7a03      	ldrb	r3, [r0, #8]
 8016e48:	b15b      	cbz	r3, 8016e62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016e4a:	6830      	ldr	r0, [r6, #0]
 8016e4c:	b110      	cbz	r0, 8016e54 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016e4e:	6803      	ldr	r3, [r0, #0]
 8016e50:	691b      	ldr	r3, [r3, #16]
 8016e52:	4798      	blx	r3
 8016e54:	6828      	ldr	r0, [r5, #0]
 8016e56:	6803      	ldr	r3, [r0, #0]
 8016e58:	68db      	ldr	r3, [r3, #12]
 8016e5a:	4798      	blx	r3
 8016e5c:	2301      	movs	r3, #1
 8016e5e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8016e62:	3404      	adds	r4, #4
 8016e64:	4620      	mov	r0, r4
 8016e66:	f7ff ff5f 	bl	8016d28 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	f7ff ffa0 	bl	8016db0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016e70:	6830      	ldr	r0, [r6, #0]
 8016e72:	b110      	cbz	r0, 8016e7a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8016e74:	6803      	ldr	r3, [r0, #0]
 8016e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e78:	e7dd      	b.n	8016e36 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016e7a:	bd70      	pop	{r4, r5, r6, pc}
 8016e7c:	2000f3d4 	.word	0x2000f3d4
 8016e80:	2000f3d0 	.word	0x2000f3d0

08016e84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016e84:	4603      	mov	r3, r0
 8016e86:	2200      	movs	r2, #0
 8016e88:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016e8c:	801a      	strh	r2, [r3, #0]
 8016e8e:	805a      	strh	r2, [r3, #2]
 8016e90:	809a      	strh	r2, [r3, #4]
 8016e92:	80da      	strh	r2, [r3, #6]
 8016e94:	3308      	adds	r3, #8
 8016e96:	428b      	cmp	r3, r1
 8016e98:	d1f8      	bne.n	8016e8c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016e9a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016e9e:	4770      	bx	lr

08016ea0 <_ZN8touchgfx11ApplicationC1Ev>:
 8016ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ea2:	4606      	mov	r6, r0
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	2500      	movs	r5, #0
 8016ea8:	4b1b      	ldr	r3, [pc, #108]	; (8016f18 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016eaa:	22a8      	movs	r2, #168	; 0xa8
 8016eac:	f846 3b04 	str.w	r3, [r6], #4
 8016eb0:	2100      	movs	r1, #0
 8016eb2:	4630      	mov	r0, r6
 8016eb4:	f010 fa33 	bl	802731e <memset>
 8016eb8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8016ebc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016ec0:	f7ff ffe0 	bl	8016e84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016ec4:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8016ec8:	f7ff ffdc 	bl	8016e84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016ecc:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8016ed0:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016ed4:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8016ed8:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8016edc:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8016ee0:	490e      	ldr	r1, [pc, #56]	; (8016f1c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016ee2:	480f      	ldr	r0, [pc, #60]	; (8016f20 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016ee4:	f00f fee0 	bl	8026ca8 <CRC_Lock>
 8016ee8:	4f0e      	ldr	r7, [pc, #56]	; (8016f24 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8016eea:	4b0f      	ldr	r3, [pc, #60]	; (8016f28 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8016eec:	b158      	cbz	r0, 8016f06 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8016eee:	801d      	strh	r5, [r3, #0]
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	4a0e      	ldr	r2, [pc, #56]	; (8016f2c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8016ef4:	4630      	mov	r0, r6
 8016ef6:	6013      	str	r3, [r2, #0]
 8016ef8:	4a0d      	ldr	r2, [pc, #52]	; (8016f30 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8016efa:	603b      	str	r3, [r7, #0]
 8016efc:	6013      	str	r3, [r2, #0]
 8016efe:	f7ff ff32 	bl	8016d66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016f02:	4620      	mov	r0, r4
 8016f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016f0a:	2002      	movs	r0, #2
 8016f0c:	801a      	strh	r2, [r3, #0]
 8016f0e:	6038      	str	r0, [r7, #0]
 8016f10:	f001 fa52 	bl	80183b8 <_ZN8touchgfx6Screen4drawEv>
 8016f14:	e7ec      	b.n	8016ef0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8016f16:	bf00      	nop
 8016f18:	08029f2c 	.word	0x08029f2c
 8016f1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016f20:	f407a5c2 	.word	0xf407a5c2
 8016f24:	2000f3d0 	.word	0x2000f3d0
 8016f28:	20000024 	.word	0x20000024
 8016f2c:	2000f3e0 	.word	0x2000f3e0
 8016f30:	2000f3d4 	.word	0x2000f3d4

08016f34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016f34:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016f38:	b510      	push	{r4, lr}
 8016f3a:	3b01      	subs	r3, #1
 8016f3c:	b29b      	uxth	r3, r3
 8016f3e:	428b      	cmp	r3, r1
 8016f40:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8016f44:	d908      	bls.n	8016f58 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016f46:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016f4a:	681a      	ldr	r2, [r3, #0]
 8016f4c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016f50:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016f54:	685a      	ldr	r2, [r3, #4]
 8016f56:	6062      	str	r2, [r4, #4]
 8016f58:	bd10      	pop	{r4, pc}
	...

08016f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f60:	4b8f      	ldr	r3, [pc, #572]	; (80171a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016f62:	b08f      	sub	sp, #60	; 0x3c
 8016f64:	ac0a      	add	r4, sp, #40	; 0x28
 8016f66:	e884 0006 	stmia.w	r4, {r1, r2}
 8016f6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f6e:	4b8d      	ldr	r3, [pc, #564]	; (80171a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016f70:	4683      	mov	fp, r0
 8016f72:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016f76:	4620      	mov	r0, r4
 8016f78:	f7ff fe14 	bl	8016ba4 <_ZN8touchgfx4Rect10restrictToEss>
 8016f7c:	4620      	mov	r0, r4
 8016f7e:	f7fd f87a 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f82:	2800      	cmp	r0, #0
 8016f84:	d16a      	bne.n	801705c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016f86:	9403      	str	r4, [sp, #12]
 8016f88:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8016f8c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8016f90:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016f94:	35a4      	adds	r5, #164	; 0xa4
 8016f96:	9301      	str	r3, [sp, #4]
 8016f98:	b15c      	cbz	r4, 8016fb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016f9a:	4629      	mov	r1, r5
 8016f9c:	9803      	ldr	r0, [sp, #12]
 8016f9e:	f7ff fe51 	bl	8016c44 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016fa2:	3c01      	subs	r4, #1
 8016fa4:	b118      	cbz	r0, 8016fae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8016fa6:	b2a1      	uxth	r1, r4
 8016fa8:	9801      	ldr	r0, [sp, #4]
 8016faa:	f7ff ffc3 	bl	8016f34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016fae:	3d08      	subs	r5, #8
 8016fb0:	e7f2      	b.n	8016f98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8016fb2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 8016fb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016fba:	9302      	str	r3, [sp, #8]
 8016fbc:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016fc0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8016fc4:	f8cd a010 	str.w	sl, [sp, #16]
 8016fc8:	9306      	str	r3, [sp, #24]
 8016fca:	445c      	add	r4, fp
 8016fcc:	2500      	movs	r5, #0
 8016fce:	4626      	mov	r6, r4
 8016fd0:	462f      	mov	r7, r5
 8016fd2:	f8cd a014 	str.w	sl, [sp, #20]
 8016fd6:	9b05      	ldr	r3, [sp, #20]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d073      	beq.n	80170c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016fdc:	9903      	ldr	r1, [sp, #12]
 8016fde:	4630      	mov	r0, r6
 8016fe0:	f7ff fdbe 	bl	8016b60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016fe4:	b350      	cbz	r0, 801703c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016fe6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8016fea:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016fee:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8016ff2:	45e6      	cmp	lr, ip
 8016ff4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8016ff8:	db33      	blt.n	8017062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016ffa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016ffe:	88b3      	ldrh	r3, [r6, #4]
 8017000:	4472      	add	r2, lr
 8017002:	4463      	add	r3, ip
 8017004:	b212      	sxth	r2, r2
 8017006:	b21b      	sxth	r3, r3
 8017008:	429a      	cmp	r2, r3
 801700a:	dc2a      	bgt.n	8017062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801700c:	88f3      	ldrh	r3, [r6, #6]
 801700e:	fa1f f289 	uxth.w	r2, r9
 8017012:	4413      	add	r3, r2
 8017014:	b29b      	uxth	r3, r3
 8017016:	45c8      	cmp	r8, r9
 8017018:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801701c:	fa1f fc88 	uxth.w	ip, r8
 8017020:	fa0f fe83 	sxth.w	lr, r3
 8017024:	db0f      	blt.n	8017046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017026:	eba3 030c 	sub.w	r3, r3, ip
 801702a:	1ac9      	subs	r1, r1, r3
 801702c:	b209      	sxth	r1, r1
 801702e:	2900      	cmp	r1, #0
 8017030:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017034:	dd12      	ble.n	801705c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017036:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801703a:	4605      	mov	r5, r0
 801703c:	9b05      	ldr	r3, [sp, #20]
 801703e:	3e08      	subs	r6, #8
 8017040:	3b01      	subs	r3, #1
 8017042:	9305      	str	r3, [sp, #20]
 8017044:	e7c7      	b.n	8016fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8017046:	4461      	add	r1, ip
 8017048:	b209      	sxth	r1, r1
 801704a:	4571      	cmp	r1, lr
 801704c:	dc38      	bgt.n	80170c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801704e:	eba2 020c 	sub.w	r2, r2, ip
 8017052:	b212      	sxth	r2, r2
 8017054:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8017058:	2a00      	cmp	r2, #0
 801705a:	dcee      	bgt.n	801703a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801705c:	b00f      	add	sp, #60	; 0x3c
 801705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017062:	45c8      	cmp	r8, r9
 8017064:	db2c      	blt.n	80170c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017066:	88f3      	ldrh	r3, [r6, #6]
 8017068:	4499      	add	r9, r3
 801706a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801706e:	fa0f f989 	sxth.w	r9, r9
 8017072:	4498      	add	r8, r3
 8017074:	fa0f f888 	sxth.w	r8, r8
 8017078:	45c1      	cmp	r9, r8
 801707a:	db21      	blt.n	80170c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801707c:	88b3      	ldrh	r3, [r6, #4]
 801707e:	fa1f f28c 	uxth.w	r2, ip
 8017082:	4413      	add	r3, r2
 8017084:	b29b      	uxth	r3, r3
 8017086:	45e6      	cmp	lr, ip
 8017088:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801708c:	fa1f f88e 	uxth.w	r8, lr
 8017090:	fa0f f983 	sxth.w	r9, r3
 8017094:	db0a      	blt.n	80170ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8017096:	eba3 0308 	sub.w	r3, r3, r8
 801709a:	1ac9      	subs	r1, r1, r3
 801709c:	b209      	sxth	r1, r1
 801709e:	2900      	cmp	r1, #0
 80170a0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80170a4:	ddda      	ble.n	801705c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80170a6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80170aa:	e7c6      	b.n	801703a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80170ac:	4441      	add	r1, r8
 80170ae:	b209      	sxth	r1, r1
 80170b0:	4549      	cmp	r1, r9
 80170b2:	dc05      	bgt.n	80170c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80170b4:	eba2 0208 	sub.w	r2, r2, r8
 80170b8:	b212      	sxth	r2, r2
 80170ba:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80170be:	e7cb      	b.n	8017058 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80170c0:	4607      	mov	r7, r0
 80170c2:	e7bb      	b.n	801703c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80170c4:	2d00      	cmp	r5, #0
 80170c6:	d181      	bne.n	8016fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80170c8:	2f00      	cmp	r7, #0
 80170ca:	f000 81de 	beq.w	801748a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 80170ce:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80170d2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80170d6:	b2b3      	uxth	r3, r6
 80170d8:	9305      	str	r3, [sp, #20]
 80170da:	9a05      	ldr	r2, [sp, #20]
 80170dc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80170e0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80170e4:	4413      	add	r3, r2
 80170e6:	b2ba      	uxth	r2, r7
 80170e8:	4492      	add	sl, r2
 80170ea:	b29b      	uxth	r3, r3
 80170ec:	fa1f fa8a 	uxth.w	sl, sl
 80170f0:	fa0f f883 	sxth.w	r8, r3
 80170f4:	fa0f f98a 	sxth.w	r9, sl
 80170f8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80170fc:	9b04      	ldr	r3, [sp, #16]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d052      	beq.n	80171a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8017102:	9903      	ldr	r1, [sp, #12]
 8017104:	4620      	mov	r0, r4
 8017106:	f7ff fd2b 	bl	8016b60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801710a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801710e:	b1c0      	cbz	r0, 8017142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017110:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017114:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017118:	4576      	cmp	r6, lr
 801711a:	dc22      	bgt.n	8017162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801711c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017120:	44f4      	add	ip, lr
 8017122:	fa0f fc8c 	sxth.w	ip, ip
 8017126:	45e0      	cmp	r8, ip
 8017128:	db1b      	blt.n	8017162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801712a:	428f      	cmp	r7, r1
 801712c:	fa1f fc81 	uxth.w	ip, r1
 8017130:	88e1      	ldrh	r1, [r4, #6]
 8017132:	dc0d      	bgt.n	8017150 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8017134:	ebaa 0c0c 	sub.w	ip, sl, ip
 8017138:	eba1 010c 	sub.w	r1, r1, ip
 801713c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8017140:	80e1      	strh	r1, [r4, #6]
 8017142:	4628      	mov	r0, r5
 8017144:	9904      	ldr	r1, [sp, #16]
 8017146:	3c08      	subs	r4, #8
 8017148:	3901      	subs	r1, #1
 801714a:	9104      	str	r1, [sp, #16]
 801714c:	4605      	mov	r5, r0
 801714e:	e7d3      	b.n	80170f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8017150:	4461      	add	r1, ip
 8017152:	b209      	sxth	r1, r1
 8017154:	4549      	cmp	r1, r9
 8017156:	dcf5      	bgt.n	8017144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017158:	eba2 0c0c 	sub.w	ip, r2, ip
 801715c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017160:	e7ef      	b.n	8017142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017162:	428f      	cmp	r7, r1
 8017164:	dcee      	bgt.n	8017144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017166:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801716a:	4461      	add	r1, ip
 801716c:	b209      	sxth	r1, r1
 801716e:	4589      	cmp	r9, r1
 8017170:	dbe8      	blt.n	8017144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017172:	4576      	cmp	r6, lr
 8017174:	fa1f fc8e 	uxth.w	ip, lr
 8017178:	88a1      	ldrh	r1, [r4, #4]
 801717a:	dc07      	bgt.n	801718c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801717c:	eba3 0c0c 	sub.w	ip, r3, ip
 8017180:	eba1 010c 	sub.w	r1, r1, ip
 8017184:	f8a4 8000 	strh.w	r8, [r4]
 8017188:	80a1      	strh	r1, [r4, #4]
 801718a:	e7da      	b.n	8017142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801718c:	4461      	add	r1, ip
 801718e:	b209      	sxth	r1, r1
 8017190:	4588      	cmp	r8, r1
 8017192:	dbd7      	blt.n	8017144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017194:	9905      	ldr	r1, [sp, #20]
 8017196:	eba1 0c0c 	sub.w	ip, r1, ip
 801719a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801719e:	e7d0      	b.n	8017142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80171a0:	2000f38a 	.word	0x2000f38a
 80171a4:	2000f388 	.word	0x2000f388
 80171a8:	2d00      	cmp	r5, #0
 80171aa:	f000 816e 	beq.w	801748a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 80171ae:	9b06      	ldr	r3, [sp, #24]
 80171b0:	445b      	add	r3, fp
 80171b2:	461c      	mov	r4, r3
 80171b4:	9b02      	ldr	r3, [sp, #8]
 80171b6:	3301      	adds	r3, #1
 80171b8:	f000 8167 	beq.w	801748a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 80171bc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80171c0:	4629      	mov	r1, r5
 80171c2:	9803      	ldr	r0, [sp, #12]
 80171c4:	f7ff fd3e 	bl	8016c44 <_ZNK8touchgfx4Rect8includesERKS0_>
 80171c8:	b120      	cbz	r0, 80171d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80171ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80171ce:	9801      	ldr	r0, [sp, #4]
 80171d0:	f7ff feb0 	bl	8016f34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80171d4:	9903      	ldr	r1, [sp, #12]
 80171d6:	4628      	mov	r0, r5
 80171d8:	f7ff fcc2 	bl	8016b60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80171dc:	2800      	cmp	r0, #0
 80171de:	f000 809c 	beq.w	801731a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80171e2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80171e6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80171ea:	fa1f f189 	uxth.w	r1, r9
 80171ee:	eb01 0c03 	add.w	ip, r1, r3
 80171f2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80171f6:	fa1f fa8c 	uxth.w	sl, ip
 80171fa:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80171fe:	9309      	str	r3, [sp, #36]	; 0x24
 8017200:	b283      	uxth	r3, r0
 8017202:	eb03 050c 	add.w	r5, r3, ip
 8017206:	b2ad      	uxth	r5, r5
 8017208:	9505      	str	r5, [sp, #20]
 801720a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801720e:	4548      	cmp	r0, r9
 8017210:	9504      	str	r5, [sp, #16]
 8017212:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017216:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801721a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801721e:	f340 8099 	ble.w	8017354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8017222:	1a5b      	subs	r3, r3, r1
 8017224:	b29b      	uxth	r3, r3
 8017226:	4596      	cmp	lr, r2
 8017228:	fa0f f08a 	sxth.w	r0, sl
 801722c:	b21e      	sxth	r6, r3
 801722e:	dd2e      	ble.n	801728e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8017230:	9f02      	ldr	r7, [sp, #8]
 8017232:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017236:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801723a:	9f04      	ldr	r7, [sp, #16]
 801723c:	fa1f fe8e 	uxth.w	lr, lr
 8017240:	1a3f      	subs	r7, r7, r0
 8017242:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8017246:	b292      	uxth	r2, r2
 8017248:	ebae 0102 	sub.w	r1, lr, r2
 801724c:	44a6      	add	lr, r4
 801724e:	4402      	add	r2, r0
 8017250:	b289      	uxth	r1, r1
 8017252:	fa0f fe8e 	sxth.w	lr, lr
 8017256:	b212      	sxth	r2, r2
 8017258:	b20d      	sxth	r5, r1
 801725a:	ebae 0202 	sub.w	r2, lr, r2
 801725e:	436f      	muls	r7, r5
 8017260:	4372      	muls	r2, r6
 8017262:	4297      	cmp	r7, r2
 8017264:	db09      	blt.n	801727a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017266:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801726a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801726e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017272:	449c      	add	ip, r3
 8017274:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017278:	e686      	b.n	8016f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801727a:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801727e:	4421      	add	r1, r4
 8017280:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8017284:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017288:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801728c:	e67c      	b.n	8016f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801728e:	9f04      	ldr	r7, [sp, #16]
 8017290:	42b8      	cmp	r0, r7
 8017292:	da27      	bge.n	80172e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017294:	9902      	ldr	r1, [sp, #8]
 8017296:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801729a:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801729e:	eb05 010e 	add.w	r1, r5, lr
 80172a2:	fa1f f881 	uxth.w	r8, r1
 80172a6:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80172aa:	fa0f f988 	sxth.w	r9, r8
 80172ae:	4411      	add	r1, r2
 80172b0:	eba1 0108 	sub.w	r1, r1, r8
 80172b4:	b289      	uxth	r1, r1
 80172b6:	fa0f f881 	sxth.w	r8, r1
 80172ba:	eba2 020e 	sub.w	r2, r2, lr
 80172be:	1a3f      	subs	r7, r7, r0
 80172c0:	4372      	muls	r2, r6
 80172c2:	fb08 f707 	mul.w	r7, r8, r7
 80172c6:	42ba      	cmp	r2, r7
 80172c8:	dc06      	bgt.n	80172d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80172ca:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80172ce:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80172d2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80172d6:	e7ca      	b.n	801726e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80172d8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80172dc:	4429      	add	r1, r5
 80172de:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80172e2:	e651      	b.n	8016f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80172e4:	9805      	ldr	r0, [sp, #20]
 80172e6:	2d06      	cmp	r5, #6
 80172e8:	ebaa 0000 	sub.w	r0, sl, r0
 80172ec:	b280      	uxth	r0, r0
 80172ee:	fa0f fe80 	sxth.w	lr, r0
 80172f2:	d817      	bhi.n	8017324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80172f4:	9b04      	ldr	r3, [sp, #16]
 80172f6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 80172fa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80172fe:	1c6b      	adds	r3, r5, #1
 8017300:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8017304:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8017308:	9b01      	ldr	r3, [sp, #4]
 801730a:	9801      	ldr	r0, [sp, #4]
 801730c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017310:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017314:	805a      	strh	r2, [r3, #2]
 8017316:	809e      	strh	r6, [r3, #4]
 8017318:	80d9      	strh	r1, [r3, #6]
 801731a:	9b02      	ldr	r3, [sp, #8]
 801731c:	3c08      	subs	r4, #8
 801731e:	3b01      	subs	r3, #1
 8017320:	9302      	str	r3, [sp, #8]
 8017322:	e747      	b.n	80171b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8017324:	9a02      	ldr	r2, [sp, #8]
 8017326:	45b6      	cmp	lr, r6
 8017328:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801732c:	db0d      	blt.n	801734a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801732e:	449c      	add	ip, r3
 8017330:	fa1f fc8c 	uxth.w	ip, ip
 8017334:	445a      	add	r2, fp
 8017336:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801733a:	448c      	add	ip, r1
 801733c:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8017340:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8017344:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8017348:	e61e      	b.n	8016f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801734a:	445a      	add	r2, fp
 801734c:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8017350:	4484      	add	ip, r0
 8017352:	e78f      	b.n	8017274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017354:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8017358:	fa1f f18e 	uxth.w	r1, lr
 801735c:	eb01 0806 	add.w	r8, r1, r6
 8017360:	b293      	uxth	r3, r2
 8017362:	fa1f f888 	uxth.w	r8, r8
 8017366:	9306      	str	r3, [sp, #24]
 8017368:	fa0f f388 	sxth.w	r3, r8
 801736c:	9307      	str	r3, [sp, #28]
 801736e:	9f06      	ldr	r7, [sp, #24]
 8017370:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8017374:	4596      	cmp	lr, r2
 8017376:	443b      	add	r3, r7
 8017378:	b29b      	uxth	r3, r3
 801737a:	9308      	str	r3, [sp, #32]
 801737c:	da24      	bge.n	80173c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801737e:	9905      	ldr	r1, [sp, #20]
 8017380:	eba3 0308 	sub.w	r3, r3, r8
 8017384:	ebaa 0401 	sub.w	r4, sl, r1
 8017388:	b2a4      	uxth	r4, r4
 801738a:	b29b      	uxth	r3, r3
 801738c:	b225      	sxth	r5, r4
 801738e:	b219      	sxth	r1, r3
 8017390:	eba2 020e 	sub.w	r2, r2, lr
 8017394:	eba9 0000 	sub.w	r0, r9, r0
 8017398:	436a      	muls	r2, r5
 801739a:	4348      	muls	r0, r1
 801739c:	4282      	cmp	r2, r0
 801739e:	9a02      	ldr	r2, [sp, #8]
 80173a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80173a4:	445a      	add	r2, fp
 80173a6:	dc06      	bgt.n	80173b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80173a8:	9b07      	ldr	r3, [sp, #28]
 80173aa:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80173ae:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80173b2:	44a4      	add	ip, r4
 80173b4:	e75e      	b.n	8017274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80173b6:	9904      	ldr	r1, [sp, #16]
 80173b8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80173bc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80173c0:	4433      	add	r3, r6
 80173c2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80173c6:	e5df      	b.n	8016f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80173c8:	9f06      	ldr	r7, [sp, #24]
 80173ca:	9b04      	ldr	r3, [sp, #16]
 80173cc:	1bc9      	subs	r1, r1, r7
 80173ce:	fa0f f78a 	sxth.w	r7, sl
 80173d2:	b289      	uxth	r1, r1
 80173d4:	429f      	cmp	r7, r3
 80173d6:	fa0f fe81 	sxth.w	lr, r1
 80173da:	dd24      	ble.n	8017426 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 80173dc:	9a05      	ldr	r2, [sp, #20]
 80173de:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80173e2:	ebaa 0202 	sub.w	r2, sl, r2
 80173e6:	9d07      	ldr	r5, [sp, #28]
 80173e8:	b292      	uxth	r2, r2
 80173ea:	eba5 0a03 	sub.w	sl, r5, r3
 80173ee:	b214      	sxth	r4, r2
 80173f0:	eba9 0000 	sub.w	r0, r9, r0
 80173f4:	fb0e f000 	mul.w	r0, lr, r0
 80173f8:	fb04 fa0a 	mul.w	sl, r4, sl
 80173fc:	9b02      	ldr	r3, [sp, #8]
 80173fe:	4550      	cmp	r0, sl
 8017400:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8017404:	445b      	add	r3, fp
 8017406:	db03      	blt.n	8017410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8017408:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801740c:	4494      	add	ip, r2
 801740e:	e731      	b.n	8017274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017410:	9a04      	ldr	r2, [sp, #16]
 8017412:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8017416:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801741a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801741e:	4431      	add	r1, r6
 8017420:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017424:	e75b      	b.n	80172de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8017426:	9b08      	ldr	r3, [sp, #32]
 8017428:	2d06      	cmp	r5, #6
 801742a:	eba3 0308 	sub.w	r3, r3, r8
 801742e:	b29b      	uxth	r3, r3
 8017430:	b218      	sxth	r0, r3
 8017432:	d813      	bhi.n	801745c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8017434:	9b07      	ldr	r3, [sp, #28]
 8017436:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801743a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801743e:	1c6b      	adds	r3, r5, #1
 8017440:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8017444:	9b01      	ldr	r3, [sp, #4]
 8017446:	9901      	ldr	r1, [sp, #4]
 8017448:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801744c:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8017450:	805a      	strh	r2, [r3, #2]
 8017452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017454:	f8a3 e006 	strh.w	lr, [r3, #6]
 8017458:	809a      	strh	r2, [r3, #4]
 801745a:	e75e      	b.n	801731a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801745c:	9c02      	ldr	r4, [sp, #8]
 801745e:	4570      	cmp	r0, lr
 8017460:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8017464:	db0d      	blt.n	8017482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 8017466:	4431      	add	r1, r6
 8017468:	9b06      	ldr	r3, [sp, #24]
 801746a:	b289      	uxth	r1, r1
 801746c:	445c      	add	r4, fp
 801746e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017472:	4419      	add	r1, r3
 8017474:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017478:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801747c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8017480:	e582      	b.n	8016f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017482:	445c      	add	r4, fp
 8017484:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8017488:	e79a      	b.n	80173c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801748a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801748e:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8017492:	1e65      	subs	r5, r4, #1
 8017494:	b2ad      	uxth	r5, r5
 8017496:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801749a:	42b5      	cmp	r5, r6
 801749c:	d044      	beq.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5cc>
 801749e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80174a2:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 80174a6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80174aa:	4282      	cmp	r2, r0
 80174ac:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 80174b0:	d11f      	bne.n	80174f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 80174b2:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 80174b6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80174ba:	459c      	cmp	ip, r3
 80174bc:	d119      	bne.n	80174f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 80174be:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 80174c2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80174c6:	19d8      	adds	r0, r3, r7
 80174c8:	b200      	sxth	r0, r0
 80174ca:	4288      	cmp	r0, r1
 80174cc:	d109      	bne.n	80174e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 80174ce:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 80174d2:	4413      	add	r3, r2
 80174d4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80174d8:	4629      	mov	r1, r5
 80174da:	9801      	ldr	r0, [sp, #4]
 80174dc:	f7ff fd2a 	bl	8016f34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80174e0:	e003      	b.n	80174ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 80174e2:	4411      	add	r1, r2
 80174e4:	b209      	sxth	r1, r1
 80174e6:	42b9      	cmp	r1, r7
 80174e8:	d0f3      	beq.n	80174d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x576>
 80174ea:	3d01      	subs	r5, #1
 80174ec:	b2ad      	uxth	r5, r5
 80174ee:	3c08      	subs	r4, #8
 80174f0:	e7d3      	b.n	801749a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 80174f2:	42b9      	cmp	r1, r7
 80174f4:	d1f9      	bne.n	80174ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 80174f6:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 80174fa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80174fe:	4299      	cmp	r1, r3
 8017500:	d1f3      	bne.n	80174ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 8017502:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8017506:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801750a:	181f      	adds	r7, r3, r0
 801750c:	b23f      	sxth	r7, r7
 801750e:	42ba      	cmp	r2, r7
 8017510:	d105      	bne.n	801751e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c2>
 8017512:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8017516:	440b      	add	r3, r1
 8017518:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801751c:	e7dc      	b.n	80174d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 801751e:	440a      	add	r2, r1
 8017520:	b212      	sxth	r2, r2
 8017522:	4290      	cmp	r0, r2
 8017524:	d1e1      	bne.n	80174ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 8017526:	e7f6      	b.n	8017516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ba>
 8017528:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801752c:	2e07      	cmp	r6, #7
 801752e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017532:	d812      	bhi.n	801755a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 8017534:	1c75      	adds	r5, r6, #1
 8017536:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801753a:	9d01      	ldr	r5, [sp, #4]
 801753c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017540:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8017544:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8017548:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801754c:	442c      	add	r4, r5
 801754e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017552:	8061      	strh	r1, [r4, #2]
 8017554:	80a2      	strh	r2, [r4, #4]
 8017556:	80e3      	strh	r3, [r4, #6]
 8017558:	e580      	b.n	801705c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801755a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801755e:	f04f 37ff 	mov.w	r7, #4294967295
 8017562:	2500      	movs	r5, #0
 8017564:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8017568:	3e01      	subs	r6, #1
 801756a:	445c      	add	r4, fp
 801756c:	9305      	str	r3, [sp, #20]
 801756e:	1e72      	subs	r2, r6, #1
 8017570:	4691      	mov	r9, r2
 8017572:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8017576:	9302      	str	r3, [sp, #8]
 8017578:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801757c:	9304      	str	r3, [sp, #16]
 801757e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8017582:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017586:	bf16      	itet	ne
 8017588:	9905      	ldrne	r1, [sp, #20]
 801758a:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801758e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8017592:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017596:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801759a:	6818      	ldr	r0, [r3, #0]
 801759c:	fb18 f801 	smulbb	r8, r8, r1
 80175a0:	6859      	ldr	r1, [r3, #4]
 80175a2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80175a6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80175aa:	4671      	mov	r1, lr
 80175ac:	a80c      	add	r0, sp, #48	; 0x30
 80175ae:	9207      	str	r2, [sp, #28]
 80175b0:	9306      	str	r3, [sp, #24]
 80175b2:	f7ff fb6d 	bl	8016c90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80175b6:	f04f 0c08 	mov.w	ip, #8
 80175ba:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80175be:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80175c2:	9b04      	ldr	r3, [sp, #16]
 80175c4:	9a02      	ldr	r2, [sp, #8]
 80175c6:	fb10 f001 	smulbb	r0, r0, r1
 80175ca:	fb02 8803 	mla	r8, r2, r3, r8
 80175ce:	eba0 0108 	sub.w	r1, r0, r8
 80175d2:	fb90 f0fc 	sdiv	r0, r0, ip
 80175d6:	4288      	cmp	r0, r1
 80175d8:	dc20      	bgt.n	801761c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 80175da:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80175de:	4551      	cmp	r1, sl
 80175e0:	da03      	bge.n	80175ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 80175e2:	b1d9      	cbz	r1, 801761c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 80175e4:	468a      	mov	sl, r1
 80175e6:	464f      	mov	r7, r9
 80175e8:	4635      	mov	r5, r6
 80175ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80175ee:	f119 0f02 	cmn.w	r9, #2
 80175f2:	d1c6      	bne.n	8017582 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 80175f4:	4616      	mov	r6, r2
 80175f6:	3201      	adds	r2, #1
 80175f8:	f1a4 0408 	sub.w	r4, r4, #8
 80175fc:	d1b7      	bne.n	801756e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 80175fe:	9b01      	ldr	r3, [sp, #4]
 8017600:	b2ac      	uxth	r4, r5
 8017602:	00ed      	lsls	r5, r5, #3
 8017604:	1958      	adds	r0, r3, r5
 8017606:	1c7b      	adds	r3, r7, #1
 8017608:	d10b      	bne.n	8017622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 801760a:	4601      	mov	r1, r0
 801760c:	9803      	ldr	r0, [sp, #12]
 801760e:	f7ff fb3f 	bl	8016c90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017612:	4621      	mov	r1, r4
 8017614:	9801      	ldr	r0, [sp, #4]
 8017616:	f7ff fc8d 	bl	8016f34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801761a:	e4b5      	b.n	8016f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801761c:	464f      	mov	r7, r9
 801761e:	4635      	mov	r5, r6
 8017620:	e7ed      	b.n	80175fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 8017622:	9b01      	ldr	r3, [sp, #4]
 8017624:	00ff      	lsls	r7, r7, #3
 8017626:	19d9      	adds	r1, r3, r7
 8017628:	f7ff fb32 	bl	8016c90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801762c:	9b03      	ldr	r3, [sp, #12]
 801762e:	445f      	add	r7, fp
 8017630:	cb03      	ldmia	r3!, {r0, r1}
 8017632:	445d      	add	r5, fp
 8017634:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8017638:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801763c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8017640:	9b03      	ldr	r3, [sp, #12]
 8017642:	6869      	ldr	r1, [r5, #4]
 8017644:	c303      	stmia	r3!, {r0, r1}
 8017646:	e7e4      	b.n	8017612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

08017648 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8017648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801764c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8017650:	b09b      	sub	sp, #108	; 0x6c
 8017652:	4604      	mov	r4, r0
 8017654:	4630      	mov	r0, r6
 8017656:	f7fc fd0e 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801765a:	4605      	mov	r5, r0
 801765c:	b948      	cbnz	r0, 8017672 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801765e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	4620      	mov	r0, r4
 8017666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017668:	4798      	blx	r3
 801766a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801766e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8017672:	4bc6      	ldr	r3, [pc, #792]	; (801798c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d03f      	beq.n	80176fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801767a:	4dc5      	ldr	r5, [pc, #788]	; (8017990 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801767c:	4628      	mov	r0, r5
 801767e:	f7fc fcfa 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017682:	4606      	mov	r6, r0
 8017684:	2800      	cmp	r0, #0
 8017686:	d138      	bne.n	80176fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8017688:	4628      	mov	r0, r5
 801768a:	f7ff f99f 	bl	80169cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801768e:	6823      	ldr	r3, [r4, #0]
 8017690:	6829      	ldr	r1, [r5, #0]
 8017692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017694:	686a      	ldr	r2, [r5, #4]
 8017696:	4620      	mov	r0, r4
 8017698:	4798      	blx	r3
 801769a:	802e      	strh	r6, [r5, #0]
 801769c:	806e      	strh	r6, [r5, #2]
 801769e:	80ae      	strh	r6, [r5, #4]
 80176a0:	80ee      	strh	r6, [r5, #6]
 80176a2:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80176a6:	4dbb      	ldr	r5, [pc, #748]	; (8017994 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80176a8:	4640      	mov	r0, r8
 80176aa:	f7ff fbeb 	bl	8016e84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80176ae:	882e      	ldrh	r6, [r5, #0]
 80176b0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80176b4:	4633      	mov	r3, r6
 80176b6:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80176ba:	42bb      	cmp	r3, r7
 80176bc:	d224      	bcs.n	8017708 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80176be:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80176c2:	2907      	cmp	r1, #7
 80176c4:	d816      	bhi.n	80176f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80176c6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80176ca:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80176ce:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80176d2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80176d6:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80176da:	1c4a      	adds	r2, r1, #1
 80176dc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80176e0:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80176e4:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80176e8:	f8a2 a002 	strh.w	sl, [r2, #2]
 80176ec:	f8a2 e004 	strh.w	lr, [r2, #4]
 80176f0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80176f4:	3301      	adds	r3, #1
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	e7df      	b.n	80176ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80176fa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d1cf      	bne.n	80176a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8017702:	b01b      	add	sp, #108	; 0x6c
 8017704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017708:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801770c:	42b3      	cmp	r3, r6
 801770e:	d90c      	bls.n	801772a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8017710:	6822      	ldr	r2, [r4, #0]
 8017712:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017716:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8017718:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801771c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8017720:	4620      	mov	r0, r4
 8017722:	3601      	adds	r6, #1
 8017724:	47b8      	blx	r7
 8017726:	b2b6      	uxth	r6, r6
 8017728:	e7ee      	b.n	8017708 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801772a:	4a9b      	ldr	r2, [pc, #620]	; (8017998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801772c:	6813      	ldr	r3, [r2, #0]
 801772e:	4691      	mov	r9, r2
 8017730:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017734:	2b01      	cmp	r3, #1
 8017736:	f040 80e2 	bne.w	80178fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801773a:	2600      	movs	r6, #0
 801773c:	8829      	ldrh	r1, [r5, #0]
 801773e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8017742:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8017746:	33ae      	adds	r3, #174	; 0xae
 8017748:	428f      	cmp	r7, r1
 801774a:	f103 0308 	add.w	r3, r3, #8
 801774e:	dd0a      	ble.n	8017766 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8017750:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8017754:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8017758:	3101      	adds	r1, #1
 801775a:	4402      	add	r2, r0
 801775c:	b212      	sxth	r2, r2
 801775e:	4296      	cmp	r6, r2
 8017760:	bfb8      	it	lt
 8017762:	4616      	movlt	r6, r2
 8017764:	e7f0      	b.n	8017748 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8017766:	4b8d      	ldr	r3, [pc, #564]	; (801799c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017768:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8017998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 801776c:	881b      	ldrh	r3, [r3, #0]
 801776e:	2b0f      	cmp	r3, #15
 8017770:	bf88      	it	hi
 8017772:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8017776:	f04f 0300 	mov.w	r3, #0
 801777a:	bf98      	it	ls
 801777c:	f04f 0b01 	movls.w	fp, #1
 8017780:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017784:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8017788:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801778c:	4b82      	ldr	r3, [pc, #520]	; (8017998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801778e:	4438      	add	r0, r7
 8017790:	b207      	sxth	r7, r0
 8017792:	6818      	ldr	r0, [r3, #0]
 8017794:	42b7      	cmp	r7, r6
 8017796:	6803      	ldr	r3, [r0, #0]
 8017798:	f280 8083 	bge.w	80178a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801779c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80177a0:	4798      	blx	r3
 80177a2:	eb07 030b 	add.w	r3, r7, fp
 80177a6:	4298      	cmp	r0, r3
 80177a8:	da07      	bge.n	80177ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 80177aa:	42b0      	cmp	r0, r6
 80177ac:	da05      	bge.n	80177ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 80177ae:	4287      	cmp	r7, r0
 80177b0:	dd6c      	ble.n	801788c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80177b2:	2f00      	cmp	r7, #0
 80177b4:	dd6a      	ble.n	801788c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80177b6:	4630      	mov	r0, r6
 80177b8:	e004      	b.n	80177c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 80177ba:	4287      	cmp	r7, r0
 80177bc:	dcfb      	bgt.n	80177b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80177be:	42b0      	cmp	r0, r6
 80177c0:	bfa8      	it	ge
 80177c2:	4630      	movge	r0, r6
 80177c4:	2200      	movs	r2, #0
 80177c6:	4b76      	ldr	r3, [pc, #472]	; (80179a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80177c8:	1bc0      	subs	r0, r0, r7
 80177ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177ce:	f8ad 7016 	strh.w	r7, [sp, #22]
 80177d2:	882f      	ldrh	r7, [r5, #0]
 80177d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80177d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80177dc:	f8ad 001a 	strh.w	r0, [sp, #26]
 80177e0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80177e4:	42bb      	cmp	r3, r7
 80177e6:	d9cd      	bls.n	8017784 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 80177e8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80177ec:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80177f0:	ab07      	add	r3, sp, #28
 80177f2:	6851      	ldr	r1, [r2, #4]
 80177f4:	c303      	stmia	r3!, {r0, r1}
 80177f6:	a905      	add	r1, sp, #20
 80177f8:	a807      	add	r0, sp, #28
 80177fa:	f7ff f9b1 	bl	8016b60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80177fe:	2800      	cmp	r0, #0
 8017800:	d04c      	beq.n	801789c <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 8017802:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8017806:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801780a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801780e:	4686      	mov	lr, r0
 8017810:	4290      	cmp	r0, r2
 8017812:	4450      	add	r0, sl
 8017814:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8017818:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801781c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017820:	bfb8      	it	lt
 8017822:	4696      	movlt	lr, r2
 8017824:	4452      	add	r2, sl
 8017826:	4299      	cmp	r1, r3
 8017828:	b280      	uxth	r0, r0
 801782a:	b292      	uxth	r2, r2
 801782c:	468c      	mov	ip, r1
 801782e:	9302      	str	r3, [sp, #8]
 8017830:	bfb8      	it	lt
 8017832:	469c      	movlt	ip, r3
 8017834:	fa0f fa82 	sxth.w	sl, r2
 8017838:	b203      	sxth	r3, r0
 801783a:	4553      	cmp	r3, sl
 801783c:	bfb8      	it	lt
 801783e:	4602      	movlt	r2, r0
 8017840:	eba2 020e 	sub.w	r2, r2, lr
 8017844:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017848:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801784c:	9b02      	ldr	r3, [sp, #8]
 801784e:	4411      	add	r1, r2
 8017850:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017854:	b289      	uxth	r1, r1
 8017856:	4413      	add	r3, r2
 8017858:	b29b      	uxth	r3, r3
 801785a:	b208      	sxth	r0, r1
 801785c:	b21a      	sxth	r2, r3
 801785e:	4290      	cmp	r0, r2
 8017860:	bfb8      	it	lt
 8017862:	460b      	movlt	r3, r1
 8017864:	eba3 030c 	sub.w	r3, r3, ip
 8017868:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801786c:	f8ad e01c 	strh.w	lr, [sp, #28]
 8017870:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017874:	a807      	add	r0, sp, #28
 8017876:	f7fc fbfe 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801787a:	b920      	cbnz	r0, 8017886 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801787c:	6823      	ldr	r3, [r4, #0]
 801787e:	a907      	add	r1, sp, #28
 8017880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017882:	4620      	mov	r0, r4
 8017884:	4798      	blx	r3
 8017886:	3701      	adds	r7, #1
 8017888:	b2bf      	uxth	r7, r7
 801788a:	e7a9      	b.n	80177e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801788c:	f8d9 0000 	ldr.w	r0, [r9]
 8017890:	2101      	movs	r1, #1
 8017892:	6803      	ldr	r3, [r0, #0]
 8017894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017898:	4798      	blx	r3
 801789a:	e773      	b.n	8017784 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801789c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80178a0:	e7e8      	b.n	8017874 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80178a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178a4:	4798      	blx	r3
 80178a6:	4b3f      	ldr	r3, [pc, #252]	; (80179a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80178a8:	781b      	ldrb	r3, [r3, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	f43f af29 	beq.w	8017702 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80178b0:	2300      	movs	r3, #0
 80178b2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 80178b6:	882b      	ldrh	r3, [r5, #0]
 80178b8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80178bc:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80178c0:	42ab      	cmp	r3, r5
 80178c2:	f4bf af1e 	bcs.w	8017702 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80178c6:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 80178ca:	2907      	cmp	r1, #7
 80178cc:	d814      	bhi.n	80178f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80178ce:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80178d2:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80178d6:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80178da:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80178de:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80178e2:	1c4a      	adds	r2, r1, #1
 80178e4:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 80178e8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80178ec:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80178f0:	f8a2 c002 	strh.w	ip, [r2, #2]
 80178f4:	8097      	strh	r7, [r2, #4]
 80178f6:	80d6      	strh	r6, [r2, #6]
 80178f8:	3301      	adds	r3, #1
 80178fa:	b29b      	uxth	r3, r3
 80178fc:	e7e0      	b.n	80178c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 80178fe:	2b02      	cmp	r3, #2
 8017900:	f040 8133 	bne.w	8017b6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 8017904:	4b28      	ldr	r3, [pc, #160]	; (80179a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8017906:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801790a:	781b      	ldrb	r3, [r3, #0]
 801790c:	2b01      	cmp	r3, #1
 801790e:	f000 8098 	beq.w	8017a42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8017912:	882a      	ldrh	r2, [r5, #0]
 8017914:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8017918:	3201      	adds	r2, #1
 801791a:	b292      	uxth	r2, r2
 801791c:	2900      	cmp	r1, #0
 801791e:	d0c2      	beq.n	80178a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8017920:	4694      	mov	ip, r2
 8017922:	f04f 0900 	mov.w	r9, #0
 8017926:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 801792a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801792e:	441e      	add	r6, r3
 8017930:	b236      	sxth	r6, r6
 8017932:	fa1f f38c 	uxth.w	r3, ip
 8017936:	4299      	cmp	r1, r3
 8017938:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801793c:	f240 80bf 	bls.w	8017abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 8017940:	4427      	add	r7, r4
 8017942:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8017946:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801794a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801794e:	4283      	cmp	r3, r0
 8017950:	f340 80a1 	ble.w	8017a96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 8017954:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 8017958:	46e1      	mov	r9, ip
 801795a:	4406      	add	r6, r0
 801795c:	b236      	sxth	r6, r6
 801795e:	429e      	cmp	r6, r3
 8017960:	bfa8      	it	ge
 8017962:	461e      	movge	r6, r3
 8017964:	f10c 0c01 	add.w	ip, ip, #1
 8017968:	e7e3      	b.n	8017932 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 801796a:	d10a      	bne.n	8017982 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 801796c:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 8017970:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 8017974:	4562      	cmp	r2, ip
 8017976:	bfb8      	it	lt
 8017978:	4662      	movlt	r2, ip
 801797a:	4288      	cmp	r0, r1
 801797c:	bfb8      	it	lt
 801797e:	461f      	movlt	r7, r3
 8017980:	e087      	b.n	8017a92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 8017982:	428a      	cmp	r2, r1
 8017984:	bfb8      	it	lt
 8017986:	460a      	movlt	r2, r1
 8017988:	e083      	b.n	8017a92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801798a:	bf00      	nop
 801798c:	2000f3cc 	.word	0x2000f3cc
 8017990:	2000f3d8 	.word	0x2000f3d8
 8017994:	20000024 	.word	0x20000024
 8017998:	2000f394 	.word	0x2000f394
 801799c:	2000f38a 	.word	0x2000f38a
 80179a0:	2000f388 	.word	0x2000f388
 80179a4:	2000f392 	.word	0x2000f392
 80179a8:	2000f38c 	.word	0x2000f38c
 80179ac:	19a1      	adds	r1, r4, r6
 80179ae:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80179b2:	ab07      	add	r3, sp, #28
 80179b4:	6849      	ldr	r1, [r1, #4]
 80179b6:	c303      	stmia	r3!, {r0, r1}
 80179b8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80179bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80179c0:	2b13      	cmp	r3, #19
 80179c2:	bfd8      	it	le
 80179c4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80179c8:	440b      	add	r3, r1
 80179ca:	1a9b      	subs	r3, r3, r2
 80179cc:	a807      	add	r0, sp, #28
 80179ce:	f8ad 3020 	strh.w	r3, [sp, #32]
 80179d2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80179d6:	f7ff f813 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179da:	a807      	add	r0, sp, #28
 80179dc:	f7fc fb4b 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80179e0:	bb78      	cbnz	r0, 8017a42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 80179e2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80179e6:	f8d9 0000 	ldr.w	r0, [r9]
 80179ea:	f1bc 0f14 	cmp.w	ip, #20
 80179ee:	bfa8      	it	ge
 80179f0:	f04f 0c14 	movge.w	ip, #20
 80179f4:	f8d0 e000 	ldr.w	lr, [r0]
 80179f8:	fa1f fc8c 	uxth.w	ip, ip
 80179fc:	f8cd c000 	str.w	ip, [sp]
 8017a00:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 8017a04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017a08:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017a0c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017a10:	47d8      	blx	fp
 8017a12:	4683      	mov	fp, r0
 8017a14:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017a18:	a807      	add	r0, sp, #28
 8017a1a:	f7fe ffd7 	bl	80169cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017a1e:	6823      	ldr	r3, [r4, #0]
 8017a20:	4620      	mov	r0, r4
 8017a22:	4426      	add	r6, r4
 8017a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a26:	a907      	add	r1, sp, #28
 8017a28:	4798      	blx	r3
 8017a2a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8017a2e:	eba0 000b 	sub.w	r0, r0, fp
 8017a32:	b200      	sxth	r0, r0
 8017a34:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 8017a38:	b918      	cbnz	r0, 8017a42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8017a3a:	b2b9      	uxth	r1, r7
 8017a3c:	4650      	mov	r0, sl
 8017a3e:	f7ff fa79 	bl	8016f34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017a42:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8017a46:	f1bb 0f00 	cmp.w	fp, #0
 8017a4a:	f43f af2c 	beq.w	80178a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8017a4e:	2700      	movs	r7, #0
 8017a50:	882b      	ldrh	r3, [r5, #0]
 8017a52:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8017a56:	3301      	adds	r3, #1
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	b299      	uxth	r1, r3
 8017a5c:	458b      	cmp	fp, r1
 8017a5e:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 8017a62:	d9a3      	bls.n	80179ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 8017a64:	4426      	add	r6, r4
 8017a66:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 8017a6a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8017a6e:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8017a72:	4408      	add	r0, r1
 8017a74:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8017a78:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 8017a7c:	b200      	sxth	r0, r0
 8017a7e:	4461      	add	r1, ip
 8017a80:	b209      	sxth	r1, r1
 8017a82:	4288      	cmp	r0, r1
 8017a84:	f6bf af71 	bge.w	801796a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8017a88:	4584      	cmp	ip, r0
 8017a8a:	4662      	mov	r2, ip
 8017a8c:	461f      	mov	r7, r3
 8017a8e:	bfb8      	it	lt
 8017a90:	4602      	movlt	r2, r0
 8017a92:	3301      	adds	r3, #1
 8017a94:	e7e1      	b.n	8017a5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 8017a96:	d10e      	bne.n	8017ab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 8017a98:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8017a9c:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 8017aa0:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8017aa4:	4473      	add	r3, lr
 8017aa6:	b21b      	sxth	r3, r3
 8017aa8:	429e      	cmp	r6, r3
 8017aaa:	bfa8      	it	ge
 8017aac:	461e      	movge	r6, r3
 8017aae:	4287      	cmp	r7, r0
 8017ab0:	bfb8      	it	lt
 8017ab2:	46e1      	movlt	r9, ip
 8017ab4:	e756      	b.n	8017964 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8017ab6:	4286      	cmp	r6, r0
 8017ab8:	bfa8      	it	ge
 8017aba:	4606      	movge	r6, r0
 8017abc:	e752      	b.n	8017964 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8017abe:	eb0a 0007 	add.w	r0, sl, r7
 8017ac2:	4427      	add	r7, r4
 8017ac4:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 8017ac8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017acc:	f1bb 0f13 	cmp.w	fp, #19
 8017ad0:	bfde      	ittt	le
 8017ad2:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8017ad6:	445e      	addle	r6, fp
 8017ad8:	b236      	sxthle	r6, r6
 8017ada:	f7fc facc 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ade:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017ae2:	2800      	cmp	r0, #0
 8017ae4:	f47f af1a 	bne.w	801791c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 8017ae8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8017aec:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017af0:	1ab6      	subs	r6, r6, r2
 8017af2:	2e14      	cmp	r6, #20
 8017af4:	bfa8      	it	ge
 8017af6:	2614      	movge	r6, #20
 8017af8:	4828      	ldr	r0, [pc, #160]	; (8017b9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 8017afa:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8017afe:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8017b02:	6800      	ldr	r0, [r0, #0]
 8017b04:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017b08:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017b0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017b10:	f8d0 c000 	ldr.w	ip, [r0]
 8017b14:	b2b6      	uxth	r6, r6
 8017b16:	fa1f fb8b 	uxth.w	fp, fp
 8017b1a:	455e      	cmp	r6, fp
 8017b1c:	bf94      	ite	ls
 8017b1e:	9600      	strls	r6, [sp, #0]
 8017b20:	f8cd b000 	strhi.w	fp, [sp]
 8017b24:	b292      	uxth	r2, r2
 8017b26:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8017b2a:	b29b      	uxth	r3, r3
 8017b2c:	b289      	uxth	r1, r1
 8017b2e:	47b0      	blx	r6
 8017b30:	6823      	ldr	r3, [r4, #0]
 8017b32:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b38:	a907      	add	r1, sp, #28
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	4798      	blx	r3
 8017b3e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017b42:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8017b46:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8017b4a:	1a5b      	subs	r3, r3, r1
 8017b4c:	440a      	add	r2, r1
 8017b4e:	b21b      	sxth	r3, r3
 8017b50:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8017b54:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	f47f aeda 	bne.w	8017912 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8017b5e:	fa1f f189 	uxth.w	r1, r9
 8017b62:	4650      	mov	r0, sl
 8017b64:	f7ff f9e6 	bl	8016f34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017b68:	e6d3      	b.n	8017912 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8017b6a:	882e      	ldrh	r6, [r5, #0]
 8017b6c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8017b70:	42b3      	cmp	r3, r6
 8017b72:	f67f ae98 	bls.w	80178a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8017b76:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8017b7a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017b7e:	ab07      	add	r3, sp, #28
 8017b80:	6851      	ldr	r1, [r2, #4]
 8017b82:	c303      	stmia	r3!, {r0, r1}
 8017b84:	a807      	add	r0, sp, #28
 8017b86:	f7fc fa76 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b8a:	b920      	cbnz	r0, 8017b96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 8017b8c:	6823      	ldr	r3, [r4, #0]
 8017b8e:	a907      	add	r1, sp, #28
 8017b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b92:	4620      	mov	r0, r4
 8017b94:	4798      	blx	r3
 8017b96:	3601      	adds	r6, #1
 8017b98:	b2b6      	uxth	r6, r6
 8017b9a:	e7e7      	b.n	8017b6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 8017b9c:	2000f394 	.word	0x2000f394

08017ba0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	4b03      	ldr	r3, [pc, #12]	; (8017bb0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017ba4:	801a      	strh	r2, [r3, #0]
 8017ba6:	805a      	strh	r2, [r3, #2]
 8017ba8:	809a      	strh	r2, [r3, #4]
 8017baa:	80da      	strh	r2, [r3, #6]
 8017bac:	4770      	bx	lr
 8017bae:	bf00      	nop
 8017bb0:	2000f3d8 	.word	0x2000f3d8

08017bb4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb8:	4606      	mov	r6, r0
 8017bba:	b09d      	sub	sp, #116	; 0x74
 8017bbc:	a803      	add	r0, sp, #12
 8017bbe:	4614      	mov	r4, r2
 8017bc0:	468a      	mov	sl, r1
 8017bc2:	461d      	mov	r5, r3
 8017bc4:	f000 fd72 	bl	80186ac <_ZN8touchgfx12TextProviderC1Ev>
 8017bc8:	6833      	ldr	r3, [r6, #0]
 8017bca:	4630      	mov	r0, r6
 8017bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bce:	4798      	blx	r3
 8017bd0:	6833      	ldr	r3, [r6, #0]
 8017bd2:	4607      	mov	r7, r0
 8017bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017bd6:	4630      	mov	r0, r6
 8017bd8:	4798      	blx	r3
 8017bda:	462a      	mov	r2, r5
 8017bdc:	2500      	movs	r5, #0
 8017bde:	9000      	str	r0, [sp, #0]
 8017be0:	4621      	mov	r1, r4
 8017be2:	463b      	mov	r3, r7
 8017be4:	a803      	add	r0, sp, #12
 8017be6:	f000 fdb4 	bl	8018752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017bea:	462c      	mov	r4, r5
 8017bec:	46a9      	mov	r9, r5
 8017bee:	46a8      	mov	r8, r5
 8017bf0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	9302      	str	r3, [sp, #8]
 8017bf8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017bfc:	429c      	cmp	r4, r3
 8017bfe:	d002      	beq.n	8017c06 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017c00:	455c      	cmp	r4, fp
 8017c02:	bf18      	it	ne
 8017c04:	4625      	movne	r5, r4
 8017c06:	ab02      	add	r3, sp, #8
 8017c08:	4632      	mov	r2, r6
 8017c0a:	4651      	mov	r1, sl
 8017c0c:	a803      	add	r0, sp, #12
 8017c0e:	f001 f88f 	bl	8018d30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017c12:	4604      	mov	r4, r0
 8017c14:	b108      	cbz	r0, 8017c1a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017c16:	280a      	cmp	r0, #10
 8017c18:	d10a      	bne.n	8017c30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017c1a:	45c1      	cmp	r9, r8
 8017c1c:	bf38      	it	cc
 8017c1e:	46c1      	movcc	r9, r8
 8017c20:	f04f 0800 	mov.w	r8, #0
 8017c24:	2c00      	cmp	r4, #0
 8017c26:	d1e5      	bne.n	8017bf4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017c28:	4648      	mov	r0, r9
 8017c2a:	b01d      	add	sp, #116	; 0x74
 8017c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c30:	9a02      	ldr	r2, [sp, #8]
 8017c32:	2a00      	cmp	r2, #0
 8017c34:	d0de      	beq.n	8017bf4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017c36:	7b57      	ldrb	r7, [r2, #13]
 8017c38:	6833      	ldr	r3, [r6, #0]
 8017c3a:	007f      	lsls	r7, r7, #1
 8017c3c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017c40:	7a97      	ldrb	r7, [r2, #10]
 8017c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c44:	4307      	orrs	r7, r0
 8017c46:	4629      	mov	r1, r5
 8017c48:	4630      	mov	r0, r6
 8017c4a:	8894      	ldrh	r4, [r2, #4]
 8017c4c:	4798      	blx	r3
 8017c4e:	4438      	add	r0, r7
 8017c50:	4480      	add	r8, r0
 8017c52:	fa1f f888 	uxth.w	r8, r8
 8017c56:	e7e5      	b.n	8017c24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017c58 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017c58:	b508      	push	{r3, lr}
 8017c5a:	6803      	ldr	r3, [r0, #0]
 8017c5c:	68db      	ldr	r3, [r3, #12]
 8017c5e:	4798      	blx	r3
 8017c60:	b128      	cbz	r0, 8017c6e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017c62:	7b43      	ldrb	r3, [r0, #13]
 8017c64:	7a80      	ldrb	r0, [r0, #10]
 8017c66:	005b      	lsls	r3, r3, #1
 8017c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017c6c:	4318      	orrs	r0, r3
 8017c6e:	bd08      	pop	{r3, pc}

08017c70 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017c70:	b40e      	push	{r1, r2, r3}
 8017c72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c74:	4605      	mov	r5, r0
 8017c76:	b09e      	sub	sp, #120	; 0x78
 8017c78:	ab23      	add	r3, sp, #140	; 0x8c
 8017c7a:	f853 4b04 	ldr.w	r4, [r3], #4
 8017c7e:	a805      	add	r0, sp, #20
 8017c80:	9303      	str	r3, [sp, #12]
 8017c82:	f000 fd13 	bl	80186ac <_ZN8touchgfx12TextProviderC1Ev>
 8017c86:	682b      	ldr	r3, [r5, #0]
 8017c88:	4628      	mov	r0, r5
 8017c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017c8c:	4798      	blx	r3
 8017c8e:	682b      	ldr	r3, [r5, #0]
 8017c90:	4606      	mov	r6, r0
 8017c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c94:	4628      	mov	r0, r5
 8017c96:	4798      	blx	r3
 8017c98:	4621      	mov	r1, r4
 8017c9a:	2400      	movs	r4, #0
 8017c9c:	4633      	mov	r3, r6
 8017c9e:	9000      	str	r0, [sp, #0]
 8017ca0:	9a03      	ldr	r2, [sp, #12]
 8017ca2:	ae1e      	add	r6, sp, #120	; 0x78
 8017ca4:	a805      	add	r0, sp, #20
 8017ca6:	f000 fd54 	bl	8018752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017caa:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017cae:	4633      	mov	r3, r6
 8017cb0:	462a      	mov	r2, r5
 8017cb2:	4621      	mov	r1, r4
 8017cb4:	a805      	add	r0, sp, #20
 8017cb6:	f001 f83b 	bl	8018d30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017cba:	b1f0      	cbz	r0, 8017cfa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8017cbc:	280a      	cmp	r0, #10
 8017cbe:	d018      	beq.n	8017cf2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017cc0:	9f04      	ldr	r7, [sp, #16]
 8017cc2:	b1b7      	cbz	r7, 8017cf2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017cc4:	7b78      	ldrb	r0, [r7, #13]
 8017cc6:	7a3b      	ldrb	r3, [r7, #8]
 8017cc8:	00c1      	lsls	r1, r0, #3
 8017cca:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017cce:	4319      	orrs	r1, r3
 8017cd0:	0643      	lsls	r3, r0, #25
 8017cd2:	bf44      	itt	mi
 8017cd4:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017cd8:	b219      	sxthmi	r1, r3
 8017cda:	0100      	lsls	r0, r0, #4
 8017cdc:	79fb      	ldrb	r3, [r7, #7]
 8017cde:	88ea      	ldrh	r2, [r5, #6]
 8017ce0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017ce4:	4303      	orrs	r3, r0
 8017ce6:	4413      	add	r3, r2
 8017ce8:	1a5b      	subs	r3, r3, r1
 8017cea:	b21b      	sxth	r3, r3
 8017cec:	429c      	cmp	r4, r3
 8017cee:	bfb8      	it	lt
 8017cf0:	461c      	movlt	r4, r3
 8017cf2:	4633      	mov	r3, r6
 8017cf4:	462a      	mov	r2, r5
 8017cf6:	2100      	movs	r1, #0
 8017cf8:	e7dc      	b.n	8017cb4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017cfa:	b2a0      	uxth	r0, r4
 8017cfc:	b01e      	add	sp, #120	; 0x78
 8017cfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017d02:	b003      	add	sp, #12
 8017d04:	4770      	bx	lr

08017d06 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8017d06:	7a43      	ldrb	r3, [r0, #9]
 8017d08:	8880      	ldrh	r0, [r0, #4]
 8017d0a:	4418      	add	r0, r3
 8017d0c:	b280      	uxth	r0, r0
 8017d0e:	4770      	bx	lr

08017d10 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017d10:	6803      	ldr	r3, [r0, #0]
 8017d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d14:	4718      	bx	r3

08017d16 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017d16:	b40e      	push	{r1, r2, r3}
 8017d18:	b570      	push	{r4, r5, r6, lr}
 8017d1a:	4604      	mov	r4, r0
 8017d1c:	b09d      	sub	sp, #116	; 0x74
 8017d1e:	ab21      	add	r3, sp, #132	; 0x84
 8017d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8017d24:	a803      	add	r0, sp, #12
 8017d26:	9302      	str	r3, [sp, #8]
 8017d28:	f000 fcc0 	bl	80186ac <_ZN8touchgfx12TextProviderC1Ev>
 8017d2c:	6823      	ldr	r3, [r4, #0]
 8017d2e:	4620      	mov	r0, r4
 8017d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d32:	4798      	blx	r3
 8017d34:	6823      	ldr	r3, [r4, #0]
 8017d36:	4606      	mov	r6, r0
 8017d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	4798      	blx	r3
 8017d3e:	4633      	mov	r3, r6
 8017d40:	9000      	str	r0, [sp, #0]
 8017d42:	9a02      	ldr	r2, [sp, #8]
 8017d44:	4629      	mov	r1, r5
 8017d46:	a803      	add	r0, sp, #12
 8017d48:	f000 fd03 	bl	8018752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017d4c:	a803      	add	r0, sp, #12
 8017d4e:	f001 f8bd 	bl	8018ecc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017d52:	2401      	movs	r4, #1
 8017d54:	b2a3      	uxth	r3, r4
 8017d56:	b140      	cbz	r0, 8017d6a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8017d58:	280a      	cmp	r0, #10
 8017d5a:	bf08      	it	eq
 8017d5c:	3301      	addeq	r3, #1
 8017d5e:	a803      	add	r0, sp, #12
 8017d60:	bf08      	it	eq
 8017d62:	b21c      	sxtheq	r4, r3
 8017d64:	f001 f8b2 	bl	8018ecc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017d68:	e7f4      	b.n	8017d54 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	b01d      	add	sp, #116	; 0x74
 8017d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d72:	b003      	add	sp, #12
 8017d74:	4770      	bx	lr

08017d76 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017d76:	b40e      	push	{r1, r2, r3}
 8017d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d7a:	4604      	mov	r4, r0
 8017d7c:	b09e      	sub	sp, #120	; 0x78
 8017d7e:	ab23      	add	r3, sp, #140	; 0x8c
 8017d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8017d84:	a805      	add	r0, sp, #20
 8017d86:	9303      	str	r3, [sp, #12]
 8017d88:	f000 fc90 	bl	80186ac <_ZN8touchgfx12TextProviderC1Ev>
 8017d8c:	6823      	ldr	r3, [r4, #0]
 8017d8e:	4620      	mov	r0, r4
 8017d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d92:	4798      	blx	r3
 8017d94:	6823      	ldr	r3, [r4, #0]
 8017d96:	4606      	mov	r6, r0
 8017d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d9a:	4620      	mov	r0, r4
 8017d9c:	4798      	blx	r3
 8017d9e:	4633      	mov	r3, r6
 8017da0:	4629      	mov	r1, r5
 8017da2:	9000      	str	r0, [sp, #0]
 8017da4:	9a03      	ldr	r2, [sp, #12]
 8017da6:	a805      	add	r0, sp, #20
 8017da8:	f000 fcd3 	bl	8018752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017dac:	2100      	movs	r1, #0
 8017dae:	ad1e      	add	r5, sp, #120	; 0x78
 8017db0:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017db4:	462b      	mov	r3, r5
 8017db6:	4622      	mov	r2, r4
 8017db8:	a805      	add	r0, sp, #20
 8017dba:	f000 ffb9 	bl	8018d30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017dbe:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8017dc2:	b1d8      	cbz	r0, 8017dfc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017dc4:	280a      	cmp	r0, #10
 8017dc6:	d012      	beq.n	8017dee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017dc8:	9804      	ldr	r0, [sp, #16]
 8017dca:	b180      	cbz	r0, 8017dee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017dcc:	7b47      	ldrb	r7, [r0, #13]
 8017dce:	88e2      	ldrh	r2, [r4, #6]
 8017dd0:	00fb      	lsls	r3, r7, #3
 8017dd2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017dd6:	7a03      	ldrb	r3, [r0, #8]
 8017dd8:	430b      	orrs	r3, r1
 8017dda:	0679      	lsls	r1, r7, #25
 8017ddc:	bf44      	itt	mi
 8017dde:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017de2:	b21b      	sxthmi	r3, r3
 8017de4:	1ad3      	subs	r3, r2, r3
 8017de6:	b21b      	sxth	r3, r3
 8017de8:	429e      	cmp	r6, r3
 8017dea:	bfa8      	it	ge
 8017dec:	461e      	movge	r6, r3
 8017dee:	462b      	mov	r3, r5
 8017df0:	4622      	mov	r2, r4
 8017df2:	2100      	movs	r1, #0
 8017df4:	a805      	add	r0, sp, #20
 8017df6:	f000 ff9b 	bl	8018d30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017dfa:	e7e2      	b.n	8017dc2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8017dfc:	4630      	mov	r0, r6
 8017dfe:	b01e      	add	sp, #120	; 0x78
 8017e00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e04:	b003      	add	sp, #12
 8017e06:	4770      	bx	lr

08017e08 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017e08:	b513      	push	{r0, r1, r4, lr}
 8017e0a:	2400      	movs	r4, #0
 8017e0c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017e10:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e14:	6803      	ldr	r3, [r0, #0]
 8017e16:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017e1a:	9400      	str	r4, [sp, #0]
 8017e1c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017e20:	691b      	ldr	r3, [r3, #16]
 8017e22:	4669      	mov	r1, sp
 8017e24:	4798      	blx	r3
 8017e26:	b002      	add	sp, #8
 8017e28:	bd10      	pop	{r4, pc}

08017e2a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017e2a:	b538      	push	{r3, r4, r5, lr}
 8017e2c:	460c      	mov	r4, r1
 8017e2e:	4605      	mov	r5, r0
 8017e30:	680b      	ldr	r3, [r1, #0]
 8017e32:	68db      	ldr	r3, [r3, #12]
 8017e34:	4798      	blx	r3
 8017e36:	6823      	ldr	r3, [r4, #0]
 8017e38:	4620      	mov	r0, r4
 8017e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e3c:	4629      	mov	r1, r5
 8017e3e:	4798      	blx	r3
 8017e40:	4628      	mov	r0, r5
 8017e42:	bd38      	pop	{r3, r4, r5, pc}

08017e44 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017e44:	b410      	push	{r4}
 8017e46:	880a      	ldrh	r2, [r1, #0]
 8017e48:	8884      	ldrh	r4, [r0, #4]
 8017e4a:	4422      	add	r2, r4
 8017e4c:	800a      	strh	r2, [r1, #0]
 8017e4e:	88c4      	ldrh	r4, [r0, #6]
 8017e50:	884a      	ldrh	r2, [r1, #2]
 8017e52:	4422      	add	r2, r4
 8017e54:	804a      	strh	r2, [r1, #2]
 8017e56:	6940      	ldr	r0, [r0, #20]
 8017e58:	b120      	cbz	r0, 8017e64 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017e5a:	6803      	ldr	r3, [r0, #0]
 8017e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e62:	4718      	bx	r3
 8017e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e68:	4770      	bx	lr

08017e6a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017e6a:	b570      	push	{r4, r5, r6, lr}
 8017e6c:	460c      	mov	r4, r1
 8017e6e:	8882      	ldrh	r2, [r0, #4]
 8017e70:	880b      	ldrh	r3, [r1, #0]
 8017e72:	4605      	mov	r5, r0
 8017e74:	4413      	add	r3, r2
 8017e76:	800b      	strh	r3, [r1, #0]
 8017e78:	88c2      	ldrh	r2, [r0, #6]
 8017e7a:	884b      	ldrh	r3, [r1, #2]
 8017e7c:	4413      	add	r3, r2
 8017e7e:	804b      	strh	r3, [r1, #2]
 8017e80:	1d01      	adds	r1, r0, #4
 8017e82:	4620      	mov	r0, r4
 8017e84:	f7fc f8b4 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 8017e88:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	dd0b      	ble.n	8017ea8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017e90:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	dd07      	ble.n	8017ea8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017e98:	6968      	ldr	r0, [r5, #20]
 8017e9a:	b128      	cbz	r0, 8017ea8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017e9c:	6803      	ldr	r3, [r0, #0]
 8017e9e:	4621      	mov	r1, r4
 8017ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ea6:	4718      	bx	r3
 8017ea8:	bd70      	pop	{r4, r5, r6, pc}
	...

08017eac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017eac:	b570      	push	{r4, r5, r6, lr}
 8017eae:	460c      	mov	r4, r1
 8017eb0:	8882      	ldrh	r2, [r0, #4]
 8017eb2:	880b      	ldrh	r3, [r1, #0]
 8017eb4:	4605      	mov	r5, r0
 8017eb6:	4413      	add	r3, r2
 8017eb8:	800b      	strh	r3, [r1, #0]
 8017eba:	88c2      	ldrh	r2, [r0, #6]
 8017ebc:	884b      	ldrh	r3, [r1, #2]
 8017ebe:	4413      	add	r3, r2
 8017ec0:	804b      	strh	r3, [r1, #2]
 8017ec2:	1d01      	adds	r1, r0, #4
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	f7fc f893 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 8017eca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	dd19      	ble.n	8017f06 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017ed2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	dd15      	ble.n	8017f06 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017eda:	6968      	ldr	r0, [r5, #20]
 8017edc:	b128      	cbz	r0, 8017eea <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017ede:	6803      	ldr	r3, [r0, #0]
 8017ee0:	4621      	mov	r1, r4
 8017ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ee6:	691b      	ldr	r3, [r3, #16]
 8017ee8:	4718      	bx	r3
 8017eea:	4b07      	ldr	r3, [pc, #28]	; (8017f08 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	3304      	adds	r3, #4
 8017ef0:	429d      	cmp	r5, r3
 8017ef2:	d108      	bne.n	8017f06 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017ef4:	f7fe ff12 	bl	8016d1c <_ZN8touchgfx11Application11getInstanceEv>
 8017ef8:	6803      	ldr	r3, [r0, #0]
 8017efa:	6821      	ldr	r1, [r4, #0]
 8017efc:	6862      	ldr	r2, [r4, #4]
 8017efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f04:	4718      	bx	r3
 8017f06:	bd70      	pop	{r4, r5, r6, pc}
 8017f08:	2000f3d0 	.word	0x2000f3d0

08017f0c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017f0c:	b570      	push	{r4, r5, r6, lr}
 8017f0e:	4604      	mov	r4, r0
 8017f10:	4616      	mov	r6, r2
 8017f12:	460d      	mov	r5, r1
 8017f14:	b901      	cbnz	r1, 8017f18 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017f16:	b192      	cbz	r2, 8017f3e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017f18:	6823      	ldr	r3, [r4, #0]
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	699b      	ldr	r3, [r3, #24]
 8017f1e:	4798      	blx	r3
 8017f20:	88e2      	ldrh	r2, [r4, #6]
 8017f22:	88a1      	ldrh	r1, [r4, #4]
 8017f24:	4432      	add	r2, r6
 8017f26:	4429      	add	r1, r5
 8017f28:	4620      	mov	r0, r4
 8017f2a:	b212      	sxth	r2, r2
 8017f2c:	b209      	sxth	r1, r1
 8017f2e:	f7f8 ffda 	bl	8010ee6 <_ZN8touchgfx8Drawable5setXYEss>
 8017f32:	6823      	ldr	r3, [r4, #0]
 8017f34:	4620      	mov	r0, r4
 8017f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f3a:	699b      	ldr	r3, [r3, #24]
 8017f3c:	4718      	bx	r3
 8017f3e:	bd70      	pop	{r4, r5, r6, pc}

08017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017f40:	b510      	push	{r4, lr}
 8017f42:	2300      	movs	r3, #0
 8017f44:	4604      	mov	r4, r0
 8017f46:	4608      	mov	r0, r1
 8017f48:	8023      	strh	r3, [r4, #0]
 8017f4a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017f4e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017f52:	8063      	strh	r3, [r4, #2]
 8017f54:	6803      	ldr	r3, [r0, #0]
 8017f56:	80a1      	strh	r1, [r4, #4]
 8017f58:	80e2      	strh	r2, [r4, #6]
 8017f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f5c:	4621      	mov	r1, r4
 8017f5e:	4798      	blx	r3
 8017f60:	4620      	mov	r0, r4
 8017f62:	bd10      	pop	{r4, pc}

08017f64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017f64:	b530      	push	{r4, r5, lr}
 8017f66:	8083      	strh	r3, [r0, #4]
 8017f68:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017f6c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017f70:	80c3      	strh	r3, [r0, #6]
 8017f72:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017f76:	6141      	str	r1, [r0, #20]
 8017f78:	7203      	strb	r3, [r0, #8]
 8017f7a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017f7e:	8302      	strh	r2, [r0, #24]
 8017f80:	7243      	strb	r3, [r0, #9]
 8017f82:	7a83      	ldrb	r3, [r0, #10]
 8017f84:	f365 0306 	bfi	r3, r5, #0, #7
 8017f88:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8017f8c:	f365 13c7 	bfi	r3, r5, #7, #1
 8017f90:	7283      	strb	r3, [r0, #10]
 8017f92:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017f96:	72c3      	strb	r3, [r0, #11]
 8017f98:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017f9c:	7303      	strb	r3, [r0, #12]
 8017f9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8017fa2:	81c3      	strh	r3, [r0, #14]
 8017fa4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8017fa8:	8203      	strh	r3, [r0, #16]
 8017faa:	4b01      	ldr	r3, [pc, #4]	; (8017fb0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8017fac:	6003      	str	r3, [r0, #0]
 8017fae:	bd30      	pop	{r4, r5, pc}
 8017fb0:	08029fe8 	.word	0x08029fe8

08017fb4 <_ZNK8touchgfx9ConstFont4findEt>:
 8017fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fb6:	6944      	ldr	r4, [r0, #20]
 8017fb8:	b3bc      	cbz	r4, 801802a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fba:	88a3      	ldrh	r3, [r4, #4]
 8017fbc:	8b02      	ldrh	r2, [r0, #24]
 8017fbe:	1acb      	subs	r3, r1, r3
 8017fc0:	f102 32ff 	add.w	r2, r2, #4294967295
 8017fc4:	d431      	bmi.n	801802a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	dd0c      	ble.n	8017fe4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017fca:	230e      	movs	r3, #14
 8017fcc:	fb03 4302 	mla	r3, r3, r2, r4
 8017fd0:	889b      	ldrh	r3, [r3, #4]
 8017fd2:	1a5b      	subs	r3, r3, r1
 8017fd4:	1ad3      	subs	r3, r2, r3
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	db27      	blt.n	801802a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	bfbc      	itt	lt
 8017fde:	2302      	movlt	r3, #2
 8017fe0:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017fe4:	2500      	movs	r5, #0
 8017fe6:	260e      	movs	r6, #14
 8017fe8:	4295      	cmp	r5, r2
 8017fea:	dc1e      	bgt.n	801802a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fec:	fb06 4003 	mla	r0, r6, r3, r4
 8017ff0:	8887      	ldrh	r7, [r0, #4]
 8017ff2:	42b9      	cmp	r1, r7
 8017ff4:	d01a      	beq.n	801802c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017ff6:	d20d      	bcs.n	8018014 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017ff8:	1e5a      	subs	r2, r3, #1
 8017ffa:	4295      	cmp	r5, r2
 8017ffc:	dc15      	bgt.n	801802a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017ffe:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018002:	1a5b      	subs	r3, r3, r1
 8018004:	1ad3      	subs	r3, r2, r3
 8018006:	429a      	cmp	r2, r3
 8018008:	db0f      	blt.n	801802a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801800a:	429d      	cmp	r5, r3
 801800c:	ddec      	ble.n	8017fe8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801800e:	1953      	adds	r3, r2, r5
 8018010:	105b      	asrs	r3, r3, #1
 8018012:	e7e9      	b.n	8017fe8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018014:	1c5d      	adds	r5, r3, #1
 8018016:	42aa      	cmp	r2, r5
 8018018:	db07      	blt.n	801802a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801801a:	8a43      	ldrh	r3, [r0, #18]
 801801c:	1acb      	subs	r3, r1, r3
 801801e:	442b      	add	r3, r5
 8018020:	429d      	cmp	r5, r3
 8018022:	dc02      	bgt.n	801802a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018024:	429a      	cmp	r2, r3
 8018026:	dadf      	bge.n	8017fe8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018028:	e7f1      	b.n	801800e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801802a:	2000      	movs	r0, #0
 801802c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801802e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801802e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018030:	4604      	mov	r4, r0
 8018032:	4617      	mov	r7, r2
 8018034:	461e      	mov	r6, r3
 8018036:	b911      	cbnz	r1, 801803e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018038:	2500      	movs	r5, #0
 801803a:	4628      	mov	r0, r5
 801803c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801803e:	290a      	cmp	r1, #10
 8018040:	d0fa      	beq.n	8018038 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018042:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018046:	4291      	cmp	r1, r2
 8018048:	d0f6      	beq.n	8018038 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801804a:	f242 020b 	movw	r2, #8203	; 0x200b
 801804e:	4291      	cmp	r1, r2
 8018050:	d0f2      	beq.n	8018038 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018052:	f7ff ffaf 	bl	8017fb4 <_ZNK8touchgfx9ConstFont4findEt>
 8018056:	4605      	mov	r5, r0
 8018058:	b950      	cbnz	r0, 8018070 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801805a:	6823      	ldr	r3, [r4, #0]
 801805c:	4620      	mov	r0, r4
 801805e:	691b      	ldr	r3, [r3, #16]
 8018060:	4798      	blx	r3
 8018062:	4601      	mov	r1, r0
 8018064:	4620      	mov	r0, r4
 8018066:	f7ff ffa5 	bl	8017fb4 <_ZNK8touchgfx9ConstFont4findEt>
 801806a:	4605      	mov	r5, r0
 801806c:	2800      	cmp	r0, #0
 801806e:	d0e3      	beq.n	8018038 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018070:	6823      	ldr	r3, [r4, #0]
 8018072:	4629      	mov	r1, r5
 8018074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018076:	4620      	mov	r0, r4
 8018078:	4798      	blx	r3
 801807a:	6038      	str	r0, [r7, #0]
 801807c:	6823      	ldr	r3, [r4, #0]
 801807e:	4620      	mov	r0, r4
 8018080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018082:	4798      	blx	r3
 8018084:	7030      	strb	r0, [r6, #0]
 8018086:	e7d8      	b.n	801803a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018088 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018088:	2000      	movs	r0, #0
 801808a:	4770      	bx	lr

0801808c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801808c:	2001      	movs	r0, #1
 801808e:	4770      	bx	lr

08018090 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018090:	2002      	movs	r0, #2
 8018092:	4770      	bx	lr

08018094 <_ZN8touchgfx12GestureEventD1Ev>:
 8018094:	4770      	bx	lr

08018096 <_ZN8touchgfx9DragEventD1Ev>:
 8018096:	4770      	bx	lr

08018098 <_ZN8touchgfx10ClickEventD1Ev>:
 8018098:	4770      	bx	lr

0801809a <_ZN8touchgfx10ClickEventD0Ev>:
 801809a:	b510      	push	{r4, lr}
 801809c:	4604      	mov	r4, r0
 801809e:	210c      	movs	r1, #12
 80180a0:	f00e ff0b 	bl	8026eba <_ZdlPvj>
 80180a4:	4620      	mov	r0, r4
 80180a6:	bd10      	pop	{r4, pc}

080180a8 <_ZN8touchgfx9DragEventD0Ev>:
 80180a8:	b510      	push	{r4, lr}
 80180aa:	4604      	mov	r4, r0
 80180ac:	2110      	movs	r1, #16
 80180ae:	f00e ff04 	bl	8026eba <_ZdlPvj>
 80180b2:	4620      	mov	r0, r4
 80180b4:	bd10      	pop	{r4, pc}

080180b6 <_ZN8touchgfx12GestureEventD0Ev>:
 80180b6:	b510      	push	{r4, lr}
 80180b8:	4604      	mov	r4, r0
 80180ba:	210c      	movs	r1, #12
 80180bc:	f00e fefd 	bl	8026eba <_ZdlPvj>
 80180c0:	4620      	mov	r0, r4
 80180c2:	bd10      	pop	{r4, pc}

080180c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80180c4:	b530      	push	{r4, r5, lr}
 80180c6:	460d      	mov	r5, r1
 80180c8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80180ca:	b087      	sub	sp, #28
 80180cc:	4604      	mov	r4, r0
 80180ce:	b301      	cbz	r1, 8018112 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80180d0:	a801      	add	r0, sp, #4
 80180d2:	f7ff ff35 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180d6:	892a      	ldrh	r2, [r5, #8]
 80180d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80180dc:	7928      	ldrb	r0, [r5, #4]
 80180de:	1ad2      	subs	r2, r2, r3
 80180e0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80180e2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80180e6:	441a      	add	r2, r3
 80180e8:	896b      	ldrh	r3, [r5, #10]
 80180ea:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80180ee:	f88d 0010 	strb.w	r0, [sp, #16]
 80180f2:	1b5b      	subs	r3, r3, r5
 80180f4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80180f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80180f8:	442b      	add	r3, r5
 80180fa:	4d07      	ldr	r5, [pc, #28]	; (8018118 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80180fc:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018100:	9503      	str	r5, [sp, #12]
 8018102:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018106:	f8ad 3016 	strh.w	r3, [sp, #22]
 801810a:	6803      	ldr	r3, [r0, #0]
 801810c:	a903      	add	r1, sp, #12
 801810e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018110:	4798      	blx	r3
 8018112:	b007      	add	sp, #28
 8018114:	bd30      	pop	{r4, r5, pc}
 8018116:	bf00      	nop
 8018118:	0802a070 	.word	0x0802a070

0801811c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018120:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018122:	b08a      	sub	sp, #40	; 0x28
 8018124:	4604      	mov	r4, r0
 8018126:	460d      	mov	r5, r1
 8018128:	b113      	cbz	r3, 8018130 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801812a:	790b      	ldrb	r3, [r1, #4]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d044      	beq.n	80181ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018130:	f104 0804 	add.w	r8, r4, #4
 8018134:	4641      	mov	r1, r8
 8018136:	a803      	add	r0, sp, #12
 8018138:	f7ff ff02 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801813c:	792b      	ldrb	r3, [r5, #4]
 801813e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018142:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018146:	b983      	cbnz	r3, 801816a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018148:	892a      	ldrh	r2, [r5, #8]
 801814a:	88e9      	ldrh	r1, [r5, #6]
 801814c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018150:	1b92      	subs	r2, r2, r6
 8018152:	1bc9      	subs	r1, r1, r7
 8018154:	9301      	str	r3, [sp, #4]
 8018156:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801815a:	9300      	str	r3, [sp, #0]
 801815c:	b212      	sxth	r2, r2
 801815e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018162:	b209      	sxth	r1, r1
 8018164:	4640      	mov	r0, r8
 8018166:	f7fb fe63 	bl	8013e30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801816a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801816c:	b329      	cbz	r1, 80181ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801816e:	a805      	add	r0, sp, #20
 8018170:	f7ff fee6 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018174:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018178:	792b      	ldrb	r3, [r5, #4]
 801817a:	1abf      	subs	r7, r7, r2
 801817c:	88ea      	ldrh	r2, [r5, #6]
 801817e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018180:	4417      	add	r7, r2
 8018182:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018184:	f88d 3020 	strb.w	r3, [sp, #32]
 8018188:	4417      	add	r7, r2
 801818a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801818e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018192:	1ab6      	subs	r6, r6, r2
 8018194:	892a      	ldrh	r2, [r5, #8]
 8018196:	a907      	add	r1, sp, #28
 8018198:	4416      	add	r6, r2
 801819a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801819c:	4416      	add	r6, r2
 801819e:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80181a2:	2600      	movs	r6, #0
 80181a4:	4a06      	ldr	r2, [pc, #24]	; (80181c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80181a6:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80181aa:	9207      	str	r2, [sp, #28]
 80181ac:	6803      	ldr	r3, [r0, #0]
 80181ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181b0:	4798      	blx	r3
 80181b2:	792b      	ldrb	r3, [r5, #4]
 80181b4:	b10b      	cbz	r3, 80181ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80181b6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80181ba:	b00a      	add	sp, #40	; 0x28
 80181bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181c0:	0802a048 	.word	0x0802a048

080181c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80181c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181c8:	460c      	mov	r4, r1
 80181ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80181cc:	b088      	sub	sp, #32
 80181ce:	4605      	mov	r5, r0
 80181d0:	2900      	cmp	r1, #0
 80181d2:	d06d      	beq.n	80182b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80181d4:	4668      	mov	r0, sp
 80181d6:	f7ff feb3 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181da:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80181dc:	88e3      	ldrh	r3, [r4, #6]
 80181de:	f9bd 8000 	ldrsh.w	r8, [sp]
 80181e2:	440b      	add	r3, r1
 80181e4:	b21b      	sxth	r3, r3
 80181e6:	4543      	cmp	r3, r8
 80181e8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80181ec:	db31      	blt.n	8018252 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80181ee:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80181f2:	44c4      	add	ip, r8
 80181f4:	fa0f fc8c 	sxth.w	ip, ip
 80181f8:	4563      	cmp	r3, ip
 80181fa:	da2a      	bge.n	8018252 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80181fc:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80181fe:	8926      	ldrh	r6, [r4, #8]
 8018200:	4416      	add	r6, r2
 8018202:	b236      	sxth	r6, r6
 8018204:	42be      	cmp	r6, r7
 8018206:	db24      	blt.n	8018252 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018208:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801820c:	4438      	add	r0, r7
 801820e:	b200      	sxth	r0, r0
 8018210:	4286      	cmp	r6, r0
 8018212:	da1e      	bge.n	8018252 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018214:	8963      	ldrh	r3, [r4, #10]
 8018216:	4419      	add	r1, r3
 8018218:	b209      	sxth	r1, r1
 801821a:	4541      	cmp	r1, r8
 801821c:	db08      	blt.n	8018230 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801821e:	4561      	cmp	r1, ip
 8018220:	da06      	bge.n	8018230 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018222:	89a3      	ldrh	r3, [r4, #12]
 8018224:	441a      	add	r2, r3
 8018226:	b212      	sxth	r2, r2
 8018228:	42ba      	cmp	r2, r7
 801822a:	db01      	blt.n	8018230 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801822c:	4282      	cmp	r2, r0
 801822e:	db10      	blt.n	8018252 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018230:	4b21      	ldr	r3, [pc, #132]	; (80182b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018232:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018234:	9304      	str	r3, [sp, #16]
 8018236:	2302      	movs	r3, #2
 8018238:	f88d 3014 	strb.w	r3, [sp, #20]
 801823c:	2300      	movs	r3, #0
 801823e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018242:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018246:	f8ad 301a 	strh.w	r3, [sp, #26]
 801824a:	6803      	ldr	r3, [r0, #0]
 801824c:	a904      	add	r1, sp, #16
 801824e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018250:	4798      	blx	r3
 8018252:	1d29      	adds	r1, r5, #4
 8018254:	a802      	add	r0, sp, #8
 8018256:	f7ff fe73 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801825a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801825e:	88e0      	ldrh	r0, [r4, #6]
 8018260:	eba3 0808 	sub.w	r8, r3, r8
 8018264:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018268:	7921      	ldrb	r1, [r4, #4]
 801826a:	1bdf      	subs	r7, r3, r7
 801826c:	b2bb      	uxth	r3, r7
 801826e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018272:	fa1f f888 	uxth.w	r8, r8
 8018276:	8922      	ldrh	r2, [r4, #8]
 8018278:	8967      	ldrh	r7, [r4, #10]
 801827a:	89a4      	ldrh	r4, [r4, #12]
 801827c:	4440      	add	r0, r8
 801827e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018280:	4460      	add	r0, ip
 8018282:	441a      	add	r2, r3
 8018284:	44b8      	add	r8, r7
 8018286:	4423      	add	r3, r4
 8018288:	4c0c      	ldr	r4, [pc, #48]	; (80182bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801828a:	f8ad 0016 	strh.w	r0, [sp, #22]
 801828e:	4433      	add	r3, r6
 8018290:	4432      	add	r2, r6
 8018292:	44e0      	add	r8, ip
 8018294:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018296:	f88d 1014 	strb.w	r1, [sp, #20]
 801829a:	9404      	str	r4, [sp, #16]
 801829c:	f8ad 2018 	strh.w	r2, [sp, #24]
 80182a0:	f8ad 801a 	strh.w	r8, [sp, #26]
 80182a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80182a8:	6803      	ldr	r3, [r0, #0]
 80182aa:	a904      	add	r1, sp, #16
 80182ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182ae:	4798      	blx	r3
 80182b0:	b008      	add	sp, #32
 80182b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182b6:	bf00      	nop
 80182b8:	0802a048 	.word	0x0802a048
 80182bc:	0802a05c 	.word	0x0802a05c

080182c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80182c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182c2:	4604      	mov	r4, r0
 80182c4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80182c8:	3201      	adds	r2, #1
 80182ca:	d112      	bne.n	80182f2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80182cc:	2500      	movs	r5, #0
 80182ce:	9500      	str	r5, [sp, #0]
 80182d0:	466d      	mov	r5, sp
 80182d2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80182d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80182da:	6803      	ldr	r3, [r0, #0]
 80182dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80182e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80182e4:	4629      	mov	r1, r5
 80182e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182e8:	4798      	blx	r3
 80182ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80182ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80182f2:	4620      	mov	r0, r4
 80182f4:	b003      	add	sp, #12
 80182f6:	bd30      	pop	{r4, r5, pc}

080182f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80182f8:	b513      	push	{r0, r1, r4, lr}
 80182fa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80182fe:	4604      	mov	r4, r0
 8018300:	3301      	adds	r3, #1
 8018302:	d109      	bne.n	8018318 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018304:	4601      	mov	r1, r0
 8018306:	4668      	mov	r0, sp
 8018308:	f7ff fe1a 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801830c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018310:	8423      	strh	r3, [r4, #32]
 8018312:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018316:	8463      	strh	r3, [r4, #34]	; 0x22
 8018318:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801831c:	b002      	add	sp, #8
 801831e:	bd10      	pop	{r4, pc}

08018320 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018320:	b513      	push	{r0, r1, r4, lr}
 8018322:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018326:	4604      	mov	r4, r0
 8018328:	3301      	adds	r3, #1
 801832a:	d109      	bne.n	8018340 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801832c:	4601      	mov	r1, r0
 801832e:	4668      	mov	r0, sp
 8018330:	f7ff fe06 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018334:	f8bd 3000 	ldrh.w	r3, [sp]
 8018338:	8423      	strh	r3, [r4, #32]
 801833a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801833e:	8463      	strh	r3, [r4, #34]	; 0x22
 8018340:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018344:	b002      	add	sp, #8
 8018346:	bd10      	pop	{r4, pc}

08018348 <_ZN8touchgfx6ScreenC1Ev>:
 8018348:	b570      	push	{r4, r5, r6, lr}
 801834a:	4605      	mov	r5, r0
 801834c:	4b16      	ldr	r3, [pc, #88]	; (80183a8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801834e:	2101      	movs	r1, #1
 8018350:	f845 3b04 	str.w	r3, [r5], #4
 8018354:	2300      	movs	r3, #0
 8018356:	4604      	mov	r4, r0
 8018358:	8103      	strh	r3, [r0, #8]
 801835a:	8143      	strh	r3, [r0, #10]
 801835c:	8183      	strh	r3, [r0, #12]
 801835e:	81c3      	strh	r3, [r0, #14]
 8018360:	8203      	strh	r3, [r0, #16]
 8018362:	8243      	strh	r3, [r0, #18]
 8018364:	8283      	strh	r3, [r0, #20]
 8018366:	82c3      	strh	r3, [r0, #22]
 8018368:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801836c:	6203      	str	r3, [r0, #32]
 801836e:	8483      	strh	r3, [r0, #36]	; 0x24
 8018370:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018372:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8018376:	4a0d      	ldr	r2, [pc, #52]	; (80183ac <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018378:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801837c:	6343      	str	r3, [r0, #52]	; 0x34
 801837e:	4b0c      	ldr	r3, [pc, #48]	; (80183b0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018380:	6042      	str	r2, [r0, #4]
 8018382:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018386:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8018388:	4a0a      	ldr	r2, [pc, #40]	; (80183b4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801838a:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801838e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018392:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018396:	4628      	mov	r0, r5
 8018398:	4798      	blx	r3
 801839a:	6863      	ldr	r3, [r4, #4]
 801839c:	4628      	mov	r0, r5
 801839e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183a0:	4631      	mov	r1, r6
 80183a2:	4798      	blx	r3
 80183a4:	4620      	mov	r0, r4
 80183a6:	bd70      	pop	{r4, r5, r6, pc}
 80183a8:	0802a084 	.word	0x0802a084
 80183ac:	08029b2c 	.word	0x08029b2c
 80183b0:	2000f38a 	.word	0x2000f38a
 80183b4:	2000f388 	.word	0x2000f388

080183b8 <_ZN8touchgfx6Screen4drawEv>:
 80183b8:	b507      	push	{r0, r1, r2, lr}
 80183ba:	2100      	movs	r1, #0
 80183bc:	4b08      	ldr	r3, [pc, #32]	; (80183e0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80183be:	9100      	str	r1, [sp, #0]
 80183c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183c4:	4b07      	ldr	r3, [pc, #28]	; (80183e4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80183c6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80183ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80183ce:	4669      	mov	r1, sp
 80183d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80183d4:	6803      	ldr	r3, [r0, #0]
 80183d6:	689b      	ldr	r3, [r3, #8]
 80183d8:	4798      	blx	r3
 80183da:	b003      	add	sp, #12
 80183dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80183e0:	2000f388 	.word	0x2000f388
 80183e4:	2000f38a 	.word	0x2000f38a

080183e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80183e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183ec:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80183f0:	b089      	sub	sp, #36	; 0x24
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	4680      	mov	r8, r0
 80183f6:	460c      	mov	r4, r1
 80183f8:	4615      	mov	r5, r2
 80183fa:	dd0e      	ble.n	801841a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80183fc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018400:	2b00      	cmp	r3, #0
 8018402:	dd0a      	ble.n	801841a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018404:	4628      	mov	r0, r5
 8018406:	f7ff ff5b 	bl	80182c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801840a:	4621      	mov	r1, r4
 801840c:	f7fe fba8 	bl	8016b60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018410:	69eb      	ldr	r3, [r5, #28]
 8018412:	b928      	cbnz	r0, 8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018414:	461d      	mov	r5, r3
 8018416:	2b00      	cmp	r3, #0
 8018418:	d1f4      	bne.n	8018404 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801841a:	b009      	add	sp, #36	; 0x24
 801841c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018420:	ae04      	add	r6, sp, #16
 8018422:	2b00      	cmp	r3, #0
 8018424:	f000 80b5 	beq.w	8018592 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018428:	682b      	ldr	r3, [r5, #0]
 801842a:	4629      	mov	r1, r5
 801842c:	68db      	ldr	r3, [r3, #12]
 801842e:	a802      	add	r0, sp, #8
 8018430:	4798      	blx	r3
 8018432:	4628      	mov	r0, r5
 8018434:	f7ff ff60 	bl	80182f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018438:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801843c:	4407      	add	r7, r0
 801843e:	4628      	mov	r0, r5
 8018440:	f7ff ff6e 	bl	8018320 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018444:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018448:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801844c:	4418      	add	r0, r3
 801844e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018452:	4621      	mov	r1, r4
 8018454:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018458:	b23f      	sxth	r7, r7
 801845a:	4630      	mov	r0, r6
 801845c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018460:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018464:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018468:	f7fb fdc2 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 801846c:	4628      	mov	r0, r5
 801846e:	f7ff ff27 	bl	80182c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018472:	4602      	mov	r2, r0
 8018474:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018478:	ab06      	add	r3, sp, #24
 801847a:	e883 0003 	stmia.w	r3, {r0, r1}
 801847e:	4611      	mov	r1, r2
 8018480:	4618      	mov	r0, r3
 8018482:	f7fb fdb5 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 8018486:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801848a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801848e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018492:	4299      	cmp	r1, r3
 8018494:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018498:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801849c:	d10b      	bne.n	80184b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801849e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80184a2:	4552      	cmp	r2, sl
 80184a4:	d107      	bne.n	80184b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80184a6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80184aa:	455a      	cmp	r2, fp
 80184ac:	d103      	bne.n	80184b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80184ae:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80184b2:	454a      	cmp	r2, r9
 80184b4:	d06d      	beq.n	8018592 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80184b6:	f1bb 0f00 	cmp.w	fp, #0
 80184ba:	dd65      	ble.n	8018588 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80184bc:	f1b9 0f00 	cmp.w	r9, #0
 80184c0:	dd62      	ble.n	8018588 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80184c2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80184c6:	fa1f f08a 	uxth.w	r0, sl
 80184ca:	4552      	cmp	r2, sl
 80184cc:	9000      	str	r0, [sp, #0]
 80184ce:	da12      	bge.n	80184f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80184d0:	9301      	str	r3, [sp, #4]
 80184d2:	9b00      	ldr	r3, [sp, #0]
 80184d4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80184d8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80184dc:	1a9a      	subs	r2, r3, r2
 80184de:	f8ad 1010 	strh.w	r1, [sp, #16]
 80184e2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80184e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80184ea:	69ea      	ldr	r2, [r5, #28]
 80184ec:	4631      	mov	r1, r6
 80184ee:	4640      	mov	r0, r8
 80184f0:	f7ff ff7a 	bl	80183e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80184f4:	9b01      	ldr	r3, [sp, #4]
 80184f6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80184fa:	b29f      	uxth	r7, r3
 80184fc:	429a      	cmp	r2, r3
 80184fe:	da0d      	bge.n	801851c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018500:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018504:	1aba      	subs	r2, r7, r2
 8018506:	f8ad a012 	strh.w	sl, [sp, #18]
 801850a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801850e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018512:	69ea      	ldr	r2, [r5, #28]
 8018514:	4631      	mov	r1, r6
 8018516:	4640      	mov	r0, r8
 8018518:	f7ff ff66 	bl	80183e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801851c:	8822      	ldrh	r2, [r4, #0]
 801851e:	88a3      	ldrh	r3, [r4, #4]
 8018520:	445f      	add	r7, fp
 8018522:	4413      	add	r3, r2
 8018524:	b29b      	uxth	r3, r3
 8018526:	b2bf      	uxth	r7, r7
 8018528:	b23a      	sxth	r2, r7
 801852a:	b219      	sxth	r1, r3
 801852c:	4291      	cmp	r1, r2
 801852e:	dd0d      	ble.n	801854c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018530:	1bdb      	subs	r3, r3, r7
 8018532:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018536:	f8ad a012 	strh.w	sl, [sp, #18]
 801853a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801853e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018542:	69ea      	ldr	r2, [r5, #28]
 8018544:	4631      	mov	r1, r6
 8018546:	4640      	mov	r0, r8
 8018548:	f7ff ff4e 	bl	80183e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801854c:	88e2      	ldrh	r2, [r4, #6]
 801854e:	8863      	ldrh	r3, [r4, #2]
 8018550:	4413      	add	r3, r2
 8018552:	9a00      	ldr	r2, [sp, #0]
 8018554:	b29b      	uxth	r3, r3
 8018556:	444a      	add	r2, r9
 8018558:	fa1f f982 	uxth.w	r9, r2
 801855c:	fa0f f289 	sxth.w	r2, r9
 8018560:	b219      	sxth	r1, r3
 8018562:	428a      	cmp	r2, r1
 8018564:	da15      	bge.n	8018592 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018566:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801856a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801856e:	eba3 0309 	sub.w	r3, r3, r9
 8018572:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018576:	f8ad 0010 	strh.w	r0, [sp, #16]
 801857a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801857e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018582:	69ea      	ldr	r2, [r5, #28]
 8018584:	4631      	mov	r1, r6
 8018586:	e001      	b.n	801858c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018588:	4621      	mov	r1, r4
 801858a:	69ea      	ldr	r2, [r5, #28]
 801858c:	4640      	mov	r0, r8
 801858e:	f7ff ff2b 	bl	80183e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018592:	4628      	mov	r0, r5
 8018594:	f7ff fe94 	bl	80182c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018598:	4633      	mov	r3, r6
 801859a:	4602      	mov	r2, r0
 801859c:	6861      	ldr	r1, [r4, #4]
 801859e:	6820      	ldr	r0, [r4, #0]
 80185a0:	c303      	stmia	r3!, {r0, r1}
 80185a2:	4611      	mov	r1, r2
 80185a4:	4630      	mov	r0, r6
 80185a6:	f7fb fd23 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 80185aa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f77f af33 	ble.w	801841a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80185b4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	f77f af2e 	ble.w	801841a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80185be:	4628      	mov	r0, r5
 80185c0:	f7ff fe9a 	bl	80182f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80185c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80185c8:	1a18      	subs	r0, r3, r0
 80185ca:	f8ad 0010 	strh.w	r0, [sp, #16]
 80185ce:	4628      	mov	r0, r5
 80185d0:	f7ff fea6 	bl	8018320 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80185d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80185d8:	4631      	mov	r1, r6
 80185da:	1a18      	subs	r0, r3, r0
 80185dc:	f8ad 0012 	strh.w	r0, [sp, #18]
 80185e0:	682b      	ldr	r3, [r5, #0]
 80185e2:	4628      	mov	r0, r5
 80185e4:	689b      	ldr	r3, [r3, #8]
 80185e6:	4798      	blx	r3
 80185e8:	e717      	b.n	801841a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080185ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80185ea:	b570      	push	{r4, r5, r6, lr}
 80185ec:	2300      	movs	r3, #0
 80185ee:	460c      	mov	r4, r1
 80185f0:	b086      	sub	sp, #24
 80185f2:	1d06      	adds	r6, r0, #4
 80185f4:	4631      	mov	r1, r6
 80185f6:	4605      	mov	r5, r0
 80185f8:	a802      	add	r0, sp, #8
 80185fa:	9301      	str	r3, [sp, #4]
 80185fc:	f7ff fca0 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018600:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018604:	8822      	ldrh	r2, [r4, #0]
 8018606:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801860a:	1ad2      	subs	r2, r2, r3
 801860c:	8863      	ldrh	r3, [r4, #2]
 801860e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018612:	1a5b      	subs	r3, r3, r1
 8018614:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018618:	f8ad 2010 	strh.w	r2, [sp, #16]
 801861c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018620:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018624:	aa01      	add	r2, sp, #4
 8018626:	a904      	add	r1, sp, #16
 8018628:	4630      	mov	r0, r6
 801862a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801862e:	f7fb fdb7 	bl	80141a0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018632:	9a01      	ldr	r2, [sp, #4]
 8018634:	b11a      	cbz	r2, 801863e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018636:	4621      	mov	r1, r4
 8018638:	4628      	mov	r0, r5
 801863a:	f7ff fed5 	bl	80183e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801863e:	b006      	add	sp, #24
 8018640:	bd70      	pop	{r4, r5, r6, pc}

08018642 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018642:	b530      	push	{r4, r5, lr}
 8018644:	4602      	mov	r2, r0
 8018646:	b085      	sub	sp, #20
 8018648:	460d      	mov	r5, r1
 801864a:	466b      	mov	r3, sp
 801864c:	4604      	mov	r4, r0
 801864e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018652:	6851      	ldr	r1, [r2, #4]
 8018654:	c303      	stmia	r3!, {r0, r1}
 8018656:	4629      	mov	r1, r5
 8018658:	4668      	mov	r0, sp
 801865a:	f7fb fcc9 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 801865e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018662:	b12b      	cbz	r3, 8018670 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018664:	4669      	mov	r1, sp
 8018666:	4620      	mov	r0, r4
 8018668:	f7ff ffbf 	bl	80185ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801866c:	b005      	add	sp, #20
 801866e:	bd30      	pop	{r4, r5, pc}
 8018670:	3404      	adds	r4, #4
 8018672:	4621      	mov	r1, r4
 8018674:	a802      	add	r0, sp, #8
 8018676:	f7ff fc63 	bl	8017f40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801867a:	f8bd 3000 	ldrh.w	r3, [sp]
 801867e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018682:	4669      	mov	r1, sp
 8018684:	1a9b      	subs	r3, r3, r2
 8018686:	f8ad 3000 	strh.w	r3, [sp]
 801868a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801868e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018692:	4620      	mov	r0, r4
 8018694:	1a9b      	subs	r3, r3, r2
 8018696:	f8ad 3002 	strh.w	r3, [sp, #2]
 801869a:	f7fb fd48 	bl	801412e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801869e:	e7e5      	b.n	801866c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080186a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80186a0:	460b      	mov	r3, r1
 80186a2:	680a      	ldr	r2, [r1, #0]
 80186a4:	1d01      	adds	r1, r0, #4
 80186a6:	6992      	ldr	r2, [r2, #24]
 80186a8:	4618      	mov	r0, r3
 80186aa:	4710      	bx	r2

080186ac <_ZN8touchgfx12TextProviderC1Ev>:
 80186ac:	b538      	push	{r3, r4, r5, lr}
 80186ae:	2500      	movs	r5, #0
 80186b0:	2302      	movs	r3, #2
 80186b2:	4604      	mov	r4, r0
 80186b4:	e9c0 5500 	strd	r5, r5, [r0]
 80186b8:	7403      	strb	r3, [r0, #16]
 80186ba:	6145      	str	r5, [r0, #20]
 80186bc:	7605      	strb	r5, [r0, #24]
 80186be:	83c5      	strh	r5, [r0, #30]
 80186c0:	8405      	strh	r5, [r0, #32]
 80186c2:	86c5      	strh	r5, [r0, #54]	; 0x36
 80186c4:	8705      	strh	r5, [r0, #56]	; 0x38
 80186c6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80186c8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80186cc:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80186d0:	220e      	movs	r2, #14
 80186d2:	4629      	mov	r1, r5
 80186d4:	304c      	adds	r0, #76	; 0x4c
 80186d6:	f00e fe22 	bl	802731e <memset>
 80186da:	2301      	movs	r3, #1
 80186dc:	4620      	mov	r0, r4
 80186de:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80186e2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80186e6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80186ea:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80186ee:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80186f2:	f7f9 fa83 	bl	8011bfc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80186f6:	4620      	mov	r0, r4
 80186f8:	bd38      	pop	{r3, r4, r5, pc}

080186fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80186fa:	b530      	push	{r4, r5, lr}
 80186fc:	2500      	movs	r5, #0
 80186fe:	2401      	movs	r4, #1
 8018700:	6843      	ldr	r3, [r0, #4]
 8018702:	b913      	cbnz	r3, 801870a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018704:	6803      	ldr	r3, [r0, #0]
 8018706:	b313      	cbz	r3, 801874e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018708:	6043      	str	r3, [r0, #4]
 801870a:	7e03      	ldrb	r3, [r0, #24]
 801870c:	b143      	cbz	r3, 8018720 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801870e:	6943      	ldr	r3, [r0, #20]
 8018710:	b12b      	cbz	r3, 801871e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018712:	881a      	ldrh	r2, [r3, #0]
 8018714:	b11a      	cbz	r2, 801871e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018716:	1c9a      	adds	r2, r3, #2
 8018718:	6142      	str	r2, [r0, #20]
 801871a:	8818      	ldrh	r0, [r3, #0]
 801871c:	bd30      	pop	{r4, r5, pc}
 801871e:	7605      	strb	r5, [r0, #24]
 8018720:	6843      	ldr	r3, [r0, #4]
 8018722:	8819      	ldrh	r1, [r3, #0]
 8018724:	b199      	cbz	r1, 801874e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018726:	1c9a      	adds	r2, r3, #2
 8018728:	2902      	cmp	r1, #2
 801872a:	6042      	str	r2, [r0, #4]
 801872c:	d1f5      	bne.n	801871a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801872e:	7c03      	ldrb	r3, [r0, #16]
 8018730:	2b01      	cmp	r3, #1
 8018732:	d8e5      	bhi.n	8018700 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018734:	1c5a      	adds	r2, r3, #1
 8018736:	7402      	strb	r2, [r0, #16]
 8018738:	3302      	adds	r3, #2
 801873a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801873e:	6143      	str	r3, [r0, #20]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d0dd      	beq.n	8018700 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018744:	881b      	ldrh	r3, [r3, #0]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d0da      	beq.n	8018700 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801874a:	7604      	strb	r4, [r0, #24]
 801874c:	e7d8      	b.n	8018700 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801874e:	2000      	movs	r0, #0
 8018750:	e7e4      	b.n	801871c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018752:	6001      	str	r1, [r0, #0]
 8018754:	2100      	movs	r1, #0
 8018756:	b430      	push	{r4, r5}
 8018758:	6041      	str	r1, [r0, #4]
 801875a:	6815      	ldr	r5, [r2, #0]
 801875c:	6085      	str	r5, [r0, #8]
 801875e:	6852      	ldr	r2, [r2, #4]
 8018760:	6443      	str	r3, [r0, #68]	; 0x44
 8018762:	9b02      	ldr	r3, [sp, #8]
 8018764:	60c2      	str	r2, [r0, #12]
 8018766:	7401      	strb	r1, [r0, #16]
 8018768:	6141      	str	r1, [r0, #20]
 801876a:	7601      	strb	r1, [r0, #24]
 801876c:	8701      	strh	r1, [r0, #56]	; 0x38
 801876e:	8401      	strh	r1, [r0, #32]
 8018770:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018774:	6483      	str	r3, [r0, #72]	; 0x48
 8018776:	bc30      	pop	{r4, r5}
 8018778:	f7f9 ba40 	b.w	8011bfc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801877c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801877c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801877e:	4605      	mov	r5, r0
 8018780:	4608      	mov	r0, r1
 8018782:	b1e9      	cbz	r1, 80187c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8018784:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8018788:	460b      	mov	r3, r1
 801878a:	4622      	mov	r2, r4
 801878c:	f101 0708 	add.w	r7, r1, #8
 8018790:	4626      	mov	r6, r4
 8018792:	6818      	ldr	r0, [r3, #0]
 8018794:	6859      	ldr	r1, [r3, #4]
 8018796:	3308      	adds	r3, #8
 8018798:	c603      	stmia	r6!, {r0, r1}
 801879a:	42bb      	cmp	r3, r7
 801879c:	4634      	mov	r4, r6
 801879e:	d1f7      	bne.n	8018790 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80187a0:	6818      	ldr	r0, [r3, #0]
 80187a2:	6030      	str	r0, [r6, #0]
 80187a4:	4610      	mov	r0, r2
 80187a6:	889b      	ldrh	r3, [r3, #4]
 80187a8:	80b3      	strh	r3, [r6, #4]
 80187aa:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80187ae:	015b      	lsls	r3, r3, #5
 80187b0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80187b4:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80187b8:	430b      	orrs	r3, r1
 80187ba:	425b      	negs	r3, r3
 80187bc:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80187c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187c2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80187c2:	b538      	push	{r3, r4, r5, lr}
 80187c4:	460c      	mov	r4, r1
 80187c6:	6811      	ldr	r1, [r2, #0]
 80187c8:	4610      	mov	r0, r2
 80187ca:	68cd      	ldr	r5, [r1, #12]
 80187cc:	4619      	mov	r1, r3
 80187ce:	47a8      	blx	r5
 80187d0:	2800      	cmp	r0, #0
 80187d2:	bf08      	it	eq
 80187d4:	4620      	moveq	r0, r4
 80187d6:	bd38      	pop	{r3, r4, r5, pc}

080187d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80187d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187da:	4604      	mov	r4, r0
 80187dc:	4615      	mov	r5, r2
 80187de:	4608      	mov	r0, r1
 80187e0:	b93a      	cbnz	r2, 80187f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80187e2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80187e6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80187ea:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80187ee:	4628      	mov	r0, r5
 80187f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187f2:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80187f6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80187fa:	8893      	ldrh	r3, [r2, #4]
 80187fc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8018800:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018804:	79ee      	ldrb	r6, [r5, #7]
 8018806:	4316      	orrs	r6, r2
 8018808:	19da      	adds	r2, r3, r7
 801880a:	b291      	uxth	r1, r2
 801880c:	291d      	cmp	r1, #29
 801880e:	b2b7      	uxth	r7, r6
 8018810:	d879      	bhi.n	8018906 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8018812:	2201      	movs	r2, #1
 8018814:	408a      	lsls	r2, r1
 8018816:	4974      	ldr	r1, [pc, #464]	; (80189e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 8018818:	10f6      	asrs	r6, r6, #3
 801881a:	420a      	tst	r2, r1
 801881c:	d12d      	bne.n	801887a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801881e:	f412 7f60 	tst.w	r2, #896	; 0x380
 8018822:	d070      	beq.n	8018906 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8018824:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8018828:	462b      	mov	r3, r5
 801882a:	f105 0e08 	add.w	lr, r5, #8
 801882e:	4615      	mov	r5, r2
 8018830:	4694      	mov	ip, r2
 8018832:	6818      	ldr	r0, [r3, #0]
 8018834:	6859      	ldr	r1, [r3, #4]
 8018836:	3308      	adds	r3, #8
 8018838:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801883c:	4573      	cmp	r3, lr
 801883e:	4662      	mov	r2, ip
 8018840:	d1f6      	bne.n	8018830 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8018842:	6818      	ldr	r0, [r3, #0]
 8018844:	f8cc 0000 	str.w	r0, [ip]
 8018848:	889b      	ldrh	r3, [r3, #4]
 801884a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801884e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018852:	b2b3      	uxth	r3, r6
 8018854:	1aca      	subs	r2, r1, r3
 8018856:	b292      	uxth	r2, r2
 8018858:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801885c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8018860:	10d2      	asrs	r2, r2, #3
 8018862:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8018866:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801886a:	4302      	orrs	r2, r0
 801886c:	1bcf      	subs	r7, r1, r7
 801886e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018872:	1afb      	subs	r3, r7, r3
 8018874:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018878:	e7b9      	b.n	80187ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801887a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801887c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018880:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8018882:	f640 6333 	movw	r3, #3635	; 0xe33
 8018886:	4299      	cmp	r1, r3
 8018888:	d110      	bne.n	80188ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 801888a:	6803      	ldr	r3, [r0, #0]
 801888c:	68db      	ldr	r3, [r3, #12]
 801888e:	4798      	blx	r3
 8018890:	7b41      	ldrb	r1, [r0, #13]
 8018892:	00cb      	lsls	r3, r1, #3
 8018894:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018898:	7a03      	ldrb	r3, [r0, #8]
 801889a:	0648      	lsls	r0, r1, #25
 801889c:	ea43 0302 	orr.w	r3, r3, r2
 80188a0:	bf44      	itt	mi
 80188a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80188a6:	b21b      	sxthmi	r3, r3
 80188a8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80188ac:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80188b0:	462a      	mov	r2, r5
 80188b2:	443b      	add	r3, r7
 80188b4:	4433      	add	r3, r6
 80188b6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80188ba:	f105 0c08 	add.w	ip, r5, #8
 80188be:	4635      	mov	r5, r6
 80188c0:	b29b      	uxth	r3, r3
 80188c2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80188c6:	4637      	mov	r7, r6
 80188c8:	6810      	ldr	r0, [r2, #0]
 80188ca:	6851      	ldr	r1, [r2, #4]
 80188cc:	3208      	adds	r2, #8
 80188ce:	c703      	stmia	r7!, {r0, r1}
 80188d0:	4562      	cmp	r2, ip
 80188d2:	463e      	mov	r6, r7
 80188d4:	d1f7      	bne.n	80188c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 80188d6:	6810      	ldr	r0, [r2, #0]
 80188d8:	6038      	str	r0, [r7, #0]
 80188da:	8892      	ldrh	r2, [r2, #4]
 80188dc:	80ba      	strh	r2, [r7, #4]
 80188de:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80188e2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80188e6:	10db      	asrs	r3, r3, #3
 80188e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80188ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80188f0:	4313      	orrs	r3, r2
 80188f2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80188f6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80188fa:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80188fe:	1a9b      	subs	r3, r3, r2
 8018900:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018904:	e773      	b.n	80187ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018906:	f640 611b 	movw	r1, #3611	; 0xe1b
 801890a:	f023 0204 	bic.w	r2, r3, #4
 801890e:	428a      	cmp	r2, r1
 8018910:	d003      	beq.n	801891a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8018912:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018916:	4293      	cmp	r3, r2
 8018918:	d120      	bne.n	801895c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801891a:	3b01      	subs	r3, #1
 801891c:	4602      	mov	r2, r0
 801891e:	b29b      	uxth	r3, r3
 8018920:	4629      	mov	r1, r5
 8018922:	4620      	mov	r0, r4
 8018924:	f7ff ff4d 	bl	80187c2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018928:	7b41      	ldrb	r1, [r0, #13]
 801892a:	00cb      	lsls	r3, r1, #3
 801892c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018930:	7a03      	ldrb	r3, [r0, #8]
 8018932:	0649      	lsls	r1, r1, #25
 8018934:	ea43 0302 	orr.w	r3, r3, r2
 8018938:	bf44      	itt	mi
 801893a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801893e:	b21b      	sxthmi	r3, r3
 8018940:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018944:	7b6b      	ldrb	r3, [r5, #13]
 8018946:	7aaa      	ldrb	r2, [r5, #10]
 8018948:	005b      	lsls	r3, r3, #1
 801894a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801894e:	4313      	orrs	r3, r2
 8018950:	115a      	asrs	r2, r3, #5
 8018952:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018956:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801895a:	e036      	b.n	80189ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 801895c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018960:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018964:	7a2a      	ldrb	r2, [r5, #8]
 8018966:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801896a:	ea42 0201 	orr.w	r2, r2, r1
 801896e:	f640 6109 	movw	r1, #3593	; 0xe09
 8018972:	bf1c      	itt	ne
 8018974:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018978:	b212      	sxthne	r2, r2
 801897a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801897e:	f023 0210 	bic.w	r2, r3, #16
 8018982:	428a      	cmp	r2, r1
 8018984:	d003      	beq.n	801898e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 8018986:	f640 6213 	movw	r2, #3603	; 0xe13
 801898a:	4293      	cmp	r3, r2
 801898c:	d12a      	bne.n	80189e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 801898e:	7b6e      	ldrb	r6, [r5, #13]
 8018990:	4629      	mov	r1, r5
 8018992:	0076      	lsls	r6, r6, #1
 8018994:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018998:	7aae      	ldrb	r6, [r5, #10]
 801899a:	4316      	orrs	r6, r2
 801899c:	f640 6213 	movw	r2, #3603	; 0xe13
 80189a0:	4293      	cmp	r3, r2
 80189a2:	bf18      	it	ne
 80189a4:	f103 33ff 	addne.w	r3, r3, #4294967295
 80189a8:	4602      	mov	r2, r0
 80189aa:	bf14      	ite	ne
 80189ac:	b29b      	uxthne	r3, r3
 80189ae:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80189b2:	4620      	mov	r0, r4
 80189b4:	f7ff ff05 	bl	80187c2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80189b8:	7b43      	ldrb	r3, [r0, #13]
 80189ba:	7a82      	ldrb	r2, [r0, #10]
 80189bc:	005b      	lsls	r3, r3, #1
 80189be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80189c2:	4313      	orrs	r3, r2
 80189c4:	1af6      	subs	r6, r6, r3
 80189c6:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80189ca:	7b69      	ldrb	r1, [r5, #13]
 80189cc:	00cb      	lsls	r3, r1, #3
 80189ce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80189d2:	7a2b      	ldrb	r3, [r5, #8]
 80189d4:	4313      	orrs	r3, r2
 80189d6:	064a      	lsls	r2, r1, #25
 80189d8:	bf44      	itt	mi
 80189da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80189de:	b21b      	sxthmi	r3, r3
 80189e0:	1bdb      	subs	r3, r3, r7
 80189e2:	e747      	b.n	8018874 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 80189e4:	2300      	movs	r3, #0
 80189e6:	e7b6      	b.n	8018956 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 80189e8:	3fc00079 	.word	0x3fc00079

080189ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80189ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189f0:	4604      	mov	r4, r0
 80189f2:	b942      	cbnz	r2, 8018a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80189f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80189f8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80189fc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018a00:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018a04:	e047      	b.n	8018a96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018a06:	7b51      	ldrb	r1, [r2, #13]
 8018a08:	8893      	ldrh	r3, [r2, #4]
 8018a0a:	010d      	lsls	r5, r1, #4
 8018a0c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8018a10:	79d5      	ldrb	r5, [r2, #7]
 8018a12:	4305      	orrs	r5, r0
 8018a14:	2d04      	cmp	r5, #4
 8018a16:	bfcc      	ite	gt
 8018a18:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018a1c:	f04f 0e01 	movle.w	lr, #1
 8018a20:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018a24:	f200 80ab 	bhi.w	8018b7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018a28:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018a2c:	4283      	cmp	r3, r0
 8018a2e:	d216      	bcs.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a30:	f240 605b 	movw	r0, #1627	; 0x65b
 8018a34:	4283      	cmp	r3, r0
 8018a36:	d859      	bhi.n	8018aec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018a38:	f240 6057 	movw	r0, #1623	; 0x657
 8018a3c:	4283      	cmp	r3, r0
 8018a3e:	d20e      	bcs.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a40:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018a44:	d24a      	bcs.n	8018adc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018a46:	f240 604e 	movw	r0, #1614	; 0x64e
 8018a4a:	4283      	cmp	r3, r0
 8018a4c:	d207      	bcs.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a4e:	f240 601a 	movw	r0, #1562	; 0x61a
 8018a52:	4283      	cmp	r3, r0
 8018a54:	d02a      	beq.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018a56:	d821      	bhi.n	8018a9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018a58:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018a5c:	d35b      	bcc.n	8018b16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018a5e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8018a62:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018a66:	f040 80d0 	bne.w	8018c0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018a6a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8018a6e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018a72:	f040 80ca 	bne.w	8018c0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018a76:	00cb      	lsls	r3, r1, #3
 8018a78:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018a7c:	7a13      	ldrb	r3, [r2, #8]
 8018a7e:	0649      	lsls	r1, r1, #25
 8018a80:	ea43 0300 	orr.w	r3, r3, r0
 8018a84:	bf44      	itt	mi
 8018a86:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a8a:	b21b      	sxthmi	r3, r3
 8018a8c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018a90:	1b5d      	subs	r5, r3, r5
 8018a92:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018a96:	4610      	mov	r0, r2
 8018a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a9c:	f240 604b 	movw	r0, #1611	; 0x64b
 8018aa0:	4283      	cmp	r3, r0
 8018aa2:	d338      	bcc.n	8018b16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018aa4:	f240 604c 	movw	r0, #1612	; 0x64c
 8018aa8:	4283      	cmp	r3, r0
 8018aaa:	d9d8      	bls.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018aac:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8018ab0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018ab4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018ab8:	f040 80f2 	bne.w	8018ca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8018abc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018ac0:	f040 80ee 	bne.w	8018ca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8018ac4:	00cb      	lsls	r3, r1, #3
 8018ac6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018aca:	7a13      	ldrb	r3, [r2, #8]
 8018acc:	064e      	lsls	r6, r1, #25
 8018ace:	ea43 0300 	orr.w	r3, r3, r0
 8018ad2:	bf44      	itt	mi
 8018ad4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018ad8:	b21b      	sxthmi	r3, r3
 8018ada:	e7d9      	b.n	8018a90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018adc:	f240 6054 	movw	r0, #1620	; 0x654
 8018ae0:	4283      	cmp	r3, r0
 8018ae2:	d8e3      	bhi.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018ae4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018ae8:	d9e0      	bls.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018aea:	e7b8      	b.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018aec:	f240 6074 	movw	r0, #1652	; 0x674
 8018af0:	4283      	cmp	r3, r0
 8018af2:	d0b4      	beq.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018af4:	d82d      	bhi.n	8018b52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018af6:	f240 605e 	movw	r0, #1630	; 0x65e
 8018afa:	4283      	cmp	r3, r0
 8018afc:	d804      	bhi.n	8018b08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018afe:	f240 605d 	movw	r0, #1629	; 0x65d
 8018b02:	4283      	cmp	r3, r0
 8018b04:	d3d2      	bcc.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b06:	e7aa      	b.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b08:	f240 605f 	movw	r0, #1631	; 0x65f
 8018b0c:	4283      	cmp	r3, r0
 8018b0e:	d0cd      	beq.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b10:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018b14:	d0a3      	beq.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b16:	00cb      	lsls	r3, r1, #3
 8018b18:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018b1c:	7a13      	ldrb	r3, [r2, #8]
 8018b1e:	0649      	lsls	r1, r1, #25
 8018b20:	ea43 0300 	orr.w	r3, r3, r0
 8018b24:	bf44      	itt	mi
 8018b26:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b2a:	b21b      	sxthmi	r3, r3
 8018b2c:	1b5d      	subs	r5, r3, r5
 8018b2e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018b32:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018b36:	7b53      	ldrb	r3, [r2, #13]
 8018b38:	015b      	lsls	r3, r3, #5
 8018b3a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018b3e:	7993      	ldrb	r3, [r2, #6]
 8018b40:	430b      	orrs	r3, r1
 8018b42:	2105      	movs	r1, #5
 8018b44:	005b      	lsls	r3, r3, #1
 8018b46:	fb93 f3f1 	sdiv	r3, r3, r1
 8018b4a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018b4e:	440b      	add	r3, r1
 8018b50:	e756      	b.n	8018a00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018b52:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018b56:	4283      	cmp	r3, r0
 8018b58:	d809      	bhi.n	8018b6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018b5a:	f240 60df 	movw	r0, #1759	; 0x6df
 8018b5e:	4283      	cmp	r3, r0
 8018b60:	f4bf af7d 	bcs.w	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b64:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018b68:	2b05      	cmp	r3, #5
 8018b6a:	d8d4      	bhi.n	8018b16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018b6c:	e777      	b.n	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b6e:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018b72:	4283      	cmp	r3, r0
 8018b74:	d09a      	beq.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b76:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018b7a:	4283      	cmp	r3, r0
 8018b7c:	e7ca      	b.n	8018b14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018b7e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018b82:	d22b      	bcs.n	8018bdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018b84:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018b88:	4283      	cmp	r3, r0
 8018b8a:	d28f      	bcs.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b8c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018b90:	4283      	cmp	r3, r0
 8018b92:	d816      	bhi.n	8018bc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018b94:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018b98:	4283      	cmp	r3, r0
 8018b9a:	f4bf af60 	bcs.w	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b9e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018ba2:	4283      	cmp	r3, r0
 8018ba4:	d80a      	bhi.n	8018bbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8018ba6:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018baa:	4283      	cmp	r3, r0
 8018bac:	f4bf af57 	bcs.w	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018bb0:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018bb4:	4283      	cmp	r3, r0
 8018bb6:	f43f af79 	beq.w	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018bba:	e7ac      	b.n	8018b16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018bbc:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018bc0:	e7f8      	b.n	8018bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018bc2:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018bc6:	4283      	cmp	r3, r0
 8018bc8:	d802      	bhi.n	8018bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018bca:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018bce:	e798      	b.n	8018b02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018bd0:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018bd4:	4283      	cmp	r3, r0
 8018bd6:	f47f af42 	bne.w	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018bda:	e767      	b.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018bdc:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018be0:	4283      	cmp	r3, r0
 8018be2:	f43f af63 	beq.w	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018be6:	d802      	bhi.n	8018bee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018be8:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018bec:	e7f2      	b.n	8018bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018bee:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018bf2:	4283      	cmp	r3, r0
 8018bf4:	d805      	bhi.n	8018c02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018bf6:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018bfa:	4283      	cmp	r3, r0
 8018bfc:	f4ff af2f 	bcc.w	8018a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c00:	e754      	b.n	8018aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c02:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018c06:	4283      	cmp	r3, r0
 8018c08:	e7af      	b.n	8018b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018c0a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018c0e:	4617      	mov	r7, r2
 8018c10:	4666      	mov	r6, ip
 8018c12:	f102 0808 	add.w	r8, r2, #8
 8018c16:	46e6      	mov	lr, ip
 8018c18:	6838      	ldr	r0, [r7, #0]
 8018c1a:	6879      	ldr	r1, [r7, #4]
 8018c1c:	3708      	adds	r7, #8
 8018c1e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018c22:	4547      	cmp	r7, r8
 8018c24:	46f4      	mov	ip, lr
 8018c26:	d1f6      	bne.n	8018c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018c28:	6838      	ldr	r0, [r7, #0]
 8018c2a:	f8ce 0000 	str.w	r0, [lr]
 8018c2e:	88b9      	ldrh	r1, [r7, #4]
 8018c30:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018c34:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018c38:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018c3c:	d009      	beq.n	8018c52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8018c3e:	7b51      	ldrb	r1, [r2, #13]
 8018c40:	7992      	ldrb	r2, [r2, #6]
 8018c42:	0149      	lsls	r1, r1, #5
 8018c44:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018c48:	4311      	orrs	r1, r2
 8018c4a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018c4e:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018c52:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018c56:	b2ad      	uxth	r5, r5
 8018c58:	d00d      	beq.n	8018c76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8018c5a:	442b      	add	r3, r5
 8018c5c:	b29b      	uxth	r3, r3
 8018c5e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018c62:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018c66:	10db      	asrs	r3, r3, #3
 8018c68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018c6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018c70:	4313      	orrs	r3, r2
 8018c72:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018c76:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018c7a:	00cb      	lsls	r3, r1, #3
 8018c7c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018c80:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018c84:	064f      	lsls	r7, r1, #25
 8018c86:	ea43 0302 	orr.w	r3, r3, r2
 8018c8a:	bf44      	itt	mi
 8018c8c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c90:	b21b      	sxthmi	r3, r3
 8018c92:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018c96:	1b5b      	subs	r3, r3, r5
 8018c98:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018c9c:	4632      	mov	r2, r6
 8018c9e:	e6fa      	b.n	8018a96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018ca0:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018ca4:	4617      	mov	r7, r2
 8018ca6:	4666      	mov	r6, ip
 8018ca8:	f102 0908 	add.w	r9, r2, #8
 8018cac:	46e0      	mov	r8, ip
 8018cae:	6838      	ldr	r0, [r7, #0]
 8018cb0:	6879      	ldr	r1, [r7, #4]
 8018cb2:	3708      	adds	r7, #8
 8018cb4:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018cb8:	454f      	cmp	r7, r9
 8018cba:	46c4      	mov	ip, r8
 8018cbc:	d1f6      	bne.n	8018cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8018cbe:	6838      	ldr	r0, [r7, #0]
 8018cc0:	f8c8 0000 	str.w	r0, [r8]
 8018cc4:	88b9      	ldrh	r1, [r7, #4]
 8018cc6:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018cca:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018cce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018cd2:	d009      	beq.n	8018ce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8018cd4:	7b51      	ldrb	r1, [r2, #13]
 8018cd6:	7992      	ldrb	r2, [r2, #6]
 8018cd8:	0149      	lsls	r1, r1, #5
 8018cda:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018cde:	4311      	orrs	r1, r2
 8018ce0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018ce4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018ce8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018cec:	d00e      	beq.n	8018d0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8018cee:	eba3 030e 	sub.w	r3, r3, lr
 8018cf2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018cf6:	b29b      	uxth	r3, r3
 8018cf8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018cfc:	10db      	asrs	r3, r3, #3
 8018cfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018d06:	4313      	orrs	r3, r2
 8018d08:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018d0c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018d10:	00cb      	lsls	r3, r1, #3
 8018d12:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018d16:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018d1a:	0648      	lsls	r0, r1, #25
 8018d1c:	ea43 0302 	orr.w	r3, r3, r2
 8018d20:	bf44      	itt	mi
 8018d22:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018d26:	b21b      	sxthmi	r3, r3
 8018d28:	1b5d      	subs	r5, r3, r5
 8018d2a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018d2e:	e7b5      	b.n	8018c9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08018d30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d34:	461e      	mov	r6, r3
 8018d36:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018d38:	4604      	mov	r4, r0
 8018d3a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018d3e:	4617      	mov	r7, r2
 8018d40:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018d44:	f7f8 feb4 	bl	8011ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d48:	4605      	mov	r5, r0
 8018d4a:	b918      	cbnz	r0, 8018d54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018d4c:	6030      	str	r0, [r6, #0]
 8018d4e:	4628      	mov	r0, r5
 8018d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	4601      	mov	r1, r0
 8018d58:	68db      	ldr	r3, [r3, #12]
 8018d5a:	4638      	mov	r0, r7
 8018d5c:	4798      	blx	r3
 8018d5e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018d66:	4602      	mov	r2, r0
 8018d68:	6030      	str	r0, [r6, #0]
 8018d6a:	d213      	bcs.n	8018d94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018d6c:	4643      	mov	r3, r8
 8018d6e:	4639      	mov	r1, r7
 8018d70:	4620      	mov	r0, r4
 8018d72:	f7ff fe3b 	bl	80189ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018d76:	6030      	str	r0, [r6, #0]
 8018d78:	6833      	ldr	r3, [r6, #0]
 8018d7a:	b143      	cbz	r3, 8018d8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8018d7c:	7b5a      	ldrb	r2, [r3, #13]
 8018d7e:	7a9b      	ldrb	r3, [r3, #10]
 8018d80:	0052      	lsls	r2, r2, #1
 8018d82:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018d86:	4313      	orrs	r3, r2
 8018d88:	bf0c      	ite	eq
 8018d8a:	2301      	moveq	r3, #1
 8018d8c:	2300      	movne	r3, #0
 8018d8e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018d92:	e7dc      	b.n	8018d4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018d94:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018d98:	b29b      	uxth	r3, r3
 8018d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8018d9c:	d804      	bhi.n	8018da8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018d9e:	4639      	mov	r1, r7
 8018da0:	4620      	mov	r0, r4
 8018da2:	f7ff fd19 	bl	80187d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018da6:	e7e6      	b.n	8018d76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018da8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d0e3      	beq.n	8018d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018db0:	f640 1302 	movw	r3, #2306	; 0x902
 8018db4:	429d      	cmp	r5, r3
 8018db6:	d1df      	bne.n	8018d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018db8:	4601      	mov	r1, r0
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f7ff fcde 	bl	801877c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018dc0:	e7d9      	b.n	8018d76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08018dc2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dc6:	461e      	mov	r6, r3
 8018dc8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018dca:	4604      	mov	r4, r0
 8018dcc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018dd0:	4617      	mov	r7, r2
 8018dd2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018dd6:	f7f8 fe6b 	bl	8011ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018dda:	4605      	mov	r5, r0
 8018ddc:	b918      	cbnz	r0, 8018de6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8018dde:	6030      	str	r0, [r6, #0]
 8018de0:	4628      	mov	r0, r5
 8018de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018de6:	683b      	ldr	r3, [r7, #0]
 8018de8:	4601      	mov	r1, r0
 8018dea:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018dee:	4638      	mov	r0, r7
 8018df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018df4:	47c8      	blx	r9
 8018df6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018dfe:	4602      	mov	r2, r0
 8018e00:	6030      	str	r0, [r6, #0]
 8018e02:	d213      	bcs.n	8018e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8018e04:	4643      	mov	r3, r8
 8018e06:	4639      	mov	r1, r7
 8018e08:	4620      	mov	r0, r4
 8018e0a:	f7ff fdef 	bl	80189ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018e0e:	6030      	str	r0, [r6, #0]
 8018e10:	6833      	ldr	r3, [r6, #0]
 8018e12:	b143      	cbz	r3, 8018e26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8018e14:	7b5a      	ldrb	r2, [r3, #13]
 8018e16:	7a9b      	ldrb	r3, [r3, #10]
 8018e18:	0052      	lsls	r2, r2, #1
 8018e1a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018e1e:	4313      	orrs	r3, r2
 8018e20:	bf0c      	ite	eq
 8018e22:	2301      	moveq	r3, #1
 8018e24:	2300      	movne	r3, #0
 8018e26:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018e2a:	e7d9      	b.n	8018de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8018e2c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	2b7f      	cmp	r3, #127	; 0x7f
 8018e34:	d804      	bhi.n	8018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8018e36:	4639      	mov	r1, r7
 8018e38:	4620      	mov	r0, r4
 8018e3a:	f7ff fccd 	bl	80187d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018e3e:	e7e6      	b.n	8018e0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8018e40:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d0e3      	beq.n	8018e10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018e48:	f640 1302 	movw	r3, #2306	; 0x902
 8018e4c:	429d      	cmp	r5, r3
 8018e4e:	d1df      	bne.n	8018e10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018e50:	4601      	mov	r1, r0
 8018e52:	4620      	mov	r0, r4
 8018e54:	f7ff fc92 	bl	801877c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018e58:	e7d9      	b.n	8018e0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08018e5a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018e5a:	b510      	push	{r4, lr}
 8018e5c:	4604      	mov	r4, r0
 8018e5e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8018e62:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018e64:	b1f1      	cbz	r1, 8018ea4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018e66:	2b0a      	cmp	r3, #10
 8018e68:	d02f      	beq.n	8018eca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8018e6a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8018e6c:	3901      	subs	r1, #1
 8018e6e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018e72:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8018e74:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8018e78:	1c51      	adds	r1, r2, #1
 8018e7a:	b289      	uxth	r1, r1
 8018e7c:	2901      	cmp	r1, #1
 8018e7e:	bf84      	itt	hi
 8018e80:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018e84:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018e86:	f103 0201 	add.w	r2, r3, #1
 8018e8a:	8722      	strh	r2, [r4, #56]	; 0x38
 8018e8c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018e8e:	bf98      	it	ls
 8018e90:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8018e92:	4413      	add	r3, r2
 8018e94:	b29b      	uxth	r3, r3
 8018e96:	2b09      	cmp	r3, #9
 8018e98:	bf88      	it	hi
 8018e9a:	3b0a      	subhi	r3, #10
 8018e9c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018ea0:	8458      	strh	r0, [r3, #34]	; 0x22
 8018ea2:	e7dc      	b.n	8018e5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018ea4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018ea6:	2b0a      	cmp	r3, #10
 8018ea8:	d00f      	beq.n	8018eca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8018eaa:	4620      	mov	r0, r4
 8018eac:	f7ff fc25 	bl	80186fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018eb0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018eb2:	1c5a      	adds	r2, r3, #1
 8018eb4:	8722      	strh	r2, [r4, #56]	; 0x38
 8018eb6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018eb8:	4413      	add	r3, r2
 8018eba:	b29b      	uxth	r3, r3
 8018ebc:	2b09      	cmp	r3, #9
 8018ebe:	bf88      	it	hi
 8018ec0:	3b0a      	subhi	r3, #10
 8018ec2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018ec6:	8458      	strh	r0, [r3, #34]	; 0x22
 8018ec8:	e7ec      	b.n	8018ea4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018eca:	bd10      	pop	{r4, pc}

08018ecc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018ecc:	b538      	push	{r3, r4, r5, lr}
 8018ece:	4604      	mov	r4, r0
 8018ed0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018ed2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018ed6:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018ed8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018eda:	3a01      	subs	r2, #1
 8018edc:	8702      	strh	r2, [r0, #56]	; 0x38
 8018ede:	1c5a      	adds	r2, r3, #1
 8018ee0:	b292      	uxth	r2, r2
 8018ee2:	2a09      	cmp	r2, #9
 8018ee4:	bf86      	itte	hi
 8018ee6:	3b09      	subhi	r3, #9
 8018ee8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018eea:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018eec:	f7ff ffb5 	bl	8018e5a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018ef0:	8c23      	ldrh	r3, [r4, #32]
 8018ef2:	2b01      	cmp	r3, #1
 8018ef4:	bf9c      	itt	ls
 8018ef6:	3301      	addls	r3, #1
 8018ef8:	8423      	strhls	r3, [r4, #32]
 8018efa:	8be3      	ldrh	r3, [r4, #30]
 8018efc:	b90b      	cbnz	r3, 8018f02 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018efe:	2302      	movs	r3, #2
 8018f00:	83e3      	strh	r3, [r4, #30]
 8018f02:	8be3      	ldrh	r3, [r4, #30]
 8018f04:	4628      	mov	r0, r5
 8018f06:	3b01      	subs	r3, #1
 8018f08:	b29b      	uxth	r3, r3
 8018f0a:	83e3      	strh	r3, [r4, #30]
 8018f0c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018f10:	8365      	strh	r5, [r4, #26]
 8018f12:	bd38      	pop	{r3, r4, r5, pc}

08018f14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018f14:	428a      	cmp	r2, r1
 8018f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f1a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018f1c:	d931      	bls.n	8018f82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8018f1e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8018f20:	1a54      	subs	r4, r2, r1
 8018f22:	19ee      	adds	r6, r5, r7
 8018f24:	3e01      	subs	r6, #1
 8018f26:	fa1f fe84 	uxth.w	lr, r4
 8018f2a:	b2b4      	uxth	r4, r6
 8018f2c:	eba4 090e 	sub.w	r9, r4, lr
 8018f30:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018f34:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8018f38:	fa1f f989 	uxth.w	r9, r9
 8018f3c:	2c09      	cmp	r4, #9
 8018f3e:	4626      	mov	r6, r4
 8018f40:	bf88      	it	hi
 8018f42:	f1a4 060a 	subhi.w	r6, r4, #10
 8018f46:	f1bc 0f00 	cmp.w	ip, #0
 8018f4a:	bf08      	it	eq
 8018f4c:	f04f 0c02 	moveq.w	ip, #2
 8018f50:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018f54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018f58:	3c01      	subs	r4, #1
 8018f5a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8018f5e:	fa1f fc8c 	uxth.w	ip, ip
 8018f62:	b2a4      	uxth	r4, r4
 8018f64:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018f68:	454c      	cmp	r4, r9
 8018f6a:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8018f6e:	d1e5      	bne.n	8018f3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8018f70:	eba5 050e 	sub.w	r5, r5, lr
 8018f74:	eb0e 0408 	add.w	r4, lr, r8
 8018f78:	8705      	strh	r5, [r0, #56]	; 0x38
 8018f7a:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8018f7e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8018f82:	250a      	movs	r5, #10
 8018f84:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018f86:	1a64      	subs	r4, r4, r1
 8018f88:	4439      	add	r1, r7
 8018f8a:	b289      	uxth	r1, r1
 8018f8c:	2909      	cmp	r1, #9
 8018f8e:	bf88      	it	hi
 8018f90:	390a      	subhi	r1, #10
 8018f92:	8704      	strh	r4, [r0, #56]	; 0x38
 8018f94:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018f96:	b18a      	cbz	r2, 8018fbc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8018f98:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8018f9a:	3a01      	subs	r2, #1
 8018f9c:	3101      	adds	r1, #1
 8018f9e:	b292      	uxth	r2, r2
 8018fa0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018fa4:	8701      	strh	r1, [r0, #56]	; 0x38
 8018fa6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018fa8:	b901      	cbnz	r1, 8018fac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8018faa:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018fac:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018fae:	3901      	subs	r1, #1
 8018fb0:	b289      	uxth	r1, r1
 8018fb2:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018fb4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018fb8:	844c      	strh	r4, [r1, #34]	; 0x22
 8018fba:	e7ec      	b.n	8018f96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8018fbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fc0:	f7ff bf4b 	b.w	8018e5a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018fc4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018fc4:	b570      	push	{r4, r5, r6, lr}
 8018fc6:	2500      	movs	r5, #0
 8018fc8:	4295      	cmp	r5, r2
 8018fca:	d011      	beq.n	8018ff0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018fcc:	8bc4      	ldrh	r4, [r0, #30]
 8018fce:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018fd2:	4414      	add	r4, r2
 8018fd4:	3c01      	subs	r4, #1
 8018fd6:	1b64      	subs	r4, r4, r5
 8018fd8:	b2a4      	uxth	r4, r4
 8018fda:	2c01      	cmp	r4, #1
 8018fdc:	bf88      	it	hi
 8018fde:	3c02      	subhi	r4, #2
 8018fe0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018fe4:	8b64      	ldrh	r4, [r4, #26]
 8018fe6:	42b4      	cmp	r4, r6
 8018fe8:	d117      	bne.n	801901a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018fea:	3501      	adds	r5, #1
 8018fec:	b2ad      	uxth	r5, r5
 8018fee:	e7eb      	b.n	8018fc8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018ff0:	2400      	movs	r4, #0
 8018ff2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018ff6:	4413      	add	r3, r2
 8018ff8:	b2a2      	uxth	r2, r4
 8018ffa:	429a      	cmp	r2, r3
 8018ffc:	da0f      	bge.n	801901e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018ffe:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019000:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019004:	4432      	add	r2, r6
 8019006:	b292      	uxth	r2, r2
 8019008:	2a09      	cmp	r2, #9
 801900a:	bf88      	it	hi
 801900c:	3a0a      	subhi	r2, #10
 801900e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019012:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8019014:	3401      	adds	r4, #1
 8019016:	42aa      	cmp	r2, r5
 8019018:	d0ee      	beq.n	8018ff8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801901a:	2000      	movs	r0, #0
 801901c:	bd70      	pop	{r4, r5, r6, pc}
 801901e:	2001      	movs	r0, #1
 8019020:	e7fc      	b.n	801901c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019022 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019026:	4605      	mov	r5, r0
 8019028:	4616      	mov	r6, r2
 801902a:	1c8c      	adds	r4, r1, #2
 801902c:	8809      	ldrh	r1, [r1, #0]
 801902e:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019032:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019036:	42b3      	cmp	r3, r6
 8019038:	d124      	bne.n	8019084 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801903a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801903e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019042:	f001 070f 	and.w	r7, r1, #15
 8019046:	f8cd 8000 	str.w	r8, [sp]
 801904a:	464b      	mov	r3, r9
 801904c:	4652      	mov	r2, sl
 801904e:	4621      	mov	r1, r4
 8019050:	4628      	mov	r0, r5
 8019052:	f7ff ffb7 	bl	8018fc4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019056:	4683      	mov	fp, r0
 8019058:	b168      	cbz	r0, 8019076 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801905a:	eb0a 0109 	add.w	r1, sl, r9
 801905e:	4441      	add	r1, r8
 8019060:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019064:	463a      	mov	r2, r7
 8019066:	4649      	mov	r1, r9
 8019068:	4628      	mov	r0, r5
 801906a:	f7ff ff53 	bl	8018f14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801906e:	4658      	mov	r0, fp
 8019070:	b003      	add	sp, #12
 8019072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019076:	eb07 010a 	add.w	r1, r7, sl
 801907a:	4449      	add	r1, r9
 801907c:	4441      	add	r1, r8
 801907e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019082:	e7d2      	b.n	801902a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019084:	f04f 0b00 	mov.w	fp, #0
 8019088:	e7f1      	b.n	801906e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801908a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801908a:	b570      	push	{r4, r5, r6, lr}
 801908c:	8810      	ldrh	r0, [r2, #0]
 801908e:	4298      	cmp	r0, r3
 8019090:	d817      	bhi.n	80190c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019092:	1e48      	subs	r0, r1, #1
 8019094:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019098:	4298      	cmp	r0, r3
 801909a:	d312      	bcc.n	80190c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801909c:	2400      	movs	r4, #0
 801909e:	428c      	cmp	r4, r1
 80190a0:	d20f      	bcs.n	80190c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80190a2:	1860      	adds	r0, r4, r1
 80190a4:	1040      	asrs	r0, r0, #1
 80190a6:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80190aa:	0085      	lsls	r5, r0, #2
 80190ac:	42b3      	cmp	r3, r6
 80190ae:	d902      	bls.n	80190b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80190b0:	3001      	adds	r0, #1
 80190b2:	b284      	uxth	r4, r0
 80190b4:	e7f3      	b.n	801909e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80190b6:	d201      	bcs.n	80190bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80190b8:	b281      	uxth	r1, r0
 80190ba:	e7f0      	b.n	801909e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80190bc:	442a      	add	r2, r5
 80190be:	8850      	ldrh	r0, [r2, #2]
 80190c0:	bd70      	pop	{r4, r5, r6, pc}
 80190c2:	2000      	movs	r0, #0
 80190c4:	e7fc      	b.n	80190c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080190c6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80190c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190ca:	4604      	mov	r4, r0
 80190cc:	260b      	movs	r6, #11
 80190ce:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80190d0:	886f      	ldrh	r7, [r5, #2]
 80190d2:	087f      	lsrs	r7, r7, #1
 80190d4:	3e01      	subs	r6, #1
 80190d6:	d013      	beq.n	8019100 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80190d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80190da:	462a      	mov	r2, r5
 80190dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80190e0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80190e4:	4639      	mov	r1, r7
 80190e6:	4643      	mov	r3, r8
 80190e8:	4620      	mov	r0, r4
 80190ea:	f7ff ffce 	bl	801908a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80190ee:	b138      	cbz	r0, 8019100 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80190f0:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80190f4:	4642      	mov	r2, r8
 80190f6:	4620      	mov	r0, r4
 80190f8:	f7ff ff93 	bl	8019022 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80190fc:	2800      	cmp	r0, #0
 80190fe:	d1e9      	bne.n	80190d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019104 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019104:	b570      	push	{r4, r5, r6, lr}
 8019106:	694a      	ldr	r2, [r1, #20]
 8019108:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801910a:	684b      	ldr	r3, [r1, #4]
 801910c:	1b54      	subs	r4, r2, r5
 801910e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019110:	f000 8107 	beq.w	8019322 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8019114:	1b9b      	subs	r3, r3, r6
 8019116:	d003      	beq.n	8019120 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019118:	2210      	movs	r2, #16
 801911a:	4363      	muls	r3, r4
 801911c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019120:	680c      	ldr	r4, [r1, #0]
 8019122:	698a      	ldr	r2, [r1, #24]
 8019124:	1b65      	subs	r5, r4, r5
 8019126:	f000 80fe 	beq.w	8019326 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801912a:	1b92      	subs	r2, r2, r6
 801912c:	d003      	beq.n	8019136 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801912e:	2410      	movs	r4, #16
 8019130:	436a      	muls	r2, r5
 8019132:	fb92 f2f4 	sdiv	r2, r2, r4
 8019136:	1a9b      	subs	r3, r3, r2
 8019138:	ee07 3a90 	vmov	s15, r3
 801913c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019364 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8019140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019148:	ee67 7a84 	vmul.f32	s15, s15, s8
 801914c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019150:	460a      	mov	r2, r1
 8019152:	eeb1 6a43 	vneg.f32	s12, s6
 8019156:	4603      	mov	r3, r0
 8019158:	f100 040c 	add.w	r4, r0, #12
 801915c:	edd2 7a02 	vldr	s15, [r2, #8]
 8019160:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019164:	ece3 6a01 	vstmia	r3!, {s13}
 8019168:	edd2 7a03 	vldr	s15, [r2, #12]
 801916c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019170:	edc3 7a02 	vstr	s15, [r3, #8]
 8019174:	edd2 7a04 	vldr	s15, [r2, #16]
 8019178:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801917c:	429c      	cmp	r4, r3
 801917e:	edc3 7a05 	vstr	s15, [r3, #20]
 8019182:	f102 0214 	add.w	r2, r2, #20
 8019186:	d1e9      	bne.n	801915c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019188:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801918a:	698b      	ldr	r3, [r1, #24]
 801918c:	edd0 4a02 	vldr	s9, [r0, #8]
 8019190:	1a9b      	subs	r3, r3, r2
 8019192:	ee07 3a90 	vmov	s15, r3
 8019196:	684b      	ldr	r3, [r1, #4]
 8019198:	edd0 3a00 	vldr	s7, [r0]
 801919c:	1a9b      	subs	r3, r3, r2
 801919e:	edd0 6a01 	vldr	s13, [r0, #4]
 80191a2:	ee07 3a10 	vmov	s14, r3
 80191a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191aa:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80191ae:	ee67 7a84 	vmul.f32	s15, s15, s8
 80191b2:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80191b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191ba:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80191be:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80191c6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80191ca:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80191ce:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80191d0:	694a      	ldr	r2, [r1, #20]
 80191d2:	ed90 5a05 	vldr	s10, [r0, #20]
 80191d6:	1b13      	subs	r3, r2, r4
 80191d8:	ee07 3a10 	vmov	s14, r3
 80191dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191e4:	680b      	ldr	r3, [r1, #0]
 80191e6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80191ea:	1b1b      	subs	r3, r3, r4
 80191ec:	ee07 3a10 	vmov	s14, r3
 80191f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191f8:	eee6 4a87 	vfma.f32	s9, s13, s14
 80191fc:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019200:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019204:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019206:	698b      	ldr	r3, [r1, #24]
 8019208:	ed90 2a03 	vldr	s4, [r0, #12]
 801920c:	1a9b      	subs	r3, r3, r2
 801920e:	ee06 3a90 	vmov	s13, r3
 8019212:	684b      	ldr	r3, [r1, #4]
 8019214:	edd0 5a04 	vldr	s11, [r0, #16]
 8019218:	1a9b      	subs	r3, r3, r2
 801921a:	ee07 3a10 	vmov	s14, r3
 801921e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019222:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019226:	ee66 6a84 	vmul.f32	s13, s13, s8
 801922a:	ee32 5a45 	vsub.f32	s10, s4, s10
 801922e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019232:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019236:	ee27 7a04 	vmul.f32	s14, s14, s8
 801923a:	eee5 6a87 	vfma.f32	s13, s11, s14
 801923e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019242:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019246:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019248:	694a      	ldr	r2, [r1, #20]
 801924a:	ed90 1a07 	vldr	s2, [r0, #28]
 801924e:	1b13      	subs	r3, r2, r4
 8019250:	ee07 3a10 	vmov	s14, r3
 8019254:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019258:	ee27 7a04 	vmul.f32	s14, s14, s8
 801925c:	680b      	ldr	r3, [r1, #0]
 801925e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019262:	1b1b      	subs	r3, r3, r4
 8019264:	ee07 3a10 	vmov	s14, r3
 8019268:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801926c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019270:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019274:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019278:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801927c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801927e:	698b      	ldr	r3, [r1, #24]
 8019280:	edd0 5a08 	vldr	s11, [r0, #32]
 8019284:	1a9b      	subs	r3, r3, r2
 8019286:	ee07 3a10 	vmov	s14, r3
 801928a:	684b      	ldr	r3, [r1, #4]
 801928c:	edd0 2a06 	vldr	s5, [r0, #24]
 8019290:	1a9b      	subs	r3, r3, r2
 8019292:	ee01 3a90 	vmov	s3, r3
 8019296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801929a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801929e:	ee27 7a04 	vmul.f32	s14, s14, s8
 80192a2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80192a6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80192aa:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80192ae:	ee61 1a84 	vmul.f32	s3, s3, s8
 80192b2:	eea1 7a21 	vfma.f32	s14, s2, s3
 80192b6:	ee27 7a03 	vmul.f32	s14, s14, s6
 80192ba:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80192be:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80192c0:	694a      	ldr	r2, [r1, #20]
 80192c2:	1b13      	subs	r3, r2, r4
 80192c4:	ee03 3a10 	vmov	s6, r3
 80192c8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80192cc:	ee23 3a04 	vmul.f32	s6, s6, s8
 80192d0:	680b      	ldr	r3, [r1, #0]
 80192d2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80192d6:	1b1b      	subs	r3, r3, r4
 80192d8:	ee03 3a10 	vmov	s6, r3
 80192dc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80192e0:	ee23 4a04 	vmul.f32	s8, s6, s8
 80192e4:	eee1 5a04 	vfma.f32	s11, s2, s8
 80192e8:	ee25 6a86 	vmul.f32	s12, s11, s12
 80192ec:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80192f0:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80192f4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80192f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192fc:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8019300:	dd13      	ble.n	801932a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019306:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801930a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801930e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019316:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019318:	dd15      	ble.n	8019346 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801931a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801931e:	6403      	str	r3, [r0, #64]	; 0x40
 8019320:	bd70      	pop	{r4, r5, r6, pc}
 8019322:	4623      	mov	r3, r4
 8019324:	e6fc      	b.n	8019120 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019326:	462a      	mov	r2, r5
 8019328:	e705      	b.n	8019136 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801932a:	d502      	bpl.n	8019332 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801932c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019330:	e7e9      	b.n	8019306 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8019332:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019336:	eea3 2a85 	vfma.f32	s4, s7, s10
 801933a:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801933e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019342:	dade      	bge.n	8019302 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8019344:	e7f2      	b.n	801932c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8019346:	d502      	bpl.n	801934e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8019348:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801934c:	e7e7      	b.n	801931e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801934e:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019352:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019356:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801935a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801935e:	dadc      	bge.n	801931a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8019360:	e7f2      	b.n	8019348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8019362:	bf00      	nop
 8019364:	3d800000 	.word	0x3d800000

08019368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801936c:	2714      	movs	r7, #20
 801936e:	435f      	muls	r7, r3
 8019370:	eb02 0c07 	add.w	ip, r2, r7
 8019374:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019378:	f115 0e0f 	adds.w	lr, r5, #15
 801937c:	f100 80a2 	bmi.w	80194c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019380:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019384:	2614      	movs	r6, #20
 8019386:	9c08      	ldr	r4, [sp, #32]
 8019388:	f8c0 e014 	str.w	lr, [r0, #20]
 801938c:	4366      	muls	r6, r4
 801938e:	eb02 0806 	add.w	r8, r2, r6
 8019392:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019396:	f115 040f 	adds.w	r4, r5, #15
 801939a:	f100 809f 	bmi.w	80194dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801939e:	1124      	asrs	r4, r4, #4
 80193a0:	eba4 040e 	sub.w	r4, r4, lr
 80193a4:	6184      	str	r4, [r0, #24]
 80193a6:	2c00      	cmp	r4, #0
 80193a8:	f000 808a 	beq.w	80194c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80193ac:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80193b0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80193b4:	5995      	ldr	r5, [r2, r6]
 80193b6:	eba4 0809 	sub.w	r8, r4, r9
 80193ba:	59d4      	ldr	r4, [r2, r7]
 80193bc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80193c0:	eba5 0a04 	sub.w	sl, r5, r4
 80193c4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80193c8:	fb0e fe05 	mul.w	lr, lr, r5
 80193cc:	fb0a ee19 	mls	lr, sl, r9, lr
 80193d0:	fb08 e404 	mla	r4, r8, r4, lr
 80193d4:	3c01      	subs	r4, #1
 80193d6:	19a4      	adds	r4, r4, r6
 80193d8:	f100 808c 	bmi.w	80194f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80193dc:	fb94 fef6 	sdiv	lr, r4, r6
 80193e0:	fb06 441e 	mls	r4, r6, lr, r4
 80193e4:	f8c0 e000 	str.w	lr, [r0]
 80193e8:	6104      	str	r4, [r0, #16]
 80193ea:	2d00      	cmp	r5, #0
 80193ec:	f2c0 8095 	blt.w	801951a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80193f0:	fb95 f4f6 	sdiv	r4, r5, r6
 80193f4:	fb06 5514 	mls	r5, r6, r4, r5
 80193f8:	6044      	str	r4, [r0, #4]
 80193fa:	6085      	str	r5, [r0, #8]
 80193fc:	60c6      	str	r6, [r0, #12]
 80193fe:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019402:	6945      	ldr	r5, [r0, #20]
 8019404:	59d2      	ldr	r2, [r2, r7]
 8019406:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801940a:	ee07 4a10 	vmov	s14, r4
 801940e:	6804      	ldr	r4, [r0, #0]
 8019410:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801953c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019414:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019418:	ee07 2a90 	vmov	s15, r2
 801941c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019424:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019428:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801942c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019430:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019434:	edd3 6a00 	vldr	s13, [r3]
 8019438:	eee6 6a07 	vfma.f32	s13, s12, s14
 801943c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8019440:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019444:	edc0 6a07 	vstr	s13, [r0, #28]
 8019448:	edd0 6a01 	vldr	s13, [r0, #4]
 801944c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8019450:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019454:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019458:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801945c:	ed80 6a08 	vstr	s12, [r0, #32]
 8019460:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8019462:	6242      	str	r2, [r0, #36]	; 0x24
 8019464:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8019468:	ed93 6a03 	vldr	s12, [r3, #12]
 801946c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019470:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019474:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019478:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801947c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019480:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8019484:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019488:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801948c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801948e:	6302      	str	r2, [r0, #48]	; 0x30
 8019490:	ed93 6a06 	vldr	s12, [r3, #24]
 8019494:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8019498:	eea5 6a87 	vfma.f32	s12, s11, s14
 801949c:	eeb0 7a46 	vmov.f32	s14, s12
 80194a0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80194a4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80194a8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80194ac:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80194b0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80194b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80194b8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80194bc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80194be:	63c3      	str	r3, [r0, #60]	; 0x3c
 80194c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194c4:	2410      	movs	r4, #16
 80194c6:	f1c5 0501 	rsb	r5, r5, #1
 80194ca:	f015 050f 	ands.w	r5, r5, #15
 80194ce:	fb9e fef4 	sdiv	lr, lr, r4
 80194d2:	bf18      	it	ne
 80194d4:	2501      	movne	r5, #1
 80194d6:	ebae 0e05 	sub.w	lr, lr, r5
 80194da:	e753      	b.n	8019384 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80194dc:	f04f 0910 	mov.w	r9, #16
 80194e0:	f1c5 0501 	rsb	r5, r5, #1
 80194e4:	f015 050f 	ands.w	r5, r5, #15
 80194e8:	fb94 f4f9 	sdiv	r4, r4, r9
 80194ec:	bf18      	it	ne
 80194ee:	2501      	movne	r5, #1
 80194f0:	1b64      	subs	r4, r4, r5
 80194f2:	e755      	b.n	80193a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80194f4:	4264      	negs	r4, r4
 80194f6:	fb94 fef6 	sdiv	lr, r4, r6
 80194fa:	fb06 441e 	mls	r4, r6, lr, r4
 80194fe:	f1ce 0800 	rsb	r8, lr, #0
 8019502:	f8c0 8000 	str.w	r8, [r0]
 8019506:	6104      	str	r4, [r0, #16]
 8019508:	2c00      	cmp	r4, #0
 801950a:	f43f af6e 	beq.w	80193ea <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801950e:	ea6f 0e0e 	mvn.w	lr, lr
 8019512:	1b34      	subs	r4, r6, r4
 8019514:	f8c0 e000 	str.w	lr, [r0]
 8019518:	e766      	b.n	80193e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801951a:	426d      	negs	r5, r5
 801951c:	fb95 f4f6 	sdiv	r4, r5, r6
 8019520:	fb06 5514 	mls	r5, r6, r4, r5
 8019524:	f1c4 0e00 	rsb	lr, r4, #0
 8019528:	f8c0 e004 	str.w	lr, [r0, #4]
 801952c:	6085      	str	r5, [r0, #8]
 801952e:	2d00      	cmp	r5, #0
 8019530:	f43f af64 	beq.w	80193fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019534:	43e4      	mvns	r4, r4
 8019536:	1b75      	subs	r5, r6, r5
 8019538:	6044      	str	r4, [r0, #4]
 801953a:	e75e      	b.n	80193fa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801953c:	3d800000 	.word	0x3d800000

08019540 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019540:	4b01      	ldr	r3, [pc, #4]	; (8019548 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019542:	6018      	str	r0, [r3, #0]
 8019544:	4770      	bx	lr
 8019546:	bf00      	nop
 8019548:	2000f3f4 	.word	0x2000f3f4

0801954c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801954c:	4b06      	ldr	r3, [pc, #24]	; (8019568 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801954e:	881a      	ldrh	r2, [r3, #0]
 8019550:	4282      	cmp	r2, r0
 8019552:	d807      	bhi.n	8019564 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019554:	4b05      	ldr	r3, [pc, #20]	; (801956c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019556:	881b      	ldrh	r3, [r3, #0]
 8019558:	4413      	add	r3, r2
 801955a:	4298      	cmp	r0, r3
 801955c:	bfac      	ite	ge
 801955e:	2000      	movge	r0, #0
 8019560:	2001      	movlt	r0, #1
 8019562:	4770      	bx	lr
 8019564:	2000      	movs	r0, #0
 8019566:	4770      	bx	lr
 8019568:	2000f414 	.word	0x2000f414
 801956c:	2000f418 	.word	0x2000f418

08019570 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019570:	b508      	push	{r3, lr}
 8019572:	4601      	mov	r1, r0
 8019574:	f7ff ffea 	bl	801954c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019578:	b118      	cbz	r0, 8019582 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801957a:	4b02      	ldr	r3, [pc, #8]	; (8019584 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019582:	bd08      	pop	{r3, pc}
 8019584:	2000f3f8 	.word	0x2000f3f8

08019588 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801958a:	4c24      	ldr	r4, [pc, #144]	; (801961c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801958c:	6823      	ldr	r3, [r4, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d042      	beq.n	8019618 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019592:	4a23      	ldr	r2, [pc, #140]	; (8019620 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019594:	4d23      	ldr	r5, [pc, #140]	; (8019624 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019596:	8811      	ldrh	r1, [r2, #0]
 8019598:	f8b5 c000 	ldrh.w	ip, [r5]
 801959c:	4822      	ldr	r0, [pc, #136]	; (8019628 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801959e:	4461      	add	r1, ip
 80195a0:	1c4a      	adds	r2, r1, #1
 80195a2:	f022 0201 	bic.w	r2, r2, #1
 80195a6:	008f      	lsls	r7, r1, #2
 80195a8:	0412      	lsls	r2, r2, #16
 80195aa:	19de      	adds	r6, r3, r7
 80195ac:	0c12      	lsrs	r2, r2, #16
 80195ae:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80195b2:	6006      	str	r6, [r0, #0]
 80195b4:	4e1d      	ldr	r6, [pc, #116]	; (801962c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80195b6:	19da      	adds	r2, r3, r7
 80195b8:	6032      	str	r2, [r6, #0]
 80195ba:	220e      	movs	r2, #14
 80195bc:	fb02 f20c 	mul.w	r2, r2, ip
 80195c0:	3203      	adds	r2, #3
 80195c2:	f022 0203 	bic.w	r2, r2, #3
 80195c6:	443a      	add	r2, r7
 80195c8:	4f19      	ldr	r7, [pc, #100]	; (8019630 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80195ca:	4413      	add	r3, r2
 80195cc:	603b      	str	r3, [r7, #0]
 80195ce:	2300      	movs	r3, #0
 80195d0:	4f18      	ldr	r7, [pc, #96]	; (8019634 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80195d2:	469c      	mov	ip, r3
 80195d4:	803b      	strh	r3, [r7, #0]
 80195d6:	4f18      	ldr	r7, [pc, #96]	; (8019638 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80195d8:	683f      	ldr	r7, [r7, #0]
 80195da:	1aba      	subs	r2, r7, r2
 80195dc:	4f17      	ldr	r7, [pc, #92]	; (801963c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80195de:	603a      	str	r2, [r7, #0]
 80195e0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80195e4:	4a16      	ldr	r2, [pc, #88]	; (8019640 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80195e6:	8013      	strh	r3, [r2, #0]
 80195e8:	428b      	cmp	r3, r1
 80195ea:	d10d      	bne.n	8019608 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80195ec:	2300      	movs	r3, #0
 80195ee:	240e      	movs	r4, #14
 80195f0:	882d      	ldrh	r5, [r5, #0]
 80195f2:	6830      	ldr	r0, [r6, #0]
 80195f4:	429d      	cmp	r5, r3
 80195f6:	d90f      	bls.n	8019618 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80195f8:	fb04 0203 	mla	r2, r4, r3, r0
 80195fc:	7b11      	ldrb	r1, [r2, #12]
 80195fe:	3301      	adds	r3, #1
 8019600:	f36f 1145 	bfc	r1, #5, #1
 8019604:	7311      	strb	r1, [r2, #12]
 8019606:	e7f5      	b.n	80195f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019608:	6822      	ldr	r2, [r4, #0]
 801960a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801960e:	6802      	ldr	r2, [r0, #0]
 8019610:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019614:	3301      	adds	r3, #1
 8019616:	e7e7      	b.n	80195e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801961a:	bf00      	nop
 801961c:	2000f3f8 	.word	0x2000f3f8
 8019620:	2000f414 	.word	0x2000f414
 8019624:	2000f418 	.word	0x2000f418
 8019628:	2000f40c 	.word	0x2000f40c
 801962c:	2000f3fc 	.word	0x2000f3fc
 8019630:	2000f404 	.word	0x2000f404
 8019634:	2000f416 	.word	0x2000f416
 8019638:	2000f400 	.word	0x2000f400
 801963c:	2000f410 	.word	0x2000f410
 8019640:	2000f408 	.word	0x2000f408

08019644 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019644:	4b06      	ldr	r3, [pc, #24]	; (8019660 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	b943      	cbnz	r3, 801965c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801964a:	b139      	cbz	r1, 801965c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801964c:	4b05      	ldr	r3, [pc, #20]	; (8019664 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801964e:	801a      	strh	r2, [r3, #0]
 8019650:	4b05      	ldr	r3, [pc, #20]	; (8019668 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019652:	6019      	str	r1, [r3, #0]
 8019654:	4b05      	ldr	r3, [pc, #20]	; (801966c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019656:	6018      	str	r0, [r3, #0]
 8019658:	f7ff bf96 	b.w	8019588 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801965c:	4770      	bx	lr
 801965e:	bf00      	nop
 8019660:	2000f404 	.word	0x2000f404
 8019664:	2000f418 	.word	0x2000f418
 8019668:	2000f400 	.word	0x2000f400
 801966c:	2000f3f8 	.word	0x2000f3f8

08019670 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019670:	b470      	push	{r4, r5, r6}
 8019672:	4c07      	ldr	r4, [pc, #28]	; (8019690 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019674:	4605      	mov	r5, r0
 8019676:	6826      	ldr	r6, [r4, #0]
 8019678:	4610      	mov	r0, r2
 801967a:	9a03      	ldr	r2, [sp, #12]
 801967c:	b936      	cbnz	r6, 801968c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801967e:	6025      	str	r5, [r4, #0]
 8019680:	4c04      	ldr	r4, [pc, #16]	; (8019694 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019682:	8021      	strh	r1, [r4, #0]
 8019684:	bc70      	pop	{r4, r5, r6}
 8019686:	4619      	mov	r1, r3
 8019688:	f7ff bfdc 	b.w	8019644 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801968c:	bc70      	pop	{r4, r5, r6}
 801968e:	4770      	bx	lr
 8019690:	2000f41c 	.word	0x2000f41c
 8019694:	2000f414 	.word	0x2000f414

08019698 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019698:	4a12      	ldr	r2, [pc, #72]	; (80196e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801969a:	8803      	ldrh	r3, [r0, #0]
 801969c:	8812      	ldrh	r2, [r2, #0]
 801969e:	4293      	cmp	r3, r2
 80196a0:	d207      	bcs.n	80196b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80196a2:	2114      	movs	r1, #20
 80196a4:	4a10      	ldr	r2, [pc, #64]	; (80196e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80196a6:	6812      	ldr	r2, [r2, #0]
 80196a8:	fb01 2303 	mla	r3, r1, r3, r2
 80196ac:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80196b0:	4770      	bx	lr
 80196b2:	490e      	ldr	r1, [pc, #56]	; (80196ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80196b4:	8809      	ldrh	r1, [r1, #0]
 80196b6:	4411      	add	r1, r2
 80196b8:	428b      	cmp	r3, r1
 80196ba:	da04      	bge.n	80196c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80196bc:	1a9b      	subs	r3, r3, r2
 80196be:	4a0c      	ldr	r2, [pc, #48]	; (80196f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80196c0:	210e      	movs	r1, #14
 80196c2:	6812      	ldr	r2, [r2, #0]
 80196c4:	e7f0      	b.n	80196a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80196c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80196ca:	4293      	cmp	r3, r2
 80196cc:	d108      	bne.n	80196e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80196ce:	4b09      	ldr	r3, [pc, #36]	; (80196f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80196d0:	781b      	ldrb	r3, [r3, #0]
 80196d2:	b91b      	cbnz	r3, 80196dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80196d4:	4b08      	ldr	r3, [pc, #32]	; (80196f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80196d6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80196da:	4770      	bx	lr
 80196dc:	4b07      	ldr	r3, [pc, #28]	; (80196fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80196de:	e7fa      	b.n	80196d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80196e0:	2000      	movs	r0, #0
 80196e2:	4770      	bx	lr
 80196e4:	2000f414 	.word	0x2000f414
 80196e8:	2000f41c 	.word	0x2000f41c
 80196ec:	2000f418 	.word	0x2000f418
 80196f0:	2000f3fc 	.word	0x2000f3fc
 80196f4:	2000f38c 	.word	0x2000f38c
 80196f8:	2000f38e 	.word	0x2000f38e
 80196fc:	2000f390 	.word	0x2000f390

08019700 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019700:	4a12      	ldr	r2, [pc, #72]	; (801974c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8019702:	8803      	ldrh	r3, [r0, #0]
 8019704:	8812      	ldrh	r2, [r2, #0]
 8019706:	4293      	cmp	r3, r2
 8019708:	d207      	bcs.n	801971a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801970a:	2114      	movs	r1, #20
 801970c:	4a10      	ldr	r2, [pc, #64]	; (8019750 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801970e:	6812      	ldr	r2, [r2, #0]
 8019710:	fb01 2303 	mla	r3, r1, r3, r2
 8019714:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019718:	4770      	bx	lr
 801971a:	490e      	ldr	r1, [pc, #56]	; (8019754 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801971c:	8809      	ldrh	r1, [r1, #0]
 801971e:	4411      	add	r1, r2
 8019720:	428b      	cmp	r3, r1
 8019722:	da04      	bge.n	801972e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8019724:	1a9b      	subs	r3, r3, r2
 8019726:	4a0c      	ldr	r2, [pc, #48]	; (8019758 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019728:	210e      	movs	r1, #14
 801972a:	6812      	ldr	r2, [r2, #0]
 801972c:	e7f0      	b.n	8019710 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801972e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019732:	4293      	cmp	r3, r2
 8019734:	d108      	bne.n	8019748 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8019736:	4b09      	ldr	r3, [pc, #36]	; (801975c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	b91b      	cbnz	r3, 8019744 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801973c:	4b08      	ldr	r3, [pc, #32]	; (8019760 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801973e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019742:	4770      	bx	lr
 8019744:	4b07      	ldr	r3, [pc, #28]	; (8019764 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019746:	e7fa      	b.n	801973e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019748:	2000      	movs	r0, #0
 801974a:	4770      	bx	lr
 801974c:	2000f414 	.word	0x2000f414
 8019750:	2000f41c 	.word	0x2000f41c
 8019754:	2000f418 	.word	0x2000f418
 8019758:	2000f3fc 	.word	0x2000f3fc
 801975c:	2000f38c 	.word	0x2000f38c
 8019760:	2000f390 	.word	0x2000f390
 8019764:	2000f38e 	.word	0x2000f38e

08019768 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019768:	b510      	push	{r4, lr}
 801976a:	4a1f      	ldr	r2, [pc, #124]	; (80197e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801976c:	880b      	ldrh	r3, [r1, #0]
 801976e:	8812      	ldrh	r2, [r2, #0]
 8019770:	4293      	cmp	r3, r2
 8019772:	d213      	bcs.n	801979c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8019774:	2114      	movs	r1, #20
 8019776:	4a1d      	ldr	r2, [pc, #116]	; (80197ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8019778:	6812      	ldr	r2, [r2, #0]
 801977a:	fb01 2303 	mla	r3, r1, r3, r2
 801977e:	8a1a      	ldrh	r2, [r3, #16]
 8019780:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019784:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019788:	8a5b      	ldrh	r3, [r3, #18]
 801978a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801978e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019792:	8004      	strh	r4, [r0, #0]
 8019794:	8041      	strh	r1, [r0, #2]
 8019796:	8082      	strh	r2, [r0, #4]
 8019798:	80c3      	strh	r3, [r0, #6]
 801979a:	e00e      	b.n	80197ba <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801979c:	4914      	ldr	r1, [pc, #80]	; (80197f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801979e:	8809      	ldrh	r1, [r1, #0]
 80197a0:	4411      	add	r1, r2
 80197a2:	428b      	cmp	r3, r1
 80197a4:	da0a      	bge.n	80197bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80197a6:	210e      	movs	r1, #14
 80197a8:	1a9b      	subs	r3, r3, r2
 80197aa:	4a12      	ldr	r2, [pc, #72]	; (80197f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80197ac:	6812      	ldr	r2, [r2, #0]
 80197ae:	fb01 2303 	mla	r3, r1, r3, r2
 80197b2:	681a      	ldr	r2, [r3, #0]
 80197b4:	6002      	str	r2, [r0, #0]
 80197b6:	685a      	ldr	r2, [r3, #4]
 80197b8:	6042      	str	r2, [r0, #4]
 80197ba:	bd10      	pop	{r4, pc}
 80197bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80197c0:	4293      	cmp	r3, r2
 80197c2:	d10b      	bne.n	80197dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 80197c4:	4b0c      	ldr	r3, [pc, #48]	; (80197f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80197c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80197ca:	4b0c      	ldr	r3, [pc, #48]	; (80197fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80197cc:	8081      	strh	r1, [r0, #4]
 80197ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197d2:	2300      	movs	r3, #0
 80197d4:	80c2      	strh	r2, [r0, #6]
 80197d6:	8003      	strh	r3, [r0, #0]
 80197d8:	8043      	strh	r3, [r0, #2]
 80197da:	e7ee      	b.n	80197ba <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80197dc:	2300      	movs	r3, #0
 80197de:	8003      	strh	r3, [r0, #0]
 80197e0:	8043      	strh	r3, [r0, #2]
 80197e2:	8083      	strh	r3, [r0, #4]
 80197e4:	e7d8      	b.n	8019798 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80197e6:	bf00      	nop
 80197e8:	2000f414 	.word	0x2000f414
 80197ec:	2000f41c 	.word	0x2000f41c
 80197f0:	2000f418 	.word	0x2000f418
 80197f4:	2000f3fc 	.word	0x2000f3fc
 80197f8:	2000f388 	.word	0x2000f388
 80197fc:	2000f38a 	.word	0x2000f38a

08019800 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019800:	4a17      	ldr	r2, [pc, #92]	; (8019860 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8019802:	8803      	ldrh	r3, [r0, #0]
 8019804:	8812      	ldrh	r2, [r2, #0]
 8019806:	4293      	cmp	r3, r2
 8019808:	d213      	bcs.n	8019832 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801980a:	2114      	movs	r1, #20
 801980c:	4a15      	ldr	r2, [pc, #84]	; (8019864 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801980e:	6812      	ldr	r2, [r2, #0]
 8019810:	fb01 2303 	mla	r3, r1, r3, r2
 8019814:	8a1a      	ldrh	r2, [r3, #16]
 8019816:	8919      	ldrh	r1, [r3, #8]
 8019818:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801981c:	428a      	cmp	r2, r1
 801981e:	db1d      	blt.n	801985c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019820:	8a58      	ldrh	r0, [r3, #18]
 8019822:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019826:	895b      	ldrh	r3, [r3, #10]
 8019828:	4298      	cmp	r0, r3
 801982a:	bfac      	ite	ge
 801982c:	2000      	movge	r0, #0
 801982e:	2001      	movlt	r0, #1
 8019830:	4770      	bx	lr
 8019832:	490d      	ldr	r1, [pc, #52]	; (8019868 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019834:	8809      	ldrh	r1, [r1, #0]
 8019836:	4411      	add	r1, r2
 8019838:	428b      	cmp	r3, r1
 801983a:	da0d      	bge.n	8019858 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801983c:	210e      	movs	r1, #14
 801983e:	1a9b      	subs	r3, r3, r2
 8019840:	4a0a      	ldr	r2, [pc, #40]	; (801986c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019842:	6812      	ldr	r2, [r2, #0]
 8019844:	fb01 2303 	mla	r3, r1, r3, r2
 8019848:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801984c:	891a      	ldrh	r2, [r3, #8]
 801984e:	4291      	cmp	r1, r2
 8019850:	db04      	blt.n	801985c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019852:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019856:	e7e6      	b.n	8019826 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8019858:	2000      	movs	r0, #0
 801985a:	4770      	bx	lr
 801985c:	2001      	movs	r0, #1
 801985e:	4770      	bx	lr
 8019860:	2000f414 	.word	0x2000f414
 8019864:	2000f41c 	.word	0x2000f41c
 8019868:	2000f418 	.word	0x2000f418
 801986c:	2000f3fc 	.word	0x2000f3fc

08019870 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019870:	4a12      	ldr	r2, [pc, #72]	; (80198bc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019872:	8803      	ldrh	r3, [r0, #0]
 8019874:	8811      	ldrh	r1, [r2, #0]
 8019876:	428b      	cmp	r3, r1
 8019878:	d20b      	bcs.n	8019892 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801987a:	4a11      	ldr	r2, [pc, #68]	; (80198c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801987c:	6812      	ldr	r2, [r2, #0]
 801987e:	b112      	cbz	r2, 8019886 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019880:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019884:	b9c0      	cbnz	r0, 80198b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8019886:	4a0f      	ldr	r2, [pc, #60]	; (80198c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019888:	6811      	ldr	r1, [r2, #0]
 801988a:	2214      	movs	r2, #20
 801988c:	4353      	muls	r3, r2
 801988e:	58c8      	ldr	r0, [r1, r3]
 8019890:	4770      	bx	lr
 8019892:	4a0d      	ldr	r2, [pc, #52]	; (80198c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019894:	8812      	ldrh	r2, [r2, #0]
 8019896:	440a      	add	r2, r1
 8019898:	4293      	cmp	r3, r2
 801989a:	da04      	bge.n	80198a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801989c:	4a08      	ldr	r2, [pc, #32]	; (80198c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801989e:	6812      	ldr	r2, [r2, #0]
 80198a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80198a4:	4770      	bx	lr
 80198a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80198aa:	4293      	cmp	r3, r2
 80198ac:	d103      	bne.n	80198b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80198ae:	4b07      	ldr	r3, [pc, #28]	; (80198cc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80198b4:	4770      	bx	lr
 80198b6:	2000      	movs	r0, #0
 80198b8:	4770      	bx	lr
 80198ba:	bf00      	nop
 80198bc:	2000f414 	.word	0x2000f414
 80198c0:	2000f3f8 	.word	0x2000f3f8
 80198c4:	2000f41c 	.word	0x2000f41c
 80198c8:	2000f418 	.word	0x2000f418
 80198cc:	2000f394 	.word	0x2000f394

080198d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80198d0:	4b24      	ldr	r3, [pc, #144]	; (8019964 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80198d2:	8802      	ldrh	r2, [r0, #0]
 80198d4:	8818      	ldrh	r0, [r3, #0]
 80198d6:	4282      	cmp	r2, r0
 80198d8:	d221      	bcs.n	801991e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80198da:	4b23      	ldr	r3, [pc, #140]	; (8019968 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80198dc:	6819      	ldr	r1, [r3, #0]
 80198de:	2314      	movs	r3, #20
 80198e0:	fb03 1302 	mla	r3, r3, r2, r1
 80198e4:	6858      	ldr	r0, [r3, #4]
 80198e6:	2800      	cmp	r0, #0
 80198e8:	d03a      	beq.n	8019960 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80198ea:	4920      	ldr	r1, [pc, #128]	; (801996c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80198ec:	6809      	ldr	r1, [r1, #0]
 80198ee:	2900      	cmp	r1, #0
 80198f0:	d036      	beq.n	8019960 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80198f2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80198f6:	2900      	cmp	r1, #0
 80198f8:	d032      	beq.n	8019960 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80198fa:	891a      	ldrh	r2, [r3, #8]
 80198fc:	8958      	ldrh	r0, [r3, #10]
 80198fe:	4350      	muls	r0, r2
 8019900:	7c5a      	ldrb	r2, [r3, #17]
 8019902:	7cdb      	ldrb	r3, [r3, #19]
 8019904:	0952      	lsrs	r2, r2, #5
 8019906:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801990a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801990e:	2b0b      	cmp	r3, #11
 8019910:	bf18      	it	ne
 8019912:	0040      	lslne	r0, r0, #1
 8019914:	3003      	adds	r0, #3
 8019916:	f020 0003 	bic.w	r0, r0, #3
 801991a:	4408      	add	r0, r1
 801991c:	4770      	bx	lr
 801991e:	4b14      	ldr	r3, [pc, #80]	; (8019970 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019920:	881b      	ldrh	r3, [r3, #0]
 8019922:	4403      	add	r3, r0
 8019924:	429a      	cmp	r2, r3
 8019926:	da1a      	bge.n	801995e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019928:	210e      	movs	r1, #14
 801992a:	4b12      	ldr	r3, [pc, #72]	; (8019974 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801992c:	1a10      	subs	r0, r2, r0
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	fb01 3000 	mla	r0, r1, r0, r3
 8019934:	7b03      	ldrb	r3, [r0, #12]
 8019936:	f003 031f 	and.w	r3, r3, #31
 801993a:	2b0b      	cmp	r3, #11
 801993c:	d10b      	bne.n	8019956 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801993e:	8903      	ldrh	r3, [r0, #8]
 8019940:	8940      	ldrh	r0, [r0, #10]
 8019942:	4358      	muls	r0, r3
 8019944:	4b09      	ldr	r3, [pc, #36]	; (801996c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019946:	3003      	adds	r0, #3
 8019948:	6819      	ldr	r1, [r3, #0]
 801994a:	f020 0303 	bic.w	r3, r0, #3
 801994e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019952:	4418      	add	r0, r3
 8019954:	4770      	bx	lr
 8019956:	2b0d      	cmp	r3, #13
 8019958:	d101      	bne.n	801995e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801995a:	300d      	adds	r0, #13
 801995c:	4770      	bx	lr
 801995e:	2000      	movs	r0, #0
 8019960:	4770      	bx	lr
 8019962:	bf00      	nop
 8019964:	2000f414 	.word	0x2000f414
 8019968:	2000f41c 	.word	0x2000f41c
 801996c:	2000f3f8 	.word	0x2000f3f8
 8019970:	2000f418 	.word	0x2000f418
 8019974:	2000f3fc 	.word	0x2000f3fc

08019978 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019978:	b510      	push	{r4, lr}
 801997a:	4a17      	ldr	r2, [pc, #92]	; (80199d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801997c:	8803      	ldrh	r3, [r0, #0]
 801997e:	8812      	ldrh	r2, [r2, #0]
 8019980:	4293      	cmp	r3, r2
 8019982:	d20c      	bcs.n	801999e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019984:	2114      	movs	r1, #20
 8019986:	4a15      	ldr	r2, [pc, #84]	; (80199dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019988:	6812      	ldr	r2, [r2, #0]
 801998a:	fb01 2303 	mla	r3, r1, r3, r2
 801998e:	7c58      	ldrb	r0, [r3, #17]
 8019990:	0942      	lsrs	r2, r0, #5
 8019992:	7cd8      	ldrb	r0, [r3, #19]
 8019994:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019998:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801999c:	bd10      	pop	{r4, pc}
 801999e:	4910      	ldr	r1, [pc, #64]	; (80199e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80199a0:	8809      	ldrh	r1, [r1, #0]
 80199a2:	4411      	add	r1, r2
 80199a4:	428b      	cmp	r3, r1
 80199a6:	da09      	bge.n	80199bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80199a8:	210e      	movs	r1, #14
 80199aa:	1a9b      	subs	r3, r3, r2
 80199ac:	4a0d      	ldr	r2, [pc, #52]	; (80199e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80199ae:	6812      	ldr	r2, [r2, #0]
 80199b0:	fb01 2303 	mla	r3, r1, r3, r2
 80199b4:	7b18      	ldrb	r0, [r3, #12]
 80199b6:	f000 001f 	and.w	r0, r0, #31
 80199ba:	e7ef      	b.n	801999c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80199bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80199c0:	4293      	cmp	r3, r2
 80199c2:	d106      	bne.n	80199d2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80199c4:	f7f6 fd30 	bl	8010428 <_ZN8touchgfx3HAL3lcdEv>
 80199c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199cc:	6803      	ldr	r3, [r0, #0]
 80199ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199d0:	4718      	bx	r3
 80199d2:	2000      	movs	r0, #0
 80199d4:	e7e2      	b.n	801999c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80199d6:	bf00      	nop
 80199d8:	2000f414 	.word	0x2000f414
 80199dc:	2000f41c 	.word	0x2000f41c
 80199e0:	2000f418 	.word	0x2000f418
 80199e4:	2000f3fc 	.word	0x2000f3fc

080199e8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80199e8:	2010      	movs	r0, #16
 80199ea:	4770      	bx	lr

080199ec <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80199ec:	2000      	movs	r0, #0
 80199ee:	4770      	bx	lr

080199f0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80199f0:	4b02      	ldr	r3, [pc, #8]	; (80199fc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80199f2:	8818      	ldrh	r0, [r3, #0]
 80199f4:	0040      	lsls	r0, r0, #1
 80199f6:	b280      	uxth	r0, r0
 80199f8:	4770      	bx	lr
 80199fa:	bf00      	nop
 80199fc:	2000f38e 	.word	0x2000f38e

08019a00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019a00:	2bff      	cmp	r3, #255	; 0xff
 8019a02:	d050      	beq.n	8019aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019a04:	2a0b      	cmp	r2, #11
 8019a06:	d04a      	beq.n	8019a9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019a08:	d80e      	bhi.n	8019a28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8019a0a:	2a03      	cmp	r2, #3
 8019a0c:	d03f      	beq.n	8019a8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019a0e:	d804      	bhi.n	8019a1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a10:	2a01      	cmp	r2, #1
 8019a12:	d03e      	beq.n	8019a92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019a14:	d93f      	bls.n	8019a96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019a16:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019a18:	4770      	bx	lr
 8019a1a:	2a09      	cmp	r2, #9
 8019a1c:	d03f      	beq.n	8019a9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019a1e:	d83c      	bhi.n	8019a9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019a20:	2a08      	cmp	r2, #8
 8019a22:	d03a      	beq.n	8019a9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019a24:	2000      	movs	r0, #0
 8019a26:	4770      	bx	lr
 8019a28:	2a2f      	cmp	r2, #47	; 0x2f
 8019a2a:	d024      	beq.n	8019a76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019a2c:	d80d      	bhi.n	8019a4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019a2e:	2a2d      	cmp	r2, #45	; 0x2d
 8019a30:	d014      	beq.n	8019a5c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019a32:	d826      	bhi.n	8019a82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019a34:	2a2c      	cmp	r2, #44	; 0x2c
 8019a36:	d1f5      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a38:	684b      	ldr	r3, [r1, #4]
 8019a3a:	781b      	ldrb	r3, [r3, #0]
 8019a3c:	2b01      	cmp	r3, #1
 8019a3e:	d018      	beq.n	8019a72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019a40:	d323      	bcc.n	8019a8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019a42:	2b02      	cmp	r3, #2
 8019a44:	d1ee      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a46:	6880      	ldr	r0, [r0, #8]
 8019a48:	4770      	bx	lr
 8019a4a:	2a31      	cmp	r2, #49	; 0x31
 8019a4c:	d004      	beq.n	8019a58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8019a4e:	d328      	bcc.n	8019aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a50:	2a32      	cmp	r2, #50	; 0x32
 8019a52:	d026      	beq.n	8019aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a54:	2a33      	cmp	r2, #51	; 0x33
 8019a56:	d1e5      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a58:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8019a5a:	4770      	bx	lr
 8019a5c:	684b      	ldr	r3, [r1, #4]
 8019a5e:	781b      	ldrb	r3, [r3, #0]
 8019a60:	2b01      	cmp	r3, #1
 8019a62:	d004      	beq.n	8019a6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a64:	d30b      	bcc.n	8019a7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019a66:	2b02      	cmp	r3, #2
 8019a68:	d1dc      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a6a:	6900      	ldr	r0, [r0, #16]
 8019a6c:	4770      	bx	lr
 8019a6e:	6a00      	ldr	r0, [r0, #32]
 8019a70:	4770      	bx	lr
 8019a72:	6980      	ldr	r0, [r0, #24]
 8019a74:	4770      	bx	lr
 8019a76:	684b      	ldr	r3, [r1, #4]
 8019a78:	781b      	ldrb	r3, [r3, #0]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d1d2      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a7e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019a80:	4770      	bx	lr
 8019a82:	684b      	ldr	r3, [r1, #4]
 8019a84:	781b      	ldrb	r3, [r3, #0]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d1cc      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019a8c:	4770      	bx	lr
 8019a8e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019a90:	4770      	bx	lr
 8019a92:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019a94:	4770      	bx	lr
 8019a96:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019a98:	4770      	bx	lr
 8019a9a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019a9c:	4770      	bx	lr
 8019a9e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019aa0:	4770      	bx	lr
 8019aa2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019aa4:	4770      	bx	lr
 8019aa6:	2a0b      	cmp	r2, #11
 8019aa8:	d049      	beq.n	8019b3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019aaa:	d80e      	bhi.n	8019aca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019aac:	2a03      	cmp	r2, #3
 8019aae:	d040      	beq.n	8019b32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019ab0:	d804      	bhi.n	8019abc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019ab2:	2a01      	cmp	r2, #1
 8019ab4:	d03f      	beq.n	8019b36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019ab6:	d940      	bls.n	8019b3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019ab8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019aba:	4770      	bx	lr
 8019abc:	2a09      	cmp	r2, #9
 8019abe:	d03e      	beq.n	8019b3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019ac0:	d801      	bhi.n	8019ac6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019ac2:	2a08      	cmp	r2, #8
 8019ac4:	d1ae      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ac6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019ac8:	4770      	bx	lr
 8019aca:	2a2f      	cmp	r2, #47	; 0x2f
 8019acc:	d024      	beq.n	8019b18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019ace:	d80d      	bhi.n	8019aec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019ad0:	2a2d      	cmp	r2, #45	; 0x2d
 8019ad2:	d014      	beq.n	8019afe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019ad4:	d826      	bhi.n	8019b24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8019ad6:	2a2c      	cmp	r2, #44	; 0x2c
 8019ad8:	d1a4      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ada:	684b      	ldr	r3, [r1, #4]
 8019adc:	781b      	ldrb	r3, [r3, #0]
 8019ade:	2b01      	cmp	r3, #1
 8019ae0:	d018      	beq.n	8019b14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019ae2:	d324      	bcc.n	8019b2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019ae4:	2b02      	cmp	r3, #2
 8019ae6:	d19d      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ae8:	68c0      	ldr	r0, [r0, #12]
 8019aea:	4770      	bx	lr
 8019aec:	2a31      	cmp	r2, #49	; 0x31
 8019aee:	d004      	beq.n	8019afa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019af0:	d327      	bcc.n	8019b42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019af2:	2a32      	cmp	r2, #50	; 0x32
 8019af4:	d025      	beq.n	8019b42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019af6:	2a33      	cmp	r2, #51	; 0x33
 8019af8:	d194      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019afa:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019afc:	4770      	bx	lr
 8019afe:	684b      	ldr	r3, [r1, #4]
 8019b00:	781b      	ldrb	r3, [r3, #0]
 8019b02:	2b01      	cmp	r3, #1
 8019b04:	d004      	beq.n	8019b10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019b06:	d30b      	bcc.n	8019b20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019b08:	2b02      	cmp	r3, #2
 8019b0a:	d18b      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b0c:	6940      	ldr	r0, [r0, #20]
 8019b0e:	4770      	bx	lr
 8019b10:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019b12:	4770      	bx	lr
 8019b14:	69c0      	ldr	r0, [r0, #28]
 8019b16:	4770      	bx	lr
 8019b18:	684b      	ldr	r3, [r1, #4]
 8019b1a:	781b      	ldrb	r3, [r3, #0]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d181      	bne.n	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b20:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019b22:	4770      	bx	lr
 8019b24:	684b      	ldr	r3, [r1, #4]
 8019b26:	781b      	ldrb	r3, [r3, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	f47f af7b 	bne.w	8019a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019b30:	4770      	bx	lr
 8019b32:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019b34:	4770      	bx	lr
 8019b36:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019b38:	4770      	bx	lr
 8019b3a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019b3c:	4770      	bx	lr
 8019b3e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019b40:	4770      	bx	lr
 8019b42:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019b44:	4770      	bx	lr

08019b46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b4a:	b087      	sub	sp, #28
 8019b4c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019b4e:	9101      	str	r1, [sp, #4]
 8019b50:	9205      	str	r2, [sp, #20]
 8019b52:	6841      	ldr	r1, [r0, #4]
 8019b54:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019b58:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019b5c:	9202      	str	r2, [sp, #8]
 8019b5e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019b62:	fb01 2404 	mla	r4, r1, r4, r2
 8019b66:	6802      	ldr	r2, [r0, #0]
 8019b68:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019b6c:	f8de 2000 	ldr.w	r2, [lr]
 8019b70:	9203      	str	r2, [sp, #12]
 8019b72:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019b76:	3204      	adds	r2, #4
 8019b78:	9204      	str	r2, [sp, #16]
 8019b7a:	9a02      	ldr	r2, [sp, #8]
 8019b7c:	43d6      	mvns	r6, r2
 8019b7e:	b2f6      	uxtb	r6, r6
 8019b80:	9a01      	ldr	r2, [sp, #4]
 8019b82:	2a00      	cmp	r2, #0
 8019b84:	dc03      	bgt.n	8019b8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019b86:	9a05      	ldr	r2, [sp, #20]
 8019b88:	2a00      	cmp	r2, #0
 8019b8a:	f340 8129 	ble.w	8019de0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019b8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019b90:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019b94:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019b98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b9a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019b9e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	dd0e      	ble.n	8019bc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019ba6:	1408      	asrs	r0, r1, #16
 8019ba8:	d405      	bmi.n	8019bb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019baa:	4560      	cmp	r0, ip
 8019bac:	da03      	bge.n	8019bb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bae:	1410      	asrs	r0, r2, #16
 8019bb0:	d401      	bmi.n	8019bb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bb2:	42b8      	cmp	r0, r7
 8019bb4:	db07      	blt.n	8019bc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019bb6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019bb8:	3b01      	subs	r3, #1
 8019bba:	4401      	add	r1, r0
 8019bbc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019bbe:	3402      	adds	r4, #2
 8019bc0:	4402      	add	r2, r0
 8019bc2:	e7ee      	b.n	8019ba2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019bc4:	d071      	beq.n	8019caa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019bc6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019bc8:	1e58      	subs	r0, r3, #1
 8019bca:	fb05 1500 	mla	r5, r5, r0, r1
 8019bce:	142d      	asrs	r5, r5, #16
 8019bd0:	d45f      	bmi.n	8019c92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bd2:	4565      	cmp	r5, ip
 8019bd4:	da5d      	bge.n	8019c92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bd6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019bd8:	fb05 2000 	mla	r0, r5, r0, r2
 8019bdc:	1400      	asrs	r0, r0, #16
 8019bde:	d458      	bmi.n	8019c92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019be0:	42b8      	cmp	r0, r7
 8019be2:	da56      	bge.n	8019c92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019be4:	4699      	mov	r9, r3
 8019be6:	46a2      	mov	sl, r4
 8019be8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8019bec:	f1b9 0f00 	cmp.w	r9, #0
 8019bf0:	dd57      	ble.n	8019ca2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019bf2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019bf6:	9803      	ldr	r0, [sp, #12]
 8019bf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019bfc:	fb07 000c 	mla	r0, r7, ip, r0
 8019c00:	140d      	asrs	r5, r1, #16
 8019c02:	5d40      	ldrb	r0, [r0, r5]
 8019c04:	9d04      	ldr	r5, [sp, #16]
 8019c06:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c0a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019c0e:	f8ba 5000 	ldrh.w	r5, [sl]
 8019c12:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019c16:	122f      	asrs	r7, r5, #8
 8019c18:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019c1c:	fb17 f706 	smulbb	r7, r7, r6
 8019c20:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019c24:	00ed      	lsls	r5, r5, #3
 8019c26:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019c2a:	b2ed      	uxtb	r5, r5
 8019c2c:	fb18 f806 	smulbb	r8, r8, r6
 8019c30:	fb15 f506 	smulbb	r5, r5, r6
 8019c34:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019c38:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019c3c:	10c7      	asrs	r7, r0, #3
 8019c3e:	00c0      	lsls	r0, r0, #3
 8019c40:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019c44:	b2c0      	uxtb	r0, r0
 8019c46:	fb07 870b 	mla	r7, r7, fp, r8
 8019c4a:	fb00 500b 	mla	r0, r0, fp, r5
 8019c4e:	fa1f fc8c 	uxth.w	ip, ip
 8019c52:	b280      	uxth	r0, r0
 8019c54:	b2bf      	uxth	r7, r7
 8019c56:	f10c 0501 	add.w	r5, ip, #1
 8019c5a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019c5e:	f107 0801 	add.w	r8, r7, #1
 8019c62:	1c45      	adds	r5, r0, #1
 8019c64:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019c68:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019c6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c6e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019c72:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019c76:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019c7a:	ea45 0c0c 	orr.w	ip, r5, ip
 8019c7e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019c82:	4401      	add	r1, r0
 8019c84:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019c86:	ea4c 0c08 	orr.w	ip, ip, r8
 8019c8a:	f82a cb02 	strh.w	ip, [sl], #2
 8019c8e:	4402      	add	r2, r0
 8019c90:	e7ac      	b.n	8019bec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019c92:	f04f 0800 	mov.w	r8, #0
 8019c96:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8019c9a:	eb03 0008 	add.w	r0, r3, r8
 8019c9e:	2800      	cmp	r0, #0
 8019ca0:	dc41      	bgt.n	8019d26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019ca2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ca6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019caa:	9b01      	ldr	r3, [sp, #4]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	f340 8097 	ble.w	8019de0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019cb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019cc2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019cc6:	eef0 6a62 	vmov.f32	s13, s5
 8019cca:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cce:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019cd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019cd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019cde:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019ce2:	eef0 6a43 	vmov.f32	s13, s6
 8019ce6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019cea:	ee12 2a90 	vmov	r2, s5
 8019cee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019cf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8019cfc:	ee13 2a10 	vmov	r2, s6
 8019d00:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d04:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019d08:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d0c:	9314      	str	r3, [sp, #80]	; 0x50
 8019d0e:	9b01      	ldr	r3, [sp, #4]
 8019d10:	9a05      	ldr	r2, [sp, #20]
 8019d12:	3b01      	subs	r3, #1
 8019d14:	9301      	str	r3, [sp, #4]
 8019d16:	eeb0 3a67 	vmov.f32	s6, s15
 8019d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d1c:	eef0 2a47 	vmov.f32	s5, s14
 8019d20:	bf08      	it	eq
 8019d22:	4613      	moveq	r3, r2
 8019d24:	e72c      	b.n	8019b80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019d26:	140f      	asrs	r7, r1, #16
 8019d28:	d453      	bmi.n	8019dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d2a:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019d2e:	42bd      	cmp	r5, r7
 8019d30:	dd4f      	ble.n	8019dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d32:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019d36:	d44c      	bmi.n	8019dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d38:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019d3c:	4560      	cmp	r0, ip
 8019d3e:	dd48      	ble.n	8019dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d40:	9803      	ldr	r0, [sp, #12]
 8019d42:	b22d      	sxth	r5, r5
 8019d44:	fb0c 0505 	mla	r5, ip, r5, r0
 8019d48:	5de8      	ldrb	r0, [r5, r7]
 8019d4a:	9d04      	ldr	r5, [sp, #16]
 8019d4c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019d50:	f06f 0501 	mvn.w	r5, #1
 8019d54:	fb05 fb08 	mul.w	fp, r5, r8
 8019d58:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019d5c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019d60:	122f      	asrs	r7, r5, #8
 8019d62:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019d66:	fb17 f706 	smulbb	r7, r7, r6
 8019d6a:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019d6e:	00ed      	lsls	r5, r5, #3
 8019d70:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019d74:	b2ed      	uxtb	r5, r5
 8019d76:	fb19 f906 	smulbb	r9, r9, r6
 8019d7a:	fb15 f506 	smulbb	r5, r5, r6
 8019d7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019d82:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019d86:	10c7      	asrs	r7, r0, #3
 8019d88:	00c0      	lsls	r0, r0, #3
 8019d8a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019d8e:	b2c0      	uxtb	r0, r0
 8019d90:	fb07 970a 	mla	r7, r7, sl, r9
 8019d94:	fb00 500a 	mla	r0, r0, sl, r5
 8019d98:	fa1f fc8c 	uxth.w	ip, ip
 8019d9c:	b2bf      	uxth	r7, r7
 8019d9e:	b280      	uxth	r0, r0
 8019da0:	f10c 0501 	add.w	r5, ip, #1
 8019da4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019da8:	f107 0901 	add.w	r9, r7, #1
 8019dac:	1c45      	adds	r5, r0, #1
 8019dae:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019db2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019db6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019dba:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019dbe:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019dc2:	ea45 0c0c 	orr.w	ip, r5, ip
 8019dc6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019dca:	ea4c 0c09 	orr.w	ip, ip, r9
 8019dce:	f824 c00b 	strh.w	ip, [r4, fp]
 8019dd2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019dd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8019dd8:	4401      	add	r1, r0
 8019dda:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019ddc:	4402      	add	r2, r0
 8019dde:	e75c      	b.n	8019c9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019de0:	b007      	add	sp, #28
 8019de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019de6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dee:	b085      	sub	sp, #20
 8019df0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019df2:	4693      	mov	fp, r2
 8019df4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019df8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019dfc:	6870      	ldr	r0, [r6, #4]
 8019dfe:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019e00:	fb00 2404 	mla	r4, r0, r4, r2
 8019e04:	6832      	ldr	r2, [r6, #0]
 8019e06:	9100      	str	r1, [sp, #0]
 8019e08:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019e0c:	682a      	ldr	r2, [r5, #0]
 8019e0e:	9201      	str	r2, [sp, #4]
 8019e10:	686a      	ldr	r2, [r5, #4]
 8019e12:	3204      	adds	r2, #4
 8019e14:	9202      	str	r2, [sp, #8]
 8019e16:	9a00      	ldr	r2, [sp, #0]
 8019e18:	2a00      	cmp	r2, #0
 8019e1a:	dc03      	bgt.n	8019e24 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019e1c:	f1bb 0f00 	cmp.w	fp, #0
 8019e20:	f340 80a0 	ble.w	8019f64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019e24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e26:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019e2a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e30:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019e34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	dd0c      	ble.n	8019e56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019e3c:	1406      	asrs	r6, r0, #16
 8019e3e:	d405      	bmi.n	8019e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e40:	454e      	cmp	r6, r9
 8019e42:	da03      	bge.n	8019e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e44:	1416      	asrs	r6, r2, #16
 8019e46:	d401      	bmi.n	8019e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e48:	4546      	cmp	r6, r8
 8019e4a:	db05      	blt.n	8019e58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019e4c:	4470      	add	r0, lr
 8019e4e:	4462      	add	r2, ip
 8019e50:	3b01      	subs	r3, #1
 8019e52:	3402      	adds	r4, #2
 8019e54:	e7f0      	b.n	8019e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019e56:	d00f      	beq.n	8019e78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019e58:	1e5e      	subs	r6, r3, #1
 8019e5a:	fb0e 0706 	mla	r7, lr, r6, r0
 8019e5e:	143f      	asrs	r7, r7, #16
 8019e60:	d541      	bpl.n	8019ee6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8019e62:	4698      	mov	r8, r3
 8019e64:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019e68:	9603      	str	r6, [sp, #12]
 8019e6a:	f1b8 0f00 	cmp.w	r8, #0
 8019e6e:	dc59      	bgt.n	8019f24 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019e70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019e78:	9b00      	ldr	r3, [sp, #0]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	dd72      	ble.n	8019f64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019e7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e8a:	eeb0 6a62 	vmov.f32	s12, s5
 8019e8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019ea2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019ea6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019eaa:	eeb0 6a43 	vmov.f32	s12, s6
 8019eae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019eb2:	ee12 2a90 	vmov	r2, s5
 8019eb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ebc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ec0:	fb92 fef3 	sdiv	lr, r2, r3
 8019ec4:	ee13 2a10 	vmov	r2, s6
 8019ec8:	fb92 fcf3 	sdiv	ip, r2, r3
 8019ecc:	9b00      	ldr	r3, [sp, #0]
 8019ece:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019ed2:	3b01      	subs	r3, #1
 8019ed4:	9300      	str	r3, [sp, #0]
 8019ed6:	eeb0 3a67 	vmov.f32	s6, s15
 8019eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019edc:	eef0 2a47 	vmov.f32	s5, s14
 8019ee0:	bf08      	it	eq
 8019ee2:	465b      	moveq	r3, fp
 8019ee4:	e797      	b.n	8019e16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019ee6:	454f      	cmp	r7, r9
 8019ee8:	dabb      	bge.n	8019e62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019eea:	fb0c 2606 	mla	r6, ip, r6, r2
 8019eee:	1436      	asrs	r6, r6, #16
 8019ef0:	d4b7      	bmi.n	8019e62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019ef2:	4546      	cmp	r6, r8
 8019ef4:	dab5      	bge.n	8019e62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019ef6:	461e      	mov	r6, r3
 8019ef8:	46a0      	mov	r8, r4
 8019efa:	2e00      	cmp	r6, #0
 8019efc:	ddb8      	ble.n	8019e70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019efe:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019f02:	9901      	ldr	r1, [sp, #4]
 8019f04:	1417      	asrs	r7, r2, #16
 8019f06:	fb0a 1707 	mla	r7, sl, r7, r1
 8019f0a:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019f0e:	f817 7009 	ldrb.w	r7, [r7, r9]
 8019f12:	9902      	ldr	r1, [sp, #8]
 8019f14:	4470      	add	r0, lr
 8019f16:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019f1a:	4462      	add	r2, ip
 8019f1c:	f828 7b02 	strh.w	r7, [r8], #2
 8019f20:	3e01      	subs	r6, #1
 8019f22:	e7ea      	b.n	8019efa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019f24:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019f28:	d417      	bmi.n	8019f5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f2a:	68ae      	ldr	r6, [r5, #8]
 8019f2c:	454e      	cmp	r6, r9
 8019f2e:	dd14      	ble.n	8019f5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f30:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019f34:	d411      	bmi.n	8019f5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f36:	68ef      	ldr	r7, [r5, #12]
 8019f38:	4557      	cmp	r7, sl
 8019f3a:	dd0e      	ble.n	8019f5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f3c:	f06f 0101 	mvn.w	r1, #1
 8019f40:	9f01      	ldr	r7, [sp, #4]
 8019f42:	b236      	sxth	r6, r6
 8019f44:	fb0a 7606 	mla	r6, sl, r6, r7
 8019f48:	9f02      	ldr	r7, [sp, #8]
 8019f4a:	f816 6009 	ldrb.w	r6, [r6, r9]
 8019f4e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8019f52:	fb01 f608 	mul.w	r6, r1, r8
 8019f56:	9903      	ldr	r1, [sp, #12]
 8019f58:	538f      	strh	r7, [r1, r6]
 8019f5a:	4470      	add	r0, lr
 8019f5c:	4462      	add	r2, ip
 8019f5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f62:	e782      	b.n	8019e6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019f64:	b005      	add	sp, #20
 8019f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f6e:	b087      	sub	sp, #28
 8019f70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f72:	9102      	str	r1, [sp, #8]
 8019f74:	9205      	str	r2, [sp, #20]
 8019f76:	6861      	ldr	r1, [r4, #4]
 8019f78:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019f7c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019f80:	9203      	str	r2, [sp, #12]
 8019f82:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019f86:	fb01 2000 	mla	r0, r1, r0, r2
 8019f8a:	6822      	ldr	r2, [r4, #0]
 8019f8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019f90:	9200      	str	r2, [sp, #0]
 8019f92:	f8dc 2000 	ldr.w	r2, [ip]
 8019f96:	9204      	str	r2, [sp, #16]
 8019f98:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019f9c:	3204      	adds	r2, #4
 8019f9e:	9201      	str	r2, [sp, #4]
 8019fa0:	9a03      	ldr	r2, [sp, #12]
 8019fa2:	43d5      	mvns	r5, r2
 8019fa4:	b2ed      	uxtb	r5, r5
 8019fa6:	9a02      	ldr	r2, [sp, #8]
 8019fa8:	2a00      	cmp	r2, #0
 8019faa:	dc03      	bgt.n	8019fb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019fac:	9a05      	ldr	r2, [sp, #20]
 8019fae:	2a00      	cmp	r2, #0
 8019fb0:	f340 812c 	ble.w	801a20c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019fb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019fb6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019fba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019fbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019fc0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019fc4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	dd10      	ble.n	8019fee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019fcc:	140c      	asrs	r4, r1, #16
 8019fce:	d405      	bmi.n	8019fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fd0:	4574      	cmp	r4, lr
 8019fd2:	da03      	bge.n	8019fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fd4:	1414      	asrs	r4, r2, #16
 8019fd6:	d401      	bmi.n	8019fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fd8:	42bc      	cmp	r4, r7
 8019fda:	db09      	blt.n	8019ff0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019fdc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019fde:	9800      	ldr	r0, [sp, #0]
 8019fe0:	4421      	add	r1, r4
 8019fe2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019fe4:	3002      	adds	r0, #2
 8019fe6:	4422      	add	r2, r4
 8019fe8:	3b01      	subs	r3, #1
 8019fea:	9000      	str	r0, [sp, #0]
 8019fec:	e7ec      	b.n	8019fc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019fee:	d071      	beq.n	801a0d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019ff0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019ff2:	1e5c      	subs	r4, r3, #1
 8019ff4:	fb06 1604 	mla	r6, r6, r4, r1
 8019ff8:	1436      	asrs	r6, r6, #16
 8019ffa:	d45d      	bmi.n	801a0b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019ffc:	4576      	cmp	r6, lr
 8019ffe:	da5b      	bge.n	801a0b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a000:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a002:	fb06 2404 	mla	r4, r6, r4, r2
 801a006:	1424      	asrs	r4, r4, #16
 801a008:	d456      	bmi.n	801a0b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a00a:	42bc      	cmp	r4, r7
 801a00c:	da54      	bge.n	801a0b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a00e:	4698      	mov	r8, r3
 801a010:	f8dd 9000 	ldr.w	r9, [sp]
 801a014:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a018:	f1b8 0f00 	cmp.w	r8, #0
 801a01c:	dd54      	ble.n	801a0c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a01e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a022:	9804      	ldr	r0, [sp, #16]
 801a024:	1414      	asrs	r4, r2, #16
 801a026:	fb07 0404 	mla	r4, r7, r4, r0
 801a02a:	140e      	asrs	r6, r1, #16
 801a02c:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a030:	9801      	ldr	r0, [sp, #4]
 801a032:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a036:	eb00 0b0e 	add.w	fp, r0, lr
 801a03a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a03e:	f8b9 4000 	ldrh.w	r4, [r9]
 801a042:	fb16 f60a 	smulbb	r6, r6, sl
 801a046:	1227      	asrs	r7, r4, #8
 801a048:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a04c:	fb07 6705 	mla	r7, r7, r5, r6
 801a050:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a054:	10e6      	asrs	r6, r4, #3
 801a056:	00e4      	lsls	r4, r4, #3
 801a058:	b2e4      	uxtb	r4, r4
 801a05a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a05e:	fb14 f405 	smulbb	r4, r4, r5
 801a062:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a066:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a06a:	fb06 b605 	mla	r6, r6, r5, fp
 801a06e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a072:	b2bf      	uxth	r7, r7
 801a074:	b2b6      	uxth	r6, r6
 801a076:	fa1f fe8e 	uxth.w	lr, lr
 801a07a:	1c7c      	adds	r4, r7, #1
 801a07c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a080:	f106 0b01 	add.w	fp, r6, #1
 801a084:	f10e 0401 	add.w	r4, lr, #1
 801a088:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a08a:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a08e:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a092:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a096:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a09a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a09e:	4327      	orrs	r7, r4
 801a0a0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a0a4:	4401      	add	r1, r0
 801a0a6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a0a8:	ea47 070b 	orr.w	r7, r7, fp
 801a0ac:	f829 7b02 	strh.w	r7, [r9], #2
 801a0b0:	4402      	add	r2, r0
 801a0b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801a0b6:	e7af      	b.n	801a018 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a0b8:	f04f 0e00 	mov.w	lr, #0
 801a0bc:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a0c0:	eb03 040e 	add.w	r4, r3, lr
 801a0c4:	2c00      	cmp	r4, #0
 801a0c6:	dc43      	bgt.n	801a150 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a0c8:	9a00      	ldr	r2, [sp, #0]
 801a0ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0ce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a0d2:	9300      	str	r3, [sp, #0]
 801a0d4:	9b02      	ldr	r3, [sp, #8]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	f340 8098 	ble.w	801a20c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a0dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a0e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a0e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a0e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a0ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a0f0:	eef0 6a62 	vmov.f32	s13, s5
 801a0f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a0f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a0fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a100:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a104:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a108:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a10c:	eef0 6a43 	vmov.f32	s13, s6
 801a110:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a114:	ee12 2a90 	vmov	r2, s5
 801a118:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a11e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a122:	fb92 f3f3 	sdiv	r3, r2, r3
 801a126:	ee13 2a10 	vmov	r2, s6
 801a12a:	9313      	str	r3, [sp, #76]	; 0x4c
 801a12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a12e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a132:	fb92 f3f3 	sdiv	r3, r2, r3
 801a136:	9314      	str	r3, [sp, #80]	; 0x50
 801a138:	9b02      	ldr	r3, [sp, #8]
 801a13a:	9a05      	ldr	r2, [sp, #20]
 801a13c:	3b01      	subs	r3, #1
 801a13e:	9302      	str	r3, [sp, #8]
 801a140:	eeb0 3a67 	vmov.f32	s6, s15
 801a144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a146:	eef0 2a47 	vmov.f32	s5, s14
 801a14a:	bf08      	it	eq
 801a14c:	4613      	moveq	r3, r2
 801a14e:	e72a      	b.n	8019fa6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a150:	140f      	asrs	r7, r1, #16
 801a152:	d454      	bmi.n	801a1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a154:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a158:	42be      	cmp	r6, r7
 801a15a:	dd50      	ble.n	801a1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a15c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a160:	d44d      	bmi.n	801a1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a162:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a166:	4544      	cmp	r4, r8
 801a168:	dd49      	ble.n	801a1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a16a:	f06f 0001 	mvn.w	r0, #1
 801a16e:	9c04      	ldr	r4, [sp, #16]
 801a170:	b236      	sxth	r6, r6
 801a172:	fb08 4606 	mla	r6, r8, r6, r4
 801a176:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a17a:	9c01      	ldr	r4, [sp, #4]
 801a17c:	fb00 fa0e 	mul.w	sl, r0, lr
 801a180:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a184:	eb04 0b08 	add.w	fp, r4, r8
 801a188:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a18c:	9800      	ldr	r0, [sp, #0]
 801a18e:	fb16 f609 	smulbb	r6, r6, r9
 801a192:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a196:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a19a:	1227      	asrs	r7, r4, #8
 801a19c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a1a0:	fb07 6705 	mla	r7, r7, r5, r6
 801a1a4:	10e6      	asrs	r6, r4, #3
 801a1a6:	00e4      	lsls	r4, r4, #3
 801a1a8:	b2e4      	uxtb	r4, r4
 801a1aa:	fb1b fb09 	smulbb	fp, fp, r9
 801a1ae:	9801      	ldr	r0, [sp, #4]
 801a1b0:	fb14 f405 	smulbb	r4, r4, r5
 801a1b4:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a1b8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a1bc:	fb06 b605 	mla	r6, r6, r5, fp
 801a1c0:	fb08 4809 	mla	r8, r8, r9, r4
 801a1c4:	b2bf      	uxth	r7, r7
 801a1c6:	b2b6      	uxth	r6, r6
 801a1c8:	fa1f f888 	uxth.w	r8, r8
 801a1cc:	1c7c      	adds	r4, r7, #1
 801a1ce:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a1d2:	f106 0b01 	add.w	fp, r6, #1
 801a1d6:	f108 0401 	add.w	r4, r8, #1
 801a1da:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a1de:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a1e2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a1e6:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a1ea:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a1ee:	4327      	orrs	r7, r4
 801a1f0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a1f4:	9800      	ldr	r0, [sp, #0]
 801a1f6:	ea47 070b 	orr.w	r7, r7, fp
 801a1fa:	f820 700a 	strh.w	r7, [r0, sl]
 801a1fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a200:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a204:	4401      	add	r1, r0
 801a206:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a208:	4402      	add	r2, r0
 801a20a:	e759      	b.n	801a0c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a20c:	b007      	add	sp, #28
 801a20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a214 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a21c:	b085      	sub	sp, #20
 801a21e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a220:	9203      	str	r2, [sp, #12]
 801a222:	6870      	ldr	r0, [r6, #4]
 801a224:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a228:	fb00 2404 	mla	r4, r0, r4, r2
 801a22c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a22e:	6832      	ldr	r2, [r6, #0]
 801a230:	686f      	ldr	r7, [r5, #4]
 801a232:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a236:	682a      	ldr	r2, [r5, #0]
 801a238:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801a23c:	9101      	str	r1, [sp, #4]
 801a23e:	9202      	str	r2, [sp, #8]
 801a240:	3704      	adds	r7, #4
 801a242:	9a01      	ldr	r2, [sp, #4]
 801a244:	2a00      	cmp	r2, #0
 801a246:	dc03      	bgt.n	801a250 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a248:	9a03      	ldr	r2, [sp, #12]
 801a24a:	2a00      	cmp	r2, #0
 801a24c:	f340 80cc 	ble.w	801a3e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a252:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a256:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a25a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a25c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a260:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a264:	2b00      	cmp	r3, #0
 801a266:	dd0d      	ble.n	801a284 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a268:	1406      	asrs	r6, r0, #16
 801a26a:	d405      	bmi.n	801a278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a26c:	454e      	cmp	r6, r9
 801a26e:	da03      	bge.n	801a278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a270:	1416      	asrs	r6, r2, #16
 801a272:	d401      	bmi.n	801a278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a274:	4546      	cmp	r6, r8
 801a276:	db06      	blt.n	801a286 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a278:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a27a:	4460      	add	r0, ip
 801a27c:	4432      	add	r2, r6
 801a27e:	3b01      	subs	r3, #1
 801a280:	3402      	adds	r4, #2
 801a282:	e7ef      	b.n	801a264 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a284:	d00f      	beq.n	801a2a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a286:	1e5e      	subs	r6, r3, #1
 801a288:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a28c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a290:	d543      	bpl.n	801a31a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a292:	4698      	mov	r8, r3
 801a294:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a298:	f1b8 0f00 	cmp.w	r8, #0
 801a29c:	dc71      	bgt.n	801a382 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a29e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a2a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a2a6:	9b01      	ldr	r3, [sp, #4]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	f340 809d 	ble.w	801a3e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a2ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a2ba:	eeb0 6a62 	vmov.f32	s12, s5
 801a2be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a2d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a2d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a2da:	eeb0 6a43 	vmov.f32	s12, s6
 801a2de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a2e2:	ee12 2a90 	vmov	r2, s5
 801a2e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2f0:	fb92 fcf3 	sdiv	ip, r2, r3
 801a2f4:	ee13 2a10 	vmov	r2, s6
 801a2f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2fc:	9312      	str	r3, [sp, #72]	; 0x48
 801a2fe:	9b01      	ldr	r3, [sp, #4]
 801a300:	9a03      	ldr	r2, [sp, #12]
 801a302:	3b01      	subs	r3, #1
 801a304:	9301      	str	r3, [sp, #4]
 801a306:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a30c:	eeb0 3a67 	vmov.f32	s6, s15
 801a310:	bf08      	it	eq
 801a312:	4613      	moveq	r3, r2
 801a314:	eef0 2a47 	vmov.f32	s5, s14
 801a318:	e793      	b.n	801a242 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a31a:	45ce      	cmp	lr, r9
 801a31c:	dab9      	bge.n	801a292 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a31e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a320:	fb01 2606 	mla	r6, r1, r6, r2
 801a324:	1436      	asrs	r6, r6, #16
 801a326:	d4b4      	bmi.n	801a292 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a328:	4546      	cmp	r6, r8
 801a32a:	dab2      	bge.n	801a292 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a32c:	4698      	mov	r8, r3
 801a32e:	46a2      	mov	sl, r4
 801a330:	f1b8 0f00 	cmp.w	r8, #0
 801a334:	ddb3      	ble.n	801a29e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a336:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a33a:	9902      	ldr	r1, [sp, #8]
 801a33c:	1416      	asrs	r6, r2, #16
 801a33e:	fb09 1606 	mla	r6, r9, r6, r1
 801a342:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a346:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a34a:	4929      	ldr	r1, [pc, #164]	; (801a3f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a34c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a350:	eb07 0b0e 	add.w	fp, r7, lr
 801a354:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a358:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a35c:	00f6      	lsls	r6, r6, #3
 801a35e:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a362:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a366:	ea49 0606 	orr.w	r6, r9, r6
 801a36a:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a36e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a370:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a374:	f82a 6b02 	strh.w	r6, [sl], #2
 801a378:	4460      	add	r0, ip
 801a37a:	440a      	add	r2, r1
 801a37c:	f108 38ff 	add.w	r8, r8, #4294967295
 801a380:	e7d6      	b.n	801a330 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a382:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a386:	d429      	bmi.n	801a3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a388:	68ae      	ldr	r6, [r5, #8]
 801a38a:	454e      	cmp	r6, r9
 801a38c:	dd26      	ble.n	801a3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a38e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a392:	d423      	bmi.n	801a3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a394:	68e9      	ldr	r1, [r5, #12]
 801a396:	4559      	cmp	r1, fp
 801a398:	dd20      	ble.n	801a3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a39a:	9902      	ldr	r1, [sp, #8]
 801a39c:	fa0f fe86 	sxth.w	lr, r6
 801a3a0:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a3a4:	f06f 0101 	mvn.w	r1, #1
 801a3a8:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a3ac:	fb01 f908 	mul.w	r9, r1, r8
 801a3b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a3b4:	eb07 060e 	add.w	r6, r7, lr
 801a3b8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a3bc:	7876      	ldrb	r6, [r6, #1]
 801a3be:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a3c2:	00f6      	lsls	r6, r6, #3
 801a3c4:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a3c8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a3cc:	ea4b 0606 	orr.w	r6, fp, r6
 801a3d0:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a3d4:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a3d8:	f82a 6009 	strh.w	r6, [sl, r9]
 801a3dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a3de:	4460      	add	r0, ip
 801a3e0:	440a      	add	r2, r1
 801a3e2:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3e6:	e757      	b.n	801a298 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a3e8:	b005      	add	sp, #20
 801a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ee:	bf00      	nop
 801a3f0:	fffff800 	.word	0xfffff800

0801a3f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a3f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3fc:	b087      	sub	sp, #28
 801a3fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a400:	468b      	mov	fp, r1
 801a402:	9204      	str	r2, [sp, #16]
 801a404:	6841      	ldr	r1, [r0, #4]
 801a406:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a40a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a40e:	9205      	str	r2, [sp, #20]
 801a410:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a414:	fb01 2404 	mla	r4, r1, r4, r2
 801a418:	6802      	ldr	r2, [r0, #0]
 801a41a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a41e:	f8dc 2000 	ldr.w	r2, [ip]
 801a422:	9201      	str	r2, [sp, #4]
 801a424:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a428:	3204      	adds	r2, #4
 801a42a:	9202      	str	r2, [sp, #8]
 801a42c:	f1bb 0f00 	cmp.w	fp, #0
 801a430:	dc03      	bgt.n	801a43a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a432:	9a04      	ldr	r2, [sp, #16]
 801a434:	2a00      	cmp	r2, #0
 801a436:	f340 8138 	ble.w	801a6aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a43a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a43c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a440:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a446:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a44a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a44e:	2b00      	cmp	r3, #0
 801a450:	dd0e      	ble.n	801a470 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a452:	1402      	asrs	r2, r0, #16
 801a454:	d405      	bmi.n	801a462 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a456:	42ba      	cmp	r2, r7
 801a458:	da03      	bge.n	801a462 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a45a:	140a      	asrs	r2, r1, #16
 801a45c:	d401      	bmi.n	801a462 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a45e:	42b2      	cmp	r2, r6
 801a460:	db07      	blt.n	801a472 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a462:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a464:	3b01      	subs	r3, #1
 801a466:	4410      	add	r0, r2
 801a468:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a46a:	3402      	adds	r4, #2
 801a46c:	4411      	add	r1, r2
 801a46e:	e7ee      	b.n	801a44e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a470:	d019      	beq.n	801a4a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a472:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a474:	1e5a      	subs	r2, r3, #1
 801a476:	fb05 0502 	mla	r5, r5, r2, r0
 801a47a:	142d      	asrs	r5, r5, #16
 801a47c:	d409      	bmi.n	801a492 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a47e:	42bd      	cmp	r5, r7
 801a480:	da07      	bge.n	801a492 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a482:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a484:	fb05 1202 	mla	r2, r5, r2, r1
 801a488:	1412      	asrs	r2, r2, #16
 801a48a:	d402      	bmi.n	801a492 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a48c:	42b2      	cmp	r2, r6
 801a48e:	f2c0 80ac 	blt.w	801a5ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a492:	f04f 0e00 	mov.w	lr, #0
 801a496:	eb03 020e 	add.w	r2, r3, lr
 801a49a:	2a00      	cmp	r2, #0
 801a49c:	dc3e      	bgt.n	801a51c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a49e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a4a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a4a6:	f1bb 0f00 	cmp.w	fp, #0
 801a4aa:	f340 80fe 	ble.w	801a6aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a4ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a4b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a4ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4be:	eeb0 6a62 	vmov.f32	s12, s5
 801a4c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a4ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a4ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a4d6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a4da:	eeb0 6a43 	vmov.f32	s12, s6
 801a4de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a4e2:	ee12 2a90 	vmov	r2, s5
 801a4e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a4ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a4ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a4f4:	ee13 2a10 	vmov	r2, s6
 801a4f8:	9313      	str	r3, [sp, #76]	; 0x4c
 801a4fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a4fc:	f1bb 0b01 	subs.w	fp, fp, #1
 801a500:	fb92 f3f3 	sdiv	r3, r2, r3
 801a504:	9a04      	ldr	r2, [sp, #16]
 801a506:	9314      	str	r3, [sp, #80]	; 0x50
 801a508:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a50c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a50e:	eeb0 3a67 	vmov.f32	s6, s15
 801a512:	bf08      	it	eq
 801a514:	4613      	moveq	r3, r2
 801a516:	eef0 2a47 	vmov.f32	s5, s14
 801a51a:	e787      	b.n	801a42c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a51c:	1406      	asrs	r6, r0, #16
 801a51e:	d45d      	bmi.n	801a5dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a520:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a524:	42b5      	cmp	r5, r6
 801a526:	dd59      	ble.n	801a5dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a528:	140f      	asrs	r7, r1, #16
 801a52a:	d457      	bmi.n	801a5dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a52c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a530:	42ba      	cmp	r2, r7
 801a532:	dd53      	ble.n	801a5dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a534:	9a01      	ldr	r2, [sp, #4]
 801a536:	b22d      	sxth	r5, r5
 801a538:	fb07 2505 	mla	r5, r7, r5, r2
 801a53c:	5daa      	ldrb	r2, [r5, r6]
 801a53e:	9d02      	ldr	r5, [sp, #8]
 801a540:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a544:	0e2e      	lsrs	r6, r5, #24
 801a546:	d049      	beq.n	801a5dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a548:	f06f 0201 	mvn.w	r2, #1
 801a54c:	fb02 f20e 	mul.w	r2, r2, lr
 801a550:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a554:	9203      	str	r2, [sp, #12]
 801a556:	9a05      	ldr	r2, [sp, #20]
 801a558:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a55c:	4356      	muls	r6, r2
 801a55e:	1c72      	adds	r2, r6, #1
 801a560:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a564:	1212      	asrs	r2, r2, #8
 801a566:	fa1f f982 	uxth.w	r9, r2
 801a56a:	43d2      	mvns	r2, r2
 801a56c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a570:	fb16 f609 	smulbb	r6, r6, r9
 801a574:	b2ed      	uxtb	r5, r5
 801a576:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a57a:	fb15 f509 	smulbb	r5, r5, r9
 801a57e:	b2d2      	uxtb	r2, r2
 801a580:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a584:	fb07 6702 	mla	r7, r7, r2, r6
 801a588:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a58c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a590:	fb1a fa09 	smulbb	sl, sl, r9
 801a594:	fa5f f888 	uxtb.w	r8, r8
 801a598:	fb08 5502 	mla	r5, r8, r2, r5
 801a59c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a5a0:	fb06 a602 	mla	r6, r6, r2, sl
 801a5a4:	b2bf      	uxth	r7, r7
 801a5a6:	b2ad      	uxth	r5, r5
 801a5a8:	1c7a      	adds	r2, r7, #1
 801a5aa:	f105 0a01 	add.w	sl, r5, #1
 801a5ae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a5b2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a5b6:	b2b6      	uxth	r6, r6
 801a5b8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a5bc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a5c0:	ea4a 0707 	orr.w	r7, sl, r7
 801a5c4:	f106 0a01 	add.w	sl, r6, #1
 801a5c8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a5cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a5d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a5d4:	9a03      	ldr	r2, [sp, #12]
 801a5d6:	ea47 070a 	orr.w	r7, r7, sl
 801a5da:	52a7      	strh	r7, [r4, r2]
 801a5dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5de:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a5e2:	4410      	add	r0, r2
 801a5e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5e6:	4411      	add	r1, r2
 801a5e8:	e755      	b.n	801a496 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a5ea:	f04f 0800 	mov.w	r8, #0
 801a5ee:	eba3 0208 	sub.w	r2, r3, r8
 801a5f2:	2a00      	cmp	r2, #0
 801a5f4:	f77f af53 	ble.w	801a49e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a5f8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801a5fc:	9f01      	ldr	r7, [sp, #4]
 801a5fe:	140a      	asrs	r2, r1, #16
 801a600:	fb06 7202 	mla	r2, r6, r2, r7
 801a604:	1405      	asrs	r5, r0, #16
 801a606:	5d52      	ldrb	r2, [r2, r5]
 801a608:	9d02      	ldr	r5, [sp, #8]
 801a60a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a60e:	0e2e      	lsrs	r6, r5, #24
 801a610:	d044      	beq.n	801a69c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801a612:	9a05      	ldr	r2, [sp, #20]
 801a614:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a618:	4356      	muls	r6, r2
 801a61a:	1c72      	adds	r2, r6, #1
 801a61c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a620:	1212      	asrs	r2, r2, #8
 801a622:	fa1f f982 	uxth.w	r9, r2
 801a626:	43d2      	mvns	r2, r2
 801a628:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a62c:	fb16 f609 	smulbb	r6, r6, r9
 801a630:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a634:	b2ed      	uxtb	r5, r5
 801a636:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a63a:	fb15 f509 	smulbb	r5, r5, r9
 801a63e:	b2d2      	uxtb	r2, r2
 801a640:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a644:	fb07 6702 	mla	r7, r7, r2, r6
 801a648:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a64c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a650:	fb1a fa09 	smulbb	sl, sl, r9
 801a654:	fa5f fe8e 	uxtb.w	lr, lr
 801a658:	fb0e 5502 	mla	r5, lr, r2, r5
 801a65c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a660:	fb06 a602 	mla	r6, r6, r2, sl
 801a664:	b2bf      	uxth	r7, r7
 801a666:	b2ad      	uxth	r5, r5
 801a668:	1c7a      	adds	r2, r7, #1
 801a66a:	f105 0a01 	add.w	sl, r5, #1
 801a66e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a672:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a676:	b2b6      	uxth	r6, r6
 801a678:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a67c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a680:	ea4a 0707 	orr.w	r7, sl, r7
 801a684:	f106 0a01 	add.w	sl, r6, #1
 801a688:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a68c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a690:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a694:	ea47 070a 	orr.w	r7, r7, sl
 801a698:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a69c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a69e:	f108 0801 	add.w	r8, r8, #1
 801a6a2:	4410      	add	r0, r2
 801a6a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a6a6:	4411      	add	r1, r2
 801a6a8:	e7a1      	b.n	801a5ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801a6aa:	b007      	add	sp, #28
 801a6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6b0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a6b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6b8:	b085      	sub	sp, #20
 801a6ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a6bc:	468b      	mov	fp, r1
 801a6be:	6841      	ldr	r1, [r0, #4]
 801a6c0:	9203      	str	r2, [sp, #12]
 801a6c2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a6c6:	fb01 2404 	mla	r4, r1, r4, r2
 801a6ca:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a6ce:	6802      	ldr	r2, [r0, #0]
 801a6d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a6d4:	f8de 2000 	ldr.w	r2, [lr]
 801a6d8:	9200      	str	r2, [sp, #0]
 801a6da:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a6de:	3204      	adds	r2, #4
 801a6e0:	9201      	str	r2, [sp, #4]
 801a6e2:	f1bb 0f00 	cmp.w	fp, #0
 801a6e6:	dc03      	bgt.n	801a6f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a6e8:	9a03      	ldr	r2, [sp, #12]
 801a6ea:	2a00      	cmp	r2, #0
 801a6ec:	f340 8153 	ble.w	801a996 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a6f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6f2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a6f6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a6fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a6fc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a700:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a704:	2b00      	cmp	r3, #0
 801a706:	dd0e      	ble.n	801a726 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a708:	1408      	asrs	r0, r1, #16
 801a70a:	d405      	bmi.n	801a718 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a70c:	42b8      	cmp	r0, r7
 801a70e:	da03      	bge.n	801a718 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a710:	1410      	asrs	r0, r2, #16
 801a712:	d401      	bmi.n	801a718 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a714:	42b0      	cmp	r0, r6
 801a716:	db07      	blt.n	801a728 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a718:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a71a:	3b01      	subs	r3, #1
 801a71c:	4401      	add	r1, r0
 801a71e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a720:	3402      	adds	r4, #2
 801a722:	4402      	add	r2, r0
 801a724:	e7ee      	b.n	801a704 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a726:	d017      	beq.n	801a758 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a728:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a72a:	1e58      	subs	r0, r3, #1
 801a72c:	fb05 1500 	mla	r5, r5, r0, r1
 801a730:	142d      	asrs	r5, r5, #16
 801a732:	d409      	bmi.n	801a748 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a734:	42bd      	cmp	r5, r7
 801a736:	da07      	bge.n	801a748 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a738:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a73a:	fb05 2000 	mla	r0, r5, r0, r2
 801a73e:	1400      	asrs	r0, r0, #16
 801a740:	d402      	bmi.n	801a748 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a742:	42b0      	cmp	r0, r6
 801a744:	f2c0 80bc 	blt.w	801a8c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801a748:	2600      	movs	r6, #0
 801a74a:	1998      	adds	r0, r3, r6
 801a74c:	2800      	cmp	r0, #0
 801a74e:	dc3e      	bgt.n	801a7ce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a750:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a754:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a758:	f1bb 0f00 	cmp.w	fp, #0
 801a75c:	f340 811b 	ble.w	801a996 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a760:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a764:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a768:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a76c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a770:	eeb0 6a62 	vmov.f32	s12, s5
 801a774:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a778:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a77c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a780:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a784:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a788:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a78c:	eeb0 6a43 	vmov.f32	s12, s6
 801a790:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a794:	ee12 2a90 	vmov	r2, s5
 801a798:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a79c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a79e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7a6:	ee13 2a10 	vmov	r2, s6
 801a7aa:	9311      	str	r3, [sp, #68]	; 0x44
 801a7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7ae:	f1bb 0b01 	subs.w	fp, fp, #1
 801a7b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7b6:	9a03      	ldr	r2, [sp, #12]
 801a7b8:	9312      	str	r3, [sp, #72]	; 0x48
 801a7ba:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a7be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7c0:	eeb0 3a67 	vmov.f32	s6, s15
 801a7c4:	bf08      	it	eq
 801a7c6:	4613      	moveq	r3, r2
 801a7c8:	eef0 2a47 	vmov.f32	s5, s14
 801a7cc:	e789      	b.n	801a6e2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a7ce:	140f      	asrs	r7, r1, #16
 801a7d0:	d426      	bmi.n	801a820 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7d2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a7d6:	42bd      	cmp	r5, r7
 801a7d8:	dd22      	ble.n	801a820 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7da:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a7de:	d41f      	bmi.n	801a820 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7e0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a7e4:	4560      	cmp	r0, ip
 801a7e6:	dd1b      	ble.n	801a820 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7e8:	9800      	ldr	r0, [sp, #0]
 801a7ea:	b22d      	sxth	r5, r5
 801a7ec:	fb0c 0505 	mla	r5, ip, r5, r0
 801a7f0:	5de8      	ldrb	r0, [r5, r7]
 801a7f2:	9d01      	ldr	r5, [sp, #4]
 801a7f4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a7f8:	0e07      	lsrs	r7, r0, #24
 801a7fa:	2fff      	cmp	r7, #255	; 0xff
 801a7fc:	d116      	bne.n	801a82c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a7fe:	f06f 0501 	mvn.w	r5, #1
 801a802:	fb05 f706 	mul.w	r7, r5, r6
 801a806:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a80a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a80e:	0945      	lsrs	r5, r0, #5
 801a810:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a814:	ea4c 0505 	orr.w	r5, ip, r5
 801a818:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a81c:	4305      	orrs	r5, r0
 801a81e:	53e5      	strh	r5, [r4, r7]
 801a820:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a822:	3e01      	subs	r6, #1
 801a824:	4401      	add	r1, r0
 801a826:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a828:	4402      	add	r2, r0
 801a82a:	e78e      	b.n	801a74a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a82c:	b2fd      	uxtb	r5, r7
 801a82e:	2f00      	cmp	r7, #0
 801a830:	d0f6      	beq.n	801a820 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a832:	f06f 0701 	mvn.w	r7, #1
 801a836:	fa1f f985 	uxth.w	r9, r5
 801a83a:	43ed      	mvns	r5, r5
 801a83c:	4377      	muls	r7, r6
 801a83e:	f834 8007 	ldrh.w	r8, [r4, r7]
 801a842:	9702      	str	r7, [sp, #8]
 801a844:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a848:	fb17 f709 	smulbb	r7, r7, r9
 801a84c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a850:	b2c0      	uxtb	r0, r0
 801a852:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a856:	fb10 f009 	smulbb	r0, r0, r9
 801a85a:	b2ed      	uxtb	r5, r5
 801a85c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a860:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a864:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a868:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a86c:	fb1a fa09 	smulbb	sl, sl, r9
 801a870:	fa5f f888 	uxtb.w	r8, r8
 801a874:	fb08 0005 	mla	r0, r8, r5, r0
 801a878:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a87c:	fb07 a705 	mla	r7, r7, r5, sl
 801a880:	b280      	uxth	r0, r0
 801a882:	fa1f fc8c 	uxth.w	ip, ip
 801a886:	f100 0a01 	add.w	sl, r0, #1
 801a88a:	f10c 0501 	add.w	r5, ip, #1
 801a88e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a892:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a896:	b2bf      	uxth	r7, r7
 801a898:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a89c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a8a0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a8a4:	f107 0a01 	add.w	sl, r7, #1
 801a8a8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a8ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a8b0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a8b4:	9802      	ldr	r0, [sp, #8]
 801a8b6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a8ba:	f824 c000 	strh.w	ip, [r4, r0]
 801a8be:	e7af      	b.n	801a820 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a8c0:	f04f 0800 	mov.w	r8, #0
 801a8c4:	eba3 0008 	sub.w	r0, r3, r8
 801a8c8:	2800      	cmp	r0, #0
 801a8ca:	f77f af41 	ble.w	801a750 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a8ce:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a8d2:	9f00      	ldr	r7, [sp, #0]
 801a8d4:	1410      	asrs	r0, r2, #16
 801a8d6:	fb06 7000 	mla	r0, r6, r0, r7
 801a8da:	140d      	asrs	r5, r1, #16
 801a8dc:	5d40      	ldrb	r0, [r0, r5]
 801a8de:	9d01      	ldr	r5, [sp, #4]
 801a8e0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801a8e4:	0e2e      	lsrs	r6, r5, #24
 801a8e6:	2eff      	cmp	r6, #255	; 0xff
 801a8e8:	d112      	bne.n	801a910 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801a8ea:	482c      	ldr	r0, [pc, #176]	; (801a99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801a8ec:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801a8f0:	0968      	lsrs	r0, r5, #5
 801a8f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a8f6:	4330      	orrs	r0, r6
 801a8f8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a8fc:	4328      	orrs	r0, r5
 801a8fe:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801a902:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a904:	f108 0801 	add.w	r8, r8, #1
 801a908:	4401      	add	r1, r0
 801a90a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a90c:	4402      	add	r2, r0
 801a90e:	e7d9      	b.n	801a8c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a910:	b2f0      	uxtb	r0, r6
 801a912:	2e00      	cmp	r6, #0
 801a914:	d0f5      	beq.n	801a902 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a916:	fa1f f980 	uxth.w	r9, r0
 801a91a:	43c0      	mvns	r0, r0
 801a91c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a920:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a924:	fb16 f609 	smulbb	r6, r6, r9
 801a928:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a92c:	b2ed      	uxtb	r5, r5
 801a92e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a932:	fb15 f509 	smulbb	r5, r5, r9
 801a936:	b2c0      	uxtb	r0, r0
 801a938:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a93c:	fb07 6700 	mla	r7, r7, r0, r6
 801a940:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a944:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a948:	fb1a fa09 	smulbb	sl, sl, r9
 801a94c:	fa5f fc8c 	uxtb.w	ip, ip
 801a950:	fb0c 5500 	mla	r5, ip, r0, r5
 801a954:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a958:	fb06 a600 	mla	r6, r6, r0, sl
 801a95c:	b2bf      	uxth	r7, r7
 801a95e:	b2ad      	uxth	r5, r5
 801a960:	1c78      	adds	r0, r7, #1
 801a962:	f105 0a01 	add.w	sl, r5, #1
 801a966:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801a96a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a96e:	b2b6      	uxth	r6, r6
 801a970:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a974:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a978:	ea4a 0707 	orr.w	r7, sl, r7
 801a97c:	f106 0a01 	add.w	sl, r6, #1
 801a980:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a984:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a988:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a98c:	ea47 070a 	orr.w	r7, r7, sl
 801a990:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a994:	e7b5      	b.n	801a902 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a996:	b005      	add	sp, #20
 801a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a99c:	fffff800 	.word	0xfffff800

0801a9a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a8:	b087      	sub	sp, #28
 801a9aa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a9ac:	468b      	mov	fp, r1
 801a9ae:	9204      	str	r2, [sp, #16]
 801a9b0:	6861      	ldr	r1, [r4, #4]
 801a9b2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a9b6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a9ba:	9205      	str	r2, [sp, #20]
 801a9bc:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a9c0:	fb01 2000 	mla	r0, r1, r0, r2
 801a9c4:	6822      	ldr	r2, [r4, #0]
 801a9c6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a9ca:	f8de 2000 	ldr.w	r2, [lr]
 801a9ce:	9201      	str	r2, [sp, #4]
 801a9d0:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a9d4:	9202      	str	r2, [sp, #8]
 801a9d6:	f1bb 0f00 	cmp.w	fp, #0
 801a9da:	dc03      	bgt.n	801a9e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a9dc:	9a04      	ldr	r2, [sp, #16]
 801a9de:	2a00      	cmp	r2, #0
 801a9e0:	f340 8142 	ble.w	801ac68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a9e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a9e6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a9ea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a9ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9f0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a9f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	dd0e      	ble.n	801aa1a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a9fc:	140c      	asrs	r4, r1, #16
 801a9fe:	d405      	bmi.n	801aa0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa00:	42bc      	cmp	r4, r7
 801aa02:	da03      	bge.n	801aa0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa04:	1414      	asrs	r4, r2, #16
 801aa06:	d401      	bmi.n	801aa0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa08:	42b4      	cmp	r4, r6
 801aa0a:	db07      	blt.n	801aa1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aa0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aa0e:	3b01      	subs	r3, #1
 801aa10:	4421      	add	r1, r4
 801aa12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aa14:	3002      	adds	r0, #2
 801aa16:	4422      	add	r2, r4
 801aa18:	e7ee      	b.n	801a9f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801aa1a:	d019      	beq.n	801aa50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aa1c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801aa1e:	1e5c      	subs	r4, r3, #1
 801aa20:	fb05 1504 	mla	r5, r5, r4, r1
 801aa24:	142d      	asrs	r5, r5, #16
 801aa26:	d409      	bmi.n	801aa3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa28:	42bd      	cmp	r5, r7
 801aa2a:	da07      	bge.n	801aa3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa2c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801aa2e:	fb05 2404 	mla	r4, r5, r4, r2
 801aa32:	1424      	asrs	r4, r4, #16
 801aa34:	d402      	bmi.n	801aa3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa36:	42b4      	cmp	r4, r6
 801aa38:	f2c0 80b1 	blt.w	801ab9e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801aa3c:	f04f 0800 	mov.w	r8, #0
 801aa40:	eb03 0408 	add.w	r4, r3, r8
 801aa44:	2c00      	cmp	r4, #0
 801aa46:	dc3e      	bgt.n	801aac6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801aa48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa4c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aa50:	f1bb 0f00 	cmp.w	fp, #0
 801aa54:	f340 8108 	ble.w	801ac68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801aa58:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa60:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aa64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa68:	eeb0 6a62 	vmov.f32	s12, s5
 801aa6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa70:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa74:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa80:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801aa84:	eeb0 6a43 	vmov.f32	s12, s6
 801aa88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa8c:	ee12 2a90 	vmov	r2, s5
 801aa90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa9e:	ee13 2a10 	vmov	r2, s6
 801aaa2:	9313      	str	r3, [sp, #76]	; 0x4c
 801aaa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aaa6:	f1bb 0b01 	subs.w	fp, fp, #1
 801aaaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801aaae:	9a04      	ldr	r2, [sp, #16]
 801aab0:	9314      	str	r3, [sp, #80]	; 0x50
 801aab2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801aab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aab8:	eeb0 3a67 	vmov.f32	s6, s15
 801aabc:	bf08      	it	eq
 801aabe:	4613      	moveq	r3, r2
 801aac0:	eef0 2a47 	vmov.f32	s5, s14
 801aac4:	e787      	b.n	801a9d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801aac6:	140e      	asrs	r6, r1, #16
 801aac8:	d462      	bmi.n	801ab90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaca:	f8de 5008 	ldr.w	r5, [lr, #8]
 801aace:	42b5      	cmp	r5, r6
 801aad0:	dd5e      	ble.n	801ab90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aad2:	1417      	asrs	r7, r2, #16
 801aad4:	d45c      	bmi.n	801ab90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aad6:	f8de 400c 	ldr.w	r4, [lr, #12]
 801aada:	42bc      	cmp	r4, r7
 801aadc:	dd58      	ble.n	801ab90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aade:	b22d      	sxth	r5, r5
 801aae0:	fb07 6505 	mla	r5, r7, r5, r6
 801aae4:	9c02      	ldr	r4, [sp, #8]
 801aae6:	5d66      	ldrb	r6, [r4, r5]
 801aae8:	2e00      	cmp	r6, #0
 801aaea:	d051      	beq.n	801ab90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaec:	9c01      	ldr	r4, [sp, #4]
 801aaee:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801aaf2:	f06f 0401 	mvn.w	r4, #1
 801aaf6:	fb04 f408 	mul.w	r4, r4, r8
 801aafa:	5b05      	ldrh	r5, [r0, r4]
 801aafc:	9403      	str	r4, [sp, #12]
 801aafe:	9c05      	ldr	r4, [sp, #20]
 801ab00:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ab04:	4366      	muls	r6, r4
 801ab06:	1c74      	adds	r4, r6, #1
 801ab08:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ab0c:	1224      	asrs	r4, r4, #8
 801ab0e:	b2a7      	uxth	r7, r4
 801ab10:	43e4      	mvns	r4, r4
 801ab12:	122e      	asrs	r6, r5, #8
 801ab14:	b2e4      	uxtb	r4, r4
 801ab16:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ab1a:	fb16 f604 	smulbb	r6, r6, r4
 801ab1e:	00ed      	lsls	r5, r5, #3
 801ab20:	b2ed      	uxtb	r5, r5
 801ab22:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801ab26:	fb15 f504 	smulbb	r5, r5, r4
 801ab2a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ab2e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ab32:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ab36:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801ab3a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ab3e:	fb1a fa04 	smulbb	sl, sl, r4
 801ab42:	fa5f f989 	uxtb.w	r9, r9
 801ab46:	fb09 5507 	mla	r5, r9, r7, r5
 801ab4a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ab4e:	fb06 a607 	mla	r6, r6, r7, sl
 801ab52:	fa1f fc8c 	uxth.w	ip, ip
 801ab56:	b2ad      	uxth	r5, r5
 801ab58:	f10c 0401 	add.w	r4, ip, #1
 801ab5c:	f105 0a01 	add.w	sl, r5, #1
 801ab60:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ab64:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ab68:	b2b6      	uxth	r6, r6
 801ab6a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ab6e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ab72:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ab76:	f106 0a01 	add.w	sl, r6, #1
 801ab7a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ab7e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab82:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab86:	9c03      	ldr	r4, [sp, #12]
 801ab88:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ab8c:	f820 c004 	strh.w	ip, [r0, r4]
 801ab90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab92:	f108 38ff 	add.w	r8, r8, #4294967295
 801ab96:	4421      	add	r1, r4
 801ab98:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ab9a:	4422      	add	r2, r4
 801ab9c:	e750      	b.n	801aa40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ab9e:	f04f 0900 	mov.w	r9, #0
 801aba2:	eba3 0409 	sub.w	r4, r3, r9
 801aba6:	2c00      	cmp	r4, #0
 801aba8:	f77f af4e 	ble.w	801aa48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801abac:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801abb0:	140d      	asrs	r5, r1, #16
 801abb2:	1414      	asrs	r4, r2, #16
 801abb4:	fb06 5404 	mla	r4, r6, r4, r5
 801abb8:	9d02      	ldr	r5, [sp, #8]
 801abba:	5d2e      	ldrb	r6, [r5, r4]
 801abbc:	2e00      	cmp	r6, #0
 801abbe:	d04c      	beq.n	801ac5a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801abc0:	9d01      	ldr	r5, [sp, #4]
 801abc2:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801abc6:	9c05      	ldr	r4, [sp, #20]
 801abc8:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801abcc:	4366      	muls	r6, r4
 801abce:	1c74      	adds	r4, r6, #1
 801abd0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801abd4:	1224      	asrs	r4, r4, #8
 801abd6:	b2a7      	uxth	r7, r4
 801abd8:	43e4      	mvns	r4, r4
 801abda:	122e      	asrs	r6, r5, #8
 801abdc:	b2e4      	uxtb	r4, r4
 801abde:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801abe2:	fb16 f604 	smulbb	r6, r6, r4
 801abe6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801abea:	00ed      	lsls	r5, r5, #3
 801abec:	b2ed      	uxtb	r5, r5
 801abee:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801abf2:	fb15 f504 	smulbb	r5, r5, r4
 801abf6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801abfa:	fb0c 6c07 	mla	ip, ip, r7, r6
 801abfe:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ac02:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ac06:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ac0a:	fb1a fa04 	smulbb	sl, sl, r4
 801ac0e:	fa5f f888 	uxtb.w	r8, r8
 801ac12:	fb08 5507 	mla	r5, r8, r7, r5
 801ac16:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ac1a:	fb06 a607 	mla	r6, r6, r7, sl
 801ac1e:	fa1f fc8c 	uxth.w	ip, ip
 801ac22:	b2ad      	uxth	r5, r5
 801ac24:	f10c 0401 	add.w	r4, ip, #1
 801ac28:	f105 0a01 	add.w	sl, r5, #1
 801ac2c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ac30:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ac34:	b2b6      	uxth	r6, r6
 801ac36:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ac3a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ac3e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ac42:	f106 0a01 	add.w	sl, r6, #1
 801ac46:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ac4a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ac4e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ac52:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ac56:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801ac5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac5c:	f109 0901 	add.w	r9, r9, #1
 801ac60:	4421      	add	r1, r4
 801ac62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac64:	4422      	add	r2, r4
 801ac66:	e79c      	b.n	801aba2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ac68:	b007      	add	sp, #28
 801ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac6e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac76:	b085      	sub	sp, #20
 801ac78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac7a:	468b      	mov	fp, r1
 801ac7c:	6861      	ldr	r1, [r4, #4]
 801ac7e:	9203      	str	r2, [sp, #12]
 801ac80:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801ac84:	fb01 2000 	mla	r0, r1, r0, r2
 801ac88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ac8c:	6822      	ldr	r2, [r4, #0]
 801ac8e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ac92:	f8d8 2000 	ldr.w	r2, [r8]
 801ac96:	9200      	str	r2, [sp, #0]
 801ac98:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ac9c:	9201      	str	r2, [sp, #4]
 801ac9e:	f1bb 0f00 	cmp.w	fp, #0
 801aca2:	dc03      	bgt.n	801acac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801aca4:	9a03      	ldr	r2, [sp, #12]
 801aca6:	2a00      	cmp	r2, #0
 801aca8:	f340 8146 	ble.w	801af38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801acac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801acae:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801acb2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801acb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801acb8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801acbc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	dd0e      	ble.n	801ace2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801acc4:	140c      	asrs	r4, r1, #16
 801acc6:	d405      	bmi.n	801acd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801acc8:	42bc      	cmp	r4, r7
 801acca:	da03      	bge.n	801acd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801accc:	1414      	asrs	r4, r2, #16
 801acce:	d401      	bmi.n	801acd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801acd0:	42b4      	cmp	r4, r6
 801acd2:	db07      	blt.n	801ace4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801acd4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acd6:	3b01      	subs	r3, #1
 801acd8:	4421      	add	r1, r4
 801acda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801acdc:	3002      	adds	r0, #2
 801acde:	4422      	add	r2, r4
 801ace0:	e7ee      	b.n	801acc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ace2:	d017      	beq.n	801ad14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ace4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ace6:	1e5c      	subs	r4, r3, #1
 801ace8:	fb05 1504 	mla	r5, r5, r4, r1
 801acec:	142d      	asrs	r5, r5, #16
 801acee:	d409      	bmi.n	801ad04 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801acf0:	42bd      	cmp	r5, r7
 801acf2:	da07      	bge.n	801ad04 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801acf4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801acf6:	fb05 2404 	mla	r4, r5, r4, r2
 801acfa:	1424      	asrs	r4, r4, #16
 801acfc:	d402      	bmi.n	801ad04 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801acfe:	42b4      	cmp	r4, r6
 801ad00:	f2c0 80b3 	blt.w	801ae6a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ad04:	2600      	movs	r6, #0
 801ad06:	199c      	adds	r4, r3, r6
 801ad08:	2c00      	cmp	r4, #0
 801ad0a:	dc3e      	bgt.n	801ad8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ad0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad10:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ad14:	f1bb 0f00 	cmp.w	fp, #0
 801ad18:	f340 810e 	ble.w	801af38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ad1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad24:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad2c:	eeb0 6a62 	vmov.f32	s12, s5
 801ad30:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad34:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad38:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad44:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ad48:	eeb0 6a43 	vmov.f32	s12, s6
 801ad4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad50:	ee12 2a90 	vmov	r2, s5
 801ad54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad62:	ee13 2a10 	vmov	r2, s6
 801ad66:	9311      	str	r3, [sp, #68]	; 0x44
 801ad68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad6a:	f1bb 0b01 	subs.w	fp, fp, #1
 801ad6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad72:	9a03      	ldr	r2, [sp, #12]
 801ad74:	9312      	str	r3, [sp, #72]	; 0x48
 801ad76:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ad7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad7c:	eeb0 3a67 	vmov.f32	s6, s15
 801ad80:	bf08      	it	eq
 801ad82:	4613      	moveq	r3, r2
 801ad84:	eef0 2a47 	vmov.f32	s5, s14
 801ad88:	e789      	b.n	801ac9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ad8a:	140f      	asrs	r7, r1, #16
 801ad8c:	d418      	bmi.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad8e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ad92:	42bd      	cmp	r5, r7
 801ad94:	dd14      	ble.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad96:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ad9a:	d411      	bmi.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad9c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ada0:	4564      	cmp	r4, ip
 801ada2:	dd0d      	ble.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ada4:	b22d      	sxth	r5, r5
 801ada6:	fb0c 7505 	mla	r5, ip, r5, r7
 801adaa:	9c01      	ldr	r4, [sp, #4]
 801adac:	5d64      	ldrb	r4, [r4, r5]
 801adae:	2cff      	cmp	r4, #255	; 0xff
 801adb0:	d10c      	bne.n	801adcc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801adb2:	9c00      	ldr	r4, [sp, #0]
 801adb4:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801adb8:	f06f 0401 	mvn.w	r4, #1
 801adbc:	4374      	muls	r4, r6
 801adbe:	5305      	strh	r5, [r0, r4]
 801adc0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801adc2:	3e01      	subs	r6, #1
 801adc4:	4421      	add	r1, r4
 801adc6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801adc8:	4422      	add	r2, r4
 801adca:	e79c      	b.n	801ad06 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801adcc:	2c00      	cmp	r4, #0
 801adce:	d0f7      	beq.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801add0:	9f00      	ldr	r7, [sp, #0]
 801add2:	fa1f fc84 	uxth.w	ip, r4
 801add6:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801adda:	f06f 0501 	mvn.w	r5, #1
 801adde:	43e4      	mvns	r4, r4
 801ade0:	4375      	muls	r5, r6
 801ade2:	9502      	str	r5, [sp, #8]
 801ade4:	5b45      	ldrh	r5, [r0, r5]
 801ade6:	b2e4      	uxtb	r4, r4
 801ade8:	122f      	asrs	r7, r5, #8
 801adea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801adee:	fb17 f704 	smulbb	r7, r7, r4
 801adf2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801adf6:	00ed      	lsls	r5, r5, #3
 801adf8:	b2ed      	uxtb	r5, r5
 801adfa:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801adfe:	fb15 f504 	smulbb	r5, r5, r4
 801ae02:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ae06:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801ae0a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ae0e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801ae12:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ae16:	fb1a fa04 	smulbb	sl, sl, r4
 801ae1a:	fa5f f989 	uxtb.w	r9, r9
 801ae1e:	fb09 550c 	mla	r5, r9, ip, r5
 801ae22:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ae26:	fb07 a70c 	mla	r7, r7, ip, sl
 801ae2a:	fa1f fe8e 	uxth.w	lr, lr
 801ae2e:	b2ad      	uxth	r5, r5
 801ae30:	f10e 0401 	add.w	r4, lr, #1
 801ae34:	f105 0a01 	add.w	sl, r5, #1
 801ae38:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ae3c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ae40:	b2bf      	uxth	r7, r7
 801ae42:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ae46:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ae4a:	ea4a 0e0e 	orr.w	lr, sl, lr
 801ae4e:	f107 0a01 	add.w	sl, r7, #1
 801ae52:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ae56:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ae5a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ae5e:	9c02      	ldr	r4, [sp, #8]
 801ae60:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ae64:	f820 e004 	strh.w	lr, [r0, r4]
 801ae68:	e7aa      	b.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae6a:	f04f 0900 	mov.w	r9, #0
 801ae6e:	eba3 0409 	sub.w	r4, r3, r9
 801ae72:	2c00      	cmp	r4, #0
 801ae74:	f77f af4a 	ble.w	801ad0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ae78:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ae7c:	1414      	asrs	r4, r2, #16
 801ae7e:	140d      	asrs	r5, r1, #16
 801ae80:	fb06 5504 	mla	r5, r6, r4, r5
 801ae84:	9c01      	ldr	r4, [sp, #4]
 801ae86:	5d64      	ldrb	r4, [r4, r5]
 801ae88:	2cff      	cmp	r4, #255	; 0xff
 801ae8a:	d10b      	bne.n	801aea4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ae8c:	9c00      	ldr	r4, [sp, #0]
 801ae8e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801ae92:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801ae96:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae98:	f109 0901 	add.w	r9, r9, #1
 801ae9c:	4421      	add	r1, r4
 801ae9e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aea0:	4422      	add	r2, r4
 801aea2:	e7e4      	b.n	801ae6e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801aea4:	2c00      	cmp	r4, #0
 801aea6:	d0f6      	beq.n	801ae96 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801aea8:	b2a7      	uxth	r7, r4
 801aeaa:	43e4      	mvns	r4, r4
 801aeac:	9e00      	ldr	r6, [sp, #0]
 801aeae:	b2e4      	uxtb	r4, r4
 801aeb0:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801aeb4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801aeb8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801aebc:	122e      	asrs	r6, r5, #8
 801aebe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801aec2:	fb16 f604 	smulbb	r6, r6, r4
 801aec6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801aeca:	00ed      	lsls	r5, r5, #3
 801aecc:	b2ed      	uxtb	r5, r5
 801aece:	fb15 f504 	smulbb	r5, r5, r4
 801aed2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aed6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801aeda:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801aede:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801aee2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aee6:	fb1a fa04 	smulbb	sl, sl, r4
 801aeea:	fa5f fe8e 	uxtb.w	lr, lr
 801aeee:	fb0e 5507 	mla	r5, lr, r7, r5
 801aef2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aef6:	fb06 a607 	mla	r6, r6, r7, sl
 801aefa:	fa1f fc8c 	uxth.w	ip, ip
 801aefe:	b2ad      	uxth	r5, r5
 801af00:	f10c 0401 	add.w	r4, ip, #1
 801af04:	f105 0a01 	add.w	sl, r5, #1
 801af08:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801af0c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801af10:	b2b6      	uxth	r6, r6
 801af12:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801af16:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801af1a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801af1e:	f106 0a01 	add.w	sl, r6, #1
 801af22:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801af26:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801af2a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801af2e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801af32:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801af36:	e7ae      	b.n	801ae96 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801af38:	b005      	add	sp, #20
 801af3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af3e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801af3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af42:	b085      	sub	sp, #20
 801af44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801af46:	9100      	str	r1, [sp, #0]
 801af48:	9203      	str	r2, [sp, #12]
 801af4a:	6841      	ldr	r1, [r0, #4]
 801af4c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801af50:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801af54:	9201      	str	r2, [sp, #4]
 801af56:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801af5a:	fb01 2404 	mla	r4, r1, r4, r2
 801af5e:	6802      	ldr	r2, [r0, #0]
 801af60:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801af64:	f8de 2000 	ldr.w	r2, [lr]
 801af68:	9202      	str	r2, [sp, #8]
 801af6a:	9a01      	ldr	r2, [sp, #4]
 801af6c:	43d6      	mvns	r6, r2
 801af6e:	b2f6      	uxtb	r6, r6
 801af70:	9a00      	ldr	r2, [sp, #0]
 801af72:	2a00      	cmp	r2, #0
 801af74:	dc03      	bgt.n	801af7e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801af76:	9a03      	ldr	r2, [sp, #12]
 801af78:	2a00      	cmp	r2, #0
 801af7a:	f340 8124 	ble.w	801b1c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801af7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af80:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801af84:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801af88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af8a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801af8e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801af92:	2b00      	cmp	r3, #0
 801af94:	dd0e      	ble.n	801afb4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af96:	1408      	asrs	r0, r1, #16
 801af98:	d405      	bmi.n	801afa6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801af9a:	4560      	cmp	r0, ip
 801af9c:	da03      	bge.n	801afa6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801af9e:	1410      	asrs	r0, r2, #16
 801afa0:	d401      	bmi.n	801afa6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801afa2:	42b8      	cmp	r0, r7
 801afa4:	db07      	blt.n	801afb6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801afa6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801afa8:	3b01      	subs	r3, #1
 801afaa:	4401      	add	r1, r0
 801afac:	9812      	ldr	r0, [sp, #72]	; 0x48
 801afae:	3402      	adds	r4, #2
 801afb0:	4402      	add	r2, r0
 801afb2:	e7ee      	b.n	801af92 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801afb4:	d06e      	beq.n	801b094 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801afb6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801afb8:	1e58      	subs	r0, r3, #1
 801afba:	fb05 1500 	mla	r5, r5, r0, r1
 801afbe:	142d      	asrs	r5, r5, #16
 801afc0:	d45c      	bmi.n	801b07c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afc2:	4565      	cmp	r5, ip
 801afc4:	da5a      	bge.n	801b07c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afc6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801afc8:	fb05 2000 	mla	r0, r5, r0, r2
 801afcc:	1400      	asrs	r0, r0, #16
 801afce:	d455      	bmi.n	801b07c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afd0:	42b8      	cmp	r0, r7
 801afd2:	da53      	bge.n	801b07c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afd4:	4699      	mov	r9, r3
 801afd6:	46a2      	mov	sl, r4
 801afd8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801afdc:	f1b9 0f00 	cmp.w	r9, #0
 801afe0:	dd54      	ble.n	801b08c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801afe2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801afe6:	140d      	asrs	r5, r1, #16
 801afe8:	1410      	asrs	r0, r2, #16
 801afea:	fb07 5000 	mla	r0, r7, r0, r5
 801afee:	9d02      	ldr	r5, [sp, #8]
 801aff0:	f109 39ff 	add.w	r9, r9, #4294967295
 801aff4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801aff8:	f8ba 5000 	ldrh.w	r5, [sl]
 801affc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b000:	122f      	asrs	r7, r5, #8
 801b002:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b006:	fb17 f706 	smulbb	r7, r7, r6
 801b00a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b00e:	00ed      	lsls	r5, r5, #3
 801b010:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b014:	b2ed      	uxtb	r5, r5
 801b016:	fb18 f806 	smulbb	r8, r8, r6
 801b01a:	fb15 f506 	smulbb	r5, r5, r6
 801b01e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b022:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b026:	10c7      	asrs	r7, r0, #3
 801b028:	00c0      	lsls	r0, r0, #3
 801b02a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b02e:	b2c0      	uxtb	r0, r0
 801b030:	fb07 870b 	mla	r7, r7, fp, r8
 801b034:	fb00 500b 	mla	r0, r0, fp, r5
 801b038:	fa1f fc8c 	uxth.w	ip, ip
 801b03c:	b280      	uxth	r0, r0
 801b03e:	b2bf      	uxth	r7, r7
 801b040:	f10c 0501 	add.w	r5, ip, #1
 801b044:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b048:	f107 0801 	add.w	r8, r7, #1
 801b04c:	1c45      	adds	r5, r0, #1
 801b04e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b052:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b056:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b058:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b05c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b060:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b064:	ea45 0c0c 	orr.w	ip, r5, ip
 801b068:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b06c:	4401      	add	r1, r0
 801b06e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b070:	ea4c 0c08 	orr.w	ip, ip, r8
 801b074:	f82a cb02 	strh.w	ip, [sl], #2
 801b078:	4402      	add	r2, r0
 801b07a:	e7af      	b.n	801afdc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b07c:	f04f 0800 	mov.w	r8, #0
 801b080:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b084:	eb03 0008 	add.w	r0, r3, r8
 801b088:	2800      	cmp	r0, #0
 801b08a:	dc41      	bgt.n	801b110 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b08c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b090:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b094:	9b00      	ldr	r3, [sp, #0]
 801b096:	2b00      	cmp	r3, #0
 801b098:	f340 8095 	ble.w	801b1c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b09c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b0a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0b0:	eef0 6a62 	vmov.f32	s13, s5
 801b0b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0c8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b0cc:	eef0 6a43 	vmov.f32	s13, s6
 801b0d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0d4:	ee12 2a90 	vmov	r2, s5
 801b0d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0e6:	ee13 2a10 	vmov	r2, s6
 801b0ea:	9311      	str	r3, [sp, #68]	; 0x44
 801b0ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0ee:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b0f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0f6:	9312      	str	r3, [sp, #72]	; 0x48
 801b0f8:	9b00      	ldr	r3, [sp, #0]
 801b0fa:	9a03      	ldr	r2, [sp, #12]
 801b0fc:	3b01      	subs	r3, #1
 801b0fe:	9300      	str	r3, [sp, #0]
 801b100:	eeb0 3a67 	vmov.f32	s6, s15
 801b104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b106:	eef0 2a47 	vmov.f32	s5, s14
 801b10a:	bf08      	it	eq
 801b10c:	4613      	moveq	r3, r2
 801b10e:	e72f      	b.n	801af70 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b110:	140f      	asrs	r7, r1, #16
 801b112:	d451      	bmi.n	801b1b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b114:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b118:	42bd      	cmp	r5, r7
 801b11a:	dd4d      	ble.n	801b1b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b11c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b120:	d44a      	bmi.n	801b1b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b122:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b126:	4560      	cmp	r0, ip
 801b128:	dd46      	ble.n	801b1b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b12a:	b22d      	sxth	r5, r5
 801b12c:	fb0c 7505 	mla	r5, ip, r5, r7
 801b130:	9802      	ldr	r0, [sp, #8]
 801b132:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b136:	f06f 0501 	mvn.w	r5, #1
 801b13a:	fb05 fb08 	mul.w	fp, r5, r8
 801b13e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b142:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b146:	122f      	asrs	r7, r5, #8
 801b148:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b14c:	fb17 f706 	smulbb	r7, r7, r6
 801b150:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b154:	00ed      	lsls	r5, r5, #3
 801b156:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b15a:	b2ed      	uxtb	r5, r5
 801b15c:	fb19 f906 	smulbb	r9, r9, r6
 801b160:	fb15 f506 	smulbb	r5, r5, r6
 801b164:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b168:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b16c:	10c7      	asrs	r7, r0, #3
 801b16e:	00c0      	lsls	r0, r0, #3
 801b170:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b174:	b2c0      	uxtb	r0, r0
 801b176:	fb07 970a 	mla	r7, r7, sl, r9
 801b17a:	fb00 500a 	mla	r0, r0, sl, r5
 801b17e:	fa1f fc8c 	uxth.w	ip, ip
 801b182:	b2bf      	uxth	r7, r7
 801b184:	b280      	uxth	r0, r0
 801b186:	f10c 0501 	add.w	r5, ip, #1
 801b18a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b18e:	f107 0901 	add.w	r9, r7, #1
 801b192:	1c45      	adds	r5, r0, #1
 801b194:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b198:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b19c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b1a0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b1a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b1a8:	ea45 0c0c 	orr.w	ip, r5, ip
 801b1ac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b1b0:	ea4c 0c09 	orr.w	ip, ip, r9
 801b1b4:	f824 c00b 	strh.w	ip, [r4, fp]
 801b1b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b1ba:	f108 38ff 	add.w	r8, r8, #4294967295
 801b1be:	4401      	add	r1, r0
 801b1c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b1c2:	4402      	add	r2, r0
 801b1c4:	e75e      	b.n	801b084 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b1c6:	b005      	add	sp, #20
 801b1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1d4:	b085      	sub	sp, #20
 801b1d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b1d8:	4693      	mov	fp, r2
 801b1da:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b1de:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b1e2:	6870      	ldr	r0, [r6, #4]
 801b1e4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b1e6:	fb00 2404 	mla	r4, r0, r4, r2
 801b1ea:	6832      	ldr	r2, [r6, #0]
 801b1ec:	9101      	str	r1, [sp, #4]
 801b1ee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b1f2:	682a      	ldr	r2, [r5, #0]
 801b1f4:	9202      	str	r2, [sp, #8]
 801b1f6:	9a01      	ldr	r2, [sp, #4]
 801b1f8:	2a00      	cmp	r2, #0
 801b1fa:	dc03      	bgt.n	801b204 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b1fc:	f1bb 0f00 	cmp.w	fp, #0
 801b200:	f340 809a 	ble.w	801b338 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b204:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b206:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b20a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b20e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b210:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b214:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b218:	2b00      	cmp	r3, #0
 801b21a:	dd0c      	ble.n	801b236 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b21c:	1406      	asrs	r6, r0, #16
 801b21e:	d405      	bmi.n	801b22c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b220:	454e      	cmp	r6, r9
 801b222:	da03      	bge.n	801b22c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b224:	1416      	asrs	r6, r2, #16
 801b226:	d401      	bmi.n	801b22c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b228:	4546      	cmp	r6, r8
 801b22a:	db05      	blt.n	801b238 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b22c:	4470      	add	r0, lr
 801b22e:	4462      	add	r2, ip
 801b230:	3b01      	subs	r3, #1
 801b232:	3402      	adds	r4, #2
 801b234:	e7f0      	b.n	801b218 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b236:	d00f      	beq.n	801b258 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b238:	1e5e      	subs	r6, r3, #1
 801b23a:	fb0e 0706 	mla	r7, lr, r6, r0
 801b23e:	143f      	asrs	r7, r7, #16
 801b240:	d541      	bpl.n	801b2c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b242:	4698      	mov	r8, r3
 801b244:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b248:	9603      	str	r6, [sp, #12]
 801b24a:	f1b8 0f00 	cmp.w	r8, #0
 801b24e:	dc56      	bgt.n	801b2fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b254:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b258:	9b01      	ldr	r3, [sp, #4]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	dd6c      	ble.n	801b338 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b25e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b262:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b266:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b26a:	eeb0 6a62 	vmov.f32	s12, s5
 801b26e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b272:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b276:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b27a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b27e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b282:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b286:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b28a:	eeb0 6a43 	vmov.f32	s12, s6
 801b28e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b292:	ee12 2a90 	vmov	r2, s5
 801b296:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b29a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b29c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2a0:	fb92 fef3 	sdiv	lr, r2, r3
 801b2a4:	ee13 2a10 	vmov	r2, s6
 801b2a8:	fb92 fcf3 	sdiv	ip, r2, r3
 801b2ac:	9b01      	ldr	r3, [sp, #4]
 801b2ae:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b2b2:	3b01      	subs	r3, #1
 801b2b4:	9301      	str	r3, [sp, #4]
 801b2b6:	eeb0 3a67 	vmov.f32	s6, s15
 801b2ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2bc:	eef0 2a47 	vmov.f32	s5, s14
 801b2c0:	bf08      	it	eq
 801b2c2:	465b      	moveq	r3, fp
 801b2c4:	e797      	b.n	801b1f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b2c6:	454f      	cmp	r7, r9
 801b2c8:	dabb      	bge.n	801b242 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2ca:	fb0c 2606 	mla	r6, ip, r6, r2
 801b2ce:	1436      	asrs	r6, r6, #16
 801b2d0:	d4b7      	bmi.n	801b242 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2d2:	4546      	cmp	r6, r8
 801b2d4:	dab5      	bge.n	801b242 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2d6:	461e      	mov	r6, r3
 801b2d8:	46a0      	mov	r8, r4
 801b2da:	2e00      	cmp	r6, #0
 801b2dc:	ddb8      	ble.n	801b250 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b2de:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b2e2:	1417      	asrs	r7, r2, #16
 801b2e4:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b2e8:	fb0a 9707 	mla	r7, sl, r7, r9
 801b2ec:	9902      	ldr	r1, [sp, #8]
 801b2ee:	4470      	add	r0, lr
 801b2f0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b2f4:	4462      	add	r2, ip
 801b2f6:	f828 7b02 	strh.w	r7, [r8], #2
 801b2fa:	3e01      	subs	r6, #1
 801b2fc:	e7ed      	b.n	801b2da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b2fe:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b302:	d414      	bmi.n	801b32e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b304:	68ae      	ldr	r6, [r5, #8]
 801b306:	454e      	cmp	r6, r9
 801b308:	dd11      	ble.n	801b32e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b30a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b30e:	d40e      	bmi.n	801b32e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b310:	68ef      	ldr	r7, [r5, #12]
 801b312:	4557      	cmp	r7, sl
 801b314:	dd0b      	ble.n	801b32e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b316:	f06f 0101 	mvn.w	r1, #1
 801b31a:	b236      	sxth	r6, r6
 801b31c:	fb0a 9606 	mla	r6, sl, r6, r9
 801b320:	9f02      	ldr	r7, [sp, #8]
 801b322:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b326:	fb01 f608 	mul.w	r6, r1, r8
 801b32a:	9903      	ldr	r1, [sp, #12]
 801b32c:	538f      	strh	r7, [r1, r6]
 801b32e:	4470      	add	r0, lr
 801b330:	4462      	add	r2, ip
 801b332:	f108 38ff 	add.w	r8, r8, #4294967295
 801b336:	e788      	b.n	801b24a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b338:	b005      	add	sp, #20
 801b33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b33e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b346:	b087      	sub	sp, #28
 801b348:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b34a:	468b      	mov	fp, r1
 801b34c:	9203      	str	r2, [sp, #12]
 801b34e:	6841      	ldr	r1, [r0, #4]
 801b350:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b354:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b358:	9204      	str	r2, [sp, #16]
 801b35a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b35e:	fb01 2505 	mla	r5, r1, r5, r2
 801b362:	6802      	ldr	r2, [r0, #0]
 801b364:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b368:	f8d9 2000 	ldr.w	r2, [r9]
 801b36c:	9201      	str	r2, [sp, #4]
 801b36e:	f1bb 0f00 	cmp.w	fp, #0
 801b372:	dc03      	bgt.n	801b37c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b374:	9a03      	ldr	r2, [sp, #12]
 801b376:	2a00      	cmp	r2, #0
 801b378:	f340 8159 	ble.w	801b62e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b37c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b37e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b382:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b386:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b388:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b38c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b390:	2b00      	cmp	r3, #0
 801b392:	dd0e      	ble.n	801b3b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b394:	1402      	asrs	r2, r0, #16
 801b396:	d405      	bmi.n	801b3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b398:	42ba      	cmp	r2, r7
 801b39a:	da03      	bge.n	801b3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b39c:	140a      	asrs	r2, r1, #16
 801b39e:	d401      	bmi.n	801b3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b3a0:	42b2      	cmp	r2, r6
 801b3a2:	db07      	blt.n	801b3b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b3a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b3a6:	3b01      	subs	r3, #1
 801b3a8:	4410      	add	r0, r2
 801b3aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b3ac:	3502      	adds	r5, #2
 801b3ae:	4411      	add	r1, r2
 801b3b0:	e7ee      	b.n	801b390 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b3b2:	d017      	beq.n	801b3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b3b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b3b6:	1e5a      	subs	r2, r3, #1
 801b3b8:	fb04 0402 	mla	r4, r4, r2, r0
 801b3bc:	1424      	asrs	r4, r4, #16
 801b3be:	d409      	bmi.n	801b3d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3c0:	42bc      	cmp	r4, r7
 801b3c2:	da07      	bge.n	801b3d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b3c6:	fb04 1202 	mla	r2, r4, r2, r1
 801b3ca:	1412      	asrs	r2, r2, #16
 801b3cc:	d402      	bmi.n	801b3d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3ce:	42b2      	cmp	r2, r6
 801b3d0:	f2c0 80bf 	blt.w	801b552 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b3d4:	2700      	movs	r7, #0
 801b3d6:	19da      	adds	r2, r3, r7
 801b3d8:	2a00      	cmp	r2, #0
 801b3da:	dc3e      	bgt.n	801b45a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b3dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3e0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b3e4:	f1bb 0f00 	cmp.w	fp, #0
 801b3e8:	f340 8121 	ble.w	801b62e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b3ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3fc:	eeb0 6a62 	vmov.f32	s12, s5
 801b400:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b404:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b408:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b40c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b410:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b414:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b418:	eeb0 6a43 	vmov.f32	s12, s6
 801b41c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b420:	ee12 2a90 	vmov	r2, s5
 801b424:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b42a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b42e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b432:	ee13 2a10 	vmov	r2, s6
 801b436:	9313      	str	r3, [sp, #76]	; 0x4c
 801b438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b43a:	f1bb 0b01 	subs.w	fp, fp, #1
 801b43e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b442:	9a03      	ldr	r2, [sp, #12]
 801b444:	9314      	str	r3, [sp, #80]	; 0x50
 801b446:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b44a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b44c:	eeb0 3a67 	vmov.f32	s6, s15
 801b450:	bf08      	it	eq
 801b452:	4613      	moveq	r3, r2
 801b454:	eef0 2a47 	vmov.f32	s5, s14
 801b458:	e789      	b.n	801b36e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b45a:	1406      	asrs	r6, r0, #16
 801b45c:	d42d      	bmi.n	801b4ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b45e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b462:	42b4      	cmp	r4, r6
 801b464:	dd29      	ble.n	801b4ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b466:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b46a:	d426      	bmi.n	801b4ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b46c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b470:	4562      	cmp	r2, ip
 801b472:	dd22      	ble.n	801b4ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b474:	b224      	sxth	r4, r4
 801b476:	fb0c 6404 	mla	r4, ip, r4, r6
 801b47a:	9a01      	ldr	r2, [sp, #4]
 801b47c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b480:	0e22      	lsrs	r2, r4, #24
 801b482:	d01a      	beq.n	801b4ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b484:	9e04      	ldr	r6, [sp, #16]
 801b486:	4372      	muls	r2, r6
 801b488:	1c56      	adds	r6, r2, #1
 801b48a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b48e:	1212      	asrs	r2, r2, #8
 801b490:	0a26      	lsrs	r6, r4, #8
 801b492:	2aff      	cmp	r2, #255	; 0xff
 801b494:	9605      	str	r6, [sp, #20]
 801b496:	d116      	bne.n	801b4c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b498:	f06f 0201 	mvn.w	r2, #1
 801b49c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b4a0:	fb02 fc07 	mul.w	ip, r2, r7
 801b4a4:	0962      	lsrs	r2, r4, #5
 801b4a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b4aa:	f026 0607 	bic.w	r6, r6, #7
 801b4ae:	4316      	orrs	r6, r2
 801b4b0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b4b4:	4326      	orrs	r6, r4
 801b4b6:	f825 600c 	strh.w	r6, [r5, ip]
 801b4ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b4bc:	3f01      	subs	r7, #1
 801b4be:	4410      	add	r0, r2
 801b4c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b4c2:	4411      	add	r1, r2
 801b4c4:	e787      	b.n	801b3d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b4c6:	f06f 0601 	mvn.w	r6, #1
 801b4ca:	fa1f fa82 	uxth.w	sl, r2
 801b4ce:	43d2      	mvns	r2, r2
 801b4d0:	437e      	muls	r6, r7
 801b4d2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801b4d6:	f835 8006 	ldrh.w	r8, [r5, r6]
 801b4da:	fb1c fc0a 	smulbb	ip, ip, sl
 801b4de:	b2e4      	uxtb	r4, r4
 801b4e0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b4e4:	fb14 f40a 	smulbb	r4, r4, sl
 801b4e8:	b2d2      	uxtb	r2, r2
 801b4ea:	9602      	str	r6, [sp, #8]
 801b4ec:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b4f0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b4f4:	fb0e ce02 	mla	lr, lr, r2, ip
 801b4f8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b4fc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b500:	fb16 f60a 	smulbb	r6, r6, sl
 801b504:	fa5f f888 	uxtb.w	r8, r8
 801b508:	fb08 4402 	mla	r4, r8, r2, r4
 801b50c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b510:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b514:	fa1f fe8e 	uxth.w	lr, lr
 801b518:	b2a4      	uxth	r4, r4
 801b51a:	f10e 0201 	add.w	r2, lr, #1
 801b51e:	1c66      	adds	r6, r4, #1
 801b520:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b524:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b528:	fa1f fc8c 	uxth.w	ip, ip
 801b52c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b530:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b534:	ea46 0e0e 	orr.w	lr, r6, lr
 801b538:	f10c 0601 	add.w	r6, ip, #1
 801b53c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b540:	0976      	lsrs	r6, r6, #5
 801b542:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b546:	9a02      	ldr	r2, [sp, #8]
 801b548:	ea4e 0e06 	orr.w	lr, lr, r6
 801b54c:	f825 e002 	strh.w	lr, [r5, r2]
 801b550:	e7b3      	b.n	801b4ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b552:	f04f 0800 	mov.w	r8, #0
 801b556:	eba3 0208 	sub.w	r2, r3, r8
 801b55a:	2a00      	cmp	r2, #0
 801b55c:	f77f af3e 	ble.w	801b3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b560:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b564:	1404      	asrs	r4, r0, #16
 801b566:	140a      	asrs	r2, r1, #16
 801b568:	fb06 4202 	mla	r2, r6, r2, r4
 801b56c:	9c01      	ldr	r4, [sp, #4]
 801b56e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801b572:	0e22      	lsrs	r2, r4, #24
 801b574:	d016      	beq.n	801b5a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b576:	9e04      	ldr	r6, [sp, #16]
 801b578:	4372      	muls	r2, r6
 801b57a:	1c56      	adds	r6, r2, #1
 801b57c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b580:	1212      	asrs	r2, r2, #8
 801b582:	2aff      	cmp	r2, #255	; 0xff
 801b584:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801b588:	d113      	bne.n	801b5b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801b58a:	0962      	lsrs	r2, r4, #5
 801b58c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b590:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b594:	f026 0607 	bic.w	r6, r6, #7
 801b598:	4316      	orrs	r6, r2
 801b59a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b59e:	4326      	orrs	r6, r4
 801b5a0:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801b5a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5a6:	f108 0801 	add.w	r8, r8, #1
 801b5aa:	4410      	add	r0, r2
 801b5ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b5ae:	4411      	add	r1, r2
 801b5b0:	e7d1      	b.n	801b556 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b5b2:	fa1f fa82 	uxth.w	sl, r2
 801b5b6:	43d2      	mvns	r2, r2
 801b5b8:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b5bc:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b5c0:	fb17 f70a 	smulbb	r7, r7, sl
 801b5c4:	b2e4      	uxtb	r4, r4
 801b5c6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b5ca:	fb14 f40a 	smulbb	r4, r4, sl
 801b5ce:	b2d2      	uxtb	r2, r2
 801b5d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b5d4:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b5d8:	b2f6      	uxtb	r6, r6
 801b5da:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b5de:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b5e2:	fb16 f60a 	smulbb	r6, r6, sl
 801b5e6:	fa5f fe8e 	uxtb.w	lr, lr
 801b5ea:	fb0e 4402 	mla	r4, lr, r2, r4
 801b5ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b5f2:	fb07 6702 	mla	r7, r7, r2, r6
 801b5f6:	fa1f fc8c 	uxth.w	ip, ip
 801b5fa:	b2a4      	uxth	r4, r4
 801b5fc:	f10c 0201 	add.w	r2, ip, #1
 801b600:	1c66      	adds	r6, r4, #1
 801b602:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b606:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b60a:	b2bf      	uxth	r7, r7
 801b60c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b610:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b614:	ea46 0c0c 	orr.w	ip, r6, ip
 801b618:	1c7e      	adds	r6, r7, #1
 801b61a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801b61e:	0976      	lsrs	r6, r6, #5
 801b620:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b624:	ea4c 0c06 	orr.w	ip, ip, r6
 801b628:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b62c:	e7ba      	b.n	801b5a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b62e:	b007      	add	sp, #28
 801b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b634 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b63c:	b085      	sub	sp, #20
 801b63e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b640:	468b      	mov	fp, r1
 801b642:	6841      	ldr	r1, [r0, #4]
 801b644:	9203      	str	r2, [sp, #12]
 801b646:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b64a:	fb01 2404 	mla	r4, r1, r4, r2
 801b64e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b652:	6802      	ldr	r2, [r0, #0]
 801b654:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b658:	f8d8 2000 	ldr.w	r2, [r8]
 801b65c:	9201      	str	r2, [sp, #4]
 801b65e:	f1bb 0f00 	cmp.w	fp, #0
 801b662:	dc03      	bgt.n	801b66c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b664:	9a03      	ldr	r2, [sp, #12]
 801b666:	2a00      	cmp	r2, #0
 801b668:	f340 814f 	ble.w	801b90a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b66c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b66e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b672:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b676:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b678:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b67c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b680:	2b00      	cmp	r3, #0
 801b682:	dd0e      	ble.n	801b6a2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b684:	1408      	asrs	r0, r1, #16
 801b686:	d405      	bmi.n	801b694 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b688:	42b8      	cmp	r0, r7
 801b68a:	da03      	bge.n	801b694 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b68c:	1410      	asrs	r0, r2, #16
 801b68e:	d401      	bmi.n	801b694 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b690:	42b0      	cmp	r0, r6
 801b692:	db07      	blt.n	801b6a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b694:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b696:	3b01      	subs	r3, #1
 801b698:	4401      	add	r1, r0
 801b69a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b69c:	3402      	adds	r4, #2
 801b69e:	4402      	add	r2, r0
 801b6a0:	e7ee      	b.n	801b680 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b6a2:	d017      	beq.n	801b6d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b6a4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b6a6:	1e58      	subs	r0, r3, #1
 801b6a8:	fb05 1500 	mla	r5, r5, r0, r1
 801b6ac:	142d      	asrs	r5, r5, #16
 801b6ae:	d409      	bmi.n	801b6c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6b0:	42bd      	cmp	r5, r7
 801b6b2:	da07      	bge.n	801b6c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b6b6:	fb05 2000 	mla	r0, r5, r0, r2
 801b6ba:	1400      	asrs	r0, r0, #16
 801b6bc:	d402      	bmi.n	801b6c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6be:	42b0      	cmp	r0, r6
 801b6c0:	f2c0 80ba 	blt.w	801b838 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b6c4:	2600      	movs	r6, #0
 801b6c6:	1998      	adds	r0, r3, r6
 801b6c8:	2800      	cmp	r0, #0
 801b6ca:	dc3e      	bgt.n	801b74a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b6cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b6d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b6d4:	f1bb 0f00 	cmp.w	fp, #0
 801b6d8:	f340 8117 	ble.w	801b90a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b6dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b6e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b6e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b6e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b6ec:	eeb0 6a62 	vmov.f32	s12, s5
 801b6f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b6f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b6fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b700:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b704:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b708:	eeb0 6a43 	vmov.f32	s12, s6
 801b70c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b710:	ee12 2a90 	vmov	r2, s5
 801b714:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b71a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b71e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b722:	ee13 2a10 	vmov	r2, s6
 801b726:	9311      	str	r3, [sp, #68]	; 0x44
 801b728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b72a:	f1bb 0b01 	subs.w	fp, fp, #1
 801b72e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b732:	9a03      	ldr	r2, [sp, #12]
 801b734:	9312      	str	r3, [sp, #72]	; 0x48
 801b736:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b73a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b73c:	eeb0 3a67 	vmov.f32	s6, s15
 801b740:	bf08      	it	eq
 801b742:	4613      	moveq	r3, r2
 801b744:	eef0 2a47 	vmov.f32	s5, s14
 801b748:	e789      	b.n	801b65e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b74a:	140f      	asrs	r7, r1, #16
 801b74c:	d424      	bmi.n	801b798 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b74e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b752:	42bd      	cmp	r5, r7
 801b754:	dd20      	ble.n	801b798 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b756:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b75a:	d41d      	bmi.n	801b798 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b75c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b760:	4560      	cmp	r0, ip
 801b762:	dd19      	ble.n	801b798 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b764:	b22d      	sxth	r5, r5
 801b766:	fb0c 7505 	mla	r5, ip, r5, r7
 801b76a:	9801      	ldr	r0, [sp, #4]
 801b76c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b770:	0e07      	lsrs	r7, r0, #24
 801b772:	2fff      	cmp	r7, #255	; 0xff
 801b774:	d116      	bne.n	801b7a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b776:	f06f 0501 	mvn.w	r5, #1
 801b77a:	fb05 f706 	mul.w	r7, r5, r6
 801b77e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b782:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b786:	0945      	lsrs	r5, r0, #5
 801b788:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b78c:	ea4c 0505 	orr.w	r5, ip, r5
 801b790:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b794:	4305      	orrs	r5, r0
 801b796:	53e5      	strh	r5, [r4, r7]
 801b798:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b79a:	3e01      	subs	r6, #1
 801b79c:	4401      	add	r1, r0
 801b79e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b7a0:	4402      	add	r2, r0
 801b7a2:	e790      	b.n	801b6c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b7a4:	b2fd      	uxtb	r5, r7
 801b7a6:	2f00      	cmp	r7, #0
 801b7a8:	d0f6      	beq.n	801b798 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b7aa:	f06f 0701 	mvn.w	r7, #1
 801b7ae:	fa1f f985 	uxth.w	r9, r5
 801b7b2:	43ed      	mvns	r5, r5
 801b7b4:	4377      	muls	r7, r6
 801b7b6:	f834 e007 	ldrh.w	lr, [r4, r7]
 801b7ba:	9702      	str	r7, [sp, #8]
 801b7bc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b7c0:	fb17 f709 	smulbb	r7, r7, r9
 801b7c4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b7c8:	b2c0      	uxtb	r0, r0
 801b7ca:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b7ce:	fb10 f009 	smulbb	r0, r0, r9
 801b7d2:	b2ed      	uxtb	r5, r5
 801b7d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b7d8:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b7dc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b7e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b7e4:	fb1a fa09 	smulbb	sl, sl, r9
 801b7e8:	fa5f fe8e 	uxtb.w	lr, lr
 801b7ec:	fb0e 0005 	mla	r0, lr, r5, r0
 801b7f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b7f4:	fb07 a705 	mla	r7, r7, r5, sl
 801b7f8:	b280      	uxth	r0, r0
 801b7fa:	fa1f fc8c 	uxth.w	ip, ip
 801b7fe:	f100 0a01 	add.w	sl, r0, #1
 801b802:	f10c 0501 	add.w	r5, ip, #1
 801b806:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b80a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b80e:	b2bf      	uxth	r7, r7
 801b810:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b814:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b818:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b81c:	f107 0a01 	add.w	sl, r7, #1
 801b820:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b824:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b828:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b82c:	9802      	ldr	r0, [sp, #8]
 801b82e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b832:	f824 c000 	strh.w	ip, [r4, r0]
 801b836:	e7af      	b.n	801b798 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b838:	f04f 0e00 	mov.w	lr, #0
 801b83c:	eba3 000e 	sub.w	r0, r3, lr
 801b840:	2800      	cmp	r0, #0
 801b842:	f77f af43 	ble.w	801b6cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b846:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b84a:	140d      	asrs	r5, r1, #16
 801b84c:	1410      	asrs	r0, r2, #16
 801b84e:	fb06 5000 	mla	r0, r6, r0, r5
 801b852:	9d01      	ldr	r5, [sp, #4]
 801b854:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b858:	0e2e      	lsrs	r6, r5, #24
 801b85a:	2eff      	cmp	r6, #255	; 0xff
 801b85c:	d112      	bne.n	801b884 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b85e:	482c      	ldr	r0, [pc, #176]	; (801b910 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b860:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b864:	0968      	lsrs	r0, r5, #5
 801b866:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b86a:	4330      	orrs	r0, r6
 801b86c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b870:	4328      	orrs	r0, r5
 801b872:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801b876:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b878:	f10e 0e01 	add.w	lr, lr, #1
 801b87c:	4401      	add	r1, r0
 801b87e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b880:	4402      	add	r2, r0
 801b882:	e7db      	b.n	801b83c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b884:	b2f0      	uxtb	r0, r6
 801b886:	2e00      	cmp	r6, #0
 801b888:	d0f5      	beq.n	801b876 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b88a:	fa1f f980 	uxth.w	r9, r0
 801b88e:	43c0      	mvns	r0, r0
 801b890:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b894:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b898:	fb16 f609 	smulbb	r6, r6, r9
 801b89c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b8a0:	b2ed      	uxtb	r5, r5
 801b8a2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b8a6:	fb15 f509 	smulbb	r5, r5, r9
 801b8aa:	b2c0      	uxtb	r0, r0
 801b8ac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b8b0:	fb07 6700 	mla	r7, r7, r0, r6
 801b8b4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b8b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b8bc:	fb1a fa09 	smulbb	sl, sl, r9
 801b8c0:	fa5f fc8c 	uxtb.w	ip, ip
 801b8c4:	fb0c 5500 	mla	r5, ip, r0, r5
 801b8c8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b8cc:	fb06 a600 	mla	r6, r6, r0, sl
 801b8d0:	b2bf      	uxth	r7, r7
 801b8d2:	b2ad      	uxth	r5, r5
 801b8d4:	1c78      	adds	r0, r7, #1
 801b8d6:	f105 0a01 	add.w	sl, r5, #1
 801b8da:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b8de:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b8e2:	b2b6      	uxth	r6, r6
 801b8e4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b8e8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b8ec:	ea4a 0707 	orr.w	r7, sl, r7
 801b8f0:	f106 0a01 	add.w	sl, r6, #1
 801b8f4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b8f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b8fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b900:	ea47 070a 	orr.w	r7, r7, sl
 801b904:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b908:	e7b5      	b.n	801b876 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b90a:	b005      	add	sp, #20
 801b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b910:	fffff800 	.word	0xfffff800

0801b914 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b91c:	b087      	sub	sp, #28
 801b91e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b920:	468b      	mov	fp, r1
 801b922:	9203      	str	r2, [sp, #12]
 801b924:	6841      	ldr	r1, [r0, #4]
 801b926:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b92a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b92e:	9204      	str	r2, [sp, #16]
 801b930:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b934:	fb01 2404 	mla	r4, r1, r4, r2
 801b938:	6802      	ldr	r2, [r0, #0]
 801b93a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b93e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b942:	3201      	adds	r2, #1
 801b944:	f022 0201 	bic.w	r2, r2, #1
 801b948:	9200      	str	r2, [sp, #0]
 801b94a:	f8d9 2000 	ldr.w	r2, [r9]
 801b94e:	9201      	str	r2, [sp, #4]
 801b950:	f1bb 0f00 	cmp.w	fp, #0
 801b954:	dc03      	bgt.n	801b95e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b956:	9a03      	ldr	r2, [sp, #12]
 801b958:	2a00      	cmp	r2, #0
 801b95a:	f340 816a 	ble.w	801bc32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b95e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b960:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b964:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b968:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b96a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b96e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b972:	2b00      	cmp	r3, #0
 801b974:	dd0e      	ble.n	801b994 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b976:	1402      	asrs	r2, r0, #16
 801b978:	d405      	bmi.n	801b986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b97a:	42ba      	cmp	r2, r7
 801b97c:	da03      	bge.n	801b986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b97e:	140a      	asrs	r2, r1, #16
 801b980:	d401      	bmi.n	801b986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b982:	42b2      	cmp	r2, r6
 801b984:	db07      	blt.n	801b996 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b986:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b988:	3b01      	subs	r3, #1
 801b98a:	4410      	add	r0, r2
 801b98c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b98e:	3402      	adds	r4, #2
 801b990:	4411      	add	r1, r2
 801b992:	e7ee      	b.n	801b972 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b994:	d017      	beq.n	801b9c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b996:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b998:	1e5a      	subs	r2, r3, #1
 801b99a:	fb05 0502 	mla	r5, r5, r2, r0
 801b99e:	142d      	asrs	r5, r5, #16
 801b9a0:	d409      	bmi.n	801b9b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9a2:	42bd      	cmp	r5, r7
 801b9a4:	da07      	bge.n	801b9b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b9a8:	fb05 1202 	mla	r2, r5, r2, r1
 801b9ac:	1412      	asrs	r2, r2, #16
 801b9ae:	d402      	bmi.n	801b9b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9b0:	42b2      	cmp	r2, r6
 801b9b2:	f2c0 80c8 	blt.w	801bb46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801b9b6:	2700      	movs	r7, #0
 801b9b8:	19da      	adds	r2, r3, r7
 801b9ba:	2a00      	cmp	r2, #0
 801b9bc:	dc3e      	bgt.n	801ba3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b9be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9c2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b9c6:	f1bb 0f00 	cmp.w	fp, #0
 801b9ca:	f340 8132 	ble.w	801bc32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b9ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b9da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b9de:	eeb0 6a62 	vmov.f32	s12, s5
 801b9e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b9ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b9ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b9f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b9f6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b9fa:	eeb0 6a43 	vmov.f32	s12, s6
 801b9fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba02:	ee12 2a90 	vmov	r2, s5
 801ba06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba10:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba14:	ee13 2a10 	vmov	r2, s6
 801ba18:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba1c:	f1bb 0b01 	subs.w	fp, fp, #1
 801ba20:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba24:	9a03      	ldr	r2, [sp, #12]
 801ba26:	9314      	str	r3, [sp, #80]	; 0x50
 801ba28:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba2e:	eeb0 3a67 	vmov.f32	s6, s15
 801ba32:	bf08      	it	eq
 801ba34:	4613      	moveq	r3, r2
 801ba36:	eef0 2a47 	vmov.f32	s5, s14
 801ba3a:	e789      	b.n	801b950 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ba3c:	1405      	asrs	r5, r0, #16
 801ba3e:	d436      	bmi.n	801baae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba40:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ba44:	42aa      	cmp	r2, r5
 801ba46:	dd32      	ble.n	801baae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba48:	140e      	asrs	r6, r1, #16
 801ba4a:	d430      	bmi.n	801baae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba4c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ba50:	42b2      	cmp	r2, r6
 801ba52:	dd2c      	ble.n	801baae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba54:	9a00      	ldr	r2, [sp, #0]
 801ba56:	fb06 5502 	mla	r5, r6, r2, r5
 801ba5a:	9e01      	ldr	r6, [sp, #4]
 801ba5c:	086a      	lsrs	r2, r5, #1
 801ba5e:	5cb2      	ldrb	r2, [r6, r2]
 801ba60:	07ee      	lsls	r6, r5, #31
 801ba62:	bf54      	ite	pl
 801ba64:	f002 020f 	andpl.w	r2, r2, #15
 801ba68:	1112      	asrmi	r2, r2, #4
 801ba6a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ba6e:	b2d2      	uxtb	r2, r2
 801ba70:	b1ea      	cbz	r2, 801baae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba72:	9d04      	ldr	r5, [sp, #16]
 801ba74:	436a      	muls	r2, r5
 801ba76:	1c55      	adds	r5, r2, #1
 801ba78:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ba7c:	4d6e      	ldr	r5, [pc, #440]	; (801bc38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ba7e:	1212      	asrs	r2, r2, #8
 801ba80:	682d      	ldr	r5, [r5, #0]
 801ba82:	2aff      	cmp	r2, #255	; 0xff
 801ba84:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ba88:	9605      	str	r6, [sp, #20]
 801ba8a:	d116      	bne.n	801baba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ba8c:	f06f 0201 	mvn.w	r2, #1
 801ba90:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ba94:	fb02 fc07 	mul.w	ip, r2, r7
 801ba98:	096a      	lsrs	r2, r5, #5
 801ba9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ba9e:	f026 0607 	bic.w	r6, r6, #7
 801baa2:	4316      	orrs	r6, r2
 801baa4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801baa8:	432e      	orrs	r6, r5
 801baaa:	f824 600c 	strh.w	r6, [r4, ip]
 801baae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bab0:	3f01      	subs	r7, #1
 801bab2:	4410      	add	r0, r2
 801bab4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bab6:	4411      	add	r1, r2
 801bab8:	e77e      	b.n	801b9b8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801baba:	f06f 0601 	mvn.w	r6, #1
 801babe:	fa1f fa82 	uxth.w	sl, r2
 801bac2:	43d2      	mvns	r2, r2
 801bac4:	437e      	muls	r6, r7
 801bac6:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801baca:	f834 8006 	ldrh.w	r8, [r4, r6]
 801bace:	fb1c fc0a 	smulbb	ip, ip, sl
 801bad2:	b2ed      	uxtb	r5, r5
 801bad4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bad8:	fb15 f50a 	smulbb	r5, r5, sl
 801badc:	b2d2      	uxtb	r2, r2
 801bade:	9602      	str	r6, [sp, #8]
 801bae0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bae4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801bae8:	fb0e ce02 	mla	lr, lr, r2, ip
 801baec:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801baf0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801baf4:	fb16 f60a 	smulbb	r6, r6, sl
 801baf8:	fa5f f888 	uxtb.w	r8, r8
 801bafc:	fb08 5502 	mla	r5, r8, r2, r5
 801bb00:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801bb04:	fb0c 6c02 	mla	ip, ip, r2, r6
 801bb08:	fa1f fe8e 	uxth.w	lr, lr
 801bb0c:	b2ad      	uxth	r5, r5
 801bb0e:	f10e 0201 	add.w	r2, lr, #1
 801bb12:	1c6e      	adds	r6, r5, #1
 801bb14:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bb18:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801bb1c:	fa1f fc8c 	uxth.w	ip, ip
 801bb20:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bb24:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bb28:	ea46 0e0e 	orr.w	lr, r6, lr
 801bb2c:	f10c 0601 	add.w	r6, ip, #1
 801bb30:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bb34:	0976      	lsrs	r6, r6, #5
 801bb36:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb3a:	9a02      	ldr	r2, [sp, #8]
 801bb3c:	ea4e 0e06 	orr.w	lr, lr, r6
 801bb40:	f824 e002 	strh.w	lr, [r4, r2]
 801bb44:	e7b3      	b.n	801baae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bb46:	f04f 0800 	mov.w	r8, #0
 801bb4a:	eba3 0208 	sub.w	r2, r3, r8
 801bb4e:	2a00      	cmp	r2, #0
 801bb50:	f77f af35 	ble.w	801b9be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bb54:	9e00      	ldr	r6, [sp, #0]
 801bb56:	1402      	asrs	r2, r0, #16
 801bb58:	140d      	asrs	r5, r1, #16
 801bb5a:	fb06 2505 	mla	r5, r6, r5, r2
 801bb5e:	9e01      	ldr	r6, [sp, #4]
 801bb60:	086a      	lsrs	r2, r5, #1
 801bb62:	5cb2      	ldrb	r2, [r6, r2]
 801bb64:	07ed      	lsls	r5, r5, #31
 801bb66:	bf54      	ite	pl
 801bb68:	f002 020f 	andpl.w	r2, r2, #15
 801bb6c:	1112      	asrmi	r2, r2, #4
 801bb6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb72:	b2d2      	uxtb	r2, r2
 801bb74:	b1c2      	cbz	r2, 801bba8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bb76:	9d04      	ldr	r5, [sp, #16]
 801bb78:	436a      	muls	r2, r5
 801bb7a:	1c55      	adds	r5, r2, #1
 801bb7c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bb80:	4d2d      	ldr	r5, [pc, #180]	; (801bc38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bb82:	1212      	asrs	r2, r2, #8
 801bb84:	682e      	ldr	r6, [r5, #0]
 801bb86:	2aff      	cmp	r2, #255	; 0xff
 801bb88:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801bb8c:	d113      	bne.n	801bbb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bb8e:	0972      	lsrs	r2, r6, #5
 801bb90:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801bb94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bb98:	f025 0507 	bic.w	r5, r5, #7
 801bb9c:	4315      	orrs	r5, r2
 801bb9e:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bba2:	4335      	orrs	r5, r6
 801bba4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801bba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bbaa:	f108 0801 	add.w	r8, r8, #1
 801bbae:	4410      	add	r0, r2
 801bbb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bbb2:	4411      	add	r1, r2
 801bbb4:	e7c9      	b.n	801bb4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bbb6:	fa1f fa82 	uxth.w	sl, r2
 801bbba:	43d2      	mvns	r2, r2
 801bbbc:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801bbc0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bbc4:	fb17 f70a 	smulbb	r7, r7, sl
 801bbc8:	b2f6      	uxtb	r6, r6
 801bbca:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bbce:	fb16 f60a 	smulbb	r6, r6, sl
 801bbd2:	b2d2      	uxtb	r2, r2
 801bbd4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bbd8:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bbdc:	b2ed      	uxtb	r5, r5
 801bbde:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bbe2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bbe6:	fb15 f50a 	smulbb	r5, r5, sl
 801bbea:	fa5f fe8e 	uxtb.w	lr, lr
 801bbee:	fb0e 6602 	mla	r6, lr, r2, r6
 801bbf2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bbf6:	fb07 5702 	mla	r7, r7, r2, r5
 801bbfa:	fa1f fc8c 	uxth.w	ip, ip
 801bbfe:	b2b6      	uxth	r6, r6
 801bc00:	f10c 0201 	add.w	r2, ip, #1
 801bc04:	1c75      	adds	r5, r6, #1
 801bc06:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bc0a:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801bc0e:	b2bf      	uxth	r7, r7
 801bc10:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bc14:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bc18:	ea45 0c0c 	orr.w	ip, r5, ip
 801bc1c:	1c7d      	adds	r5, r7, #1
 801bc1e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801bc22:	096d      	lsrs	r5, r5, #5
 801bc24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bc28:	ea4c 0c05 	orr.w	ip, ip, r5
 801bc2c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801bc30:	e7ba      	b.n	801bba8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bc32:	b007      	add	sp, #28
 801bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc38:	2000f39c 	.word	0x2000f39c

0801bc3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc44:	b087      	sub	sp, #28
 801bc46:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bc48:	9101      	str	r1, [sp, #4]
 801bc4a:	6841      	ldr	r1, [r0, #4]
 801bc4c:	9205      	str	r2, [sp, #20]
 801bc4e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bc52:	fb01 2404 	mla	r4, r1, r4, r2
 801bc56:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801bc5a:	6802      	ldr	r2, [r0, #0]
 801bc5c:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 801bf50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801bc60:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bc64:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bc68:	3201      	adds	r2, #1
 801bc6a:	f022 0201 	bic.w	r2, r2, #1
 801bc6e:	9202      	str	r2, [sp, #8]
 801bc70:	f8db 2000 	ldr.w	r2, [fp]
 801bc74:	9203      	str	r2, [sp, #12]
 801bc76:	9a01      	ldr	r2, [sp, #4]
 801bc78:	2a00      	cmp	r2, #0
 801bc7a:	dc03      	bgt.n	801bc84 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc7c:	9a05      	ldr	r2, [sp, #20]
 801bc7e:	2a00      	cmp	r2, #0
 801bc80:	f340 8162 	ble.w	801bf48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bc84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc86:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801bc8a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bc8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc90:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801bc94:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	dd0e      	ble.n	801bcba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bc9c:	1402      	asrs	r2, r0, #16
 801bc9e:	d405      	bmi.n	801bcac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bca0:	42ba      	cmp	r2, r7
 801bca2:	da03      	bge.n	801bcac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bca4:	140a      	asrs	r2, r1, #16
 801bca6:	d401      	bmi.n	801bcac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bca8:	42b2      	cmp	r2, r6
 801bcaa:	db07      	blt.n	801bcbc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bcac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bcae:	3b01      	subs	r3, #1
 801bcb0:	4410      	add	r0, r2
 801bcb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bcb4:	3402      	adds	r4, #2
 801bcb6:	4411      	add	r1, r2
 801bcb8:	e7ee      	b.n	801bc98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bcba:	d017      	beq.n	801bcec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801bcbc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bcbe:	1e5a      	subs	r2, r3, #1
 801bcc0:	fb05 0502 	mla	r5, r5, r2, r0
 801bcc4:	142d      	asrs	r5, r5, #16
 801bcc6:	d409      	bmi.n	801bcdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcc8:	42bd      	cmp	r5, r7
 801bcca:	da07      	bge.n	801bcdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bccc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bcce:	fb05 1202 	mla	r2, r5, r2, r1
 801bcd2:	1412      	asrs	r2, r2, #16
 801bcd4:	d402      	bmi.n	801bcdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcd6:	42b2      	cmp	r2, r6
 801bcd8:	f2c0 80c3 	blt.w	801be62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801bcdc:	2500      	movs	r5, #0
 801bcde:	195a      	adds	r2, r3, r5
 801bce0:	2a00      	cmp	r2, #0
 801bce2:	dc3f      	bgt.n	801bd64 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bce8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bcec:	9b01      	ldr	r3, [sp, #4]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	f340 812a 	ble.w	801bf48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bcf4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bcf8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bcfc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd04:	eeb0 6a62 	vmov.f32	s12, s5
 801bd08:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd10:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd1c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bd20:	eeb0 6a43 	vmov.f32	s12, s6
 801bd24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd28:	ee12 2a90 	vmov	r2, s5
 801bd2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd36:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd3a:	ee13 2a10 	vmov	r2, s6
 801bd3e:	9313      	str	r3, [sp, #76]	; 0x4c
 801bd40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd42:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bd46:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd4a:	9314      	str	r3, [sp, #80]	; 0x50
 801bd4c:	9b01      	ldr	r3, [sp, #4]
 801bd4e:	9a05      	ldr	r2, [sp, #20]
 801bd50:	3b01      	subs	r3, #1
 801bd52:	9301      	str	r3, [sp, #4]
 801bd54:	eeb0 3a67 	vmov.f32	s6, s15
 801bd58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd5a:	eef0 2a47 	vmov.f32	s5, s14
 801bd5e:	bf08      	it	eq
 801bd60:	4613      	moveq	r3, r2
 801bd62:	e788      	b.n	801bc76 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bd64:	1406      	asrs	r6, r0, #16
 801bd66:	d42c      	bmi.n	801bdc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd68:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bd6c:	42b2      	cmp	r2, r6
 801bd6e:	dd28      	ble.n	801bdc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd70:	140f      	asrs	r7, r1, #16
 801bd72:	d426      	bmi.n	801bdc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd74:	f8db 200c 	ldr.w	r2, [fp, #12]
 801bd78:	42ba      	cmp	r2, r7
 801bd7a:	dd22      	ble.n	801bdc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd7c:	9a02      	ldr	r2, [sp, #8]
 801bd7e:	fb07 6602 	mla	r6, r7, r2, r6
 801bd82:	9f03      	ldr	r7, [sp, #12]
 801bd84:	0872      	lsrs	r2, r6, #1
 801bd86:	5cba      	ldrb	r2, [r7, r2]
 801bd88:	07f6      	lsls	r6, r6, #31
 801bd8a:	bf54      	ite	pl
 801bd8c:	f002 020f 	andpl.w	r2, r2, #15
 801bd90:	1112      	asrmi	r2, r2, #4
 801bd92:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bd96:	b2d2      	uxtb	r2, r2
 801bd98:	2aff      	cmp	r2, #255	; 0xff
 801bd9a:	d118      	bne.n	801bdce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bd9c:	f06f 0601 	mvn.w	r6, #1
 801bda0:	f8d8 2000 	ldr.w	r2, [r8]
 801bda4:	fb06 f705 	mul.w	r7, r6, r5
 801bda8:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801bdac:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801bdb0:	0956      	lsrs	r6, r2, #5
 801bdb2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bdb6:	ea4c 0606 	orr.w	r6, ip, r6
 801bdba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bdbe:	4316      	orrs	r6, r2
 801bdc0:	53e6      	strh	r6, [r4, r7]
 801bdc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bdc4:	3d01      	subs	r5, #1
 801bdc6:	4410      	add	r0, r2
 801bdc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdca:	4411      	add	r1, r2
 801bdcc:	e787      	b.n	801bcde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bdce:	2a00      	cmp	r2, #0
 801bdd0:	d0f7      	beq.n	801bdc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bdd2:	f06f 0601 	mvn.w	r6, #1
 801bdd6:	fa1f f982 	uxth.w	r9, r2
 801bdda:	43d2      	mvns	r2, r2
 801bddc:	436e      	muls	r6, r5
 801bdde:	f8d8 c000 	ldr.w	ip, [r8]
 801bde2:	f834 e006 	ldrh.w	lr, [r4, r6]
 801bde6:	9604      	str	r6, [sp, #16]
 801bde8:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801bdec:	fb16 f609 	smulbb	r6, r6, r9
 801bdf0:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801bdf4:	fa5f fc8c 	uxtb.w	ip, ip
 801bdf8:	ea4f 272e 	mov.w	r7, lr, asr #8
 801bdfc:	fb1c fc09 	smulbb	ip, ip, r9
 801be00:	b2d2      	uxtb	r2, r2
 801be02:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801be06:	fb07 6702 	mla	r7, r7, r2, r6
 801be0a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801be0e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801be12:	fb1a fa09 	smulbb	sl, sl, r9
 801be16:	fa5f fe8e 	uxtb.w	lr, lr
 801be1a:	fb0e cc02 	mla	ip, lr, r2, ip
 801be1e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be22:	fb06 a602 	mla	r6, r6, r2, sl
 801be26:	b2bf      	uxth	r7, r7
 801be28:	fa1f fc8c 	uxth.w	ip, ip
 801be2c:	1c7a      	adds	r2, r7, #1
 801be2e:	f10c 0a01 	add.w	sl, ip, #1
 801be32:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801be36:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801be3a:	b2b6      	uxth	r6, r6
 801be3c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801be40:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801be44:	ea4a 0707 	orr.w	r7, sl, r7
 801be48:	f106 0a01 	add.w	sl, r6, #1
 801be4c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801be50:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be54:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801be58:	9a04      	ldr	r2, [sp, #16]
 801be5a:	ea47 070a 	orr.w	r7, r7, sl
 801be5e:	52a7      	strh	r7, [r4, r2]
 801be60:	e7af      	b.n	801bdc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be62:	f04f 0e00 	mov.w	lr, #0
 801be66:	eba3 020e 	sub.w	r2, r3, lr
 801be6a:	2a00      	cmp	r2, #0
 801be6c:	f77f af3a 	ble.w	801bce4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801be70:	9e02      	ldr	r6, [sp, #8]
 801be72:	1402      	asrs	r2, r0, #16
 801be74:	140d      	asrs	r5, r1, #16
 801be76:	fb06 2505 	mla	r5, r6, r5, r2
 801be7a:	9e03      	ldr	r6, [sp, #12]
 801be7c:	086a      	lsrs	r2, r5, #1
 801be7e:	5cb2      	ldrb	r2, [r6, r2]
 801be80:	07ed      	lsls	r5, r5, #31
 801be82:	bf54      	ite	pl
 801be84:	f002 020f 	andpl.w	r2, r2, #15
 801be88:	1112      	asrmi	r2, r2, #4
 801be8a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801be8e:	b2d2      	uxtb	r2, r2
 801be90:	2aff      	cmp	r2, #255	; 0xff
 801be92:	d115      	bne.n	801bec0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801be94:	f8d8 5000 	ldr.w	r5, [r8]
 801be98:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801be9c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801bea0:	096a      	lsrs	r2, r5, #5
 801bea2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bea6:	4332      	orrs	r2, r6
 801bea8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801beac:	432a      	orrs	r2, r5
 801beae:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801beb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801beb4:	f10e 0e01 	add.w	lr, lr, #1
 801beb8:	4410      	add	r0, r2
 801beba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bebc:	4411      	add	r1, r2
 801bebe:	e7d2      	b.n	801be66 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801bec0:	2a00      	cmp	r2, #0
 801bec2:	d0f6      	beq.n	801beb2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bec4:	fa1f f982 	uxth.w	r9, r2
 801bec8:	43d2      	mvns	r2, r2
 801beca:	f8d8 7000 	ldr.w	r7, [r8]
 801bece:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801bed2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801bed6:	fb15 f509 	smulbb	r5, r5, r9
 801beda:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801bede:	b2ff      	uxtb	r7, r7
 801bee0:	ea4f 262c 	mov.w	r6, ip, asr #8
 801bee4:	fb17 f709 	smulbb	r7, r7, r9
 801bee8:	b2d2      	uxtb	r2, r2
 801beea:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801beee:	fb06 5602 	mla	r6, r6, r2, r5
 801bef2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801bef6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801befa:	fb1a fa09 	smulbb	sl, sl, r9
 801befe:	fa5f fc8c 	uxtb.w	ip, ip
 801bf02:	fb0c 7702 	mla	r7, ip, r2, r7
 801bf06:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bf0a:	fb05 a502 	mla	r5, r5, r2, sl
 801bf0e:	b2b6      	uxth	r6, r6
 801bf10:	b2bf      	uxth	r7, r7
 801bf12:	1c72      	adds	r2, r6, #1
 801bf14:	f107 0a01 	add.w	sl, r7, #1
 801bf18:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801bf1c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bf20:	b2ad      	uxth	r5, r5
 801bf22:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bf26:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801bf2a:	ea4a 0606 	orr.w	r6, sl, r6
 801bf2e:	f105 0a01 	add.w	sl, r5, #1
 801bf32:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bf36:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bf3a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bf3e:	ea46 060a 	orr.w	r6, r6, sl
 801bf42:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801bf46:	e7b4      	b.n	801beb2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bf48:	b007      	add	sp, #28
 801bf4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf4e:	bf00      	nop
 801bf50:	2000f39c 	.word	0x2000f39c

0801bf54 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801bf54:	4770      	bx	lr

0801bf56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801bf56:	4770      	bx	lr

0801bf58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801bf58:	4770      	bx	lr

0801bf5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bf5a:	4770      	bx	lr

0801bf5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bf5c:	4770      	bx	lr

0801bf5e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bf5e:	4770      	bx	lr

0801bf60 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bf60:	4770      	bx	lr

0801bf62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf62:	4770      	bx	lr

0801bf64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf64:	4770      	bx	lr

0801bf66 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf66:	4770      	bx	lr

0801bf68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf68:	4770      	bx	lr

0801bf6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf6a:	4770      	bx	lr

0801bf6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf6c:	4770      	bx	lr

0801bf6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf6e:	4770      	bx	lr

0801bf70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf70:	4770      	bx	lr

0801bf72 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf72:	4770      	bx	lr

0801bf74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bf74:	4770      	bx	lr

0801bf76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf76:	4770      	bx	lr

0801bf78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf78:	4770      	bx	lr

0801bf7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf7a:	4770      	bx	lr

0801bf7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf7c:	4770      	bx	lr

0801bf7e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf7e:	4770      	bx	lr

0801bf80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf80:	4770      	bx	lr

0801bf82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf82:	4770      	bx	lr

0801bf84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf84:	4770      	bx	lr

0801bf86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf86:	4770      	bx	lr

0801bf88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bf88:	4770      	bx	lr

0801bf8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf8a:	4770      	bx	lr

0801bf8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf8c:	4770      	bx	lr

0801bf8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf8e:	4770      	bx	lr

0801bf90 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bf90:	4770      	bx	lr

0801bf92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801bf92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf96:	b088      	sub	sp, #32
 801bf98:	ac08      	add	r4, sp, #32
 801bf9a:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801bf9e:	4606      	mov	r6, r0
 801bfa0:	4620      	mov	r0, r4
 801bfa2:	4688      	mov	r8, r1
 801bfa4:	4691      	mov	r9, r2
 801bfa6:	f7fd fc63 	bl	8019870 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bfaa:	6833      	ldr	r3, [r6, #0]
 801bfac:	4605      	mov	r5, r0
 801bfae:	4620      	mov	r0, r4
 801bfb0:	699f      	ldr	r7, [r3, #24]
 801bfb2:	f7fd fb71 	bl	8019698 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bfb6:	4682      	mov	sl, r0
 801bfb8:	4620      	mov	r0, r4
 801bfba:	f7fd fba1 	bl	8019700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bfbe:	9500      	str	r5, [sp, #0]
 801bfc0:	e9cd a001 	strd	sl, r0, [sp, #4]
 801bfc4:	464b      	mov	r3, r9
 801bfc6:	a806      	add	r0, sp, #24
 801bfc8:	4642      	mov	r2, r8
 801bfca:	4631      	mov	r1, r6
 801bfcc:	47b8      	blx	r7
 801bfce:	4628      	mov	r0, r5
 801bfd0:	b008      	add	sp, #32
 801bfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801bfd8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801bfd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bfdc:	2300      	movs	r3, #0
 801bfde:	9300      	str	r3, [sp, #0]
 801bfe0:	4b3d      	ldr	r3, [pc, #244]	; (801c0d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801bfe2:	781b      	ldrb	r3, [r3, #0]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d137      	bne.n	801c058 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801bfe8:	4a3c      	ldr	r2, [pc, #240]	; (801c0dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801bfea:	f9b2 2000 	ldrsh.w	r2, [r2]
 801bfee:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d132      	bne.n	801c05c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801bff6:	4b3a      	ldr	r3, [pc, #232]	; (801c0e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801bff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bffc:	6808      	ldr	r0, [r1, #0]
 801bffe:	6849      	ldr	r1, [r1, #4]
 801c000:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c004:	ac02      	add	r4, sp, #8
 801c006:	ab02      	add	r3, sp, #8
 801c008:	c303      	stmia	r3!, {r0, r1}
 801c00a:	4669      	mov	r1, sp
 801c00c:	4620      	mov	r0, r4
 801c00e:	f7fa fd1f 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c012:	4668      	mov	r0, sp
 801c014:	f7fa fcf4 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c018:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c01c:	f8bd 2000 	ldrh.w	r2, [sp]
 801c020:	4d30      	ldr	r5, [pc, #192]	; (801c0e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c022:	4413      	add	r3, r2
 801c024:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c028:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c02c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c030:	6828      	ldr	r0, [r5, #0]
 801c032:	4413      	add	r3, r2
 801c034:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c038:	6803      	ldr	r3, [r0, #0]
 801c03a:	462f      	mov	r7, r5
 801c03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c03e:	4798      	blx	r3
 801c040:	f010 0f01 	tst.w	r0, #1
 801c044:	d00c      	beq.n	801c060 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c046:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c04a:	6828      	ldr	r0, [r5, #0]
 801c04c:	6803      	ldr	r3, [r0, #0]
 801c04e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c050:	4798      	blx	r3
 801c052:	b004      	add	sp, #16
 801c054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c058:	4a21      	ldr	r2, [pc, #132]	; (801c0e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c05a:	e7c6      	b.n	801bfea <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c05c:	4b1f      	ldr	r3, [pc, #124]	; (801c0dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c05e:	e7cb      	b.n	801bff8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c060:	6838      	ldr	r0, [r7, #0]
 801c062:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c066:	6803      	ldr	r3, [r0, #0]
 801c068:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c06e:	4798      	blx	r3
 801c070:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c074:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c078:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c07c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c080:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c084:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c088:	6838      	ldr	r0, [r7, #0]
 801c08a:	6803      	ldr	r3, [r0, #0]
 801c08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c08e:	4798      	blx	r3
 801c090:	4a12      	ldr	r2, [pc, #72]	; (801c0dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c092:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c096:	4691      	mov	r9, r2
 801c098:	8813      	ldrh	r3, [r2, #0]
 801c09a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c09e:	435d      	muls	r5, r3
 801c0a0:	fb03 1404 	mla	r4, r3, r4, r1
 801c0a4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c0a8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c0ac:	6838      	ldr	r0, [r7, #0]
 801c0ae:	42ac      	cmp	r4, r5
 801c0b0:	6803      	ldr	r3, [r0, #0]
 801c0b2:	d20e      	bcs.n	801c0d2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c0b4:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801c0b8:	4632      	mov	r2, r6
 801c0ba:	4643      	mov	r3, r8
 801c0bc:	4621      	mov	r1, r4
 801c0be:	47d0      	blx	sl
 801c0c0:	f8b9 3000 	ldrh.w	r3, [r9]
 801c0c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c0c8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c0cc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c0d0:	e7ec      	b.n	801c0ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0d4:	4798      	blx	r3
 801c0d6:	e7bc      	b.n	801c052 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c0d8:	2000f38c 	.word	0x2000f38c
 801c0dc:	2000f38e 	.word	0x2000f38e
 801c0e0:	2000f390 	.word	0x2000f390
 801c0e4:	2000f394 	.word	0x2000f394

0801c0e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ec:	b08b      	sub	sp, #44	; 0x2c
 801c0ee:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801c0f2:	460f      	mov	r7, r1
 801c0f4:	4616      	mov	r6, r2
 801c0f6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c0fa:	f1bb 0f00 	cmp.w	fp, #0
 801c0fe:	d04a      	beq.n	801c196 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801c100:	6810      	ldr	r0, [r2, #0]
 801c102:	6851      	ldr	r1, [r2, #4]
 801c104:	ad06      	add	r5, sp, #24
 801c106:	c503      	stmia	r5!, {r0, r1}
 801c108:	6818      	ldr	r0, [r3, #0]
 801c10a:	6859      	ldr	r1, [r3, #4]
 801c10c:	ad08      	add	r5, sp, #32
 801c10e:	c503      	stmia	r5!, {r0, r1}
 801c110:	a806      	add	r0, sp, #24
 801c112:	f7fa fc75 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c116:	4631      	mov	r1, r6
 801c118:	a808      	add	r0, sp, #32
 801c11a:	f7fa fc99 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c11e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c122:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c126:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c12a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c12e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c132:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c136:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c13a:	4f60      	ldr	r7, [pc, #384]	; (801c2bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c13c:	440a      	add	r2, r1
 801c13e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c142:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c146:	6838      	ldr	r0, [r7, #0]
 801c148:	4413      	add	r3, r2
 801c14a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c14e:	6803      	ldr	r3, [r0, #0]
 801c150:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c156:	4798      	blx	r3
 801c158:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c15c:	46b9      	mov	r9, r7
 801c15e:	d11d      	bne.n	801c19c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801c160:	b9fc      	cbnz	r4, 801c1a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c162:	f010 0f01 	tst.w	r0, #1
 801c166:	d01c      	beq.n	801c1a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c168:	2700      	movs	r7, #0
 801c16a:	f8d9 0000 	ldr.w	r0, [r9]
 801c16e:	b2ad      	uxth	r5, r5
 801c170:	6801      	ldr	r1, [r0, #0]
 801c172:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c176:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c17a:	f8cd b00c 	str.w	fp, [sp, #12]
 801c17e:	9402      	str	r4, [sp, #8]
 801c180:	fa1f f488 	uxth.w	r4, r8
 801c184:	9501      	str	r5, [sp, #4]
 801c186:	9400      	str	r4, [sp, #0]
 801c188:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801c18a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c18e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c192:	4631      	mov	r1, r6
 801c194:	47a0      	blx	r4
 801c196:	b00b      	add	sp, #44	; 0x2c
 801c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c19c:	f010 0f04 	tst.w	r0, #4
 801c1a0:	e7e1      	b.n	801c166 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801c1a2:	f8d9 0000 	ldr.w	r0, [r9]
 801c1a6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c1aa:	6803      	ldr	r3, [r0, #0]
 801c1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1ae:	4798      	blx	r3
 801c1b0:	4b43      	ldr	r3, [pc, #268]	; (801c2c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c1b2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c1b6:	881a      	ldrh	r2, [r3, #0]
 801c1b8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c1bc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c1c0:	fb02 1404 	mla	r4, r2, r4, r1
 801c1c4:	469a      	mov	sl, r3
 801c1c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c1ca:	fb05 f502 	mul.w	r5, r5, r2
 801c1ce:	d059      	beq.n	801c284 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c1d0:	469e      	mov	lr, r3
 801c1d2:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801c1d6:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c1da:	fa1f f28b 	uxth.w	r2, fp
 801c1de:	fa1f f989 	uxth.w	r9, r9
 801c1e2:	42ac      	cmp	r4, r5
 801c1e4:	d264      	bcs.n	801c2b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c1e6:	eb04 0a07 	add.w	sl, r4, r7
 801c1ea:	4554      	cmp	r4, sl
 801c1ec:	d23d      	bcs.n	801c26a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c1ee:	8821      	ldrh	r1, [r4, #0]
 801c1f0:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c1f4:	1208      	asrs	r0, r1, #8
 801c1f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c1fa:	fb10 f009 	smulbb	r0, r0, r9
 801c1fe:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c202:	00c9      	lsls	r1, r1, #3
 801c204:	b2c9      	uxtb	r1, r1
 801c206:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c20a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c20e:	fb11 f109 	smulbb	r1, r1, r9
 801c212:	fb1b fb09 	smulbb	fp, fp, r9
 801c216:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c21a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c21e:	10d8      	asrs	r0, r3, #3
 801c220:	00db      	lsls	r3, r3, #3
 801c222:	b2db      	uxtb	r3, r3
 801c224:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c228:	fb03 1302 	mla	r3, r3, r2, r1
 801c22c:	fb00 b002 	mla	r0, r0, r2, fp
 801c230:	fa1f fc8c 	uxth.w	ip, ip
 801c234:	f10c 0b01 	add.w	fp, ip, #1
 801c238:	b29b      	uxth	r3, r3
 801c23a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c23e:	b280      	uxth	r0, r0
 801c240:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801c244:	f103 0c01 	add.w	ip, r3, #1
 801c248:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c24c:	1c43      	adds	r3, r0, #1
 801c24e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c252:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c256:	0940      	lsrs	r0, r0, #5
 801c258:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c25c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c260:	ea4c 0c00 	orr.w	ip, ip, r0
 801c264:	f824 cb02 	strh.w	ip, [r4], #2
 801c268:	e7bf      	b.n	801c1ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c26a:	f8be 3000 	ldrh.w	r3, [lr]
 801c26e:	eba3 0308 	sub.w	r3, r3, r8
 801c272:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c276:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c27a:	eba3 0308 	sub.w	r3, r3, r8
 801c27e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c282:	e7ae      	b.n	801c1e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c284:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c288:	f8d9 0000 	ldr.w	r0, [r9]
 801c28c:	42ac      	cmp	r4, r5
 801c28e:	6803      	ldr	r3, [r0, #0]
 801c290:	d20e      	bcs.n	801c2b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c292:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801c296:	4632      	mov	r2, r6
 801c298:	463b      	mov	r3, r7
 801c29a:	4621      	mov	r1, r4
 801c29c:	47c0      	blx	r8
 801c29e:	f8ba 3000 	ldrh.w	r3, [sl]
 801c2a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c2a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c2aa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c2ae:	e7eb      	b.n	801c288 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c2b0:	4b02      	ldr	r3, [pc, #8]	; (801c2bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c2b2:	6818      	ldr	r0, [r3, #0]
 801c2b4:	6803      	ldr	r3, [r0, #0]
 801c2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2b8:	4798      	blx	r3
 801c2ba:	e76c      	b.n	801c196 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801c2bc:	2000f394 	.word	0x2000f394
 801c2c0:	2000f38e 	.word	0x2000f38e

0801c2c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801c2c4:	b510      	push	{r4, lr}
 801c2c6:	4604      	mov	r4, r0
 801c2c8:	2104      	movs	r1, #4
 801c2ca:	f00a fdf6 	bl	8026eba <_ZdlPvj>
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	bd10      	pop	{r4, pc}

0801c2d2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801c2d2:	b510      	push	{r4, lr}
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	2104      	movs	r1, #4
 801c2d8:	f00a fdef 	bl	8026eba <_ZdlPvj>
 801c2dc:	4620      	mov	r0, r4
 801c2de:	bd10      	pop	{r4, pc}

0801c2e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801c2e0:	b510      	push	{r4, lr}
 801c2e2:	4604      	mov	r4, r0
 801c2e4:	f640 0144 	movw	r1, #2116	; 0x844
 801c2e8:	f00a fde7 	bl	8026eba <_ZdlPvj>
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	bd10      	pop	{r4, pc}

0801c2f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c2f0:	b510      	push	{r4, lr}
 801c2f2:	4604      	mov	r4, r0
 801c2f4:	2104      	movs	r1, #4
 801c2f6:	f00a fde0 	bl	8026eba <_ZdlPvj>
 801c2fa:	4620      	mov	r0, r4
 801c2fc:	bd10      	pop	{r4, pc}

0801c2fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c2fe:	b510      	push	{r4, lr}
 801c300:	4604      	mov	r4, r0
 801c302:	2104      	movs	r1, #4
 801c304:	f00a fdd9 	bl	8026eba <_ZdlPvj>
 801c308:	4620      	mov	r0, r4
 801c30a:	bd10      	pop	{r4, pc}

0801c30c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c30c:	b510      	push	{r4, lr}
 801c30e:	4604      	mov	r4, r0
 801c310:	2104      	movs	r1, #4
 801c312:	f00a fdd2 	bl	8026eba <_ZdlPvj>
 801c316:	4620      	mov	r0, r4
 801c318:	bd10      	pop	{r4, pc}

0801c31a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c31a:	b510      	push	{r4, lr}
 801c31c:	4604      	mov	r4, r0
 801c31e:	2104      	movs	r1, #4
 801c320:	f00a fdcb 	bl	8026eba <_ZdlPvj>
 801c324:	4620      	mov	r0, r4
 801c326:	bd10      	pop	{r4, pc}

0801c328 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c328:	b510      	push	{r4, lr}
 801c32a:	4604      	mov	r4, r0
 801c32c:	2104      	movs	r1, #4
 801c32e:	f00a fdc4 	bl	8026eba <_ZdlPvj>
 801c332:	4620      	mov	r0, r4
 801c334:	bd10      	pop	{r4, pc}

0801c336 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c336:	b510      	push	{r4, lr}
 801c338:	4604      	mov	r4, r0
 801c33a:	2104      	movs	r1, #4
 801c33c:	f00a fdbd 	bl	8026eba <_ZdlPvj>
 801c340:	4620      	mov	r0, r4
 801c342:	bd10      	pop	{r4, pc}

0801c344 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c344:	b510      	push	{r4, lr}
 801c346:	4604      	mov	r4, r0
 801c348:	2104      	movs	r1, #4
 801c34a:	f00a fdb6 	bl	8026eba <_ZdlPvj>
 801c34e:	4620      	mov	r0, r4
 801c350:	bd10      	pop	{r4, pc}

0801c352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c352:	b510      	push	{r4, lr}
 801c354:	4604      	mov	r4, r0
 801c356:	2104      	movs	r1, #4
 801c358:	f00a fdaf 	bl	8026eba <_ZdlPvj>
 801c35c:	4620      	mov	r0, r4
 801c35e:	bd10      	pop	{r4, pc}

0801c360 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c360:	b510      	push	{r4, lr}
 801c362:	4604      	mov	r4, r0
 801c364:	2104      	movs	r1, #4
 801c366:	f00a fda8 	bl	8026eba <_ZdlPvj>
 801c36a:	4620      	mov	r0, r4
 801c36c:	bd10      	pop	{r4, pc}

0801c36e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c36e:	b510      	push	{r4, lr}
 801c370:	4604      	mov	r4, r0
 801c372:	2104      	movs	r1, #4
 801c374:	f00a fda1 	bl	8026eba <_ZdlPvj>
 801c378:	4620      	mov	r0, r4
 801c37a:	bd10      	pop	{r4, pc}

0801c37c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c37c:	b510      	push	{r4, lr}
 801c37e:	4604      	mov	r4, r0
 801c380:	2104      	movs	r1, #4
 801c382:	f00a fd9a 	bl	8026eba <_ZdlPvj>
 801c386:	4620      	mov	r0, r4
 801c388:	bd10      	pop	{r4, pc}

0801c38a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c38a:	b510      	push	{r4, lr}
 801c38c:	4604      	mov	r4, r0
 801c38e:	2104      	movs	r1, #4
 801c390:	f00a fd93 	bl	8026eba <_ZdlPvj>
 801c394:	4620      	mov	r0, r4
 801c396:	bd10      	pop	{r4, pc}

0801c398 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c398:	b510      	push	{r4, lr}
 801c39a:	4604      	mov	r4, r0
 801c39c:	2104      	movs	r1, #4
 801c39e:	f00a fd8c 	bl	8026eba <_ZdlPvj>
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	bd10      	pop	{r4, pc}

0801c3a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c3a6:	b510      	push	{r4, lr}
 801c3a8:	4604      	mov	r4, r0
 801c3aa:	2104      	movs	r1, #4
 801c3ac:	f00a fd85 	bl	8026eba <_ZdlPvj>
 801c3b0:	4620      	mov	r0, r4
 801c3b2:	bd10      	pop	{r4, pc}

0801c3b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c3b4:	b510      	push	{r4, lr}
 801c3b6:	4604      	mov	r4, r0
 801c3b8:	2104      	movs	r1, #4
 801c3ba:	f00a fd7e 	bl	8026eba <_ZdlPvj>
 801c3be:	4620      	mov	r0, r4
 801c3c0:	bd10      	pop	{r4, pc}

0801c3c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c3c2:	b510      	push	{r4, lr}
 801c3c4:	4604      	mov	r4, r0
 801c3c6:	2104      	movs	r1, #4
 801c3c8:	f00a fd77 	bl	8026eba <_ZdlPvj>
 801c3cc:	4620      	mov	r0, r4
 801c3ce:	bd10      	pop	{r4, pc}

0801c3d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c3d0:	b510      	push	{r4, lr}
 801c3d2:	4604      	mov	r4, r0
 801c3d4:	2104      	movs	r1, #4
 801c3d6:	f00a fd70 	bl	8026eba <_ZdlPvj>
 801c3da:	4620      	mov	r0, r4
 801c3dc:	bd10      	pop	{r4, pc}

0801c3de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c3de:	b510      	push	{r4, lr}
 801c3e0:	4604      	mov	r4, r0
 801c3e2:	2104      	movs	r1, #4
 801c3e4:	f00a fd69 	bl	8026eba <_ZdlPvj>
 801c3e8:	4620      	mov	r0, r4
 801c3ea:	bd10      	pop	{r4, pc}

0801c3ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c3ec:	b510      	push	{r4, lr}
 801c3ee:	4604      	mov	r4, r0
 801c3f0:	2104      	movs	r1, #4
 801c3f2:	f00a fd62 	bl	8026eba <_ZdlPvj>
 801c3f6:	4620      	mov	r0, r4
 801c3f8:	bd10      	pop	{r4, pc}

0801c3fa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c3fa:	b510      	push	{r4, lr}
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	2104      	movs	r1, #4
 801c400:	f00a fd5b 	bl	8026eba <_ZdlPvj>
 801c404:	4620      	mov	r0, r4
 801c406:	bd10      	pop	{r4, pc}

0801c408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c408:	b510      	push	{r4, lr}
 801c40a:	4604      	mov	r4, r0
 801c40c:	2104      	movs	r1, #4
 801c40e:	f00a fd54 	bl	8026eba <_ZdlPvj>
 801c412:	4620      	mov	r0, r4
 801c414:	bd10      	pop	{r4, pc}

0801c416 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c416:	b510      	push	{r4, lr}
 801c418:	4604      	mov	r4, r0
 801c41a:	2104      	movs	r1, #4
 801c41c:	f00a fd4d 	bl	8026eba <_ZdlPvj>
 801c420:	4620      	mov	r0, r4
 801c422:	bd10      	pop	{r4, pc}

0801c424 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c424:	b510      	push	{r4, lr}
 801c426:	4604      	mov	r4, r0
 801c428:	2104      	movs	r1, #4
 801c42a:	f00a fd46 	bl	8026eba <_ZdlPvj>
 801c42e:	4620      	mov	r0, r4
 801c430:	bd10      	pop	{r4, pc}

0801c432 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c432:	b510      	push	{r4, lr}
 801c434:	4604      	mov	r4, r0
 801c436:	2104      	movs	r1, #4
 801c438:	f00a fd3f 	bl	8026eba <_ZdlPvj>
 801c43c:	4620      	mov	r0, r4
 801c43e:	bd10      	pop	{r4, pc}

0801c440 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c440:	b510      	push	{r4, lr}
 801c442:	4604      	mov	r4, r0
 801c444:	2104      	movs	r1, #4
 801c446:	f00a fd38 	bl	8026eba <_ZdlPvj>
 801c44a:	4620      	mov	r0, r4
 801c44c:	bd10      	pop	{r4, pc}

0801c44e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c44e:	b510      	push	{r4, lr}
 801c450:	4604      	mov	r4, r0
 801c452:	2104      	movs	r1, #4
 801c454:	f00a fd31 	bl	8026eba <_ZdlPvj>
 801c458:	4620      	mov	r0, r4
 801c45a:	bd10      	pop	{r4, pc}

0801c45c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c45c:	b510      	push	{r4, lr}
 801c45e:	4604      	mov	r4, r0
 801c460:	2104      	movs	r1, #4
 801c462:	f00a fd2a 	bl	8026eba <_ZdlPvj>
 801c466:	4620      	mov	r0, r4
 801c468:	bd10      	pop	{r4, pc}

0801c46a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c46a:	b510      	push	{r4, lr}
 801c46c:	4604      	mov	r4, r0
 801c46e:	2104      	movs	r1, #4
 801c470:	f00a fd23 	bl	8026eba <_ZdlPvj>
 801c474:	4620      	mov	r0, r4
 801c476:	bd10      	pop	{r4, pc}

0801c478 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c47c:	b08f      	sub	sp, #60	; 0x3c
 801c47e:	9205      	str	r2, [sp, #20]
 801c480:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c484:	461c      	mov	r4, r3
 801c486:	9100      	str	r1, [sp, #0]
 801c488:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c48a:	9201      	str	r2, [sp, #4]
 801c48c:	2a00      	cmp	r2, #0
 801c48e:	f000 8116 	beq.w	801c6be <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801c492:	6820      	ldr	r0, [r4, #0]
 801c494:	6861      	ldr	r1, [r4, #4]
 801c496:	aa0a      	add	r2, sp, #40	; 0x28
 801c498:	c203      	stmia	r2!, {r0, r1}
 801c49a:	6818      	ldr	r0, [r3, #0]
 801c49c:	6859      	ldr	r1, [r3, #4]
 801c49e:	aa0c      	add	r2, sp, #48	; 0x30
 801c4a0:	c203      	stmia	r2!, {r0, r1}
 801c4a2:	a80a      	add	r0, sp, #40	; 0x28
 801c4a4:	f7fa faac 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c4a8:	4621      	mov	r1, r4
 801c4aa:	a80c      	add	r0, sp, #48	; 0x30
 801c4ac:	f7fa fad0 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c4b0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c4b4:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801c4b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c4bc:	bfdd      	ittte	le
 801c4be:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801c4c2:	b2b3      	uxthle	r3, r6
 801c4c4:	fb92 f3f3 	sdivle	r3, r2, r3
 801c4c8:	2301      	movgt	r3, #1
 801c4ca:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c4ce:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801c4d2:	fb92 f1f3 	sdiv	r1, r2, r3
 801c4d6:	fa1f fc81 	uxth.w	ip, r1
 801c4da:	4661      	mov	r1, ip
 801c4dc:	fb0c 2413 	mls	r4, ip, r3, r2
 801c4e0:	fb14 f406 	smulbb	r4, r4, r6
 801c4e4:	441d      	add	r5, r3
 801c4e6:	3d01      	subs	r5, #1
 801c4e8:	4404      	add	r4, r0
 801c4ea:	fb95 f5f3 	sdiv	r5, r5, r3
 801c4ee:	b2a4      	uxth	r4, r4
 801c4f0:	b131      	cbz	r1, 801c500 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801c4f2:	9b05      	ldr	r3, [sp, #20]
 801c4f4:	9900      	ldr	r1, [sp, #0]
 801c4f6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c4fa:	ba1b      	rev	r3, r3
 801c4fc:	4419      	add	r1, r3
 801c4fe:	9100      	str	r1, [sp, #0]
 801c500:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c504:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801c508:	4418      	add	r0, r3
 801c50a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c50e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801c512:	441a      	add	r2, r3
 801c514:	4b6b      	ldr	r3, [pc, #428]	; (801c6c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801c516:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801c51a:	6818      	ldr	r0, [r3, #0]
 801c51c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801c520:	6803      	ldr	r3, [r0, #0]
 801c522:	b2ad      	uxth	r5, r5
 801c524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c526:	4798      	blx	r3
 801c528:	4967      	ldr	r1, [pc, #412]	; (801c6c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801c52a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c52e:	880b      	ldrh	r3, [r1, #0]
 801c530:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c534:	00ad      	lsls	r5, r5, #2
 801c536:	fb03 c202 	mla	r2, r3, r2, ip
 801c53a:	4373      	muls	r3, r6
 801c53c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c540:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c544:	9306      	str	r3, [sp, #24]
 801c546:	1d2b      	adds	r3, r5, #4
 801c548:	9307      	str	r3, [sp, #28]
 801c54a:	9b01      	ldr	r3, [sp, #4]
 801c54c:	2c00      	cmp	r4, #0
 801c54e:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801c552:	bf0c      	ite	eq
 801c554:	46c6      	moveq	lr, r8
 801c556:	f04f 0e00 	movne.w	lr, #0
 801c55a:	2300      	movs	r3, #0
 801c55c:	9109      	str	r1, [sp, #36]	; 0x24
 801c55e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801c562:	b292      	uxth	r2, r2
 801c564:	fa1f fe8e 	uxth.w	lr, lr
 801c568:	9302      	str	r3, [sp, #8]
 801c56a:	9103      	str	r1, [sp, #12]
 801c56c:	9204      	str	r2, [sp, #16]
 801c56e:	9a06      	ldr	r2, [sp, #24]
 801c570:	4282      	cmp	r2, r0
 801c572:	f240 809f 	bls.w	801c6b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801c576:	b963      	cbnz	r3, 801c592 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801c578:	9b00      	ldr	r3, [sp, #0]
 801c57a:	781a      	ldrb	r2, [r3, #0]
 801c57c:	0993      	lsrs	r3, r2, #6
 801c57e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c582:	9202      	str	r2, [sp, #8]
 801c584:	1e5a      	subs	r2, r3, #1
 801c586:	2a02      	cmp	r2, #2
 801c588:	d815      	bhi.n	801c5b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801c58a:	9a00      	ldr	r2, [sp, #0]
 801c58c:	b29b      	uxth	r3, r3
 801c58e:	3201      	adds	r2, #1
 801c590:	9200      	str	r2, [sp, #0]
 801c592:	b1b4      	cbz	r4, 801c5c2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801c594:	429c      	cmp	r4, r3
 801c596:	bf99      	ittee	ls
 801c598:	1b1c      	subls	r4, r3, r4
 801c59a:	fa1f fa84 	uxthls.w	sl, r4
 801c59e:	4671      	movhi	r1, lr
 801c5a0:	f04f 0a00 	movhi.w	sl, #0
 801c5a4:	bf93      	iteet	ls
 801c5a6:	2400      	movls	r4, #0
 801c5a8:	1ae4      	subhi	r4, r4, r3
 801c5aa:	b2a4      	uxthhi	r4, r4
 801c5ac:	fa1f f188 	uxthls.w	r1, r8
 801c5b0:	4653      	mov	r3, sl
 801c5b2:	468e      	mov	lr, r1
 801c5b4:	e7db      	b.n	801c56e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801c5b6:	9a00      	ldr	r2, [sp, #0]
 801c5b8:	9b00      	ldr	r3, [sp, #0]
 801c5ba:	3202      	adds	r2, #2
 801c5bc:	785b      	ldrb	r3, [r3, #1]
 801c5be:	9200      	str	r2, [sp, #0]
 801c5c0:	e7e7      	b.n	801c592 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801c5c2:	2202      	movs	r2, #2
 801c5c4:	4615      	mov	r5, r2
 801c5c6:	4573      	cmp	r3, lr
 801c5c8:	bf2c      	ite	cs
 801c5ca:	46f1      	movcs	r9, lr
 801c5cc:	4699      	movcc	r9, r3
 801c5ce:	9907      	ldr	r1, [sp, #28]
 801c5d0:	9a02      	ldr	r2, [sp, #8]
 801c5d2:	bf28      	it	cs
 801c5d4:	eba3 0a0e 	subcs.w	sl, r3, lr
 801c5d8:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c5dc:	9905      	ldr	r1, [sp, #20]
 801c5de:	bf28      	it	cs
 801c5e0:	fa1f fa8a 	uxthcs.w	sl, sl
 801c5e4:	f831 c002 	ldrh.w	ip, [r1, r2]
 801c5e8:	9a01      	ldr	r2, [sp, #4]
 801c5ea:	bf37      	itett	cc
 801c5ec:	ebae 0103 	subcc.w	r1, lr, r3
 801c5f0:	4621      	movcs	r1, r4
 801c5f2:	b289      	uxthcc	r1, r1
 801c5f4:	46a2      	movcc	sl, r4
 801c5f6:	2aff      	cmp	r2, #255	; 0xff
 801c5f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c5fc:	d105      	bne.n	801c60a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801c5fe:	4481      	add	r9, r0
 801c600:	4581      	cmp	r9, r0
 801c602:	d045      	beq.n	801c690 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801c604:	f820 cb02 	strh.w	ip, [r0], #2
 801c608:	e7fa      	b.n	801c600 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801c60a:	9d03      	ldr	r5, [sp, #12]
 801c60c:	ea4f 222c 	mov.w	r2, ip, asr #8
 801c610:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801c614:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c618:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c61c:	436a      	muls	r2, r5
 801c61e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c622:	fa5f fc8c 	uxtb.w	ip, ip
 801c626:	fb0b fb05 	mul.w	fp, fp, r5
 801c62a:	fb0c fc05 	mul.w	ip, ip, r5
 801c62e:	9208      	str	r2, [sp, #32]
 801c630:	4481      	add	r9, r0
 801c632:	4581      	cmp	r9, r0
 801c634:	d02c      	beq.n	801c690 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801c636:	8802      	ldrh	r2, [r0, #0]
 801c638:	9d04      	ldr	r5, [sp, #16]
 801c63a:	1216      	asrs	r6, r2, #8
 801c63c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c640:	fb16 f605 	smulbb	r6, r6, r5
 801c644:	9d08      	ldr	r5, [sp, #32]
 801c646:	9f04      	ldr	r7, [sp, #16]
 801c648:	442e      	add	r6, r5
 801c64a:	10d5      	asrs	r5, r2, #3
 801c64c:	00d2      	lsls	r2, r2, #3
 801c64e:	b2d2      	uxtb	r2, r2
 801c650:	fb12 f207 	smulbb	r2, r2, r7
 801c654:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c658:	fb15 f507 	smulbb	r5, r5, r7
 801c65c:	b2b6      	uxth	r6, r6
 801c65e:	4462      	add	r2, ip
 801c660:	b292      	uxth	r2, r2
 801c662:	1c77      	adds	r7, r6, #1
 801c664:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801c668:	1c57      	adds	r7, r2, #1
 801c66a:	445d      	add	r5, fp
 801c66c:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801c670:	b2ad      	uxth	r5, r5
 801c672:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c676:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c67a:	4316      	orrs	r6, r2
 801c67c:	1c6a      	adds	r2, r5, #1
 801c67e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801c682:	096d      	lsrs	r5, r5, #5
 801c684:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c688:	432e      	orrs	r6, r5
 801c68a:	f820 6b02 	strh.w	r6, [r0], #2
 801c68e:	e7d0      	b.n	801c632 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801c690:	4573      	cmp	r3, lr
 801c692:	d38d      	bcc.n	801c5b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801c694:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801c698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c69a:	fa1f f188 	uxth.w	r1, r8
 801c69e:	1a64      	subs	r4, r4, r1
 801c6a0:	881b      	ldrh	r3, [r3, #0]
 801c6a2:	b2a4      	uxth	r4, r4
 801c6a4:	2c00      	cmp	r4, #0
 801c6a6:	eba3 0308 	sub.w	r3, r3, r8
 801c6aa:	bf18      	it	ne
 801c6ac:	2100      	movne	r1, #0
 801c6ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c6b2:	e77d      	b.n	801c5b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801c6b4:	4b03      	ldr	r3, [pc, #12]	; (801c6c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801c6b6:	6818      	ldr	r0, [r3, #0]
 801c6b8:	6803      	ldr	r3, [r0, #0]
 801c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6bc:	4798      	blx	r3
 801c6be:	b00f      	add	sp, #60	; 0x3c
 801c6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6c4:	2000f394 	.word	0x2000f394
 801c6c8:	2000f38e 	.word	0x2000f38e

0801c6cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6d0:	b09f      	sub	sp, #124	; 0x7c
 801c6d2:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801c6d6:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801c6da:	461d      	mov	r5, r3
 801c6dc:	4604      	mov	r4, r0
 801c6de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c6e0:	9209      	str	r2, [sp, #36]	; 0x24
 801c6e2:	2a00      	cmp	r2, #0
 801c6e4:	f000 81e9 	beq.w	801caba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 801c6e8:	6828      	ldr	r0, [r5, #0]
 801c6ea:	6869      	ldr	r1, [r5, #4]
 801c6ec:	aa1a      	add	r2, sp, #104	; 0x68
 801c6ee:	c203      	stmia	r2!, {r0, r1}
 801c6f0:	6818      	ldr	r0, [r3, #0]
 801c6f2:	6859      	ldr	r1, [r3, #4]
 801c6f4:	aa1c      	add	r2, sp, #112	; 0x70
 801c6f6:	c203      	stmia	r2!, {r0, r1}
 801c6f8:	a81a      	add	r0, sp, #104	; 0x68
 801c6fa:	f7fa f981 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c6fe:	4629      	mov	r1, r5
 801c700:	a81c      	add	r0, sp, #112	; 0x70
 801c702:	f7fa f9a5 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c706:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801c70a:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 801c70e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c712:	bfdd      	ittte	le
 801c714:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801c718:	b29a      	uxthle	r2, r3
 801c71a:	fb91 f2f2 	sdivle	r2, r1, r2
 801c71e:	2201      	movgt	r2, #1
 801c720:	9202      	str	r2, [sp, #8]
 801c722:	9802      	ldr	r0, [sp, #8]
 801c724:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801c728:	9902      	ldr	r1, [sp, #8]
 801c72a:	fb92 f0f0 	sdiv	r0, r2, r0
 801c72e:	b280      	uxth	r0, r0
 801c730:	9010      	str	r0, [sp, #64]	; 0x40
 801c732:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c734:	9802      	ldr	r0, [sp, #8]
 801c736:	4488      	add	r8, r1
 801c738:	fb05 2510 	mls	r5, r5, r0, r2
 801c73c:	fb15 f503 	smulbb	r5, r5, r3
 801c740:	f108 38ff 	add.w	r8, r8, #4294967295
 801c744:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801c748:	fb98 f8f1 	sdiv	r8, r8, r1
 801c74c:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801c750:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 801c754:	440d      	add	r5, r1
 801c756:	4419      	add	r1, r3
 801c758:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801c75c:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801c760:	441a      	add	r2, r3
 801c762:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801c766:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801c76a:	9304      	str	r3, [sp, #16]
 801c76c:	4b93      	ldr	r3, [pc, #588]	; (801c9bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 801c76e:	f108 0801 	add.w	r8, r8, #1
 801c772:	6818      	ldr	r0, [r3, #0]
 801c774:	fa1f f888 	uxth.w	r8, r8
 801c778:	6803      	ldr	r3, [r0, #0]
 801c77a:	b2ad      	uxth	r5, r5
 801c77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c77e:	4798      	blx	r3
 801c780:	4b8f      	ldr	r3, [pc, #572]	; (801c9c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801c782:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801c786:	881a      	ldrh	r2, [r3, #0]
 801c788:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801c78c:	4356      	muls	r6, r2
 801c78e:	fb02 7101 	mla	r1, r2, r1, r7
 801c792:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c796:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801c79a:	920a      	str	r2, [sp, #40]	; 0x28
 801c79c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c79e:	2d00      	cmp	r5, #0
 801c7a0:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801c7a4:	f108 0204 	add.w	r2, r8, #4
 801c7a8:	9211      	str	r2, [sp, #68]	; 0x44
 801c7aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c7ac:	f04f 0100 	mov.w	r1, #0
 801c7b0:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801c7b4:	9215      	str	r2, [sp, #84]	; 0x54
 801c7b6:	9a04      	ldr	r2, [sp, #16]
 801c7b8:	bf18      	it	ne
 801c7ba:	2200      	movne	r2, #0
 801c7bc:	9318      	str	r3, [sp, #96]	; 0x60
 801c7be:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c7c2:	b292      	uxth	r2, r2
 801c7c4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c7c6:	4b7f      	ldr	r3, [pc, #508]	; (801c9c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801c7c8:	910d      	str	r1, [sp, #52]	; 0x34
 801c7ca:	1b1b      	subs	r3, r3, r4
 801c7cc:	9319      	str	r3, [sp, #100]	; 0x64
 801c7ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c7d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c7d2:	fa11 f383 	uxtah	r3, r1, r3
 801c7d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c7d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c7dc:	3304      	adds	r3, #4
 801c7de:	9306      	str	r3, [sp, #24]
 801c7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7e2:	4283      	cmp	r3, r0
 801c7e4:	f240 8164 	bls.w	801cab0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 801c7e8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801c7ec:	f04f 0a01 	mov.w	sl, #1
 801c7f0:	fbb5 f3f3 	udiv	r3, r5, r3
 801c7f4:	9902      	ldr	r1, [sp, #8]
 801c7f6:	9e06      	ldr	r6, [sp, #24]
 801c7f8:	1acb      	subs	r3, r1, r3
 801c7fa:	b29b      	uxth	r3, r3
 801c7fc:	9316      	str	r3, [sp, #88]	; 0x58
 801c7fe:	9b06      	ldr	r3, [sp, #24]
 801c800:	7836      	ldrb	r6, [r6, #0]
 801c802:	7859      	ldrb	r1, [r3, #1]
 801c804:	789b      	ldrb	r3, [r3, #2]
 801c806:	9612      	str	r6, [sp, #72]	; 0x48
 801c808:	021b      	lsls	r3, r3, #8
 801c80a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801c80e:	9906      	ldr	r1, [sp, #24]
 801c810:	3601      	adds	r6, #1
 801c812:	78c9      	ldrb	r1, [r1, #3]
 801c814:	9605      	str	r6, [sp, #20]
 801c816:	430b      	orrs	r3, r1
 801c818:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c81a:	46d3      	mov	fp, sl
 801c81c:	4419      	add	r1, r3
 801c81e:	1c4e      	adds	r6, r1, #1
 801c820:	9603      	str	r6, [sp, #12]
 801c822:	7849      	ldrb	r1, [r1, #1]
 801c824:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c826:	0209      	lsls	r1, r1, #8
 801c828:	5cf3      	ldrb	r3, [r6, r3]
 801c82a:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801c82e:	4319      	orrs	r1, r3
 801c830:	b28b      	uxth	r3, r1
 801c832:	930c      	str	r3, [sp, #48]	; 0x30
 801c834:	2300      	movs	r3, #0
 801c836:	4657      	mov	r7, sl
 801c838:	9307      	str	r3, [sp, #28]
 801c83a:	469c      	mov	ip, r3
 801c83c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801c840:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801c844:	930e      	str	r3, [sp, #56]	; 0x38
 801c846:	2d00      	cmp	r5, #0
 801c848:	d07e      	beq.n	801c948 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801c84a:	42af      	cmp	r7, r5
 801c84c:	d26e      	bcs.n	801c92c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 801c84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c850:	1bed      	subs	r5, r5, r7
 801c852:	4283      	cmp	r3, r0
 801c854:	b2ad      	uxth	r5, r5
 801c856:	9201      	str	r2, [sp, #4]
 801c858:	d802      	bhi.n	801c860 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801c85a:	e073      	b.n	801c944 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d15f      	bne.n	801c920 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 801c860:	9b03      	ldr	r3, [sp, #12]
 801c862:	f1cb 0207 	rsb	r2, fp, #7
 801c866:	785b      	ldrb	r3, [r3, #1]
 801c868:	4093      	lsls	r3, r2
 801c86a:	005b      	lsls	r3, r3, #1
 801c86c:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801c870:	9b03      	ldr	r3, [sp, #12]
 801c872:	781b      	ldrb	r3, [r3, #0]
 801c874:	fa43 f30b 	asr.w	r3, r3, fp
 801c878:	b2db      	uxtb	r3, r3
 801c87a:	4313      	orrs	r3, r2
 801c87c:	f10b 0201 	add.w	r2, fp, #1
 801c880:	fa5f fb82 	uxtb.w	fp, r2
 801c884:	9a03      	ldr	r2, [sp, #12]
 801c886:	f1bb 0f08 	cmp.w	fp, #8
 801c88a:	bf15      	itete	ne
 801c88c:	3201      	addne	r2, #1
 801c88e:	3202      	addeq	r2, #2
 801c890:	9203      	strne	r2, [sp, #12]
 801c892:	9203      	streq	r2, [sp, #12]
 801c894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c896:	b29f      	uxth	r7, r3
 801c898:	bf08      	it	eq
 801c89a:	f04f 0b00 	moveq.w	fp, #0
 801c89e:	42ba      	cmp	r2, r7
 801c8a0:	d309      	bcc.n	801c8b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 801c8a2:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801c8a6:	2301      	movs	r3, #1
 801c8a8:	9a05      	ldr	r2, [sp, #20]
 801c8aa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801c8ae:	d30e      	bcc.n	801c8ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 801c8b0:	469a      	mov	sl, r3
 801c8b2:	2600      	movs	r6, #0
 801c8b4:	e035      	b.n	801c922 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 801c8b6:	9b05      	ldr	r3, [sp, #20]
 801c8b8:	429f      	cmp	r7, r3
 801c8ba:	d318      	bcc.n	801c8ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 801c8bc:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801c8c0:	eb04 030a 	add.w	r3, r4, sl
 801c8c4:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801c8c8:	f10a 0301 	add.w	r3, sl, #1
 801c8cc:	b29b      	uxth	r3, r3
 801c8ce:	9a05      	ldr	r2, [sp, #20]
 801c8d0:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801c8d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c8d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c8da:	7116      	strb	r6, [r2, #4]
 801c8dc:	f10a 0601 	add.w	r6, sl, #1
 801c8e0:	80d1      	strh	r1, [r2, #6]
 801c8e2:	7156      	strb	r6, [r2, #5]
 801c8e4:	9a05      	ldr	r2, [sp, #20]
 801c8e6:	3201      	adds	r2, #1
 801c8e8:	b292      	uxth	r2, r2
 801c8ea:	9205      	str	r2, [sp, #20]
 801c8ec:	e7e0      	b.n	801c8b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 801c8ee:	463a      	mov	r2, r7
 801c8f0:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801c8f4:	795b      	ldrb	r3, [r3, #5]
 801c8f6:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801c8fa:	4426      	add	r6, r4
 801c8fc:	9919      	ldr	r1, [sp, #100]	; 0x64
 801c8fe:	eb01 0c06 	add.w	ip, r1, r6
 801c902:	f1bc 0f00 	cmp.w	ip, #0
 801c906:	dd07      	ble.n	801c918 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 801c908:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c90c:	f892 c004 	ldrb.w	ip, [r2, #4]
 801c910:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801c914:	88d2      	ldrh	r2, [r2, #6]
 801c916:	e7f1      	b.n	801c8fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 801c918:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801c91c:	b29b      	uxth	r3, r3
 801c91e:	e7c3      	b.n	801c8a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 801c920:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c922:	970c      	str	r7, [sp, #48]	; 0x30
 801c924:	9a01      	ldr	r2, [sp, #4]
 801c926:	46b4      	mov	ip, r6
 801c928:	461f      	mov	r7, r3
 801c92a:	e78c      	b.n	801c846 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 801c92c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c930:	1b7b      	subs	r3, r7, r5
 801c932:	eb0c 0605 	add.w	r6, ip, r5
 801c936:	b29b      	uxth	r3, r3
 801c938:	9201      	str	r2, [sp, #4]
 801c93a:	b2b6      	uxth	r6, r6
 801c93c:	2500      	movs	r5, #0
 801c93e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c940:	4282      	cmp	r2, r0
 801c942:	d88b      	bhi.n	801c85c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801c944:	9a01      	ldr	r2, [sp, #4]
 801c946:	e74b      	b.n	801c7e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 801c948:	4297      	cmp	r7, r2
 801c94a:	d331      	bcc.n	801c9b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 801c94c:	1abb      	subs	r3, r7, r2
 801c94e:	b29b      	uxth	r3, r3
 801c950:	9208      	str	r2, [sp, #32]
 801c952:	9501      	str	r5, [sp, #4]
 801c954:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c956:	29ff      	cmp	r1, #255	; 0xff
 801c958:	9908      	ldr	r1, [sp, #32]
 801c95a:	eb0c 0601 	add.w	r6, ip, r1
 801c95e:	d133      	bne.n	801c9c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 801c960:	f1a0 0e02 	sub.w	lr, r0, #2
 801c964:	b2b6      	uxth	r6, r6
 801c966:	45b4      	cmp	ip, r6
 801c968:	f040 808a 	bne.w	801ca80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 801c96c:	9908      	ldr	r1, [sp, #32]
 801c96e:	4297      	cmp	r7, r2
 801c970:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c974:	d3e2      	bcc.n	801c93c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 801c976:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c978:	9904      	ldr	r1, [sp, #16]
 801c97a:	8812      	ldrh	r2, [r2, #0]
 801c97c:	1a52      	subs	r2, r2, r1
 801c97e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c982:	9a07      	ldr	r2, [sp, #28]
 801c984:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c986:	3201      	adds	r2, #1
 801c988:	428a      	cmp	r2, r1
 801c98a:	9207      	str	r2, [sp, #28]
 801c98c:	f040 8085 	bne.w	801ca9a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 801c990:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801c994:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 801c998:	9b04      	ldr	r3, [sp, #16]
 801c99a:	1bed      	subs	r5, r5, r7
 801c99c:	b2ad      	uxth	r5, r5
 801c99e:	2d00      	cmp	r5, #0
 801c9a0:	bf0c      	ite	eq
 801c9a2:	461a      	moveq	r2, r3
 801c9a4:	2200      	movne	r2, #0
 801c9a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c9a8:	b292      	uxth	r2, r2
 801c9aa:	3301      	adds	r3, #1
 801c9ac:	930d      	str	r3, [sp, #52]	; 0x34
 801c9ae:	e70e      	b.n	801c7ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 801c9b0:	1bd1      	subs	r1, r2, r7
 801c9b2:	b28b      	uxth	r3, r1
 801c9b4:	9301      	str	r3, [sp, #4]
 801c9b6:	9708      	str	r7, [sp, #32]
 801c9b8:	462b      	mov	r3, r5
 801c9ba:	e7cb      	b.n	801c954 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 801c9bc:	2000f394 	.word	0x2000f394
 801c9c0:	2000f38e 	.word	0x2000f38e
 801c9c4:	fffff7fb 	.word	0xfffff7fb
 801c9c8:	b2b6      	uxth	r6, r6
 801c9ca:	900b      	str	r0, [sp, #44]	; 0x2c
 801c9cc:	45b4      	cmp	ip, r6
 801c9ce:	d0cd      	beq.n	801c96c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 801c9d0:	f10c 0101 	add.w	r1, ip, #1
 801c9d4:	44a4      	add	ip, r4
 801c9d6:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801c9da:	9117      	str	r1, [sp, #92]	; 0x5c
 801c9dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c9de:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801c9e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c9e4:	ea4f 2825 	mov.w	r8, r5, asr #8
 801c9e8:	f8b1 c000 	ldrh.w	ip, [r1]
 801c9ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c9ee:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801c9f2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c9f6:	fb1e fe01 	smulbb	lr, lr, r1
 801c9fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c9fc:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801ca00:	fb08 e801 	mla	r8, r8, r1, lr
 801ca04:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801ca08:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ca0a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ca0e:	fb19 f901 	smulbb	r9, r9, r1
 801ca12:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801ca16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ca18:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ca1c:	fb0e 9e01 	mla	lr, lr, r1, r9
 801ca20:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ca24:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ca26:	fa5f fc8c 	uxtb.w	ip, ip
 801ca2a:	fb1c fc01 	smulbb	ip, ip, r1
 801ca2e:	00ed      	lsls	r5, r5, #3
 801ca30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ca32:	b2ed      	uxtb	r5, r5
 801ca34:	fb05 c501 	mla	r5, r5, r1, ip
 801ca38:	fa1f f888 	uxth.w	r8, r8
 801ca3c:	fa1f fe8e 	uxth.w	lr, lr
 801ca40:	b2ad      	uxth	r5, r5
 801ca42:	f108 0c01 	add.w	ip, r8, #1
 801ca46:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801ca4a:	f10e 0901 	add.w	r9, lr, #1
 801ca4e:	f105 0c01 	add.w	ip, r5, #1
 801ca52:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801ca56:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801ca5a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ca5e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801ca62:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ca66:	ea4c 0808 	orr.w	r8, ip, r8
 801ca6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ca6c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ca70:	ea48 0809 	orr.w	r8, r8, r9
 801ca74:	f821 8b02 	strh.w	r8, [r1], #2
 801ca78:	910b      	str	r1, [sp, #44]	; 0x2c
 801ca7a:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 801ca7e:	e7a5      	b.n	801c9cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 801ca80:	f10c 0801 	add.w	r8, ip, #1
 801ca84:	44a4      	add	ip, r4
 801ca86:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801ca8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ca8c:	fa1f fc88 	uxth.w	ip, r8
 801ca90:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801ca94:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801ca98:	e765      	b.n	801c966 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 801ca9a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ca9e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801caa2:	1aad      	subs	r5, r5, r2
 801caa4:	b2ad      	uxth	r5, r5
 801caa6:	2d00      	cmp	r5, #0
 801caa8:	bf18      	it	ne
 801caaa:	2200      	movne	r2, #0
 801caac:	9201      	str	r2, [sp, #4]
 801caae:	e746      	b.n	801c93e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 801cab0:	4b03      	ldr	r3, [pc, #12]	; (801cac0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 801cab2:	6818      	ldr	r0, [r3, #0]
 801cab4:	6803      	ldr	r3, [r0, #0]
 801cab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cab8:	4798      	blx	r3
 801caba:	b01f      	add	sp, #124	; 0x7c
 801cabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac0:	2000f394 	.word	0x2000f394

0801cac4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801cac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cac8:	b08f      	sub	sp, #60	; 0x3c
 801caca:	9203      	str	r2, [sp, #12]
 801cacc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cad0:	461c      	mov	r4, r3
 801cad2:	460f      	mov	r7, r1
 801cad4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cad6:	9202      	str	r2, [sp, #8]
 801cad8:	2a00      	cmp	r2, #0
 801cada:	f000 812a 	beq.w	801cd32 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 801cade:	6820      	ldr	r0, [r4, #0]
 801cae0:	6861      	ldr	r1, [r4, #4]
 801cae2:	aa0a      	add	r2, sp, #40	; 0x28
 801cae4:	c203      	stmia	r2!, {r0, r1}
 801cae6:	6818      	ldr	r0, [r3, #0]
 801cae8:	6859      	ldr	r1, [r3, #4]
 801caea:	aa0c      	add	r2, sp, #48	; 0x30
 801caec:	c203      	stmia	r2!, {r0, r1}
 801caee:	a80a      	add	r0, sp, #40	; 0x28
 801caf0:	f7f9 ff86 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801caf4:	4621      	mov	r1, r4
 801caf6:	a80c      	add	r0, sp, #48	; 0x30
 801caf8:	f7f9 ffaa 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cafc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801cb00:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801cb04:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cb08:	bfdd      	ittte	le
 801cb0a:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801cb0e:	b2b3      	uxthle	r3, r6
 801cb10:	fb92 f3f3 	sdivle	r3, r2, r3
 801cb14:	2301      	movgt	r3, #1
 801cb16:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801cb1a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801cb1e:	fb92 f1f3 	sdiv	r1, r2, r3
 801cb22:	fa1f fc81 	uxth.w	ip, r1
 801cb26:	4661      	mov	r1, ip
 801cb28:	fb0c 2413 	mls	r4, ip, r3, r2
 801cb2c:	fb14 f406 	smulbb	r4, r4, r6
 801cb30:	441d      	add	r5, r3
 801cb32:	3d01      	subs	r5, #1
 801cb34:	4404      	add	r4, r0
 801cb36:	fb95 f5f3 	sdiv	r5, r5, r3
 801cb3a:	b2a4      	uxth	r4, r4
 801cb3c:	b121      	cbz	r1, 801cb48 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801cb3e:	9b03      	ldr	r3, [sp, #12]
 801cb40:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801cb44:	ba1b      	rev	r3, r3
 801cb46:	441f      	add	r7, r3
 801cb48:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801cb4c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801cb50:	4418      	add	r0, r3
 801cb52:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cb56:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801cb5a:	441a      	add	r2, r3
 801cb5c:	4b76      	ldr	r3, [pc, #472]	; (801cd38 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801cb5e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801cb62:	6818      	ldr	r0, [r3, #0]
 801cb64:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801cb68:	6803      	ldr	r3, [r0, #0]
 801cb6a:	b2ad      	uxth	r5, r5
 801cb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb6e:	4798      	blx	r3
 801cb70:	4a72      	ldr	r2, [pc, #456]	; (801cd3c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 801cb72:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801cb76:	8813      	ldrh	r3, [r2, #0]
 801cb78:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801cb7c:	00ad      	lsls	r5, r5, #2
 801cb7e:	fb03 c101 	mla	r1, r3, r1, ip
 801cb82:	4373      	muls	r3, r6
 801cb84:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801cb88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cb8c:	2c00      	cmp	r4, #0
 801cb8e:	9304      	str	r3, [sp, #16]
 801cb90:	f105 0304 	add.w	r3, r5, #4
 801cb94:	9305      	str	r3, [sp, #20]
 801cb96:	bf0c      	ite	eq
 801cb98:	46c8      	moveq	r8, r9
 801cb9a:	f04f 0800 	movne.w	r8, #0
 801cb9e:	2300      	movs	r3, #0
 801cba0:	fa1f f888 	uxth.w	r8, r8
 801cba4:	9301      	str	r3, [sp, #4]
 801cba6:	9209      	str	r2, [sp, #36]	; 0x24
 801cba8:	9a04      	ldr	r2, [sp, #16]
 801cbaa:	4282      	cmp	r2, r0
 801cbac:	f240 80bc 	bls.w	801cd28 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 801cbb0:	b95b      	cbnz	r3, 801cbca <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 801cbb2:	783a      	ldrb	r2, [r7, #0]
 801cbb4:	0993      	lsrs	r3, r2, #6
 801cbb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801cbba:	9201      	str	r2, [sp, #4]
 801cbbc:	1e5a      	subs	r2, r3, #1
 801cbbe:	2a02      	cmp	r2, #2
 801cbc0:	bf8d      	iteet	hi
 801cbc2:	787b      	ldrbhi	r3, [r7, #1]
 801cbc4:	3701      	addls	r7, #1
 801cbc6:	b29b      	uxthls	r3, r3
 801cbc8:	3702      	addhi	r7, #2
 801cbca:	b184      	cbz	r4, 801cbee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801cbcc:	429c      	cmp	r4, r3
 801cbce:	bf99      	ittee	ls
 801cbd0:	1b1c      	subls	r4, r3, r4
 801cbd2:	fa1f fa84 	uxthls.w	sl, r4
 801cbd6:	46c4      	movhi	ip, r8
 801cbd8:	f04f 0a00 	movhi.w	sl, #0
 801cbdc:	bf93      	iteet	ls
 801cbde:	2400      	movls	r4, #0
 801cbe0:	1ae4      	subhi	r4, r4, r3
 801cbe2:	b2a4      	uxthhi	r4, r4
 801cbe4:	fa1f fc89 	uxthls.w	ip, r9
 801cbe8:	4653      	mov	r3, sl
 801cbea:	46e0      	mov	r8, ip
 801cbec:	e7dc      	b.n	801cba8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 801cbee:	2204      	movs	r2, #4
 801cbf0:	4615      	mov	r5, r2
 801cbf2:	4543      	cmp	r3, r8
 801cbf4:	bf2c      	ite	cs
 801cbf6:	46c6      	movcs	lr, r8
 801cbf8:	469e      	movcc	lr, r3
 801cbfa:	9905      	ldr	r1, [sp, #20]
 801cbfc:	9a01      	ldr	r2, [sp, #4]
 801cbfe:	bf28      	it	cs
 801cc00:	eba3 0a08 	subcs.w	sl, r3, r8
 801cc04:	fb15 1202 	smlabb	r2, r5, r2, r1
 801cc08:	9903      	ldr	r1, [sp, #12]
 801cc0a:	bf38      	it	cc
 801cc0c:	eba8 0c03 	subcc.w	ip, r8, r3
 801cc10:	588a      	ldr	r2, [r1, r2]
 801cc12:	bf28      	it	cs
 801cc14:	fa1f fa8a 	uxthcs.w	sl, sl
 801cc18:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801cc1c:	bf2e      	itee	cs
 801cc1e:	46a4      	movcs	ip, r4
 801cc20:	fa1f fc8c 	uxthcc.w	ip, ip
 801cc24:	46a2      	movcc	sl, r4
 801cc26:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801cc2a:	2900      	cmp	r1, #0
 801cc2c:	d066      	beq.n	801ccfc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 801cc2e:	29ff      	cmp	r1, #255	; 0xff
 801cc30:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801cc34:	d114      	bne.n	801cc60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 801cc36:	9d02      	ldr	r5, [sp, #8]
 801cc38:	2dff      	cmp	r5, #255	; 0xff
 801cc3a:	d111      	bne.n	801cc60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 801cc3c:	0951      	lsrs	r1, r2, #5
 801cc3e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801cc42:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cc46:	f026 0607 	bic.w	r6, r6, #7
 801cc4a:	430e      	orrs	r6, r1
 801cc4c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801cc50:	4316      	orrs	r6, r2
 801cc52:	b2b6      	uxth	r6, r6
 801cc54:	4486      	add	lr, r0
 801cc56:	4586      	cmp	lr, r0
 801cc58:	d051      	beq.n	801ccfe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801cc5a:	f820 6b02 	strh.w	r6, [r0], #2
 801cc5e:	e7fa      	b.n	801cc56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 801cc60:	9d02      	ldr	r5, [sp, #8]
 801cc62:	b2f6      	uxtb	r6, r6
 801cc64:	4369      	muls	r1, r5
 801cc66:	1c4d      	adds	r5, r1, #1
 801cc68:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801cc6c:	122d      	asrs	r5, r5, #8
 801cc6e:	ea6f 0b05 	mvn.w	fp, r5
 801cc72:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801cc76:	b2ad      	uxth	r5, r5
 801cc78:	b2d2      	uxtb	r2, r2
 801cc7a:	fb11 f105 	smulbb	r1, r1, r5
 801cc7e:	fb16 f605 	smulbb	r6, r6, r5
 801cc82:	fb12 f205 	smulbb	r2, r2, r5
 801cc86:	b289      	uxth	r1, r1
 801cc88:	b2b6      	uxth	r6, r6
 801cc8a:	b292      	uxth	r2, r2
 801cc8c:	9106      	str	r1, [sp, #24]
 801cc8e:	9607      	str	r6, [sp, #28]
 801cc90:	9208      	str	r2, [sp, #32]
 801cc92:	4486      	add	lr, r0
 801cc94:	fa5f fb8b 	uxtb.w	fp, fp
 801cc98:	4586      	cmp	lr, r0
 801cc9a:	d030      	beq.n	801ccfe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801cc9c:	8802      	ldrh	r2, [r0, #0]
 801cc9e:	9906      	ldr	r1, [sp, #24]
 801cca0:	1216      	asrs	r6, r2, #8
 801cca2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cca6:	10d5      	asrs	r5, r2, #3
 801cca8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ccac:	fb06 160b 	mla	r6, r6, fp, r1
 801ccb0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ccb4:	9907      	ldr	r1, [sp, #28]
 801ccb6:	00d2      	lsls	r2, r2, #3
 801ccb8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ccbc:	fb05 150b 	mla	r5, r5, fp, r1
 801ccc0:	b2d2      	uxtb	r2, r2
 801ccc2:	9908      	ldr	r1, [sp, #32]
 801ccc4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ccc8:	fb02 120b 	mla	r2, r2, fp, r1
 801cccc:	b2b6      	uxth	r6, r6
 801ccce:	b292      	uxth	r2, r2
 801ccd0:	1c71      	adds	r1, r6, #1
 801ccd2:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801ccd6:	1c51      	adds	r1, r2, #1
 801ccd8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ccdc:	b2ad      	uxth	r5, r5
 801ccde:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cce2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801cce6:	4316      	orrs	r6, r2
 801cce8:	1c6a      	adds	r2, r5, #1
 801ccea:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801ccee:	096d      	lsrs	r5, r5, #5
 801ccf0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ccf4:	432e      	orrs	r6, r5
 801ccf6:	f820 6b02 	strh.w	r6, [r0], #2
 801ccfa:	e7cd      	b.n	801cc98 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 801ccfc:	4470      	add	r0, lr
 801ccfe:	4543      	cmp	r3, r8
 801cd00:	f4ff af72 	bcc.w	801cbe8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801cd04:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801cd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd0a:	fa1f fc89 	uxth.w	ip, r9
 801cd0e:	eba4 040c 	sub.w	r4, r4, ip
 801cd12:	881b      	ldrh	r3, [r3, #0]
 801cd14:	b2a4      	uxth	r4, r4
 801cd16:	2c00      	cmp	r4, #0
 801cd18:	eba3 0309 	sub.w	r3, r3, r9
 801cd1c:	bf18      	it	ne
 801cd1e:	f04f 0c00 	movne.w	ip, #0
 801cd22:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cd26:	e75f      	b.n	801cbe8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801cd28:	4b03      	ldr	r3, [pc, #12]	; (801cd38 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801cd2a:	6818      	ldr	r0, [r3, #0]
 801cd2c:	6803      	ldr	r3, [r0, #0]
 801cd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd30:	4798      	blx	r3
 801cd32:	b00f      	add	sp, #60	; 0x3c
 801cd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd38:	2000f394 	.word	0x2000f394
 801cd3c:	2000f38e 	.word	0x2000f38e

0801cd40 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd44:	b093      	sub	sp, #76	; 0x4c
 801cd46:	9205      	str	r2, [sp, #20]
 801cd48:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801cd4c:	461c      	mov	r4, r3
 801cd4e:	9101      	str	r1, [sp, #4]
 801cd50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cd52:	9202      	str	r2, [sp, #8]
 801cd54:	2a00      	cmp	r2, #0
 801cd56:	f000 812d 	beq.w	801cfb4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801cd5a:	6820      	ldr	r0, [r4, #0]
 801cd5c:	6861      	ldr	r1, [r4, #4]
 801cd5e:	aa0e      	add	r2, sp, #56	; 0x38
 801cd60:	c203      	stmia	r2!, {r0, r1}
 801cd62:	6818      	ldr	r0, [r3, #0]
 801cd64:	6859      	ldr	r1, [r3, #4]
 801cd66:	aa10      	add	r2, sp, #64	; 0x40
 801cd68:	c203      	stmia	r2!, {r0, r1}
 801cd6a:	a80e      	add	r0, sp, #56	; 0x38
 801cd6c:	f7f9 fe48 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd70:	4621      	mov	r1, r4
 801cd72:	a810      	add	r0, sp, #64	; 0x40
 801cd74:	f7f9 fe6c 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cd78:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801cd7c:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801cd80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cd84:	bfdd      	ittte	le
 801cd86:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801cd8a:	b2b3      	uxthle	r3, r6
 801cd8c:	fb92 f3f3 	sdivle	r3, r2, r3
 801cd90:	2301      	movgt	r3, #1
 801cd92:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801cd96:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801cd9a:	fb92 f1f3 	sdiv	r1, r2, r3
 801cd9e:	fa1f fc81 	uxth.w	ip, r1
 801cda2:	4661      	mov	r1, ip
 801cda4:	fb0c 2413 	mls	r4, ip, r3, r2
 801cda8:	fb14 f406 	smulbb	r4, r4, r6
 801cdac:	441d      	add	r5, r3
 801cdae:	3d01      	subs	r5, #1
 801cdb0:	4404      	add	r4, r0
 801cdb2:	fb95 f5f3 	sdiv	r5, r5, r3
 801cdb6:	b2a4      	uxth	r4, r4
 801cdb8:	b131      	cbz	r1, 801cdc8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801cdba:	9b05      	ldr	r3, [sp, #20]
 801cdbc:	9901      	ldr	r1, [sp, #4]
 801cdbe:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801cdc2:	ba1b      	rev	r3, r3
 801cdc4:	4419      	add	r1, r3
 801cdc6:	9101      	str	r1, [sp, #4]
 801cdc8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801cdcc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801cdd0:	4418      	add	r0, r3
 801cdd2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801cdd6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801cdda:	441a      	add	r2, r3
 801cddc:	4b77      	ldr	r3, [pc, #476]	; (801cfbc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801cdde:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801cde2:	6818      	ldr	r0, [r3, #0]
 801cde4:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 801cde8:	6803      	ldr	r3, [r0, #0]
 801cdea:	b2ad      	uxth	r5, r5
 801cdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdee:	4798      	blx	r3
 801cdf0:	4973      	ldr	r1, [pc, #460]	; (801cfc0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801cdf2:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 801cdf6:	880b      	ldrh	r3, [r1, #0]
 801cdf8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801cdfc:	00ad      	lsls	r5, r5, #2
 801cdfe:	fb03 c202 	mla	r2, r3, r2, ip
 801ce02:	4373      	muls	r3, r6
 801ce04:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ce08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ce0c:	9308      	str	r3, [sp, #32]
 801ce0e:	1d2b      	adds	r3, r5, #4
 801ce10:	9309      	str	r3, [sp, #36]	; 0x24
 801ce12:	9b02      	ldr	r3, [sp, #8]
 801ce14:	2c00      	cmp	r4, #0
 801ce16:	ea6f 0203 	mvn.w	r2, r3
 801ce1a:	bf0c      	ite	eq
 801ce1c:	46dc      	moveq	ip, fp
 801ce1e:	f04f 0c00 	movne.w	ip, #0
 801ce22:	2300      	movs	r3, #0
 801ce24:	910d      	str	r1, [sp, #52]	; 0x34
 801ce26:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ce2a:	b2d2      	uxtb	r2, r2
 801ce2c:	fa1f fc8c 	uxth.w	ip, ip
 801ce30:	9303      	str	r3, [sp, #12]
 801ce32:	9106      	str	r1, [sp, #24]
 801ce34:	9207      	str	r2, [sp, #28]
 801ce36:	9a08      	ldr	r2, [sp, #32]
 801ce38:	4282      	cmp	r2, r0
 801ce3a:	f240 80b6 	bls.w	801cfaa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801ce3e:	b963      	cbnz	r3, 801ce5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801ce40:	9b01      	ldr	r3, [sp, #4]
 801ce42:	781a      	ldrb	r2, [r3, #0]
 801ce44:	0993      	lsrs	r3, r2, #6
 801ce46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801ce4a:	9203      	str	r2, [sp, #12]
 801ce4c:	1e5a      	subs	r2, r3, #1
 801ce4e:	2a02      	cmp	r2, #2
 801ce50:	d815      	bhi.n	801ce7e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 801ce52:	9a01      	ldr	r2, [sp, #4]
 801ce54:	b29b      	uxth	r3, r3
 801ce56:	3201      	adds	r2, #1
 801ce58:	9201      	str	r2, [sp, #4]
 801ce5a:	b1b4      	cbz	r4, 801ce8a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 801ce5c:	429c      	cmp	r4, r3
 801ce5e:	bf99      	ittee	ls
 801ce60:	1b1c      	subls	r4, r3, r4
 801ce62:	fa1f f884 	uxthls.w	r8, r4
 801ce66:	4666      	movhi	r6, ip
 801ce68:	f04f 0800 	movhi.w	r8, #0
 801ce6c:	bf93      	iteet	ls
 801ce6e:	2400      	movls	r4, #0
 801ce70:	1ae4      	subhi	r4, r4, r3
 801ce72:	b2a4      	uxthhi	r4, r4
 801ce74:	fa1f f68b 	uxthls.w	r6, fp
 801ce78:	4643      	mov	r3, r8
 801ce7a:	46b4      	mov	ip, r6
 801ce7c:	e7db      	b.n	801ce36 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801ce7e:	9a01      	ldr	r2, [sp, #4]
 801ce80:	9b01      	ldr	r3, [sp, #4]
 801ce82:	3202      	adds	r2, #2
 801ce84:	785b      	ldrb	r3, [r3, #1]
 801ce86:	9201      	str	r2, [sp, #4]
 801ce88:	e7e7      	b.n	801ce5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801ce8a:	2203      	movs	r2, #3
 801ce8c:	4615      	mov	r5, r2
 801ce8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ce90:	9a03      	ldr	r2, [sp, #12]
 801ce92:	4563      	cmp	r3, ip
 801ce94:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ce98:	9905      	ldr	r1, [sp, #20]
 801ce9a:	bf28      	it	cs
 801ce9c:	eba3 080c 	subcs.w	r8, r3, ip
 801cea0:	eb01 0502 	add.w	r5, r1, r2
 801cea4:	9902      	ldr	r1, [sp, #8]
 801cea6:	bf31      	iteee	cc
 801cea8:	ebac 0603 	subcc.w	r6, ip, r3
 801ceac:	fa1f f888 	uxthcs.w	r8, r8
 801ceb0:	46e1      	movcs	r9, ip
 801ceb2:	4626      	movcs	r6, r4
 801ceb4:	bf3e      	ittt	cc
 801ceb6:	b2b6      	uxthcc	r6, r6
 801ceb8:	4699      	movcc	r9, r3
 801ceba:	46a0      	movcc	r8, r4
 801cebc:	29ff      	cmp	r1, #255	; 0xff
 801cebe:	d04a      	beq.n	801cf56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 801cec0:	46ca      	mov	sl, r9
 801cec2:	9f06      	ldr	r7, [sp, #24]
 801cec4:	78a9      	ldrb	r1, [r5, #2]
 801cec6:	9004      	str	r0, [sp, #16]
 801cec8:	4379      	muls	r1, r7
 801ceca:	910a      	str	r1, [sp, #40]	; 0x28
 801cecc:	7869      	ldrb	r1, [r5, #1]
 801cece:	4379      	muls	r1, r7
 801ced0:	910b      	str	r1, [sp, #44]	; 0x2c
 801ced2:	9905      	ldr	r1, [sp, #20]
 801ced4:	5c8a      	ldrb	r2, [r1, r2]
 801ced6:	437a      	muls	r2, r7
 801ced8:	920c      	str	r2, [sp, #48]	; 0x30
 801ceda:	f1ba 0f00 	cmp.w	sl, #0
 801cede:	d03d      	beq.n	801cf5c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801cee0:	9f07      	ldr	r7, [sp, #28]
 801cee2:	9a04      	ldr	r2, [sp, #16]
 801cee4:	46be      	mov	lr, r7
 801cee6:	8812      	ldrh	r2, [r2, #0]
 801cee8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ceea:	1215      	asrs	r5, r2, #8
 801ceec:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801cef0:	10d1      	asrs	r1, r2, #3
 801cef2:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801cef6:	fb05 750e 	mla	r5, r5, lr, r7
 801cefa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cefe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801cf00:	00d2      	lsls	r2, r2, #3
 801cf02:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801cf06:	fb01 710e 	mla	r1, r1, lr, r7
 801cf0a:	b2d2      	uxtb	r2, r2
 801cf0c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801cf0e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cf12:	fb02 720e 	mla	r2, r2, lr, r7
 801cf16:	b2ad      	uxth	r5, r5
 801cf18:	b292      	uxth	r2, r2
 801cf1a:	f105 0e01 	add.w	lr, r5, #1
 801cf1e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801cf22:	f102 0e01 	add.w	lr, r2, #1
 801cf26:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801cf2a:	b289      	uxth	r1, r1
 801cf2c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cf30:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801cf34:	4315      	orrs	r5, r2
 801cf36:	1c4a      	adds	r2, r1, #1
 801cf38:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801cf3c:	0949      	lsrs	r1, r1, #5
 801cf3e:	9a04      	ldr	r2, [sp, #16]
 801cf40:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cf44:	430d      	orrs	r5, r1
 801cf46:	f822 5b02 	strh.w	r5, [r2], #2
 801cf4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cf4e:	9204      	str	r2, [sp, #16]
 801cf50:	fa1f fa8a 	uxth.w	sl, sl
 801cf54:	e7c1      	b.n	801ceda <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801cf56:	4649      	mov	r1, r9
 801cf58:	4686      	mov	lr, r0
 801cf5a:	b999      	cbnz	r1, 801cf84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 801cf5c:	4563      	cmp	r3, ip
 801cf5e:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801cf62:	d389      	bcc.n	801ce78 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801cf64:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 801cf68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf6a:	fa1f f68b 	uxth.w	r6, fp
 801cf6e:	1ba4      	subs	r4, r4, r6
 801cf70:	881b      	ldrh	r3, [r3, #0]
 801cf72:	b2a4      	uxth	r4, r4
 801cf74:	2c00      	cmp	r4, #0
 801cf76:	eba3 030b 	sub.w	r3, r3, fp
 801cf7a:	bf18      	it	ne
 801cf7c:	2600      	movne	r6, #0
 801cf7e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cf82:	e779      	b.n	801ce78 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801cf84:	78aa      	ldrb	r2, [r5, #2]
 801cf86:	4f0f      	ldr	r7, [pc, #60]	; (801cfc4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 801cf88:	3901      	subs	r1, #1
 801cf8a:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801cf8e:	786a      	ldrb	r2, [r5, #1]
 801cf90:	b289      	uxth	r1, r1
 801cf92:	00d2      	lsls	r2, r2, #3
 801cf94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cf98:	ea4a 0202 	orr.w	r2, sl, r2
 801cf9c:	f895 a000 	ldrb.w	sl, [r5]
 801cfa0:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801cfa4:	f82e 2b02 	strh.w	r2, [lr], #2
 801cfa8:	e7d7      	b.n	801cf5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 801cfaa:	4b04      	ldr	r3, [pc, #16]	; (801cfbc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801cfac:	6818      	ldr	r0, [r3, #0]
 801cfae:	6803      	ldr	r3, [r0, #0]
 801cfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfb2:	4798      	blx	r3
 801cfb4:	b013      	add	sp, #76	; 0x4c
 801cfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfba:	bf00      	nop
 801cfbc:	2000f394 	.word	0x2000f394
 801cfc0:	2000f38e 	.word	0x2000f38e
 801cfc4:	fffff800 	.word	0xfffff800

0801cfc8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfcc:	b09d      	sub	sp, #116	; 0x74
 801cfce:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 801cfd2:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801cfd6:	461c      	mov	r4, r3
 801cfd8:	4683      	mov	fp, r0
 801cfda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cfdc:	920e      	str	r2, [sp, #56]	; 0x38
 801cfde:	2a00      	cmp	r2, #0
 801cfe0:	f000 81e1 	beq.w	801d3a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 801cfe4:	6820      	ldr	r0, [r4, #0]
 801cfe6:	6861      	ldr	r1, [r4, #4]
 801cfe8:	aa18      	add	r2, sp, #96	; 0x60
 801cfea:	c203      	stmia	r2!, {r0, r1}
 801cfec:	6818      	ldr	r0, [r3, #0]
 801cfee:	6859      	ldr	r1, [r3, #4]
 801cff0:	aa1a      	add	r2, sp, #104	; 0x68
 801cff2:	c203      	stmia	r2!, {r0, r1}
 801cff4:	a818      	add	r0, sp, #96	; 0x60
 801cff6:	f7f9 fd03 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cffa:	4621      	mov	r1, r4
 801cffc:	a81a      	add	r0, sp, #104	; 0x68
 801cffe:	f7f9 fd27 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d002:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801d006:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 801d00a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d00e:	bfdd      	ittte	le
 801d010:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801d014:	b29a      	uxthle	r2, r3
 801d016:	fb91 f2f2 	sdivle	r2, r1, r2
 801d01a:	2201      	movgt	r2, #1
 801d01c:	9202      	str	r2, [sp, #8]
 801d01e:	9802      	ldr	r0, [sp, #8]
 801d020:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801d024:	9902      	ldr	r1, [sp, #8]
 801d026:	fb92 f0f0 	sdiv	r0, r2, r0
 801d02a:	b280      	uxth	r0, r0
 801d02c:	900f      	str	r0, [sp, #60]	; 0x3c
 801d02e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d030:	9802      	ldr	r0, [sp, #8]
 801d032:	440c      	add	r4, r1
 801d034:	fb05 2510 	mls	r5, r5, r0, r2
 801d038:	fb15 f503 	smulbb	r5, r5, r3
 801d03c:	3c01      	subs	r4, #1
 801d03e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801d042:	fb94 f4f1 	sdiv	r4, r4, r1
 801d046:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801d04a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801d04e:	440d      	add	r5, r1
 801d050:	4419      	add	r1, r3
 801d052:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801d056:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801d05a:	441a      	add	r2, r3
 801d05c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801d060:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801d064:	9306      	str	r3, [sp, #24]
 801d066:	4bb3      	ldr	r3, [pc, #716]	; (801d334 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801d068:	3401      	adds	r4, #1
 801d06a:	6818      	ldr	r0, [r3, #0]
 801d06c:	b2a4      	uxth	r4, r4
 801d06e:	6803      	ldr	r3, [r0, #0]
 801d070:	00a4      	lsls	r4, r4, #2
 801d072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d074:	4798      	blx	r3
 801d076:	4bb0      	ldr	r3, [pc, #704]	; (801d338 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801d078:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801d07c:	881a      	ldrh	r2, [r3, #0]
 801d07e:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 801d082:	4356      	muls	r6, r2
 801d084:	fb02 7101 	mla	r1, r2, r1, r7
 801d088:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801d08c:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801d090:	920a      	str	r2, [sp, #40]	; 0x28
 801d092:	1d22      	adds	r2, r4, #4
 801d094:	b2ad      	uxth	r5, r5
 801d096:	9213      	str	r2, [sp, #76]	; 0x4c
 801d098:	9a06      	ldr	r2, [sp, #24]
 801d09a:	2d00      	cmp	r5, #0
 801d09c:	bf0c      	ite	eq
 801d09e:	4611      	moveq	r1, r2
 801d0a0:	2100      	movne	r1, #0
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	9316      	str	r3, [sp, #88]	; 0x58
 801d0a6:	4ba5      	ldr	r3, [pc, #660]	; (801d33c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801d0a8:	b289      	uxth	r1, r1
 801d0aa:	eba3 030b 	sub.w	r3, r3, fp
 801d0ae:	920d      	str	r2, [sp, #52]	; 0x34
 801d0b0:	9317      	str	r3, [sp, #92]	; 0x5c
 801d0b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d0b6:	fa12 f383 	uxtah	r3, r2, r3
 801d0ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d0c0:	3304      	adds	r3, #4
 801d0c2:	9308      	str	r3, [sp, #32]
 801d0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0c6:	4543      	cmp	r3, r8
 801d0c8:	f240 8168 	bls.w	801d39c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 801d0cc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801d0d0:	9a02      	ldr	r2, [sp, #8]
 801d0d2:	fbb5 f3f3 	udiv	r3, r5, r3
 801d0d6:	1ad3      	subs	r3, r2, r3
 801d0d8:	b29b      	uxth	r3, r3
 801d0da:	9314      	str	r3, [sp, #80]	; 0x50
 801d0dc:	9b08      	ldr	r3, [sp, #32]
 801d0de:	9808      	ldr	r0, [sp, #32]
 801d0e0:	785a      	ldrb	r2, [r3, #1]
 801d0e2:	789b      	ldrb	r3, [r3, #2]
 801d0e4:	7800      	ldrb	r0, [r0, #0]
 801d0e6:	021b      	lsls	r3, r3, #8
 801d0e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d0ec:	9a08      	ldr	r2, [sp, #32]
 801d0ee:	9010      	str	r0, [sp, #64]	; 0x40
 801d0f0:	78d2      	ldrb	r2, [r2, #3]
 801d0f2:	3001      	adds	r0, #1
 801d0f4:	4313      	orrs	r3, r2
 801d0f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d0f8:	9007      	str	r0, [sp, #28]
 801d0fa:	441a      	add	r2, r3
 801d0fc:	1c50      	adds	r0, r2, #1
 801d0fe:	9005      	str	r0, [sp, #20]
 801d100:	7852      	ldrb	r2, [r2, #1]
 801d102:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d104:	0212      	lsls	r2, r2, #8
 801d106:	5cc3      	ldrb	r3, [r0, r3]
 801d108:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801d10c:	431a      	orrs	r2, r3
 801d10e:	b293      	uxth	r3, r2
 801d110:	930b      	str	r3, [sp, #44]	; 0x2c
 801d112:	2300      	movs	r3, #0
 801d114:	9309      	str	r3, [sp, #36]	; 0x24
 801d116:	2301      	movs	r3, #1
 801d118:	9301      	str	r3, [sp, #4]
 801d11a:	9304      	str	r3, [sp, #16]
 801d11c:	2300      	movs	r3, #0
 801d11e:	f04f 0e01 	mov.w	lr, #1
 801d122:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 801d126:	9303      	str	r3, [sp, #12]
 801d128:	2d00      	cmp	r5, #0
 801d12a:	d07c      	beq.n	801d226 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801d12c:	45ae      	cmp	lr, r5
 801d12e:	d26b      	bcs.n	801d208 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801d130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d132:	eba5 050e 	sub.w	r5, r5, lr
 801d136:	4543      	cmp	r3, r8
 801d138:	b2ad      	uxth	r5, r5
 801d13a:	460c      	mov	r4, r1
 801d13c:	d802      	bhi.n	801d144 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 801d13e:	e070      	b.n	801d222 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801d140:	2b00      	cmp	r3, #0
 801d142:	d15c      	bne.n	801d1fe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801d144:	9b05      	ldr	r3, [sp, #20]
 801d146:	9a04      	ldr	r2, [sp, #16]
 801d148:	785b      	ldrb	r3, [r3, #1]
 801d14a:	f1c2 0207 	rsb	r2, r2, #7
 801d14e:	4093      	lsls	r3, r2
 801d150:	005b      	lsls	r3, r3, #1
 801d152:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801d156:	9b05      	ldr	r3, [sp, #20]
 801d158:	9904      	ldr	r1, [sp, #16]
 801d15a:	781b      	ldrb	r3, [r3, #0]
 801d15c:	410b      	asrs	r3, r1
 801d15e:	3101      	adds	r1, #1
 801d160:	b2c9      	uxtb	r1, r1
 801d162:	2908      	cmp	r1, #8
 801d164:	9104      	str	r1, [sp, #16]
 801d166:	9905      	ldr	r1, [sp, #20]
 801d168:	b2db      	uxtb	r3, r3
 801d16a:	bf03      	ittte	eq
 801d16c:	3102      	addeq	r1, #2
 801d16e:	9105      	streq	r1, [sp, #20]
 801d170:	2100      	moveq	r1, #0
 801d172:	3101      	addne	r1, #1
 801d174:	bf14      	ite	ne
 801d176:	9105      	strne	r1, [sp, #20]
 801d178:	9104      	streq	r1, [sp, #16]
 801d17a:	4313      	orrs	r3, r2
 801d17c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d17e:	b29a      	uxth	r2, r3
 801d180:	4291      	cmp	r1, r2
 801d182:	d30a      	bcc.n	801d19a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801d184:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 801d188:	2301      	movs	r3, #1
 801d18a:	9907      	ldr	r1, [sp, #28]
 801d18c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801d190:	d30f      	bcc.n	801d1b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801d192:	2100      	movs	r1, #0
 801d194:	9301      	str	r3, [sp, #4]
 801d196:	9103      	str	r1, [sp, #12]
 801d198:	e032      	b.n	801d200 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 801d19a:	9b07      	ldr	r3, [sp, #28]
 801d19c:	429a      	cmp	r2, r3
 801d19e:	d318      	bcc.n	801d1d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801d1a0:	9b01      	ldr	r3, [sp, #4]
 801d1a2:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 801d1a6:	445b      	add	r3, fp
 801d1a8:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801d1ac:	9b01      	ldr	r3, [sp, #4]
 801d1ae:	3301      	adds	r3, #1
 801d1b0:	b29b      	uxth	r3, r3
 801d1b2:	9907      	ldr	r1, [sp, #28]
 801d1b4:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 801d1b8:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801d1bc:	7108      	strb	r0, [r1, #4]
 801d1be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d1c0:	80c8      	strh	r0, [r1, #6]
 801d1c2:	9801      	ldr	r0, [sp, #4]
 801d1c4:	3001      	adds	r0, #1
 801d1c6:	7148      	strb	r0, [r1, #5]
 801d1c8:	9907      	ldr	r1, [sp, #28]
 801d1ca:	3101      	adds	r1, #1
 801d1cc:	b289      	uxth	r1, r1
 801d1ce:	9107      	str	r1, [sp, #28]
 801d1d0:	e7df      	b.n	801d192 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801d1d2:	4611      	mov	r1, r2
 801d1d4:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801d1d8:	795b      	ldrb	r3, [r3, #5]
 801d1da:	f603 0004 	addw	r0, r3, #2052	; 0x804
 801d1de:	4458      	add	r0, fp
 801d1e0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801d1e2:	4406      	add	r6, r0
 801d1e4:	2e00      	cmp	r6, #0
 801d1e6:	dd06      	ble.n	801d1f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 801d1e8:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801d1ec:	790e      	ldrb	r6, [r1, #4]
 801d1ee:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801d1f2:	88c9      	ldrh	r1, [r1, #6]
 801d1f4:	e7f4      	b.n	801d1e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 801d1f6:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 801d1fa:	b29b      	uxth	r3, r3
 801d1fc:	e7c5      	b.n	801d18a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 801d1fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d200:	4621      	mov	r1, r4
 801d202:	920b      	str	r2, [sp, #44]	; 0x2c
 801d204:	469e      	mov	lr, r3
 801d206:	e78f      	b.n	801d128 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 801d208:	9a03      	ldr	r2, [sp, #12]
 801d20a:	ebae 0305 	sub.w	r3, lr, r5
 801d20e:	442a      	add	r2, r5
 801d210:	b292      	uxth	r2, r2
 801d212:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801d216:	b29b      	uxth	r3, r3
 801d218:	9203      	str	r2, [sp, #12]
 801d21a:	2500      	movs	r5, #0
 801d21c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d21e:	4542      	cmp	r2, r8
 801d220:	d88e      	bhi.n	801d140 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 801d222:	4621      	mov	r1, r4
 801d224:	e74e      	b.n	801d0c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801d226:	458e      	cmp	lr, r1
 801d228:	bf2c      	ite	cs
 801d22a:	462c      	movcs	r4, r5
 801d22c:	462b      	movcc	r3, r5
 801d22e:	f04f 0900 	mov.w	r9, #0
 801d232:	bf29      	itett	cs
 801d234:	ebae 0301 	subcs.w	r3, lr, r1
 801d238:	eba1 040e 	subcc.w	r4, r1, lr
 801d23c:	b29b      	uxthcs	r3, r3
 801d23e:	910c      	strcs	r1, [sp, #48]	; 0x30
 801d240:	bf3c      	itt	cc
 801d242:	b2a4      	uxthcc	r4, r4
 801d244:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 801d248:	9a03      	ldr	r2, [sp, #12]
 801d24a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d24c:	444a      	add	r2, r9
 801d24e:	4548      	cmp	r0, r9
 801d250:	b292      	uxth	r2, r2
 801d252:	d075      	beq.n	801d340 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 801d254:	2004      	movs	r0, #4
 801d256:	4605      	mov	r5, r0
 801d258:	445a      	add	r2, fp
 801d25a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d25c:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801d260:	fb15 0202 	smlabb	r2, r5, r2, r0
 801d264:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d266:	5880      	ldr	r0, [r0, r2]
 801d268:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801d26c:	d014      	beq.n	801d298 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 801d26e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d272:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801d276:	d112      	bne.n	801d29e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801d278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d27a:	2aff      	cmp	r2, #255	; 0xff
 801d27c:	d10f      	bne.n	801d29e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801d27e:	0942      	lsrs	r2, r0, #5
 801d280:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801d284:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d288:	f025 0507 	bic.w	r5, r5, #7
 801d28c:	4315      	orrs	r5, r2
 801d28e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801d292:	4305      	orrs	r5, r0
 801d294:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801d298:	f109 0901 	add.w	r9, r9, #1
 801d29c:	e7d4      	b.n	801d248 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 801d29e:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801d2a2:	b2ed      	uxtb	r5, r5
 801d2a4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801d2a8:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 801d2ac:	9215      	str	r2, [sp, #84]	; 0x54
 801d2ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d2b0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801d2b4:	fb02 fa0a 	mul.w	sl, r2, sl
 801d2b8:	f10a 0201 	add.w	r2, sl, #1
 801d2bc:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801d2c0:	1212      	asrs	r2, r2, #8
 801d2c2:	fa1f fa82 	uxth.w	sl, r2
 801d2c6:	43d2      	mvns	r2, r2
 801d2c8:	b2c0      	uxtb	r0, r0
 801d2ca:	fb16 f60a 	smulbb	r6, r6, sl
 801d2ce:	fb10 f00a 	smulbb	r0, r0, sl
 801d2d2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d2d6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d2da:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d2de:	fa5f fc8c 	uxtb.w	ip, ip
 801d2e2:	b2d2      	uxtb	r2, r2
 801d2e4:	fb15 f50a 	smulbb	r5, r5, sl
 801d2e8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d2ec:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801d2f0:	fb07 6702 	mla	r7, r7, r2, r6
 801d2f4:	fb0c 0002 	mla	r0, ip, r2, r0
 801d2f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d2fa:	b2bf      	uxth	r7, r7
 801d2fc:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801d300:	fb06 5602 	mla	r6, r6, r2, r5
 801d304:	b280      	uxth	r0, r0
 801d306:	1c7a      	adds	r2, r7, #1
 801d308:	1c45      	adds	r5, r0, #1
 801d30a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d30e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d312:	b2b6      	uxth	r6, r6
 801d314:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d318:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d31c:	432f      	orrs	r7, r5
 801d31e:	1c75      	adds	r5, r6, #1
 801d320:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801d324:	096d      	lsrs	r5, r5, #5
 801d326:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d32a:	432f      	orrs	r7, r5
 801d32c:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801d330:	e7b2      	b.n	801d298 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 801d332:	bf00      	nop
 801d334:	2000f394 	.word	0x2000f394
 801d338:	2000f38e 	.word	0x2000f38e
 801d33c:	fffff7fb 	.word	0xfffff7fb
 801d340:	9203      	str	r2, [sp, #12]
 801d342:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d344:	458e      	cmp	lr, r1
 801d346:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801d34a:	f4ff af66 	bcc.w	801d21a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 801d34e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d350:	9906      	ldr	r1, [sp, #24]
 801d352:	8812      	ldrh	r2, [r2, #0]
 801d354:	1a52      	subs	r2, r2, r1
 801d356:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801d35a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d35c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801d35e:	3201      	adds	r2, #1
 801d360:	428a      	cmp	r2, r1
 801d362:	9209      	str	r2, [sp, #36]	; 0x24
 801d364:	d110      	bne.n	801d388 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 801d366:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801d36a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801d36e:	9b06      	ldr	r3, [sp, #24]
 801d370:	eba5 0509 	sub.w	r5, r5, r9
 801d374:	b2ad      	uxth	r5, r5
 801d376:	2d00      	cmp	r5, #0
 801d378:	bf0c      	ite	eq
 801d37a:	4619      	moveq	r1, r3
 801d37c:	2100      	movne	r1, #0
 801d37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d380:	b289      	uxth	r1, r1
 801d382:	3301      	adds	r3, #1
 801d384:	930d      	str	r3, [sp, #52]	; 0x34
 801d386:	e694      	b.n	801d0b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801d388:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801d38c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801d390:	1b2d      	subs	r5, r5, r4
 801d392:	b2ad      	uxth	r5, r5
 801d394:	2d00      	cmp	r5, #0
 801d396:	bf18      	it	ne
 801d398:	2400      	movne	r4, #0
 801d39a:	e73f      	b.n	801d21c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 801d39c:	4b03      	ldr	r3, [pc, #12]	; (801d3ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 801d39e:	6818      	ldr	r0, [r3, #0]
 801d3a0:	6803      	ldr	r3, [r0, #0]
 801d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3a4:	4798      	blx	r3
 801d3a6:	b01d      	add	sp, #116	; 0x74
 801d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ac:	2000f394 	.word	0x2000f394

0801d3b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3b4:	b09f      	sub	sp, #124	; 0x7c
 801d3b6:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801d3ba:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801d3be:	461d      	mov	r5, r3
 801d3c0:	4604      	mov	r4, r0
 801d3c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3c4:	920a      	str	r2, [sp, #40]	; 0x28
 801d3c6:	2a00      	cmp	r2, #0
 801d3c8:	f000 81fc 	beq.w	801d7c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 801d3cc:	6828      	ldr	r0, [r5, #0]
 801d3ce:	6869      	ldr	r1, [r5, #4]
 801d3d0:	aa1a      	add	r2, sp, #104	; 0x68
 801d3d2:	c203      	stmia	r2!, {r0, r1}
 801d3d4:	6818      	ldr	r0, [r3, #0]
 801d3d6:	6859      	ldr	r1, [r3, #4]
 801d3d8:	aa1c      	add	r2, sp, #112	; 0x70
 801d3da:	c203      	stmia	r2!, {r0, r1}
 801d3dc:	a81a      	add	r0, sp, #104	; 0x68
 801d3de:	f7f9 fb0f 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3e2:	4629      	mov	r1, r5
 801d3e4:	a81c      	add	r0, sp, #112	; 0x70
 801d3e6:	f7f9 fb33 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3ea:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801d3ee:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801d3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d3f6:	bfdd      	ittte	le
 801d3f8:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801d3fc:	b29a      	uxthle	r2, r3
 801d3fe:	fb91 f2f2 	sdivle	r2, r1, r2
 801d402:	2201      	movgt	r2, #1
 801d404:	9201      	str	r2, [sp, #4]
 801d406:	9801      	ldr	r0, [sp, #4]
 801d408:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801d40c:	9901      	ldr	r1, [sp, #4]
 801d40e:	fb92 f0f0 	sdiv	r0, r2, r0
 801d412:	b280      	uxth	r0, r0
 801d414:	9010      	str	r0, [sp, #64]	; 0x40
 801d416:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d418:	9801      	ldr	r0, [sp, #4]
 801d41a:	440e      	add	r6, r1
 801d41c:	fb05 2510 	mls	r5, r5, r0, r2
 801d420:	fb15 f503 	smulbb	r5, r5, r3
 801d424:	3e01      	subs	r6, #1
 801d426:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801d42a:	fb96 f6f1 	sdiv	r6, r6, r1
 801d42e:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801d432:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 801d436:	440d      	add	r5, r1
 801d438:	4419      	add	r1, r3
 801d43a:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801d43e:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801d442:	441a      	add	r2, r3
 801d444:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801d448:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801d44c:	9304      	str	r3, [sp, #16]
 801d44e:	4b96      	ldr	r3, [pc, #600]	; (801d6a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801d450:	3601      	adds	r6, #1
 801d452:	6818      	ldr	r0, [r3, #0]
 801d454:	b2b6      	uxth	r6, r6
 801d456:	6803      	ldr	r3, [r0, #0]
 801d458:	b2ad      	uxth	r5, r5
 801d45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d45c:	4798      	blx	r3
 801d45e:	4b93      	ldr	r3, [pc, #588]	; (801d6ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801d460:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801d464:	881a      	ldrh	r2, [r3, #0]
 801d466:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 801d46a:	4357      	muls	r7, r2
 801d46c:	fb02 c101 	mla	r1, r2, r1, ip
 801d470:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801d474:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801d478:	920b      	str	r2, [sp, #44]	; 0x2c
 801d47a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d47c:	2d00      	cmp	r5, #0
 801d47e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d482:	f106 0204 	add.w	r2, r6, #4
 801d486:	9206      	str	r2, [sp, #24]
 801d488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d48a:	bf18      	it	ne
 801d48c:	2100      	movne	r1, #0
 801d48e:	ea6f 0202 	mvn.w	r2, r2
 801d492:	b2d2      	uxtb	r2, r2
 801d494:	9215      	str	r2, [sp, #84]	; 0x54
 801d496:	9a04      	ldr	r2, [sp, #16]
 801d498:	9318      	str	r3, [sp, #96]	; 0x60
 801d49a:	bf08      	it	eq
 801d49c:	4611      	moveq	r1, r2
 801d49e:	2200      	movs	r2, #0
 801d4a0:	4b83      	ldr	r3, [pc, #524]	; (801d6b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 801d4a2:	b289      	uxth	r1, r1
 801d4a4:	1b1b      	subs	r3, r3, r4
 801d4a6:	920d      	str	r2, [sp, #52]	; 0x34
 801d4a8:	9319      	str	r3, [sp, #100]	; 0x64
 801d4aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d4ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4ae:	fa12 f383 	uxtah	r3, r2, r3
 801d4b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d4b8:	3304      	adds	r3, #4
 801d4ba:	9307      	str	r3, [sp, #28]
 801d4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4be:	455b      	cmp	r3, fp
 801d4c0:	f240 817b 	bls.w	801d7ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 801d4c4:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801d4c8:	f04f 0801 	mov.w	r8, #1
 801d4cc:	fbb5 f3f3 	udiv	r3, r5, r3
 801d4d0:	9a01      	ldr	r2, [sp, #4]
 801d4d2:	9807      	ldr	r0, [sp, #28]
 801d4d4:	1ad3      	subs	r3, r2, r3
 801d4d6:	b29b      	uxth	r3, r3
 801d4d8:	9316      	str	r3, [sp, #88]	; 0x58
 801d4da:	9b07      	ldr	r3, [sp, #28]
 801d4dc:	7800      	ldrb	r0, [r0, #0]
 801d4de:	785a      	ldrb	r2, [r3, #1]
 801d4e0:	789b      	ldrb	r3, [r3, #2]
 801d4e2:	9011      	str	r0, [sp, #68]	; 0x44
 801d4e4:	021b      	lsls	r3, r3, #8
 801d4e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d4ea:	9a07      	ldr	r2, [sp, #28]
 801d4ec:	3001      	adds	r0, #1
 801d4ee:	78d2      	ldrb	r2, [r2, #3]
 801d4f0:	9005      	str	r0, [sp, #20]
 801d4f2:	4313      	orrs	r3, r2
 801d4f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d4f6:	46c4      	mov	ip, r8
 801d4f8:	441a      	add	r2, r3
 801d4fa:	1c50      	adds	r0, r2, #1
 801d4fc:	9003      	str	r0, [sp, #12]
 801d4fe:	7852      	ldrb	r2, [r2, #1]
 801d500:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d502:	0212      	lsls	r2, r2, #8
 801d504:	5cc3      	ldrb	r3, [r0, r3]
 801d506:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801d50a:	431a      	orrs	r2, r3
 801d50c:	b293      	uxth	r3, r2
 801d50e:	930c      	str	r3, [sp, #48]	; 0x30
 801d510:	2300      	movs	r3, #0
 801d512:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801d516:	9308      	str	r3, [sp, #32]
 801d518:	461a      	mov	r2, r3
 801d51a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801d51e:	f8cd 8008 	str.w	r8, [sp, #8]
 801d522:	930e      	str	r3, [sp, #56]	; 0x38
 801d524:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801d528:	930f      	str	r3, [sp, #60]	; 0x3c
 801d52a:	2d00      	cmp	r5, #0
 801d52c:	d07c      	beq.n	801d628 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801d52e:	45ac      	cmp	ip, r5
 801d530:	d26c      	bcs.n	801d60c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801d532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d534:	eba5 050c 	sub.w	r5, r5, ip
 801d538:	455b      	cmp	r3, fp
 801d53a:	b2ad      	uxth	r5, r5
 801d53c:	4608      	mov	r0, r1
 801d53e:	d802      	bhi.n	801d546 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801d540:	e070      	b.n	801d624 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801d542:	2b00      	cmp	r3, #0
 801d544:	d15c      	bne.n	801d600 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 801d546:	9b03      	ldr	r3, [sp, #12]
 801d548:	9a02      	ldr	r2, [sp, #8]
 801d54a:	785b      	ldrb	r3, [r3, #1]
 801d54c:	f1c2 0207 	rsb	r2, r2, #7
 801d550:	4093      	lsls	r3, r2
 801d552:	005b      	lsls	r3, r3, #1
 801d554:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801d558:	9b03      	ldr	r3, [sp, #12]
 801d55a:	9902      	ldr	r1, [sp, #8]
 801d55c:	781b      	ldrb	r3, [r3, #0]
 801d55e:	410b      	asrs	r3, r1
 801d560:	3101      	adds	r1, #1
 801d562:	b2c9      	uxtb	r1, r1
 801d564:	2908      	cmp	r1, #8
 801d566:	9102      	str	r1, [sp, #8]
 801d568:	9903      	ldr	r1, [sp, #12]
 801d56a:	b2db      	uxtb	r3, r3
 801d56c:	bf03      	ittte	eq
 801d56e:	3102      	addeq	r1, #2
 801d570:	9103      	streq	r1, [sp, #12]
 801d572:	2100      	moveq	r1, #0
 801d574:	3101      	addne	r1, #1
 801d576:	bf14      	ite	ne
 801d578:	9103      	strne	r1, [sp, #12]
 801d57a:	9102      	streq	r1, [sp, #8]
 801d57c:	4313      	orrs	r3, r2
 801d57e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d580:	b29a      	uxth	r2, r3
 801d582:	4291      	cmp	r1, r2
 801d584:	d30a      	bcc.n	801d59c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801d586:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801d58a:	2301      	movs	r3, #1
 801d58c:	9905      	ldr	r1, [sp, #20]
 801d58e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801d592:	d30f      	bcc.n	801d5b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 801d594:	2100      	movs	r1, #0
 801d596:	4698      	mov	r8, r3
 801d598:	9100      	str	r1, [sp, #0]
 801d59a:	e032      	b.n	801d602 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 801d59c:	9b05      	ldr	r3, [sp, #20]
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	d318      	bcc.n	801d5d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 801d5a2:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801d5a6:	eb04 0308 	add.w	r3, r4, r8
 801d5aa:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801d5ae:	f108 0301 	add.w	r3, r8, #1
 801d5b2:	b29b      	uxth	r3, r3
 801d5b4:	9905      	ldr	r1, [sp, #20]
 801d5b6:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801d5ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801d5be:	710e      	strb	r6, [r1, #4]
 801d5c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d5c2:	80ce      	strh	r6, [r1, #6]
 801d5c4:	f108 0601 	add.w	r6, r8, #1
 801d5c8:	714e      	strb	r6, [r1, #5]
 801d5ca:	9905      	ldr	r1, [sp, #20]
 801d5cc:	3101      	adds	r1, #1
 801d5ce:	b289      	uxth	r1, r1
 801d5d0:	9105      	str	r1, [sp, #20]
 801d5d2:	e7df      	b.n	801d594 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801d5d4:	4611      	mov	r1, r2
 801d5d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d5da:	795b      	ldrb	r3, [r3, #5]
 801d5dc:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801d5e0:	4426      	add	r6, r4
 801d5e2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801d5e4:	4437      	add	r7, r6
 801d5e6:	2f00      	cmp	r7, #0
 801d5e8:	dd06      	ble.n	801d5f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 801d5ea:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801d5ee:	790f      	ldrb	r7, [r1, #4]
 801d5f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d5f4:	88c9      	ldrh	r1, [r1, #6]
 801d5f6:	e7f4      	b.n	801d5e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 801d5f8:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801d5fc:	b29b      	uxth	r3, r3
 801d5fe:	e7c5      	b.n	801d58c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 801d600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d602:	920c      	str	r2, [sp, #48]	; 0x30
 801d604:	4601      	mov	r1, r0
 801d606:	9a00      	ldr	r2, [sp, #0]
 801d608:	469c      	mov	ip, r3
 801d60a:	e78e      	b.n	801d52a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801d60c:	1957      	adds	r7, r2, r5
 801d60e:	ebac 0305 	sub.w	r3, ip, r5
 801d612:	b2ba      	uxth	r2, r7
 801d614:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801d618:	b29b      	uxth	r3, r3
 801d61a:	9200      	str	r2, [sp, #0]
 801d61c:	2500      	movs	r5, #0
 801d61e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d620:	455a      	cmp	r2, fp
 801d622:	d88e      	bhi.n	801d542 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801d624:	4601      	mov	r1, r0
 801d626:	e749      	b.n	801d4bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 801d628:	458c      	cmp	ip, r1
 801d62a:	bf2c      	ite	cs
 801d62c:	4628      	movcs	r0, r5
 801d62e:	462b      	movcc	r3, r5
 801d630:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d632:	bf27      	ittee	cs
 801d634:	ebac 0301 	subcs.w	r3, ip, r1
 801d638:	9109      	strcs	r1, [sp, #36]	; 0x24
 801d63a:	eba1 000c 	subcc.w	r0, r1, ip
 801d63e:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 801d642:	bf2c      	ite	cs
 801d644:	b29b      	uxthcs	r3, r3
 801d646:	b280      	uxthcc	r0, r0
 801d648:	2dff      	cmp	r5, #255	; 0xff
 801d64a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d64c:	eb02 0705 	add.w	r7, r2, r5
 801d650:	b2bd      	uxth	r5, r7
 801d652:	9500      	str	r5, [sp, #0]
 801d654:	d12e      	bne.n	801d6b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 801d656:	465e      	mov	r6, fp
 801d658:	9d00      	ldr	r5, [sp, #0]
 801d65a:	42aa      	cmp	r2, r5
 801d65c:	f040 8083 	bne.w	801d766 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 801d660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d662:	458c      	cmp	ip, r1
 801d664:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801d668:	d3d8      	bcc.n	801d61c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 801d66a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d66c:	9904      	ldr	r1, [sp, #16]
 801d66e:	8812      	ldrh	r2, [r2, #0]
 801d670:	1a52      	subs	r2, r2, r1
 801d672:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801d676:	9a08      	ldr	r2, [sp, #32]
 801d678:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d67a:	3201      	adds	r2, #1
 801d67c:	428a      	cmp	r2, r1
 801d67e:	9208      	str	r2, [sp, #32]
 801d680:	f040 8091 	bne.w	801d7a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 801d684:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801d688:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 801d68c:	9b04      	ldr	r3, [sp, #16]
 801d68e:	eba5 050c 	sub.w	r5, r5, ip
 801d692:	b2ad      	uxth	r5, r5
 801d694:	2d00      	cmp	r5, #0
 801d696:	bf0c      	ite	eq
 801d698:	4619      	moveq	r1, r3
 801d69a:	2100      	movne	r1, #0
 801d69c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d69e:	b289      	uxth	r1, r1
 801d6a0:	3301      	adds	r3, #1
 801d6a2:	930d      	str	r3, [sp, #52]	; 0x34
 801d6a4:	e701      	b.n	801d4aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 801d6a6:	bf00      	nop
 801d6a8:	2000f394 	.word	0x2000f394
 801d6ac:	2000f38e 	.word	0x2000f38e
 801d6b0:	fffff7fb 	.word	0xfffff7fb
 801d6b4:	46d9      	mov	r9, fp
 801d6b6:	9d00      	ldr	r5, [sp, #0]
 801d6b8:	42aa      	cmp	r2, r5
 801d6ba:	d0d1      	beq.n	801d660 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 801d6bc:	1c55      	adds	r5, r2, #1
 801d6be:	4422      	add	r2, r4
 801d6c0:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 801d6c4:	9a06      	ldr	r2, [sp, #24]
 801d6c6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d6ca:	4472      	add	r2, lr
 801d6cc:	9212      	str	r2, [sp, #72]	; 0x48
 801d6ce:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d6d0:	f8b9 2000 	ldrh.w	r2, [r9]
 801d6d4:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d6d8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d6da:	1216      	asrs	r6, r2, #8
 801d6dc:	fb1a fa07 	smulbb	sl, sl, r7
 801d6e0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d6e4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d6e6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d6ea:	fb06 a607 	mla	r6, r6, r7, sl
 801d6ee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d6f0:	9517      	str	r5, [sp, #92]	; 0x5c
 801d6f2:	f897 a001 	ldrb.w	sl, [r7, #1]
 801d6f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d6f8:	10d5      	asrs	r5, r2, #3
 801d6fa:	fb1a fa07 	smulbb	sl, sl, r7
 801d6fe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d702:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d704:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d708:	fb05 a507 	mla	r5, r5, r7, sl
 801d70c:	9f06      	ldr	r7, [sp, #24]
 801d70e:	00d2      	lsls	r2, r2, #3
 801d710:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d714:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d716:	b2d2      	uxtb	r2, r2
 801d718:	fb1e fe07 	smulbb	lr, lr, r7
 801d71c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d71e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d722:	fb02 e207 	mla	r2, r2, r7, lr
 801d726:	b2b6      	uxth	r6, r6
 801d728:	b292      	uxth	r2, r2
 801d72a:	b2ad      	uxth	r5, r5
 801d72c:	f106 0a01 	add.w	sl, r6, #1
 801d730:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801d734:	f102 0e01 	add.w	lr, r2, #1
 801d738:	f105 0a01 	add.w	sl, r5, #1
 801d73c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801d740:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d744:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d748:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d74c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d750:	ea4e 0606 	orr.w	r6, lr, r6
 801d754:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d758:	ea46 060a 	orr.w	r6, r6, sl
 801d75c:	f829 6b02 	strh.w	r6, [r9], #2
 801d760:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801d764:	e7a7      	b.n	801d6b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 801d766:	f102 0e01 	add.w	lr, r2, #1
 801d76a:	4422      	add	r2, r4
 801d76c:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 801d770:	9a06      	ldr	r2, [sp, #24]
 801d772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d776:	eb02 0a05 	add.w	sl, r2, r5
 801d77a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d77e:	4a13      	ldr	r2, [pc, #76]	; (801d7cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 801d780:	9f06      	ldr	r7, [sp, #24]
 801d782:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801d786:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d78a:	00d2      	lsls	r2, r2, #3
 801d78c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d790:	ea49 0202 	orr.w	r2, r9, r2
 801d794:	f817 9005 	ldrb.w	r9, [r7, r5]
 801d798:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801d79c:	f826 2b02 	strh.w	r2, [r6], #2
 801d7a0:	fa1f f28e 	uxth.w	r2, lr
 801d7a4:	e758      	b.n	801d658 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 801d7a6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801d7aa:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801d7ae:	1a2d      	subs	r5, r5, r0
 801d7b0:	b2ad      	uxth	r5, r5
 801d7b2:	2d00      	cmp	r5, #0
 801d7b4:	bf18      	it	ne
 801d7b6:	2000      	movne	r0, #0
 801d7b8:	e731      	b.n	801d61e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 801d7ba:	4b05      	ldr	r3, [pc, #20]	; (801d7d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 801d7bc:	6818      	ldr	r0, [r3, #0]
 801d7be:	6803      	ldr	r3, [r0, #0]
 801d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7c2:	4798      	blx	r3
 801d7c4:	b01f      	add	sp, #124	; 0x7c
 801d7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7ca:	bf00      	nop
 801d7cc:	fffff800 	.word	0xfffff800
 801d7d0:	2000f394 	.word	0x2000f394

0801d7d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7d8:	469b      	mov	fp, r3
 801d7da:	4616      	mov	r6, r2
 801d7dc:	b091      	sub	sp, #68	; 0x44
 801d7de:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d7e2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801d7e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d7ea:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801d7ee:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801d7f2:	4604      	mov	r4, r0
 801d7f4:	460d      	mov	r5, r1
 801d7f6:	4640      	mov	r0, r8
 801d7f8:	4659      	mov	r1, fp
 801d7fa:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d7fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d802:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801d806:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801d80a:	f7f6 fbf1 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 801d80e:	4631      	mov	r1, r6
 801d810:	4640      	mov	r0, r8
 801d812:	f7f6 fbed 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 801d816:	4b74      	ldr	r3, [pc, #464]	; (801d9e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801d818:	8818      	ldrh	r0, [r3, #0]
 801d81a:	4b74      	ldr	r3, [pc, #464]	; (801d9ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801d81c:	b202      	sxth	r2, r0
 801d81e:	8819      	ldrh	r1, [r3, #0]
 801d820:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801d824:	b20e      	sxth	r6, r1
 801d826:	2b00      	cmp	r3, #0
 801d828:	da07      	bge.n	801d83a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801d82a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801d82e:	4463      	add	r3, ip
 801d830:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d834:	2300      	movs	r3, #0
 801d836:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801d83a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801d83e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d842:	1ad2      	subs	r2, r2, r3
 801d844:	4594      	cmp	ip, r2
 801d846:	bfc4      	itt	gt
 801d848:	1ac2      	subgt	r2, r0, r3
 801d84a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801d84e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d852:	2a00      	cmp	r2, #0
 801d854:	da07      	bge.n	801d866 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801d856:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801d85a:	4462      	add	r2, ip
 801d85c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801d860:	2200      	movs	r2, #0
 801d862:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801d866:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801d86a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801d86e:	eba6 060a 	sub.w	r6, r6, sl
 801d872:	42b2      	cmp	r2, r6
 801d874:	bfc4      	itt	gt
 801d876:	eba1 020a 	subgt.w	r2, r1, sl
 801d87a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801d87e:	4a5c      	ldr	r2, [pc, #368]	; (801d9f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801d880:	7812      	ldrb	r2, [r2, #0]
 801d882:	b9a2      	cbnz	r2, 801d8ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801d884:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801d888:	4286      	cmp	r6, r0
 801d88a:	4640      	mov	r0, r8
 801d88c:	9303      	str	r3, [sp, #12]
 801d88e:	bf14      	ite	ne
 801d890:	2600      	movne	r6, #0
 801d892:	2601      	moveq	r6, #1
 801d894:	f7f6 fbef 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d898:	9b03      	ldr	r3, [sp, #12]
 801d89a:	b160      	cbz	r0, 801d8b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801d89c:	2300      	movs	r3, #0
 801d89e:	8023      	strh	r3, [r4, #0]
 801d8a0:	8063      	strh	r3, [r4, #2]
 801d8a2:	80a3      	strh	r3, [r4, #4]
 801d8a4:	4620      	mov	r0, r4
 801d8a6:	80e3      	strh	r3, [r4, #6]
 801d8a8:	b011      	add	sp, #68	; 0x44
 801d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8ae:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d8b2:	428e      	cmp	r6, r1
 801d8b4:	e7e9      	b.n	801d88a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801d8b6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801d8ba:	a90e      	add	r1, sp, #56	; 0x38
 801d8bc:	9205      	str	r2, [sp, #20]
 801d8be:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801d8c2:	900e      	str	r0, [sp, #56]	; 0x38
 801d8c4:	9206      	str	r2, [sp, #24]
 801d8c6:	f8bb 2000 	ldrh.w	r2, [fp]
 801d8ca:	a80c      	add	r0, sp, #48	; 0x30
 801d8cc:	1a9b      	subs	r3, r3, r2
 801d8ce:	b21b      	sxth	r3, r3
 801d8d0:	9303      	str	r3, [sp, #12]
 801d8d2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801d8d6:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801d8da:	ebaa 0a03 	sub.w	sl, sl, r3
 801d8de:	fa0f f38a 	sxth.w	r3, sl
 801d8e2:	9304      	str	r3, [sp, #16]
 801d8e4:	9b03      	ldr	r3, [sp, #12]
 801d8e6:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801d8ea:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801d8ee:	9b04      	ldr	r3, [sp, #16]
 801d8f0:	f8df b104 	ldr.w	fp, [pc, #260]	; 801d9f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801d8f4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d8f8:	9b05      	ldr	r3, [sp, #20]
 801d8fa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801d8fe:	9b06      	ldr	r3, [sp, #24]
 801d900:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d904:	f7f9 f8a4 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d908:	4640      	mov	r0, r8
 801d90a:	f7f9 f879 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d90e:	a80e      	add	r0, sp, #56	; 0x38
 801d910:	f7f9 f876 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d914:	4b37      	ldr	r3, [pc, #220]	; (801d9f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801d916:	4628      	mov	r0, r5
 801d918:	881b      	ldrh	r3, [r3, #0]
 801d91a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801d91e:	9307      	str	r3, [sp, #28]
 801d920:	682b      	ldr	r3, [r5, #0]
 801d922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d924:	4798      	blx	r3
 801d926:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801d92a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d92e:	4681      	mov	r9, r0
 801d930:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801d934:	f8db 0000 	ldr.w	r0, [fp]
 801d938:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801d93a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d93e:	6803      	ldr	r3, [r0, #0]
 801d940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d942:	4798      	blx	r3
 801d944:	4607      	mov	r7, r0
 801d946:	f8db 0000 	ldr.w	r0, [fp]
 801d94a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d94e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d952:	6803      	ldr	r3, [r0, #0]
 801d954:	9109      	str	r1, [sp, #36]	; 0x24
 801d956:	9208      	str	r2, [sp, #32]
 801d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d95a:	4798      	blx	r3
 801d95c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d960:	f010 0f01 	tst.w	r0, #1
 801d964:	d012      	beq.n	801d98c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801d966:	f8db 0000 	ldr.w	r0, [fp]
 801d96a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d96e:	6803      	ldr	r3, [r0, #0]
 801d970:	9200      	str	r2, [sp, #0]
 801d972:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801d974:	e898 0006 	ldmia.w	r8, {r1, r2}
 801d978:	462b      	mov	r3, r5
 801d97a:	47b0      	blx	r6
 801d97c:	9b03      	ldr	r3, [sp, #12]
 801d97e:	8023      	strh	r3, [r4, #0]
 801d980:	9b04      	ldr	r3, [sp, #16]
 801d982:	8063      	strh	r3, [r4, #2]
 801d984:	9b05      	ldr	r3, [sp, #20]
 801d986:	80a3      	strh	r3, [r4, #4]
 801d988:	9b06      	ldr	r3, [sp, #24]
 801d98a:	e78b      	b.n	801d8a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801d98c:	fb09 f202 	mul.w	r2, r9, r2
 801d990:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d994:	440f      	add	r7, r1
 801d996:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d99a:	b166      	cbz	r6, 801d9b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801d99c:	9a07      	ldr	r2, [sp, #28]
 801d99e:	4592      	cmp	sl, r2
 801d9a0:	d109      	bne.n	801d9b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801d9a2:	f8db 0000 	ldr.w	r0, [fp]
 801d9a6:	fb09 f303 	mul.w	r3, r9, r3
 801d9aa:	6802      	ldr	r2, [r0, #0]
 801d9ac:	4629      	mov	r1, r5
 801d9ae:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801d9b0:	463a      	mov	r2, r7
 801d9b2:	47b0      	blx	r6
 801d9b4:	e7e2      	b.n	801d97c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801d9b6:	fb0a f303 	mul.w	r3, sl, r3
 801d9ba:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801d9f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801d9be:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801d9c2:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801d9c6:	4545      	cmp	r5, r8
 801d9c8:	d2d8      	bcs.n	801d97c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801d9ca:	f8db 0000 	ldr.w	r0, [fp]
 801d9ce:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d9d2:	6802      	ldr	r2, [r0, #0]
 801d9d4:	4629      	mov	r1, r5
 801d9d6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d9da:	005b      	lsls	r3, r3, #1
 801d9dc:	463a      	mov	r2, r7
 801d9de:	47d0      	blx	sl
 801d9e0:	444f      	add	r7, r9
 801d9e2:	4435      	add	r5, r6
 801d9e4:	e7ef      	b.n	801d9c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801d9e6:	bf00      	nop
 801d9e8:	2000f388 	.word	0x2000f388
 801d9ec:	2000f38a 	.word	0x2000f38a
 801d9f0:	2000f38c 	.word	0x2000f38c
 801d9f4:	2000f38e 	.word	0x2000f38e
 801d9f8:	2000f394 	.word	0x2000f394

0801d9fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9fe:	4606      	mov	r6, r0
 801da00:	b087      	sub	sp, #28
 801da02:	460c      	mov	r4, r1
 801da04:	4617      	mov	r7, r2
 801da06:	461d      	mov	r5, r3
 801da08:	b333      	cbz	r3, 801da58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da0a:	4608      	mov	r0, r1
 801da0c:	f7f6 fb33 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801da10:	bb10      	cbnz	r0, 801da58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da12:	6820      	ldr	r0, [r4, #0]
 801da14:	6861      	ldr	r1, [r4, #4]
 801da16:	ab04      	add	r3, sp, #16
 801da18:	4c1b      	ldr	r4, [pc, #108]	; (801da88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801da1a:	c303      	stmia	r3!, {r0, r1}
 801da1c:	a804      	add	r0, sp, #16
 801da1e:	f7f8 ffef 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da22:	6820      	ldr	r0, [r4, #0]
 801da24:	6803      	ldr	r3, [r0, #0]
 801da26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da28:	4798      	blx	r3
 801da2a:	2dff      	cmp	r5, #255	; 0xff
 801da2c:	d016      	beq.n	801da5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801da2e:	f010 0f08 	tst.w	r0, #8
 801da32:	6820      	ldr	r0, [r4, #0]
 801da34:	d015      	beq.n	801da62 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801da36:	2400      	movs	r4, #0
 801da38:	6801      	ldr	r1, [r0, #0]
 801da3a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801da3e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801da42:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801da46:	9401      	str	r4, [sp, #4]
 801da48:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801da4c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801da50:	9400      	str	r4, [sp, #0]
 801da52:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801da54:	4639      	mov	r1, r7
 801da56:	47a0      	blx	r4
 801da58:	b007      	add	sp, #28
 801da5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da5c:	f010 0f02 	tst.w	r0, #2
 801da60:	e7e7      	b.n	801da32 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801da62:	6803      	ldr	r3, [r0, #0]
 801da64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da66:	4798      	blx	r3
 801da68:	4b08      	ldr	r3, [pc, #32]	; (801da8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801da6a:	4601      	mov	r1, r0
 801da6c:	881a      	ldrh	r2, [r3, #0]
 801da6e:	e9cd 7500 	strd	r7, r5, [sp]
 801da72:	6833      	ldr	r3, [r6, #0]
 801da74:	4630      	mov	r0, r6
 801da76:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801da78:	ab04      	add	r3, sp, #16
 801da7a:	47a8      	blx	r5
 801da7c:	6820      	ldr	r0, [r4, #0]
 801da7e:	6803      	ldr	r3, [r0, #0]
 801da80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da82:	4798      	blx	r3
 801da84:	e7e8      	b.n	801da58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da86:	bf00      	nop
 801da88:	2000f394 	.word	0x2000f394
 801da8c:	2000f38e 	.word	0x2000f38e

0801da90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801da90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da94:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801da98:	4688      	mov	r8, r1
 801da9a:	4614      	mov	r4, r2
 801da9c:	461d      	mov	r5, r3
 801da9e:	9e08      	ldr	r6, [sp, #32]
 801daa0:	2f00      	cmp	r7, #0
 801daa2:	f000 80a9 	beq.w	801dbf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801daa6:	4618      	mov	r0, r3
 801daa8:	f7f6 fae5 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801daac:	2800      	cmp	r0, #0
 801daae:	f040 80a3 	bne.w	801dbf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801dab2:	f9b5 1000 	ldrsh.w	r1, [r5]
 801dab6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801daba:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801dabe:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801dac2:	fb04 1303 	mla	r3, r4, r3, r1
 801dac6:	4365      	muls	r5, r4
 801dac8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801dacc:	2fff      	cmp	r7, #255	; 0xff
 801dace:	eba4 0200 	sub.w	r2, r4, r0
 801dad2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801dad6:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801dada:	d04a      	beq.n	801db72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801dadc:	b2bc      	uxth	r4, r7
 801dade:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801dae2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801dae6:	fa5f f788 	uxtb.w	r7, r8
 801daea:	b2f3      	uxtb	r3, r6
 801daec:	fb0e fe04 	mul.w	lr, lr, r4
 801daf0:	4367      	muls	r7, r4
 801daf2:	4363      	muls	r3, r4
 801daf4:	0040      	lsls	r0, r0, #1
 801daf6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801dafa:	fa1f fc8c 	uxth.w	ip, ip
 801dafe:	42a9      	cmp	r1, r5
 801db00:	d27a      	bcs.n	801dbf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801db02:	eb01 0900 	add.w	r9, r1, r0
 801db06:	4549      	cmp	r1, r9
 801db08:	d231      	bcs.n	801db6e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801db0a:	880a      	ldrh	r2, [r1, #0]
 801db0c:	1214      	asrs	r4, r2, #8
 801db0e:	10d6      	asrs	r6, r2, #3
 801db10:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801db14:	00d2      	lsls	r2, r2, #3
 801db16:	b2d2      	uxtb	r2, r2
 801db18:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801db1c:	fb14 f40c 	smulbb	r4, r4, ip
 801db20:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801db24:	fb12 f20c 	smulbb	r2, r2, ip
 801db28:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801db2c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801db30:	4474      	add	r4, lr
 801db32:	fb16 f60c 	smulbb	r6, r6, ip
 801db36:	b2a4      	uxth	r4, r4
 801db38:	441a      	add	r2, r3
 801db3a:	b292      	uxth	r2, r2
 801db3c:	f104 0a01 	add.w	sl, r4, #1
 801db40:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801db44:	f102 0a01 	add.w	sl, r2, #1
 801db48:	443e      	add	r6, r7
 801db4a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801db4e:	b2b6      	uxth	r6, r6
 801db50:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801db54:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801db58:	4322      	orrs	r2, r4
 801db5a:	1c74      	adds	r4, r6, #1
 801db5c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801db60:	0976      	lsrs	r6, r6, #5
 801db62:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801db66:	4332      	orrs	r2, r6
 801db68:	f821 2b02 	strh.w	r2, [r1], #2
 801db6c:	e7cb      	b.n	801db06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801db6e:	4441      	add	r1, r8
 801db70:	e7c5      	b.n	801dafe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801db72:	4f22      	ldr	r7, [pc, #136]	; (801dbfc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801db74:	0973      	lsrs	r3, r6, #5
 801db76:	ea08 0707 	and.w	r7, r8, r7
 801db7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801db7e:	433b      	orrs	r3, r7
 801db80:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801db84:	4333      	orrs	r3, r6
 801db86:	07e7      	lsls	r7, r4, #31
 801db88:	b29b      	uxth	r3, r3
 801db8a:	d50b      	bpl.n	801dba4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801db8c:	0040      	lsls	r0, r0, #1
 801db8e:	0052      	lsls	r2, r2, #1
 801db90:	42a9      	cmp	r1, r5
 801db92:	d231      	bcs.n	801dbf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801db94:	180c      	adds	r4, r1, r0
 801db96:	42a1      	cmp	r1, r4
 801db98:	d202      	bcs.n	801dba0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801db9a:	f821 3b02 	strh.w	r3, [r1], #2
 801db9e:	e7fa      	b.n	801db96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801dba0:	4411      	add	r1, r2
 801dba2:	e7f5      	b.n	801db90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801dba4:	078e      	lsls	r6, r1, #30
 801dba6:	d008      	beq.n	801dbba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801dba8:	460a      	mov	r2, r1
 801dbaa:	0066      	lsls	r6, r4, #1
 801dbac:	42aa      	cmp	r2, r5
 801dbae:	d202      	bcs.n	801dbb6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801dbb0:	8013      	strh	r3, [r2, #0]
 801dbb2:	4432      	add	r2, r6
 801dbb4:	e7fa      	b.n	801dbac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801dbb6:	3102      	adds	r1, #2
 801dbb8:	3801      	subs	r0, #1
 801dbba:	07c2      	lsls	r2, r0, #31
 801dbbc:	d50b      	bpl.n	801dbd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801dbbe:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801dbc2:	3a01      	subs	r2, #1
 801dbc4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801dbc8:	0066      	lsls	r6, r4, #1
 801dbca:	42aa      	cmp	r2, r5
 801dbcc:	d202      	bcs.n	801dbd4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801dbce:	8013      	strh	r3, [r2, #0]
 801dbd0:	4432      	add	r2, r6
 801dbd2:	e7fa      	b.n	801dbca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801dbd4:	3801      	subs	r0, #1
 801dbd6:	b178      	cbz	r0, 801dbf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801dbd8:	1040      	asrs	r0, r0, #1
 801dbda:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801dbde:	0080      	lsls	r0, r0, #2
 801dbe0:	0064      	lsls	r4, r4, #1
 801dbe2:	42a9      	cmp	r1, r5
 801dbe4:	d208      	bcs.n	801dbf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801dbe6:	460a      	mov	r2, r1
 801dbe8:	180e      	adds	r6, r1, r0
 801dbea:	42b2      	cmp	r2, r6
 801dbec:	d202      	bcs.n	801dbf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801dbee:	f842 3b04 	str.w	r3, [r2], #4
 801dbf2:	e7fa      	b.n	801dbea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801dbf4:	4421      	add	r1, r4
 801dbf6:	e7f4      	b.n	801dbe2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801dbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbfc:	00fff800 	.word	0x00fff800

0801dc00 <_ZN8touchgfx8LCD16bppC1Ev>:
 801dc00:	2200      	movs	r2, #0
 801dc02:	4912      	ldr	r1, [pc, #72]	; (801dc4c <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801dc04:	6042      	str	r2, [r0, #4]
 801dc06:	6001      	str	r1, [r0, #0]
 801dc08:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801dc0c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801dc10:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801dc14:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801dc18:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801dc1c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801dc20:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801dc24:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801dc28:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801dc2c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801dc30:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801dc34:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801dc38:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801dc3c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801dc40:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 801dc44:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801dc48:	4770      	bx	lr
 801dc4a:	bf00      	nop
 801dc4c:	0802a33c 	.word	0x0802a33c

0801dc50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc54:	460d      	mov	r5, r1
 801dc56:	4604      	mov	r4, r0
 801dc58:	4699      	mov	r9, r3
 801dc5a:	b08d      	sub	sp, #52	; 0x34
 801dc5c:	6808      	ldr	r0, [r1, #0]
 801dc5e:	6849      	ldr	r1, [r1, #4]
 801dc60:	ab08      	add	r3, sp, #32
 801dc62:	c303      	stmia	r3!, {r0, r1}
 801dc64:	6810      	ldr	r0, [r2, #0]
 801dc66:	6851      	ldr	r1, [r2, #4]
 801dc68:	ab0a      	add	r3, sp, #40	; 0x28
 801dc6a:	c303      	stmia	r3!, {r0, r1}
 801dc6c:	a808      	add	r0, sp, #32
 801dc6e:	f7f8 fec7 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc72:	4629      	mov	r1, r5
 801dc74:	a80a      	add	r0, sp, #40	; 0x28
 801dc76:	f7f8 feeb 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc7a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dc7e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801dc82:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801dc86:	4d63      	ldr	r5, [pc, #396]	; (801de14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801dc88:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dc8c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801dc90:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801dc94:	6828      	ldr	r0, [r5, #0]
 801dc96:	440a      	add	r2, r1
 801dc98:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801dc9c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801dca0:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801dca4:	4413      	add	r3, r2
 801dca6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801dcaa:	6803      	ldr	r3, [r0, #0]
 801dcac:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801dcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcb2:	4798      	blx	r3
 801dcb4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dcb8:	d119      	bne.n	801dcee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801dcba:	f010 0f20 	tst.w	r0, #32
 801dcbe:	6828      	ldr	r0, [r5, #0]
 801dcc0:	d018      	beq.n	801dcf4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801dcc2:	2500      	movs	r5, #0
 801dcc4:	6801      	ldr	r1, [r0, #0]
 801dcc6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801dcca:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801dcce:	b2b6      	uxth	r6, r6
 801dcd0:	9502      	str	r5, [sp, #8]
 801dcd2:	fa1f f588 	uxth.w	r5, r8
 801dcd6:	9601      	str	r6, [sp, #4]
 801dcd8:	9500      	str	r5, [sp, #0]
 801dcda:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801dcdc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801dce0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801dce4:	4621      	mov	r1, r4
 801dce6:	47a8      	blx	r5
 801dce8:	b00d      	add	sp, #52	; 0x34
 801dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcee:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dcf2:	e7e4      	b.n	801dcbe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801dcf4:	6803      	ldr	r3, [r0, #0]
 801dcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dcf8:	4798      	blx	r3
 801dcfa:	4947      	ldr	r1, [pc, #284]	; (801de18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801dcfc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801dd00:	468a      	mov	sl, r1
 801dd02:	880b      	ldrh	r3, [r1, #0]
 801dd04:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801dd08:	fb03 5202 	mla	r2, r3, r2, r5
 801dd0c:	4373      	muls	r3, r6
 801dd0e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801dd12:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dd16:	9307      	str	r3, [sp, #28]
 801dd18:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dd1c:	9306      	str	r3, [sp, #24]
 801dd1e:	9b07      	ldr	r3, [sp, #28]
 801dd20:	4298      	cmp	r0, r3
 801dd22:	d270      	bcs.n	801de06 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801dd24:	4621      	mov	r1, r4
 801dd26:	9b06      	ldr	r3, [sp, #24]
 801dd28:	eb00 0b03 	add.w	fp, r0, r3
 801dd2c:	4558      	cmp	r0, fp
 801dd2e:	d25d      	bcs.n	801ddec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801dd30:	f851 4b04 	ldr.w	r4, [r1], #4
 801dd34:	0e23      	lsrs	r3, r4, #24
 801dd36:	d014      	beq.n	801dd62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801dd38:	2bff      	cmp	r3, #255	; 0xff
 801dd3a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801dd3e:	d112      	bne.n	801dd66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801dd40:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dd44:	d10f      	bne.n	801dd66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801dd46:	0963      	lsrs	r3, r4, #5
 801dd48:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801dd4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dd50:	f02c 0c07 	bic.w	ip, ip, #7
 801dd54:	ea43 0c0c 	orr.w	ip, r3, ip
 801dd58:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801dd5c:	ea4c 0404 	orr.w	r4, ip, r4
 801dd60:	8004      	strh	r4, [r0, #0]
 801dd62:	3002      	adds	r0, #2
 801dd64:	e7e2      	b.n	801dd2c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801dd66:	fb09 f303 	mul.w	r3, r9, r3
 801dd6a:	1c5a      	adds	r2, r3, #1
 801dd6c:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801dd70:	1212      	asrs	r2, r2, #8
 801dd72:	b293      	uxth	r3, r2
 801dd74:	43d2      	mvns	r2, r2
 801dd76:	8807      	ldrh	r7, [r0, #0]
 801dd78:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801dd7c:	fb1e fe03 	smulbb	lr, lr, r3
 801dd80:	123e      	asrs	r6, r7, #8
 801dd82:	fa5f fc8c 	uxtb.w	ip, ip
 801dd86:	b2e4      	uxtb	r4, r4
 801dd88:	fb1c fc03 	smulbb	ip, ip, r3
 801dd8c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dd90:	fb14 f403 	smulbb	r4, r4, r3
 801dd94:	b2d2      	uxtb	r2, r2
 801dd96:	10fd      	asrs	r5, r7, #3
 801dd98:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801dd9c:	00ff      	lsls	r7, r7, #3
 801dd9e:	fb06 e602 	mla	r6, r6, r2, lr
 801dda2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dda6:	b2ff      	uxtb	r7, r7
 801dda8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ddac:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ddb0:	fb05 c502 	mla	r5, r5, r2, ip
 801ddb4:	fb07 4702 	mla	r7, r7, r2, r4
 801ddb8:	b2b6      	uxth	r6, r6
 801ddba:	f106 0e01 	add.w	lr, r6, #1
 801ddbe:	b2ad      	uxth	r5, r5
 801ddc0:	b2bf      	uxth	r7, r7
 801ddc2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ddc6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801ddca:	f105 0c01 	add.w	ip, r5, #1
 801ddce:	1c7e      	adds	r6, r7, #1
 801ddd0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ddd4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ddd8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801dddc:	096d      	lsrs	r5, r5, #5
 801ddde:	ea46 060e 	orr.w	r6, r6, lr
 801dde2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dde6:	432e      	orrs	r6, r5
 801dde8:	8006      	strh	r6, [r0, #0]
 801ddea:	e7ba      	b.n	801dd62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ddec:	f8ba 3000 	ldrh.w	r3, [sl]
 801ddf0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801ddf4:	eba3 0308 	sub.w	r3, r3, r8
 801ddf8:	eba4 0408 	sub.w	r4, r4, r8
 801ddfc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801de00:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801de04:	e78b      	b.n	801dd1e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801de06:	4b03      	ldr	r3, [pc, #12]	; (801de14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801de08:	6818      	ldr	r0, [r3, #0]
 801de0a:	6803      	ldr	r3, [r0, #0]
 801de0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de0e:	4798      	blx	r3
 801de10:	e76a      	b.n	801dce8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801de12:	bf00      	nop
 801de14:	2000f394 	.word	0x2000f394
 801de18:	2000f38e 	.word	0x2000f38e

0801de1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801de1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de20:	b085      	sub	sp, #20
 801de22:	466d      	mov	r5, sp
 801de24:	4616      	mov	r6, r2
 801de26:	460c      	mov	r4, r1
 801de28:	6810      	ldr	r0, [r2, #0]
 801de2a:	6851      	ldr	r1, [r2, #4]
 801de2c:	c503      	stmia	r5!, {r0, r1}
 801de2e:	6818      	ldr	r0, [r3, #0]
 801de30:	6859      	ldr	r1, [r3, #4]
 801de32:	c503      	stmia	r5!, {r0, r1}
 801de34:	4668      	mov	r0, sp
 801de36:	f7f8 fde3 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de3a:	4631      	mov	r1, r6
 801de3c:	a802      	add	r0, sp, #8
 801de3e:	f7f8 fe07 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de42:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801de46:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801de4a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801de4e:	4d28      	ldr	r5, [pc, #160]	; (801def0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801de50:	fb11 2103 	smlabb	r1, r1, r3, r2
 801de54:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801de58:	f8bd 1000 	ldrh.w	r1, [sp]
 801de5c:	6828      	ldr	r0, [r5, #0]
 801de5e:	440a      	add	r2, r1
 801de60:	f8ad 2008 	strh.w	r2, [sp, #8]
 801de64:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801de68:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801de6c:	4413      	add	r3, r2
 801de6e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801de72:	6803      	ldr	r3, [r0, #0]
 801de74:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801de78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de7a:	4798      	blx	r3
 801de7c:	4e1d      	ldr	r6, [pc, #116]	; (801def4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801de7e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801de82:	8833      	ldrh	r3, [r6, #0]
 801de84:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801de88:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801def8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801de8c:	fb03 1202 	mla	r2, r3, r2, r1
 801de90:	fb08 f303 	mul.w	r3, r8, r3
 801de94:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801de98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801de9c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801dea0:	4298      	cmp	r0, r3
 801dea2:	d21d      	bcs.n	801dee0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801dea4:	eb00 080c 	add.w	r8, r0, ip
 801dea8:	4540      	cmp	r0, r8
 801deaa:	d20f      	bcs.n	801decc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801deac:	f854 1b04 	ldr.w	r1, [r4], #4
 801deb0:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801deb4:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801deb8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801debc:	ea42 0209 	orr.w	r2, r2, r9
 801dec0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801dec4:	430a      	orrs	r2, r1
 801dec6:	f820 2b02 	strh.w	r2, [r0], #2
 801deca:	e7ed      	b.n	801dea8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801decc:	8832      	ldrh	r2, [r6, #0]
 801dece:	1bd2      	subs	r2, r2, r7
 801ded0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ded4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ded8:	1bd2      	subs	r2, r2, r7
 801deda:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801dede:	e7df      	b.n	801dea0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801dee0:	6828      	ldr	r0, [r5, #0]
 801dee2:	6803      	ldr	r3, [r0, #0]
 801dee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dee6:	4798      	blx	r3
 801dee8:	b005      	add	sp, #20
 801deea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801deee:	bf00      	nop
 801def0:	2000f394 	.word	0x2000f394
 801def4:	2000f38e 	.word	0x2000f38e
 801def8:	fffff800 	.word	0xfffff800

0801defc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801defc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df00:	460e      	mov	r6, r1
 801df02:	4604      	mov	r4, r0
 801df04:	461d      	mov	r5, r3
 801df06:	b08e      	sub	sp, #56	; 0x38
 801df08:	6808      	ldr	r0, [r1, #0]
 801df0a:	6849      	ldr	r1, [r1, #4]
 801df0c:	ab0a      	add	r3, sp, #40	; 0x28
 801df0e:	c303      	stmia	r3!, {r0, r1}
 801df10:	6810      	ldr	r0, [r2, #0]
 801df12:	6851      	ldr	r1, [r2, #4]
 801df14:	ab0c      	add	r3, sp, #48	; 0x30
 801df16:	c303      	stmia	r3!, {r0, r1}
 801df18:	a80a      	add	r0, sp, #40	; 0x28
 801df1a:	f7f8 fd71 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df1e:	4631      	mov	r1, r6
 801df20:	a80c      	add	r0, sp, #48	; 0x30
 801df22:	f7f8 fd95 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df26:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801df2a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801df2e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801df32:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801e0e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801df36:	fb11 2103 	smlabb	r1, r1, r3, r2
 801df3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801df3e:	440c      	add	r4, r1
 801df40:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801df44:	f8d8 0000 	ldr.w	r0, [r8]
 801df48:	440a      	add	r2, r1
 801df4a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801df4e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801df52:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801df56:	4413      	add	r3, r2
 801df58:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801df5c:	6803      	ldr	r3, [r0, #0]
 801df5e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801df62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df64:	4798      	blx	r3
 801df66:	2dff      	cmp	r5, #255	; 0xff
 801df68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801e0e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801df6c:	d124      	bne.n	801dfb8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801df6e:	f010 0f01 	tst.w	r0, #1
 801df72:	f8d8 0000 	ldr.w	r0, [r8]
 801df76:	d022      	beq.n	801dfbe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801df78:	2100      	movs	r1, #0
 801df7a:	f04f 0e01 	mov.w	lr, #1
 801df7e:	f8d0 c000 	ldr.w	ip, [r0]
 801df82:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801df86:	f8cd e018 	str.w	lr, [sp, #24]
 801df8a:	f8b9 e000 	ldrh.w	lr, [r9]
 801df8e:	b2b6      	uxth	r6, r6
 801df90:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801df94:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801df98:	b2bf      	uxth	r7, r7
 801df9a:	9102      	str	r1, [sp, #8]
 801df9c:	9503      	str	r5, [sp, #12]
 801df9e:	9601      	str	r6, [sp, #4]
 801dfa0:	9700      	str	r7, [sp, #0]
 801dfa2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801dfa6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801dfaa:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801dfae:	4621      	mov	r1, r4
 801dfb0:	47a8      	blx	r5
 801dfb2:	b00e      	add	sp, #56	; 0x38
 801dfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dfb8:	f010 0f04 	tst.w	r0, #4
 801dfbc:	e7d9      	b.n	801df72 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801dfbe:	6803      	ldr	r3, [r0, #0]
 801dfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dfc2:	4798      	blx	r3
 801dfc4:	f8b9 3000 	ldrh.w	r3, [r9]
 801dfc8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801dfcc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801dfd0:	435e      	muls	r6, r3
 801dfd2:	fb03 1202 	mla	r2, r3, r2, r1
 801dfd6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801dfda:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801dfde:	ebac 0c07 	sub.w	ip, ip, r7
 801dfe2:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801dfe6:	2dff      	cmp	r5, #255	; 0xff
 801dfe8:	eba3 0707 	sub.w	r7, r3, r7
 801dfec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801dff0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dff4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801dff8:	d049      	beq.n	801e08e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801dffa:	43eb      	mvns	r3, r5
 801dffc:	fa1f f985 	uxth.w	r9, r5
 801e000:	b2db      	uxtb	r3, r3
 801e002:	42b0      	cmp	r0, r6
 801e004:	d266      	bcs.n	801e0d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801e006:	eb00 0a0e 	add.w	sl, r0, lr
 801e00a:	4550      	cmp	r0, sl
 801e00c:	4621      	mov	r1, r4
 801e00e:	f104 0403 	add.w	r4, r4, #3
 801e012:	d25b      	bcs.n	801e0cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801e014:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e018:	8802      	ldrh	r2, [r0, #0]
 801e01a:	fb11 f109 	smulbb	r1, r1, r9
 801e01e:	ea4f 2822 	mov.w	r8, r2, asr #8
 801e022:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e026:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801e02a:	fb08 1803 	mla	r8, r8, r3, r1
 801e02e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801e032:	10d5      	asrs	r5, r2, #3
 801e034:	fb11 f109 	smulbb	r1, r1, r9
 801e038:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e03c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801e040:	fb05 1503 	mla	r5, r5, r3, r1
 801e044:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e048:	00d2      	lsls	r2, r2, #3
 801e04a:	fb11 f109 	smulbb	r1, r1, r9
 801e04e:	b2d2      	uxtb	r2, r2
 801e050:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e054:	fb02 1203 	mla	r2, r2, r3, r1
 801e058:	fa1f f888 	uxth.w	r8, r8
 801e05c:	b292      	uxth	r2, r2
 801e05e:	f108 0101 	add.w	r1, r8, #1
 801e062:	b2ad      	uxth	r5, r5
 801e064:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801e068:	1c51      	adds	r1, r2, #1
 801e06a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e06e:	1c69      	adds	r1, r5, #1
 801e070:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801e074:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801e078:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e07c:	096d      	lsrs	r5, r5, #5
 801e07e:	ea42 0208 	orr.w	r2, r2, r8
 801e082:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e086:	432a      	orrs	r2, r5
 801e088:	f820 2b02 	strh.w	r2, [r0], #2
 801e08c:	e7bd      	b.n	801e00a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801e08e:	4a14      	ldr	r2, [pc, #80]	; (801e0e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801e090:	42b0      	cmp	r0, r6
 801e092:	d21f      	bcs.n	801e0d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801e094:	eb00 050e 	add.w	r5, r0, lr
 801e098:	42a8      	cmp	r0, r5
 801e09a:	4621      	mov	r1, r4
 801e09c:	f104 0403 	add.w	r4, r4, #3
 801e0a0:	d210      	bcs.n	801e0c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801e0a2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801e0a6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e0aa:	00db      	lsls	r3, r3, #3
 801e0ac:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801e0b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e0b4:	430b      	orrs	r3, r1
 801e0b6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e0ba:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801e0be:	f820 3b02 	strh.w	r3, [r0], #2
 801e0c2:	e7e9      	b.n	801e098 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801e0c4:	4438      	add	r0, r7
 801e0c6:	eb01 040c 	add.w	r4, r1, ip
 801e0ca:	e7e1      	b.n	801e090 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801e0cc:	4438      	add	r0, r7
 801e0ce:	eb01 040c 	add.w	r4, r1, ip
 801e0d2:	e796      	b.n	801e002 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801e0d4:	4b03      	ldr	r3, [pc, #12]	; (801e0e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801e0d6:	6818      	ldr	r0, [r3, #0]
 801e0d8:	6803      	ldr	r3, [r0, #0]
 801e0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0dc:	4798      	blx	r3
 801e0de:	e768      	b.n	801dfb2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801e0e0:	fffff800 	.word	0xfffff800
 801e0e4:	2000f394 	.word	0x2000f394
 801e0e8:	2000f38e 	.word	0x2000f38e

0801e0ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e0ec:	b4f0      	push	{r4, r5, r6, r7}
 801e0ee:	4616      	mov	r6, r2
 801e0f0:	2e01      	cmp	r6, #1
 801e0f2:	461c      	mov	r4, r3
 801e0f4:	460d      	mov	r5, r1
 801e0f6:	9a04      	ldr	r2, [sp, #16]
 801e0f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e0fc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801e100:	d012      	beq.n	801e128 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801e102:	d303      	bcc.n	801e10c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801e104:	2e02      	cmp	r6, #2
 801e106:	d00a      	beq.n	801e11e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801e108:	bcf0      	pop	{r4, r5, r6, r7}
 801e10a:	4770      	bx	lr
 801e10c:	6805      	ldr	r5, [r0, #0]
 801e10e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801e112:	68ed      	ldr	r5, [r5, #12]
 801e114:	4613      	mov	r3, r2
 801e116:	46ac      	mov	ip, r5
 801e118:	4622      	mov	r2, r4
 801e11a:	bcf0      	pop	{r4, r5, r6, r7}
 801e11c:	4760      	bx	ip
 801e11e:	4621      	mov	r1, r4
 801e120:	4628      	mov	r0, r5
 801e122:	bcf0      	pop	{r4, r5, r6, r7}
 801e124:	f7ff bd94 	b.w	801dc50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e128:	4621      	mov	r1, r4
 801e12a:	4628      	mov	r0, r5
 801e12c:	bcf0      	pop	{r4, r5, r6, r7}
 801e12e:	f7ff bee5 	b.w	801defc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801e134 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e138:	4616      	mov	r6, r2
 801e13a:	4681      	mov	r9, r0
 801e13c:	b093      	sub	sp, #76	; 0x4c
 801e13e:	6810      	ldr	r0, [r2, #0]
 801e140:	4688      	mov	r8, r1
 801e142:	6851      	ldr	r1, [r2, #4]
 801e144:	ac0e      	add	r4, sp, #56	; 0x38
 801e146:	c403      	stmia	r4!, {r0, r1}
 801e148:	6818      	ldr	r0, [r3, #0]
 801e14a:	6859      	ldr	r1, [r3, #4]
 801e14c:	ac10      	add	r4, sp, #64	; 0x40
 801e14e:	c403      	stmia	r4!, {r0, r1}
 801e150:	a80e      	add	r0, sp, #56	; 0x38
 801e152:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801e156:	f7f8 fc53 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e15a:	4631      	mov	r1, r6
 801e15c:	a810      	add	r0, sp, #64	; 0x40
 801e15e:	f7f8 fc77 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e162:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e166:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e16a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e16e:	4e62      	ldr	r6, [pc, #392]	; (801e2f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801e170:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e174:	4489      	add	r9, r1
 801e176:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801e17a:	6830      	ldr	r0, [r6, #0]
 801e17c:	440a      	add	r2, r1
 801e17e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e182:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e186:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801e18a:	4413      	add	r3, r2
 801e18c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e190:	6803      	ldr	r3, [r0, #0]
 801e192:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801e196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e198:	4798      	blx	r3
 801e19a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e19e:	4f57      	ldr	r7, [pc, #348]	; (801e2fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801e1a0:	6830      	ldr	r0, [r6, #0]
 801e1a2:	d01d      	beq.n	801e1e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801e1a4:	2200      	movs	r2, #0
 801e1a6:	6801      	ldr	r1, [r0, #0]
 801e1a8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801e1ac:	220b      	movs	r2, #11
 801e1ae:	9207      	str	r2, [sp, #28]
 801e1b0:	883a      	ldrh	r2, [r7, #0]
 801e1b2:	b2a4      	uxth	r4, r4
 801e1b4:	9206      	str	r2, [sp, #24]
 801e1b6:	2201      	movs	r2, #1
 801e1b8:	e9cd a204 	strd	sl, r2, [sp, #16]
 801e1bc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e1c0:	b2ad      	uxth	r5, r5
 801e1c2:	9203      	str	r2, [sp, #12]
 801e1c4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e1c8:	9502      	str	r5, [sp, #8]
 801e1ca:	9200      	str	r2, [sp, #0]
 801e1cc:	9401      	str	r4, [sp, #4]
 801e1ce:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e1d0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e1d4:	4642      	mov	r2, r8
 801e1d6:	4649      	mov	r1, r9
 801e1d8:	47a0      	blx	r4
 801e1da:	b013      	add	sp, #76	; 0x4c
 801e1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1e0:	6803      	ldr	r3, [r0, #0]
 801e1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1e4:	4798      	blx	r3
 801e1e6:	f04f 0e04 	mov.w	lr, #4
 801e1ea:	883b      	ldrh	r3, [r7, #0]
 801e1ec:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801e1f0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801e1f4:	435d      	muls	r5, r3
 801e1f6:	fb03 1202 	mla	r2, r3, r2, r1
 801e1fa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e1fe:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801e202:	920c      	str	r2, [sp, #48]	; 0x30
 801e204:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801e208:	1b12      	subs	r2, r2, r4
 801e20a:	920d      	str	r2, [sp, #52]	; 0x34
 801e20c:	0062      	lsls	r2, r4, #1
 801e20e:	1b1c      	subs	r4, r3, r4
 801e210:	0063      	lsls	r3, r4, #1
 801e212:	920a      	str	r2, [sp, #40]	; 0x28
 801e214:	930b      	str	r3, [sp, #44]	; 0x2c
 801e216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e218:	4298      	cmp	r0, r3
 801e21a:	d266      	bcs.n	801e2ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801e21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e21e:	eb00 0b03 	add.w	fp, r0, r3
 801e222:	4558      	cmp	r0, fp
 801e224:	d25c      	bcs.n	801e2e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801e226:	f819 3b01 	ldrb.w	r3, [r9], #1
 801e22a:	fb1e e303 	smlabb	r3, lr, r3, lr
 801e22e:	f858 2003 	ldr.w	r2, [r8, r3]
 801e232:	0e11      	lsrs	r1, r2, #24
 801e234:	d012      	beq.n	801e25c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e236:	29ff      	cmp	r1, #255	; 0xff
 801e238:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801e23c:	d110      	bne.n	801e260 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e23e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e242:	d10d      	bne.n	801e260 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e244:	0953      	lsrs	r3, r2, #5
 801e246:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801e24a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e24e:	f027 0707 	bic.w	r7, r7, #7
 801e252:	431f      	orrs	r7, r3
 801e254:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e258:	433a      	orrs	r2, r7
 801e25a:	8002      	strh	r2, [r0, #0]
 801e25c:	3002      	adds	r0, #2
 801e25e:	e7e0      	b.n	801e222 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801e260:	fb0a f101 	mul.w	r1, sl, r1
 801e264:	1c4b      	adds	r3, r1, #1
 801e266:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801e26a:	121b      	asrs	r3, r3, #8
 801e26c:	b299      	uxth	r1, r3
 801e26e:	43db      	mvns	r3, r3
 801e270:	8806      	ldrh	r6, [r0, #0]
 801e272:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801e276:	b2d2      	uxtb	r2, r2
 801e278:	fb1c fc01 	smulbb	ip, ip, r1
 801e27c:	fb12 f201 	smulbb	r2, r2, r1
 801e280:	1235      	asrs	r5, r6, #8
 801e282:	10f4      	asrs	r4, r6, #3
 801e284:	00f6      	lsls	r6, r6, #3
 801e286:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e28a:	b2f6      	uxtb	r6, r6
 801e28c:	b2ff      	uxtb	r7, r7
 801e28e:	b2db      	uxtb	r3, r3
 801e290:	fb17 f701 	smulbb	r7, r7, r1
 801e294:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e298:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e29c:	fb05 c503 	mla	r5, r5, r3, ip
 801e2a0:	fb06 2203 	mla	r2, r6, r3, r2
 801e2a4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e2a8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801e2ac:	fb04 7403 	mla	r4, r4, r3, r7
 801e2b0:	b2ad      	uxth	r5, r5
 801e2b2:	b292      	uxth	r2, r2
 801e2b4:	f105 0c01 	add.w	ip, r5, #1
 801e2b8:	1c57      	adds	r7, r2, #1
 801e2ba:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801e2be:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e2c2:	b2a4      	uxth	r4, r4
 801e2c4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e2c8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e2cc:	433d      	orrs	r5, r7
 801e2ce:	1c67      	adds	r7, r4, #1
 801e2d0:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801e2d4:	0964      	lsrs	r4, r4, #5
 801e2d6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e2da:	4325      	orrs	r5, r4
 801e2dc:	8005      	strh	r5, [r0, #0]
 801e2de:	e7bd      	b.n	801e25c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2e2:	4418      	add	r0, r3
 801e2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e2e6:	4499      	add	r9, r3
 801e2e8:	e795      	b.n	801e216 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801e2ea:	4b03      	ldr	r3, [pc, #12]	; (801e2f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801e2ec:	6818      	ldr	r0, [r3, #0]
 801e2ee:	6803      	ldr	r3, [r0, #0]
 801e2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2f2:	4798      	blx	r3
 801e2f4:	e771      	b.n	801e1da <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801e2f6:	bf00      	nop
 801e2f8:	2000f394 	.word	0x2000f394
 801e2fc:	2000f38e 	.word	0x2000f38e

0801e300 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e304:	b087      	sub	sp, #28
 801e306:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801e30a:	4680      	mov	r8, r0
 801e30c:	460d      	mov	r5, r1
 801e30e:	4614      	mov	r4, r2
 801e310:	2e00      	cmp	r6, #0
 801e312:	f000 80b9 	beq.w	801e488 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801e316:	6810      	ldr	r0, [r2, #0]
 801e318:	6851      	ldr	r1, [r2, #4]
 801e31a:	af02      	add	r7, sp, #8
 801e31c:	c703      	stmia	r7!, {r0, r1}
 801e31e:	6818      	ldr	r0, [r3, #0]
 801e320:	6859      	ldr	r1, [r3, #4]
 801e322:	af04      	add	r7, sp, #16
 801e324:	c703      	stmia	r7!, {r0, r1}
 801e326:	a802      	add	r0, sp, #8
 801e328:	f7f8 fb6a 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e32c:	4621      	mov	r1, r4
 801e32e:	a804      	add	r0, sp, #16
 801e330:	f7f8 fb8e 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e334:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e338:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e33c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801e340:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801e344:	fb14 2103 	smlabb	r1, r4, r3, r2
 801e348:	eb08 0401 	add.w	r4, r8, r1
 801e34c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e350:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801e354:	440a      	add	r2, r1
 801e356:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e35a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e35e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801e362:	4413      	add	r3, r2
 801e364:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e368:	4b49      	ldr	r3, [pc, #292]	; (801e490 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801e36a:	6818      	ldr	r0, [r3, #0]
 801e36c:	6803      	ldr	r3, [r0, #0]
 801e36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e370:	4798      	blx	r3
 801e372:	4b48      	ldr	r3, [pc, #288]	; (801e494 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801e374:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801e378:	881a      	ldrh	r2, [r3, #0]
 801e37a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801e37e:	2eff      	cmp	r6, #255	; 0xff
 801e380:	fb02 c101 	mla	r1, r2, r1, ip
 801e384:	fb02 f207 	mul.w	r2, r2, r7
 801e388:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e38c:	f105 0104 	add.w	r1, r5, #4
 801e390:	461d      	mov	r5, r3
 801e392:	d05a      	beq.n	801e44a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801e394:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801e398:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e39c:	b2b6      	uxth	r6, r6
 801e39e:	fa1f fe8e 	uxth.w	lr, lr
 801e3a2:	9301      	str	r3, [sp, #4]
 801e3a4:	4282      	cmp	r2, r0
 801e3a6:	d96a      	bls.n	801e47e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801e3a8:	eb00 0b0a 	add.w	fp, r0, sl
 801e3ac:	4583      	cmp	fp, r0
 801e3ae:	d940      	bls.n	801e432 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801e3b0:	8805      	ldrh	r5, [r0, #0]
 801e3b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e3b6:	122f      	asrs	r7, r5, #8
 801e3b8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e3bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801e3c0:	fb17 f70e 	smulbb	r7, r7, lr
 801e3c4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e3c8:	00ed      	lsls	r5, r5, #3
 801e3ca:	b2ed      	uxtb	r5, r5
 801e3cc:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e3d0:	fb15 f50e 	smulbb	r5, r5, lr
 801e3d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e3d8:	fb0c 7c06 	mla	ip, ip, r6, r7
 801e3dc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e3e0:	10df      	asrs	r7, r3, #3
 801e3e2:	00db      	lsls	r3, r3, #3
 801e3e4:	fb19 f90e 	smulbb	r9, r9, lr
 801e3e8:	b2db      	uxtb	r3, r3
 801e3ea:	fb03 5306 	mla	r3, r3, r6, r5
 801e3ee:	fa1f fc8c 	uxth.w	ip, ip
 801e3f2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e3f6:	fb07 9706 	mla	r7, r7, r6, r9
 801e3fa:	f10c 0901 	add.w	r9, ip, #1
 801e3fe:	b29b      	uxth	r3, r3
 801e400:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801e404:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801e408:	f103 0c01 	add.w	ip, r3, #1
 801e40c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e410:	b2bf      	uxth	r7, r7
 801e412:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e416:	ea4c 0c09 	orr.w	ip, ip, r9
 801e41a:	f107 0901 	add.w	r9, r7, #1
 801e41e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801e422:	097f      	lsrs	r7, r7, #5
 801e424:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e428:	ea4c 0c07 	orr.w	ip, ip, r7
 801e42c:	f820 cb02 	strh.w	ip, [r0], #2
 801e430:	e7bc      	b.n	801e3ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801e432:	9b01      	ldr	r3, [sp, #4]
 801e434:	881b      	ldrh	r3, [r3, #0]
 801e436:	eba3 0308 	sub.w	r3, r3, r8
 801e43a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e43e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e442:	eba3 0308 	sub.w	r3, r3, r8
 801e446:	441c      	add	r4, r3
 801e448:	e7ac      	b.n	801e3a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801e44a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e44e:	4282      	cmp	r2, r0
 801e450:	d915      	bls.n	801e47e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801e452:	eb00 060a 	add.w	r6, r0, sl
 801e456:	4286      	cmp	r6, r0
 801e458:	d906      	bls.n	801e468 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801e45a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e45e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801e462:	f820 3b02 	strh.w	r3, [r0], #2
 801e466:	e7f6      	b.n	801e456 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801e468:	882b      	ldrh	r3, [r5, #0]
 801e46a:	eba3 0308 	sub.w	r3, r3, r8
 801e46e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e472:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e476:	eba3 0308 	sub.w	r3, r3, r8
 801e47a:	441c      	add	r4, r3
 801e47c:	e7e7      	b.n	801e44e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801e47e:	4b04      	ldr	r3, [pc, #16]	; (801e490 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801e480:	6818      	ldr	r0, [r3, #0]
 801e482:	6803      	ldr	r3, [r0, #0]
 801e484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e486:	4798      	blx	r3
 801e488:	b007      	add	sp, #28
 801e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e48e:	bf00      	nop
 801e490:	2000f394 	.word	0x2000f394
 801e494:	2000f38e 	.word	0x2000f38e

0801e498 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e49c:	b091      	sub	sp, #68	; 0x44
 801e49e:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801e4a2:	4680      	mov	r8, r0
 801e4a4:	460f      	mov	r7, r1
 801e4a6:	4614      	mov	r4, r2
 801e4a8:	2d00      	cmp	r5, #0
 801e4aa:	d051      	beq.n	801e550 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e4ac:	6810      	ldr	r0, [r2, #0]
 801e4ae:	6851      	ldr	r1, [r2, #4]
 801e4b0:	ae0c      	add	r6, sp, #48	; 0x30
 801e4b2:	c603      	stmia	r6!, {r0, r1}
 801e4b4:	6818      	ldr	r0, [r3, #0]
 801e4b6:	6859      	ldr	r1, [r3, #4]
 801e4b8:	ae0e      	add	r6, sp, #56	; 0x38
 801e4ba:	c603      	stmia	r6!, {r0, r1}
 801e4bc:	a80c      	add	r0, sp, #48	; 0x30
 801e4be:	f7f8 fa9f 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e4c2:	4621      	mov	r1, r4
 801e4c4:	a80e      	add	r0, sp, #56	; 0x38
 801e4c6:	f7f8 fac3 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e4ca:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e4ce:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e4d2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e4d6:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 801e6b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801e4da:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e4de:	eb08 0401 	add.w	r4, r8, r1
 801e4e2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e4e6:	f8d9 0000 	ldr.w	r0, [r9]
 801e4ea:	440a      	add	r2, r1
 801e4ec:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e4f0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e4f4:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801e4f8:	4413      	add	r3, r2
 801e4fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e4fe:	6803      	ldr	r3, [r0, #0]
 801e500:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801e504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e506:	4798      	blx	r3
 801e508:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e50c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e6b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801e510:	f8d9 0000 	ldr.w	r0, [r9]
 801e514:	d01f      	beq.n	801e556 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e516:	2200      	movs	r2, #0
 801e518:	6801      	ldr	r1, [r0, #0]
 801e51a:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801e51e:	220b      	movs	r2, #11
 801e520:	9207      	str	r2, [sp, #28]
 801e522:	f8b8 2000 	ldrh.w	r2, [r8]
 801e526:	b2b6      	uxth	r6, r6
 801e528:	9206      	str	r2, [sp, #24]
 801e52a:	2201      	movs	r2, #1
 801e52c:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801e530:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e534:	9601      	str	r6, [sp, #4]
 801e536:	9203      	str	r2, [sp, #12]
 801e538:	fa1f f28a 	uxth.w	r2, sl
 801e53c:	9202      	str	r2, [sp, #8]
 801e53e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e542:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e546:	9200      	str	r2, [sp, #0]
 801e548:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801e54a:	463a      	mov	r2, r7
 801e54c:	4621      	mov	r1, r4
 801e54e:	47a8      	blx	r5
 801e550:	b011      	add	sp, #68	; 0x44
 801e552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e556:	6803      	ldr	r3, [r0, #0]
 801e558:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801e55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e55e:	4798      	blx	r3
 801e560:	f8b8 2000 	ldrh.w	r2, [r8]
 801e564:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e568:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801e56c:	2dff      	cmp	r5, #255	; 0xff
 801e56e:	fb02 1303 	mla	r3, r2, r3, r1
 801e572:	fb0a fa02 	mul.w	sl, sl, r2
 801e576:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e57a:	d062      	beq.n	801e642 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801e57c:	ea6f 0c05 	mvn.w	ip, r5
 801e580:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801e584:	930a      	str	r3, [sp, #40]	; 0x28
 801e586:	b2ad      	uxth	r5, r5
 801e588:	fa5f fc8c 	uxtb.w	ip, ip
 801e58c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801e590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e592:	4298      	cmp	r0, r3
 801e594:	f080 8085 	bcs.w	801e6a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801e598:	eb00 0b09 	add.w	fp, r0, r9
 801e59c:	4558      	cmp	r0, fp
 801e59e:	d246      	bcs.n	801e62e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801e5a0:	2303      	movs	r3, #3
 801e5a2:	2204      	movs	r2, #4
 801e5a4:	f814 eb01 	ldrb.w	lr, [r4], #1
 801e5a8:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801e5ac:	eb07 0a0e 	add.w	sl, r7, lr
 801e5b0:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801e5b4:	8803      	ldrh	r3, [r0, #0]
 801e5b6:	fb18 f805 	smulbb	r8, r8, r5
 801e5ba:	1219      	asrs	r1, r3, #8
 801e5bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e5c0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801e5c4:	fb01 810c 	mla	r1, r1, ip, r8
 801e5c8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e5cc:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e5d0:	fb1e fe05 	smulbb	lr, lr, r5
 801e5d4:	fb18 f805 	smulbb	r8, r8, r5
 801e5d8:	10da      	asrs	r2, r3, #3
 801e5da:	00db      	lsls	r3, r3, #3
 801e5dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e5e0:	b2db      	uxtb	r3, r3
 801e5e2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e5e6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e5ea:	fb02 820c 	mla	r2, r2, ip, r8
 801e5ee:	fb03 e30c 	mla	r3, r3, ip, lr
 801e5f2:	b289      	uxth	r1, r1
 801e5f4:	b292      	uxth	r2, r2
 801e5f6:	b29b      	uxth	r3, r3
 801e5f8:	f101 0801 	add.w	r8, r1, #1
 801e5fc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e600:	f103 0e01 	add.w	lr, r3, #1
 801e604:	f102 0801 	add.w	r8, r2, #1
 801e608:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801e60c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801e610:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801e614:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801e618:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e61c:	ea4e 0101 	orr.w	r1, lr, r1
 801e620:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e624:	ea41 0108 	orr.w	r1, r1, r8
 801e628:	f820 1b02 	strh.w	r1, [r0], #2
 801e62c:	e7b6      	b.n	801e59c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801e62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e630:	881b      	ldrh	r3, [r3, #0]
 801e632:	1b9b      	subs	r3, r3, r6
 801e634:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e638:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e63c:	1b9b      	subs	r3, r3, r6
 801e63e:	441c      	add	r4, r3
 801e640:	e7a6      	b.n	801e590 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801e642:	2203      	movs	r2, #3
 801e644:	2504      	movs	r5, #4
 801e646:	491a      	ldr	r1, [pc, #104]	; (801e6b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801e648:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801e64c:	4550      	cmp	r0, sl
 801e64e:	d228      	bcs.n	801e6a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801e650:	eb00 0c09 	add.w	ip, r0, r9
 801e654:	4560      	cmp	r0, ip
 801e656:	4623      	mov	r3, r4
 801e658:	d219      	bcs.n	801e68e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801e65a:	f893 e000 	ldrb.w	lr, [r3]
 801e65e:	3401      	adds	r4, #1
 801e660:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801e664:	eb07 0b0e 	add.w	fp, r7, lr
 801e668:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801e66c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e670:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e674:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801e678:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801e67c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e680:	ea43 030b 	orr.w	r3, r3, fp
 801e684:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801e688:	f820 3b02 	strh.w	r3, [r0], #2
 801e68c:	e7e2      	b.n	801e654 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801e68e:	f8b8 3000 	ldrh.w	r3, [r8]
 801e692:	1b9b      	subs	r3, r3, r6
 801e694:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e698:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e69c:	1b9b      	subs	r3, r3, r6
 801e69e:	441c      	add	r4, r3
 801e6a0:	e7d4      	b.n	801e64c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801e6a2:	4b04      	ldr	r3, [pc, #16]	; (801e6b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801e6a4:	6818      	ldr	r0, [r3, #0]
 801e6a6:	6803      	ldr	r3, [r0, #0]
 801e6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6aa:	4798      	blx	r3
 801e6ac:	e750      	b.n	801e550 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e6ae:	bf00      	nop
 801e6b0:	fffff800 	.word	0xfffff800
 801e6b4:	2000f394 	.word	0x2000f394
 801e6b8:	2000f38e 	.word	0x2000f38e

0801e6bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e6bc:	b4f0      	push	{r4, r5, r6, r7}
 801e6be:	460c      	mov	r4, r1
 801e6c0:	4611      	mov	r1, r2
 801e6c2:	780f      	ldrb	r7, [r1, #0]
 801e6c4:	461a      	mov	r2, r3
 801e6c6:	2f01      	cmp	r7, #1
 801e6c8:	9b04      	ldr	r3, [sp, #16]
 801e6ca:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801e6ce:	784e      	ldrb	r6, [r1, #1]
 801e6d0:	d036      	beq.n	801e740 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 801e6d2:	d31e      	bcc.n	801e712 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 801e6d4:	2f02      	cmp	r7, #2
 801e6d6:	d14a      	bne.n	801e76e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801e6d8:	2e03      	cmp	r6, #3
 801e6da:	d848      	bhi.n	801e76e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801e6dc:	e8df f006 	tbb	[pc, r6]
 801e6e0:	16140702 	.word	0x16140702
 801e6e4:	9504      	str	r5, [sp, #16]
 801e6e6:	4620      	mov	r0, r4
 801e6e8:	bcf0      	pop	{r4, r5, r6, r7}
 801e6ea:	f7ff be09 	b.w	801e300 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801e6ee:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801e6f0:	2800      	cmp	r0, #0
 801e6f2:	d03c      	beq.n	801e76e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801e6f4:	6806      	ldr	r6, [r0, #0]
 801e6f6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801e6fa:	68b5      	ldr	r5, [r6, #8]
 801e6fc:	4613      	mov	r3, r2
 801e6fe:	46ac      	mov	ip, r5
 801e700:	460a      	mov	r2, r1
 801e702:	4621      	mov	r1, r4
 801e704:	bcf0      	pop	{r4, r5, r6, r7}
 801e706:	4760      	bx	ip
 801e708:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801e70a:	e7f1      	b.n	801e6f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801e70c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801e710:	e7ee      	b.n	801e6f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801e712:	2e03      	cmp	r6, #3
 801e714:	d82b      	bhi.n	801e76e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801e716:	e8df f006 	tbb	[pc, r6]
 801e71a:	0702      	.short	0x0702
 801e71c:	100e      	.short	0x100e
 801e71e:	9504      	str	r5, [sp, #16]
 801e720:	4620      	mov	r0, r4
 801e722:	bcf0      	pop	{r4, r5, r6, r7}
 801e724:	f7ff bd06 	b.w	801e134 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e728:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801e72a:	b300      	cbz	r0, 801e76e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801e72c:	6806      	ldr	r6, [r0, #0]
 801e72e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801e732:	68f5      	ldr	r5, [r6, #12]
 801e734:	e7e2      	b.n	801e6fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801e736:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801e738:	e7f7      	b.n	801e72a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 801e73a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801e73e:	e7f4      	b.n	801e72a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 801e740:	2e03      	cmp	r6, #3
 801e742:	d814      	bhi.n	801e76e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801e744:	e8df f006 	tbb	[pc, r6]
 801e748:	100e0702 	.word	0x100e0702
 801e74c:	9504      	str	r5, [sp, #16]
 801e74e:	4620      	mov	r0, r4
 801e750:	bcf0      	pop	{r4, r5, r6, r7}
 801e752:	f7ff bea1 	b.w	801e498 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e756:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801e758:	b148      	cbz	r0, 801e76e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801e75a:	6806      	ldr	r6, [r0, #0]
 801e75c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801e760:	6935      	ldr	r5, [r6, #16]
 801e762:	e7cb      	b.n	801e6fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801e764:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801e766:	e7f7      	b.n	801e758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 801e768:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801e76c:	e7f4      	b.n	801e758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 801e76e:	bcf0      	pop	{r4, r5, r6, r7}
 801e770:	4770      	bx	lr
	...

0801e774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e778:	4617      	mov	r7, r2
 801e77a:	4604      	mov	r4, r0
 801e77c:	460e      	mov	r6, r1
 801e77e:	b087      	sub	sp, #28
 801e780:	6810      	ldr	r0, [r2, #0]
 801e782:	6851      	ldr	r1, [r2, #4]
 801e784:	ad02      	add	r5, sp, #8
 801e786:	c503      	stmia	r5!, {r0, r1}
 801e788:	6818      	ldr	r0, [r3, #0]
 801e78a:	6859      	ldr	r1, [r3, #4]
 801e78c:	ad04      	add	r5, sp, #16
 801e78e:	c503      	stmia	r5!, {r0, r1}
 801e790:	a802      	add	r0, sp, #8
 801e792:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801e796:	f7f8 f933 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e79a:	4639      	mov	r1, r7
 801e79c:	a804      	add	r0, sp, #16
 801e79e:	f7f8 f957 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e7a2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e7a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e7aa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e7ae:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801e7b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e7b6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e7ba:	440e      	add	r6, r1
 801e7bc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e7c0:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801e7c4:	440a      	add	r2, r1
 801e7c6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e7ca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e7ce:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801e9bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801e7d2:	4413      	add	r3, r2
 801e7d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e7d8:	4b77      	ldr	r3, [pc, #476]	; (801e9b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e7da:	6818      	ldr	r0, [r3, #0]
 801e7dc:	6803      	ldr	r3, [r0, #0]
 801e7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e7e0:	4798      	blx	r3
 801e7e2:	f8b9 b000 	ldrh.w	fp, [r9]
 801e7e6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e7ea:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e7ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e7f2:	fb0b 2303 	mla	r3, fp, r3, r2
 801e7f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e7fa:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801e7fe:	fb05 f50b 	mul.w	r5, r5, fp
 801e802:	9300      	str	r3, [sp, #0]
 801e804:	d069      	beq.n	801e8da <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801e806:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801e80a:	4558      	cmp	r0, fp
 801e80c:	f080 80cc 	bcs.w	801e9a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801e810:	4631      	mov	r1, r6
 801e812:	9b00      	ldr	r3, [sp, #0]
 801e814:	18c3      	adds	r3, r0, r3
 801e816:	9301      	str	r3, [sp, #4]
 801e818:	9b01      	ldr	r3, [sp, #4]
 801e81a:	4298      	cmp	r0, r3
 801e81c:	d24f      	bcs.n	801e8be <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801e81e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e822:	2a00      	cmp	r2, #0
 801e824:	d048      	beq.n	801e8b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801e826:	fb0a f202 	mul.w	r2, sl, r2
 801e82a:	1c53      	adds	r3, r2, #1
 801e82c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e830:	121b      	asrs	r3, r3, #8
 801e832:	d041      	beq.n	801e8b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801e834:	b29e      	uxth	r6, r3
 801e836:	43db      	mvns	r3, r3
 801e838:	8802      	ldrh	r2, [r0, #0]
 801e83a:	b2db      	uxtb	r3, r3
 801e83c:	1215      	asrs	r5, r2, #8
 801e83e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e842:	f8b4 c000 	ldrh.w	ip, [r4]
 801e846:	fb15 f503 	smulbb	r5, r5, r3
 801e84a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801e84e:	00d2      	lsls	r2, r2, #3
 801e850:	b2d2      	uxtb	r2, r2
 801e852:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e856:	fb12 f203 	smulbb	r2, r2, r3
 801e85a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e85e:	fb07 5706 	mla	r7, r7, r6, r5
 801e862:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e866:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e86a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e86e:	fb1e fe03 	smulbb	lr, lr, r3
 801e872:	fa5f fc8c 	uxtb.w	ip, ip
 801e876:	fb0c 2c06 	mla	ip, ip, r6, r2
 801e87a:	b2bf      	uxth	r7, r7
 801e87c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e880:	fb05 e506 	mla	r5, r5, r6, lr
 801e884:	f107 0e01 	add.w	lr, r7, #1
 801e888:	fa1f fc8c 	uxth.w	ip, ip
 801e88c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e890:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801e894:	f10c 0701 	add.w	r7, ip, #1
 801e898:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e89c:	b2ad      	uxth	r5, r5
 801e89e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e8a2:	ea47 070e 	orr.w	r7, r7, lr
 801e8a6:	f105 0e01 	add.w	lr, r5, #1
 801e8aa:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801e8ae:	096d      	lsrs	r5, r5, #5
 801e8b0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e8b4:	432f      	orrs	r7, r5
 801e8b6:	8007      	strh	r7, [r0, #0]
 801e8b8:	3002      	adds	r0, #2
 801e8ba:	3402      	adds	r4, #2
 801e8bc:	e7ac      	b.n	801e818 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801e8be:	f8b9 3000 	ldrh.w	r3, [r9]
 801e8c2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e8c6:	eba3 0308 	sub.w	r3, r3, r8
 801e8ca:	eba6 0608 	sub.w	r6, r6, r8
 801e8ce:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e8d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e8d6:	440e      	add	r6, r1
 801e8d8:	e797      	b.n	801e80a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801e8da:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801e8de:	42a8      	cmp	r0, r5
 801e8e0:	d262      	bcs.n	801e9a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801e8e2:	4631      	mov	r1, r6
 801e8e4:	9b00      	ldr	r3, [sp, #0]
 801e8e6:	eb00 0b03 	add.w	fp, r0, r3
 801e8ea:	4558      	cmp	r0, fp
 801e8ec:	d24e      	bcs.n	801e98c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801e8ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e8f2:	b12b      	cbz	r3, 801e900 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801e8f4:	2bff      	cmp	r3, #255	; 0xff
 801e8f6:	f8b4 e000 	ldrh.w	lr, [r4]
 801e8fa:	d104      	bne.n	801e906 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801e8fc:	f8a0 e000 	strh.w	lr, [r0]
 801e900:	3002      	adds	r0, #2
 801e902:	3402      	adds	r4, #2
 801e904:	e7f1      	b.n	801e8ea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801e906:	b29f      	uxth	r7, r3
 801e908:	43db      	mvns	r3, r3
 801e90a:	8802      	ldrh	r2, [r0, #0]
 801e90c:	b2db      	uxtb	r3, r3
 801e90e:	1216      	asrs	r6, r2, #8
 801e910:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e914:	fb16 f603 	smulbb	r6, r6, r3
 801e918:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801e91c:	00d2      	lsls	r2, r2, #3
 801e91e:	b2d2      	uxtb	r2, r2
 801e920:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e924:	fb1a fa03 	smulbb	sl, sl, r3
 801e928:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e92c:	fb12 f303 	smulbb	r3, r2, r3
 801e930:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e934:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e938:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e93c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e940:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e944:	fa5f fe8e 	uxtb.w	lr, lr
 801e948:	fb06 a607 	mla	r6, r6, r7, sl
 801e94c:	fb0e 3307 	mla	r3, lr, r7, r3
 801e950:	fa1f fc8c 	uxth.w	ip, ip
 801e954:	f10c 0201 	add.w	r2, ip, #1
 801e958:	b2b6      	uxth	r6, r6
 801e95a:	b29b      	uxth	r3, r3
 801e95c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e960:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801e964:	f106 0a01 	add.w	sl, r6, #1
 801e968:	f103 0c01 	add.w	ip, r3, #1
 801e96c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e970:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801e974:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e978:	0976      	lsrs	r6, r6, #5
 801e97a:	ea4c 0c02 	orr.w	ip, ip, r2
 801e97e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e982:	ea4c 0c06 	orr.w	ip, ip, r6
 801e986:	f8a0 c000 	strh.w	ip, [r0]
 801e98a:	e7b9      	b.n	801e900 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801e98c:	f8b9 3000 	ldrh.w	r3, [r9]
 801e990:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e994:	eba3 0308 	sub.w	r3, r3, r8
 801e998:	eba6 0608 	sub.w	r6, r6, r8
 801e99c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e9a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e9a4:	440e      	add	r6, r1
 801e9a6:	e79a      	b.n	801e8de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801e9a8:	4b03      	ldr	r3, [pc, #12]	; (801e9b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e9aa:	6818      	ldr	r0, [r3, #0]
 801e9ac:	6803      	ldr	r3, [r0, #0]
 801e9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9b0:	4798      	blx	r3
 801e9b2:	b007      	add	sp, #28
 801e9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9b8:	2000f394 	.word	0x2000f394
 801e9bc:	2000f38e 	.word	0x2000f38e

0801e9c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9c4:	b089      	sub	sp, #36	; 0x24
 801e9c6:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801e9ca:	4682      	mov	sl, r0
 801e9cc:	460f      	mov	r7, r1
 801e9ce:	4691      	mov	r9, r2
 801e9d0:	4698      	mov	r8, r3
 801e9d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9d4:	2e00      	cmp	r6, #0
 801e9d6:	d03d      	beq.n	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e9d8:	4608      	mov	r0, r1
 801e9da:	f7fa fe5d 	bl	8019698 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e9de:	4605      	mov	r5, r0
 801e9e0:	4638      	mov	r0, r7
 801e9e2:	f7fa fe8d 	bl	8019700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e9e6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e9ea:	4638      	mov	r0, r7
 801e9ec:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e9f0:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e9f4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e9f8:	f7fa ff3a 	bl	8019870 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e9fc:	4605      	mov	r5, r0
 801e9fe:	4638      	mov	r0, r7
 801ea00:	f7fa ff66 	bl	80198d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ea04:	4681      	mov	r9, r0
 801ea06:	4638      	mov	r0, r7
 801ea08:	f7fa ffb6 	bl	8019978 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea0c:	280b      	cmp	r0, #11
 801ea0e:	d821      	bhi.n	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ea10:	e8df f000 	tbb	[pc, r0]
 801ea14:	2006aebe 	.word	0x2006aebe
 801ea18:	20202020 	.word	0x20202020
 801ea1c:	b5202020 	.word	0xb5202020
 801ea20:	4bb0      	ldr	r3, [pc, #704]	; (801ece4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801ea22:	6818      	ldr	r0, [r3, #0]
 801ea24:	6803      	ldr	r3, [r0, #0]
 801ea26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea28:	4798      	blx	r3
 801ea2a:	2eff      	cmp	r6, #255	; 0xff
 801ea2c:	d101      	bne.n	801ea32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801ea2e:	0683      	lsls	r3, r0, #26
 801ea30:	d506      	bpl.n	801ea40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 801ea32:	4633      	mov	r3, r6
 801ea34:	4622      	mov	r2, r4
 801ea36:	a902      	add	r1, sp, #8
 801ea38:	4628      	mov	r0, r5
 801ea3a:	f7ff f909 	bl	801dc50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ea3e:	e009      	b.n	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ea40:	4638      	mov	r0, r7
 801ea42:	f7fa fedd 	bl	8019800 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801ea46:	b940      	cbnz	r0, 801ea5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801ea48:	4623      	mov	r3, r4
 801ea4a:	aa02      	add	r2, sp, #8
 801ea4c:	4629      	mov	r1, r5
 801ea4e:	4650      	mov	r0, sl
 801ea50:	f7ff f9e4 	bl	801de1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801ea54:	b009      	add	sp, #36	; 0x24
 801ea56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea5a:	f10d 0818 	add.w	r8, sp, #24
 801ea5e:	4639      	mov	r1, r7
 801ea60:	4640      	mov	r0, r8
 801ea62:	af04      	add	r7, sp, #16
 801ea64:	f7fa fe80 	bl	8019768 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ea68:	e898 0003 	ldmia.w	r8, {r0, r1}
 801ea6c:	e887 0003 	stmia.w	r7, {r0, r1}
 801ea70:	4638      	mov	r0, r7
 801ea72:	4621      	mov	r1, r4
 801ea74:	f7f5 fabc 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 801ea78:	4638      	mov	r0, r7
 801ea7a:	f7f5 fafc 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ea7e:	2800      	cmp	r0, #0
 801ea80:	d1d7      	bne.n	801ea32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801ea82:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ea86:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ea8a:	4293      	cmp	r3, r2
 801ea8c:	dd12      	ble.n	801eab4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 801ea8e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ea92:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ea96:	1a9b      	subs	r3, r3, r2
 801ea98:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ea9c:	f8ad 201a 	strh.w	r2, [sp, #26]
 801eaa0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801eaa4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801eaa8:	4642      	mov	r2, r8
 801eaaa:	4633      	mov	r3, r6
 801eaac:	a902      	add	r1, sp, #8
 801eaae:	4628      	mov	r0, r5
 801eab0:	f7ff f8ce 	bl	801dc50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eab4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801eab8:	f9b4 2000 	ldrsh.w	r2, [r4]
 801eabc:	4293      	cmp	r3, r2
 801eabe:	dd12      	ble.n	801eae6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 801eac0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801eac4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801eac8:	1a9b      	subs	r3, r3, r2
 801eaca:	f8ad 2018 	strh.w	r2, [sp, #24]
 801eace:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ead2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ead6:	f8ad 101e 	strh.w	r1, [sp, #30]
 801eada:	23ff      	movs	r3, #255	; 0xff
 801eadc:	4642      	mov	r2, r8
 801eade:	a902      	add	r1, sp, #8
 801eae0:	4628      	mov	r0, r5
 801eae2:	f7ff f8b5 	bl	801dc50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eae6:	463b      	mov	r3, r7
 801eae8:	aa02      	add	r2, sp, #8
 801eaea:	4629      	mov	r1, r5
 801eaec:	4650      	mov	r0, sl
 801eaee:	f7ff f995 	bl	801de1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801eaf2:	88a2      	ldrh	r2, [r4, #4]
 801eaf4:	8823      	ldrh	r3, [r4, #0]
 801eaf6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801eafa:	4413      	add	r3, r2
 801eafc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801eb00:	b29b      	uxth	r3, r3
 801eb02:	440a      	add	r2, r1
 801eb04:	b292      	uxth	r2, r2
 801eb06:	b211      	sxth	r1, r2
 801eb08:	b218      	sxth	r0, r3
 801eb0a:	4288      	cmp	r0, r1
 801eb0c:	dd12      	ble.n	801eb34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801eb0e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801eb12:	1a9b      	subs	r3, r3, r2
 801eb14:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801eb18:	f8ad 1018 	strh.w	r1, [sp, #24]
 801eb1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801eb20:	f8ad 001e 	strh.w	r0, [sp, #30]
 801eb24:	23ff      	movs	r3, #255	; 0xff
 801eb26:	4642      	mov	r2, r8
 801eb28:	a902      	add	r1, sp, #8
 801eb2a:	4628      	mov	r0, r5
 801eb2c:	f8ad 601a 	strh.w	r6, [sp, #26]
 801eb30:	f7ff f88e 	bl	801dc50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eb34:	88e2      	ldrh	r2, [r4, #6]
 801eb36:	8863      	ldrh	r3, [r4, #2]
 801eb38:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801eb3c:	4413      	add	r3, r2
 801eb3e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801eb42:	b29b      	uxth	r3, r3
 801eb44:	440a      	add	r2, r1
 801eb46:	b292      	uxth	r2, r2
 801eb48:	b211      	sxth	r1, r2
 801eb4a:	b218      	sxth	r0, r3
 801eb4c:	4288      	cmp	r0, r1
 801eb4e:	dd81      	ble.n	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801eb50:	f9b4 6000 	ldrsh.w	r6, [r4]
 801eb54:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801eb58:	1a9b      	subs	r3, r3, r2
 801eb5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801eb5e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801eb62:	f8ad 101a 	strh.w	r1, [sp, #26]
 801eb66:	f8ad 001c 	strh.w	r0, [sp, #28]
 801eb6a:	23ff      	movs	r3, #255	; 0xff
 801eb6c:	4642      	mov	r2, r8
 801eb6e:	e762      	b.n	801ea36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801eb70:	4633      	mov	r3, r6
 801eb72:	4622      	mov	r2, r4
 801eb74:	a902      	add	r1, sp, #8
 801eb76:	4628      	mov	r0, r5
 801eb78:	f7ff f9c0 	bl	801defc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801eb7c:	e76a      	b.n	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801eb7e:	e9cd 4600 	strd	r4, r6, [sp]
 801eb82:	ab02      	add	r3, sp, #8
 801eb84:	464a      	mov	r2, r9
 801eb86:	4629      	mov	r1, r5
 801eb88:	4650      	mov	r0, sl
 801eb8a:	f7ff fd97 	bl	801e6bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801eb8e:	e761      	b.n	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801eb90:	4638      	mov	r0, r7
 801eb92:	f7fa fe35 	bl	8019800 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801eb96:	b950      	cbnz	r0, 801ebae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 801eb98:	e9cd 6000 	strd	r6, r0, [sp]
 801eb9c:	f8da 3000 	ldr.w	r3, [sl]
 801eba0:	aa02      	add	r2, sp, #8
 801eba2:	68de      	ldr	r6, [r3, #12]
 801eba4:	4629      	mov	r1, r5
 801eba6:	4623      	mov	r3, r4
 801eba8:	4650      	mov	r0, sl
 801ebaa:	47b0      	blx	r6
 801ebac:	e752      	b.n	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ebae:	f10d 0818 	add.w	r8, sp, #24
 801ebb2:	4639      	mov	r1, r7
 801ebb4:	4640      	mov	r0, r8
 801ebb6:	af04      	add	r7, sp, #16
 801ebb8:	f7fa fdd6 	bl	8019768 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ebbc:	e898 0003 	ldmia.w	r8, {r0, r1}
 801ebc0:	e887 0003 	stmia.w	r7, {r0, r1}
 801ebc4:	4638      	mov	r0, r7
 801ebc6:	4621      	mov	r1, r4
 801ebc8:	f7f5 fa12 	bl	8013ff0 <_ZN8touchgfx4RectaNERKS0_>
 801ebcc:	4638      	mov	r0, r7
 801ebce:	f7f5 fa52 	bl	8014076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ebd2:	b138      	cbz	r0, 801ebe4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801ebd4:	4623      	mov	r3, r4
 801ebd6:	9600      	str	r6, [sp, #0]
 801ebd8:	aa02      	add	r2, sp, #8
 801ebda:	4649      	mov	r1, r9
 801ebdc:	4628      	mov	r0, r5
 801ebde:	f7ff fdc9 	bl	801e774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ebe2:	e737      	b.n	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ebe4:	e9cd 6000 	strd	r6, r0, [sp]
 801ebe8:	f8da 3000 	ldr.w	r3, [sl]
 801ebec:	aa02      	add	r2, sp, #8
 801ebee:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801ebf2:	4629      	mov	r1, r5
 801ebf4:	463b      	mov	r3, r7
 801ebf6:	4650      	mov	r0, sl
 801ebf8:	47d8      	blx	fp
 801ebfa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ebfe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ec02:	4293      	cmp	r3, r2
 801ec04:	dd13      	ble.n	801ec2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 801ec06:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ec0a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ec0e:	1a9b      	subs	r3, r3, r2
 801ec10:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ec14:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ec18:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ec1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ec20:	9600      	str	r6, [sp, #0]
 801ec22:	4643      	mov	r3, r8
 801ec24:	aa02      	add	r2, sp, #8
 801ec26:	4649      	mov	r1, r9
 801ec28:	4628      	mov	r0, r5
 801ec2a:	f7ff fda3 	bl	801e774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ec2e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ec32:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ec36:	4293      	cmp	r3, r2
 801ec38:	dd13      	ble.n	801ec62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 801ec3a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ec3e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ec42:	1a9b      	subs	r3, r3, r2
 801ec44:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ec48:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ec4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ec50:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ec54:	9600      	str	r6, [sp, #0]
 801ec56:	4643      	mov	r3, r8
 801ec58:	aa02      	add	r2, sp, #8
 801ec5a:	4649      	mov	r1, r9
 801ec5c:	4628      	mov	r0, r5
 801ec5e:	f7ff fd89 	bl	801e774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ec62:	88a2      	ldrh	r2, [r4, #4]
 801ec64:	8823      	ldrh	r3, [r4, #0]
 801ec66:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ec6a:	4413      	add	r3, r2
 801ec6c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ec70:	b29b      	uxth	r3, r3
 801ec72:	440a      	add	r2, r1
 801ec74:	b292      	uxth	r2, r2
 801ec76:	b211      	sxth	r1, r2
 801ec78:	b218      	sxth	r0, r3
 801ec7a:	4288      	cmp	r0, r1
 801ec7c:	dd13      	ble.n	801eca6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 801ec7e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801ec82:	1a9b      	subs	r3, r3, r2
 801ec84:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801ec88:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ec8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ec90:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ec94:	9600      	str	r6, [sp, #0]
 801ec96:	4643      	mov	r3, r8
 801ec98:	aa02      	add	r2, sp, #8
 801ec9a:	4649      	mov	r1, r9
 801ec9c:	4628      	mov	r0, r5
 801ec9e:	f8ad 701a 	strh.w	r7, [sp, #26]
 801eca2:	f7ff fd67 	bl	801e774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801eca6:	88e2      	ldrh	r2, [r4, #6]
 801eca8:	8863      	ldrh	r3, [r4, #2]
 801ecaa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ecae:	4413      	add	r3, r2
 801ecb0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ecb4:	b29b      	uxth	r3, r3
 801ecb6:	440a      	add	r2, r1
 801ecb8:	b292      	uxth	r2, r2
 801ecba:	b211      	sxth	r1, r2
 801ecbc:	b218      	sxth	r0, r3
 801ecbe:	4288      	cmp	r0, r1
 801ecc0:	f77f aec8 	ble.w	801ea54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ecc4:	f9b4 7000 	ldrsh.w	r7, [r4]
 801ecc8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801eccc:	1a9b      	subs	r3, r3, r2
 801ecce:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ecd2:	f8ad 7018 	strh.w	r7, [sp, #24]
 801ecd6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ecda:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ecde:	9600      	str	r6, [sp, #0]
 801ece0:	4643      	mov	r3, r8
 801ece2:	e779      	b.n	801ebd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 801ece4:	2000f394 	.word	0x2000f394

0801ece8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801ece8:	b180      	cbz	r0, 801ed0c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ecea:	2903      	cmp	r1, #3
 801ecec:	d81c      	bhi.n	801ed28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801ecee:	e8df f001 	tbb	[pc, r1]
 801ecf2:	1d02      	.short	0x1d02
 801ecf4:	1f08      	.short	0x1f08
 801ecf6:	4b10      	ldr	r3, [pc, #64]	; (801ed38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ecf8:	8818      	ldrh	r0, [r3, #0]
 801ecfa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ecfe:	4240      	negs	r0, r0
 801ed00:	4770      	bx	lr
 801ed02:	4b0d      	ldr	r3, [pc, #52]	; (801ed38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ed04:	8818      	ldrh	r0, [r3, #0]
 801ed06:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ed0a:	4770      	bx	lr
 801ed0c:	2903      	cmp	r1, #3
 801ed0e:	d80b      	bhi.n	801ed28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801ed10:	a301      	add	r3, pc, #4	; (adr r3, 801ed18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801ed12:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ed16:	bf00      	nop
 801ed18:	0801ed2d 	.word	0x0801ed2d
 801ed1c:	0801ed03 	.word	0x0801ed03
 801ed20:	0801ed31 	.word	0x0801ed31
 801ed24:	0801ecf7 	.word	0x0801ecf7
 801ed28:	2000      	movs	r0, #0
 801ed2a:	4770      	bx	lr
 801ed2c:	2001      	movs	r0, #1
 801ed2e:	4770      	bx	lr
 801ed30:	f04f 30ff 	mov.w	r0, #4294967295
 801ed34:	4770      	bx	lr
 801ed36:	bf00      	nop
 801ed38:	2000f38e 	.word	0x2000f38e

0801ed3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801ed3c:	b180      	cbz	r0, 801ed60 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801ed3e:	2903      	cmp	r1, #3
 801ed40:	d81c      	bhi.n	801ed7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ed42:	e8df f001 	tbb	[pc, r1]
 801ed46:	021d      	.short	0x021d
 801ed48:	071f      	.short	0x071f
 801ed4a:	4b10      	ldr	r3, [pc, #64]	; (801ed8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ed4c:	8818      	ldrh	r0, [r3, #0]
 801ed4e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ed52:	4770      	bx	lr
 801ed54:	4b0d      	ldr	r3, [pc, #52]	; (801ed8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ed56:	8818      	ldrh	r0, [r3, #0]
 801ed58:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ed5c:	4240      	negs	r0, r0
 801ed5e:	4770      	bx	lr
 801ed60:	2903      	cmp	r1, #3
 801ed62:	d80b      	bhi.n	801ed7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ed64:	a301      	add	r3, pc, #4	; (adr r3, 801ed6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801ed66:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ed6a:	bf00      	nop
 801ed6c:	0801ed4b 	.word	0x0801ed4b
 801ed70:	0801ed85 	.word	0x0801ed85
 801ed74:	0801ed55 	.word	0x0801ed55
 801ed78:	0801ed81 	.word	0x0801ed81
 801ed7c:	2000      	movs	r0, #0
 801ed7e:	4770      	bx	lr
 801ed80:	2001      	movs	r0, #1
 801ed82:	4770      	bx	lr
 801ed84:	f04f 30ff 	mov.w	r0, #4294967295
 801ed88:	4770      	bx	lr
 801ed8a:	bf00      	nop
 801ed8c:	2000f38e 	.word	0x2000f38e

0801ed90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed94:	b099      	sub	sp, #100	; 0x64
 801ed96:	910b      	str	r1, [sp, #44]	; 0x2c
 801ed98:	a914      	add	r1, sp, #80	; 0x50
 801ed9a:	e881 000c 	stmia.w	r1, {r2, r3}
 801ed9e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801eda2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801eda6:	f891 900d 	ldrb.w	r9, [r1, #13]
 801edaa:	9309      	str	r3, [sp, #36]	; 0x24
 801edac:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801edb0:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801edb4:	9310      	str	r3, [sp, #64]	; 0x40
 801edb6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801edba:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801edbe:	930c      	str	r3, [sp, #48]	; 0x30
 801edc0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801edc4:	798f      	ldrb	r7, [r1, #6]
 801edc6:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801edca:	431f      	orrs	r7, r3
 801edcc:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801edd0:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801edd4:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801edd8:	f000 8194 	beq.w	801f104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801eddc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801ede0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801ede4:	f891 9007 	ldrb.w	r9, [r1, #7]
 801ede8:	ea59 0903 	orrs.w	r9, r9, r3
 801edec:	f000 818a 	beq.w	801f104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801edf0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801edf4:	b29b      	uxth	r3, r3
 801edf6:	2d00      	cmp	r5, #0
 801edf8:	f000 812f 	beq.w	801f05a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801edfc:	1aed      	subs	r5, r5, r3
 801edfe:	b2ad      	uxth	r5, r5
 801ee00:	042b      	lsls	r3, r5, #16
 801ee02:	d502      	bpl.n	801ee0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ee04:	1b64      	subs	r4, r4, r5
 801ee06:	2500      	movs	r5, #0
 801ee08:	b224      	sxth	r4, r4
 801ee0a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ee0e:	a814      	add	r0, sp, #80	; 0x50
 801ee10:	428c      	cmp	r4, r1
 801ee12:	b28b      	uxth	r3, r1
 801ee14:	bfbf      	itttt	lt
 801ee16:	18ed      	addlt	r5, r5, r3
 801ee18:	1b2c      	sublt	r4, r5, r4
 801ee1a:	b2a5      	uxthlt	r5, r4
 801ee1c:	460c      	movlt	r4, r1
 801ee1e:	8891      	ldrh	r1, [r2, #4]
 801ee20:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801ee24:	440b      	add	r3, r1
 801ee26:	b21b      	sxth	r3, r3
 801ee28:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee2a:	88d3      	ldrh	r3, [r2, #6]
 801ee2c:	8852      	ldrh	r2, [r2, #2]
 801ee2e:	4621      	mov	r1, r4
 801ee30:	4413      	add	r3, r2
 801ee32:	b21b      	sxth	r3, r3
 801ee34:	930d      	str	r3, [sp, #52]	; 0x34
 801ee36:	4bbd      	ldr	r3, [pc, #756]	; (801f12c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801ee38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ee3a:	f893 b000 	ldrb.w	fp, [r3]
 801ee3e:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ee42:	f1dc 0300 	rsbs	r3, ip, #0
 801ee46:	eb43 030c 	adc.w	r3, r3, ip
 801ee4a:	930e      	str	r3, [sp, #56]	; 0x38
 801ee4c:	4653      	mov	r3, sl
 801ee4e:	f7f7 fc4c 	bl	80166ea <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ee52:	4621      	mov	r1, r4
 801ee54:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801ee58:	4653      	mov	r3, sl
 801ee5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ee5c:	a814      	add	r0, sp, #80	; 0x50
 801ee5e:	f7f7 fc61 	bl	8016724 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ee62:	a918      	add	r1, sp, #96	; 0x60
 801ee64:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ee68:	a817      	add	r0, sp, #92	; 0x5c
 801ee6a:	f7f7 fd87 	bl	801697c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ee6e:	f1ba 0f00 	cmp.w	sl, #0
 801ee72:	f040 80f5 	bne.w	801f060 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801ee76:	f1bb 0f01 	cmp.w	fp, #1
 801ee7a:	f040 80f9 	bne.w	801f070 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801ee7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	f040 8144 	bne.w	801f10e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801ee86:	b2ba      	uxth	r2, r7
 801ee88:	b905      	cbnz	r5, 801ee8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801ee8a:	b16e      	cbz	r6, 801eea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801ee8c:	4631      	mov	r1, r6
 801ee8e:	fb06 5302 	mla	r3, r6, r2, r5
 801ee92:	fb08 f303 	mul.w	r3, r8, r3
 801ee96:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801ee98:	f003 0607 	and.w	r6, r3, #7
 801ee9c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801eea0:	9328      	str	r3, [sp, #160]	; 0xa0
 801eea2:	eba9 0301 	sub.w	r3, r9, r1
 801eea6:	930a      	str	r3, [sp, #40]	; 0x28
 801eea8:	4651      	mov	r1, sl
 801eeaa:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eeac:	f7ff ff1c 	bl	801ece8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801eeb0:	4681      	mov	r9, r0
 801eeb2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eeb4:	f7ff ff42 	bl	801ed3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801eeb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eeba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801eebc:	4683      	mov	fp, r0
 801eebe:	eba3 0a01 	sub.w	sl, r3, r1
 801eec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eec4:	459a      	cmp	sl, r3
 801eec6:	bfa8      	it	ge
 801eec8:	469a      	movge	sl, r3
 801eeca:	f1ba 0f00 	cmp.w	sl, #0
 801eece:	f340 8119 	ble.w	801f104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801eed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eed4:	1b64      	subs	r4, r4, r5
 801eed6:	1b1c      	subs	r4, r3, r4
 801eed8:	42bc      	cmp	r4, r7
 801eeda:	bfd4      	ite	le
 801eedc:	ebc5 0504 	rsble	r5, r5, r4
 801eee0:	ebc5 0507 	rsbgt	r5, r5, r7
 801eee4:	2d00      	cmp	r5, #0
 801eee6:	f340 810d 	ble.w	801f104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801eeea:	1b52      	subs	r2, r2, r5
 801eeec:	fb08 f302 	mul.w	r3, r8, r2
 801eef0:	930f      	str	r3, [sp, #60]	; 0x3c
 801eef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	f040 8115 	bne.w	801f124 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801eefa:	4b8d      	ldr	r3, [pc, #564]	; (801f130 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801eefc:	6818      	ldr	r0, [r3, #0]
 801eefe:	6803      	ldr	r3, [r0, #0]
 801ef00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef02:	4798      	blx	r3
 801ef04:	2301      	movs	r3, #1
 801ef06:	fa03 f308 	lsl.w	r3, r3, r8
 801ef0a:	4a8a      	ldr	r2, [pc, #552]	; (801f134 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801ef0c:	3b01      	subs	r3, #1
 801ef0e:	b2db      	uxtb	r3, r3
 801ef10:	8811      	ldrh	r1, [r2, #0]
 801ef12:	930e      	str	r3, [sp, #56]	; 0x38
 801ef14:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ef18:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801ef1c:	fb01 2303 	mla	r3, r1, r3, r2
 801ef20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ef24:	930a      	str	r3, [sp, #40]	; 0x28
 801ef26:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ef2c:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef30:	0a19      	lsrs	r1, r3, #8
 801ef32:	b2cb      	uxtb	r3, r1
 801ef34:	9312      	str	r3, [sp, #72]	; 0x48
 801ef36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef38:	b2db      	uxtb	r3, r3
 801ef3a:	9311      	str	r3, [sp, #68]	; 0x44
 801ef3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef3e:	095a      	lsrs	r2, r3, #5
 801ef40:	4b7d      	ldr	r3, [pc, #500]	; (801f138 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801ef42:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ef46:	400b      	ands	r3, r1
 801ef48:	4313      	orrs	r3, r2
 801ef4a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ef4c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ef50:	4313      	orrs	r3, r2
 801ef52:	b29b      	uxth	r3, r3
 801ef54:	9310      	str	r3, [sp, #64]	; 0x40
 801ef56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ef58:	781a      	ldrb	r2, [r3, #0]
 801ef5a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801ef5e:	fb05 b919 	mls	r9, r5, r9, fp
 801ef62:	fb03 fb05 	mul.w	fp, r3, r5
 801ef66:	4132      	asrs	r2, r6
 801ef68:	b2d2      	uxtb	r2, r2
 801ef6a:	930d      	str	r3, [sp, #52]	; 0x34
 801ef6c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801ef70:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801ef74:	f0c0 80f3 	bcc.w	801f15e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801ef78:	46ae      	mov	lr, r5
 801ef7a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801ef7e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ef82:	f0c0 80db 	bcc.w	801f13c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801ef86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef88:	4013      	ands	r3, r2
 801ef8a:	d055      	beq.n	801f038 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801ef8c:	20ff      	movs	r0, #255	; 0xff
 801ef8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ef90:	fb90 f1f1 	sdiv	r1, r0, r1
 801ef94:	434b      	muls	r3, r1
 801ef96:	2bfe      	cmp	r3, #254	; 0xfe
 801ef98:	dd03      	ble.n	801efa2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801ef9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ef9c:	4281      	cmp	r1, r0
 801ef9e:	f000 80c3 	beq.w	801f128 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801efa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801efa4:	f8bc 4000 	ldrh.w	r4, [ip]
 801efa8:	fb11 f303 	smulbb	r3, r1, r3
 801efac:	b29b      	uxth	r3, r3
 801efae:	1c59      	adds	r1, r3, #1
 801efb0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801efb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801efb8:	b29f      	uxth	r7, r3
 801efba:	43db      	mvns	r3, r3
 801efbc:	b2db      	uxtb	r3, r3
 801efbe:	9309      	str	r3, [sp, #36]	; 0x24
 801efc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801efc2:	1220      	asrs	r0, r4, #8
 801efc4:	fb13 f907 	smulbb	r9, r3, r7
 801efc8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801efcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efce:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801efd2:	fb00 9003 	mla	r0, r0, r3, r9
 801efd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801efd8:	10e1      	asrs	r1, r4, #3
 801efda:	fb13 f907 	smulbb	r9, r3, r7
 801efde:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801efe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efe4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801efe8:	fb01 9103 	mla	r1, r1, r3, r9
 801efec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801efee:	00e4      	lsls	r4, r4, #3
 801eff0:	fb13 f707 	smulbb	r7, r3, r7
 801eff4:	b2e4      	uxtb	r4, r4
 801eff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eff8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801effc:	fb04 7403 	mla	r4, r4, r3, r7
 801f000:	b280      	uxth	r0, r0
 801f002:	b2a4      	uxth	r4, r4
 801f004:	1c43      	adds	r3, r0, #1
 801f006:	f104 0901 	add.w	r9, r4, #1
 801f00a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f00e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801f012:	b289      	uxth	r1, r1
 801f014:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801f018:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f01c:	ea49 0000 	orr.w	r0, r9, r0
 801f020:	f101 0901 	add.w	r9, r1, #1
 801f024:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801f028:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f02c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f030:	ea40 0009 	orr.w	r0, r0, r9
 801f034:	f8ac 0000 	strh.w	r0, [ip]
 801f038:	4446      	add	r6, r8
 801f03a:	b2b6      	uxth	r6, r6
 801f03c:	2e07      	cmp	r6, #7
 801f03e:	bf89      	itett	hi
 801f040:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801f042:	fa42 f208 	asrls.w	r2, r2, r8
 801f046:	785a      	ldrbhi	r2, [r3, #1]
 801f048:	3301      	addhi	r3, #1
 801f04a:	bf88      	it	hi
 801f04c:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801f04e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f050:	bf94      	ite	ls
 801f052:	b2d2      	uxtbls	r2, r2
 801f054:	2600      	movhi	r6, #0
 801f056:	449c      	add	ip, r3
 801f058:	e791      	b.n	801ef7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801f05a:	441c      	add	r4, r3
 801f05c:	b224      	sxth	r4, r4
 801f05e:	e6d4      	b.n	801ee0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801f060:	f1ba 0f01 	cmp.w	sl, #1
 801f064:	f47f af0b 	bne.w	801ee7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f068:	f1bb 0f01 	cmp.w	fp, #1
 801f06c:	f47f af07 	bne.w	801ee7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f070:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801f130 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801f074:	f8db 0000 	ldr.w	r0, [fp]
 801f078:	6803      	ldr	r3, [r0, #0]
 801f07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f07c:	4798      	blx	r3
 801f07e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801f082:	465a      	mov	r2, fp
 801f084:	d006      	beq.n	801f094 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801f086:	f1b8 0f04 	cmp.w	r8, #4
 801f08a:	d13e      	bne.n	801f10a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801f08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f08e:	3300      	adds	r3, #0
 801f090:	bf18      	it	ne
 801f092:	2301      	movne	r3, #1
 801f094:	0580      	lsls	r0, r0, #22
 801f096:	d56b      	bpl.n	801f170 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801f098:	f1b8 0f08 	cmp.w	r8, #8
 801f09c:	d168      	bne.n	801f170 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	bf0c      	ite	eq
 801f0a2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801f0a6:	f44f 7180 	movne.w	r1, #256	; 0x100
 801f0aa:	2d00      	cmp	r5, #0
 801f0ac:	f47f aee7 	bne.w	801ee7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f0b0:	2e00      	cmp	r6, #0
 801f0b2:	f47f aee4 	bne.w	801ee7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f0b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f0b8:	19e3      	adds	r3, r4, r7
 801f0ba:	4283      	cmp	r3, r0
 801f0bc:	f73f aedf 	bgt.w	801ee7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f0c4:	444b      	add	r3, r9
 801f0c6:	4283      	cmp	r3, r0
 801f0c8:	f73f aed9 	bgt.w	801ee7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f0cc:	2500      	movs	r5, #0
 801f0ce:	6810      	ldr	r0, [r2, #0]
 801f0d0:	b2bf      	uxth	r7, r7
 801f0d2:	6804      	ldr	r4, [r0, #0]
 801f0d4:	f1b8 0f08 	cmp.w	r8, #8
 801f0d8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801f0dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f0de:	bf1c      	itt	ne
 801f0e0:	3701      	addne	r7, #1
 801f0e2:	f027 0701 	bicne.w	r7, r7, #1
 801f0e6:	9104      	str	r1, [sp, #16]
 801f0e8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f0ea:	bf18      	it	ne
 801f0ec:	b2bf      	uxthne	r7, r7
 801f0ee:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801f0f2:	e9cd 7900 	strd	r7, r9, [sp]
 801f0f6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801f0fa:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801f0fe:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801f100:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f102:	47a0      	blx	r4
 801f104:	b019      	add	sp, #100	; 0x64
 801f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f10a:	2300      	movs	r3, #0
 801f10c:	e7c2      	b.n	801f094 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801f10e:	2208      	movs	r2, #8
 801f110:	fb92 f3f8 	sdiv	r3, r2, r8
 801f114:	1e5a      	subs	r2, r3, #1
 801f116:	443a      	add	r2, r7
 801f118:	fb92 f2f3 	sdiv	r2, r2, r3
 801f11c:	fb12 f203 	smulbb	r2, r2, r3
 801f120:	b292      	uxth	r2, r2
 801f122:	e6b1      	b.n	801ee88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801f124:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f126:	e6ed      	b.n	801ef04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801f128:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f12a:	e783      	b.n	801f034 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801f12c:	2000f38c 	.word	0x2000f38c
 801f130:	2000f394 	.word	0x2000f394
 801f134:	2000f38e 	.word	0x2000f38e
 801f138:	00fff800 	.word	0x00fff800
 801f13c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f13e:	b153      	cbz	r3, 801f156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801f140:	441e      	add	r6, r3
 801f142:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f144:	b2b6      	uxth	r6, r6
 801f146:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801f14a:	781a      	ldrb	r2, [r3, #0]
 801f14c:	f006 0607 	and.w	r6, r6, #7
 801f150:	4132      	asrs	r2, r6
 801f152:	9328      	str	r3, [sp, #160]	; 0xa0
 801f154:	b2d2      	uxtb	r2, r2
 801f156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f158:	445b      	add	r3, fp
 801f15a:	930a      	str	r3, [sp, #40]	; 0x28
 801f15c:	e708      	b.n	801ef70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801f15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f160:	2b00      	cmp	r3, #0
 801f162:	d1cf      	bne.n	801f104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801f164:	4b05      	ldr	r3, [pc, #20]	; (801f17c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801f166:	6818      	ldr	r0, [r3, #0]
 801f168:	6803      	ldr	r3, [r0, #0]
 801f16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f16c:	4798      	blx	r3
 801f16e:	e7c9      	b.n	801f104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801f170:	2b00      	cmp	r3, #0
 801f172:	f43f ae84 	beq.w	801ee7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f176:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f17a:	e796      	b.n	801f0aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801f17c:	2000f394 	.word	0x2000f394

0801f180 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801f180:	b538      	push	{r3, r4, r5, lr}
 801f182:	4605      	mov	r5, r0
 801f184:	4c13      	ldr	r4, [pc, #76]	; (801f1d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801f186:	e8d4 3f8f 	ldab	r3, [r4]
 801f18a:	07da      	lsls	r2, r3, #31
 801f18c:	d40b      	bmi.n	801f1a6 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801f18e:	4620      	mov	r0, r4
 801f190:	f007 fe95 	bl	8026ebe <__cxa_guard_acquire>
 801f194:	b138      	cbz	r0, 801f1a6 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801f196:	4620      	mov	r0, r4
 801f198:	f007 fe9d 	bl	8026ed6 <__cxa_guard_release>
 801f19c:	4a0e      	ldr	r2, [pc, #56]	; (801f1d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801f19e:	490f      	ldr	r1, [pc, #60]	; (801f1dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801f1a0:	480f      	ldr	r0, [pc, #60]	; (801f1e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801f1a2:	f007 fe85 	bl	8026eb0 <__aeabi_atexit>
 801f1a6:	4c0f      	ldr	r4, [pc, #60]	; (801f1e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801f1a8:	e8d4 3f8f 	ldab	r3, [r4]
 801f1ac:	07db      	lsls	r3, r3, #31
 801f1ae:	d40b      	bmi.n	801f1c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801f1b0:	4620      	mov	r0, r4
 801f1b2:	f007 fe84 	bl	8026ebe <__cxa_guard_acquire>
 801f1b6:	b138      	cbz	r0, 801f1c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801f1b8:	4620      	mov	r0, r4
 801f1ba:	f007 fe8c 	bl	8026ed6 <__cxa_guard_release>
 801f1be:	4a06      	ldr	r2, [pc, #24]	; (801f1d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801f1c0:	4909      	ldr	r1, [pc, #36]	; (801f1e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801f1c2:	480a      	ldr	r0, [pc, #40]	; (801f1ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801f1c4:	f007 fe74 	bl	8026eb0 <__aeabi_atexit>
 801f1c8:	4b05      	ldr	r3, [pc, #20]	; (801f1e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801f1ca:	612b      	str	r3, [r5, #16]
 801f1cc:	4b07      	ldr	r3, [pc, #28]	; (801f1ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801f1ce:	616b      	str	r3, [r5, #20]
 801f1d0:	bd38      	pop	{r3, r4, r5, pc}
 801f1d2:	bf00      	nop
 801f1d4:	2000f46c 	.word	0x2000f46c
 801f1d8:	20000000 	.word	0x20000000
 801f1dc:	0801bf8d 	.word	0x0801bf8d
 801f1e0:	20000070 	.word	0x20000070
 801f1e4:	2000f470 	.word	0x2000f470
 801f1e8:	0801bf8b 	.word	0x0801bf8b
 801f1ec:	20000074 	.word	0x20000074

0801f1f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801f1f0:	b538      	push	{r3, r4, r5, lr}
 801f1f2:	4605      	mov	r5, r0
 801f1f4:	4c13      	ldr	r4, [pc, #76]	; (801f244 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801f1f6:	e8d4 3f8f 	ldab	r3, [r4]
 801f1fa:	07da      	lsls	r2, r3, #31
 801f1fc:	d40b      	bmi.n	801f216 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801f1fe:	4620      	mov	r0, r4
 801f200:	f007 fe5d 	bl	8026ebe <__cxa_guard_acquire>
 801f204:	b138      	cbz	r0, 801f216 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801f206:	4620      	mov	r0, r4
 801f208:	f007 fe65 	bl	8026ed6 <__cxa_guard_release>
 801f20c:	4a0e      	ldr	r2, [pc, #56]	; (801f248 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801f20e:	490f      	ldr	r1, [pc, #60]	; (801f24c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801f210:	480f      	ldr	r0, [pc, #60]	; (801f250 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801f212:	f007 fe4d 	bl	8026eb0 <__aeabi_atexit>
 801f216:	4c0f      	ldr	r4, [pc, #60]	; (801f254 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801f218:	e8d4 3f8f 	ldab	r3, [r4]
 801f21c:	07db      	lsls	r3, r3, #31
 801f21e:	d40b      	bmi.n	801f238 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801f220:	4620      	mov	r0, r4
 801f222:	f007 fe4c 	bl	8026ebe <__cxa_guard_acquire>
 801f226:	b138      	cbz	r0, 801f238 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801f228:	4620      	mov	r0, r4
 801f22a:	f007 fe54 	bl	8026ed6 <__cxa_guard_release>
 801f22e:	4a06      	ldr	r2, [pc, #24]	; (801f248 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801f230:	4909      	ldr	r1, [pc, #36]	; (801f258 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801f232:	480a      	ldr	r0, [pc, #40]	; (801f25c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801f234:	f007 fe3c 	bl	8026eb0 <__aeabi_atexit>
 801f238:	4b05      	ldr	r3, [pc, #20]	; (801f250 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801f23a:	60ab      	str	r3, [r5, #8]
 801f23c:	4b07      	ldr	r3, [pc, #28]	; (801f25c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801f23e:	60eb      	str	r3, [r5, #12]
 801f240:	bd38      	pop	{r3, r4, r5, pc}
 801f242:	bf00      	nop
 801f244:	2000f444 	.word	0x2000f444
 801f248:	20000000 	.word	0x20000000
 801f24c:	0801bf91 	.word	0x0801bf91
 801f250:	20000048 	.word	0x20000048
 801f254:	2000f448 	.word	0x2000f448
 801f258:	0801bf8f 	.word	0x0801bf8f
 801f25c:	2000004c 	.word	0x2000004c

0801f260 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801f260:	b510      	push	{r4, lr}
 801f262:	4604      	mov	r4, r0
 801f264:	f7ff ff8c 	bl	801f180 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801f268:	4620      	mov	r0, r4
 801f26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f26e:	f7ff bfbf 	b.w	801f1f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801f274 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f274:	b538      	push	{r3, r4, r5, lr}
 801f276:	4605      	mov	r5, r0
 801f278:	4c13      	ldr	r4, [pc, #76]	; (801f2c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801f27a:	e8d4 3f8f 	ldab	r3, [r4]
 801f27e:	07da      	lsls	r2, r3, #31
 801f280:	d40b      	bmi.n	801f29a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801f282:	4620      	mov	r0, r4
 801f284:	f007 fe1b 	bl	8026ebe <__cxa_guard_acquire>
 801f288:	b138      	cbz	r0, 801f29a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801f28a:	4620      	mov	r0, r4
 801f28c:	f007 fe23 	bl	8026ed6 <__cxa_guard_release>
 801f290:	4a0e      	ldr	r2, [pc, #56]	; (801f2cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f292:	490f      	ldr	r1, [pc, #60]	; (801f2d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f294:	480f      	ldr	r0, [pc, #60]	; (801f2d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f296:	f007 fe0b 	bl	8026eb0 <__aeabi_atexit>
 801f29a:	4c0f      	ldr	r4, [pc, #60]	; (801f2d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f29c:	e8d4 3f8f 	ldab	r3, [r4]
 801f2a0:	07db      	lsls	r3, r3, #31
 801f2a2:	d40b      	bmi.n	801f2bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801f2a4:	4620      	mov	r0, r4
 801f2a6:	f007 fe0a 	bl	8026ebe <__cxa_guard_acquire>
 801f2aa:	b138      	cbz	r0, 801f2bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801f2ac:	4620      	mov	r0, r4
 801f2ae:	f007 fe12 	bl	8026ed6 <__cxa_guard_release>
 801f2b2:	4a06      	ldr	r2, [pc, #24]	; (801f2cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f2b4:	4909      	ldr	r1, [pc, #36]	; (801f2dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f2b6:	480a      	ldr	r0, [pc, #40]	; (801f2e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f2b8:	f007 fdfa 	bl	8026eb0 <__aeabi_atexit>
 801f2bc:	4b05      	ldr	r3, [pc, #20]	; (801f2d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f2be:	622b      	str	r3, [r5, #32]
 801f2c0:	4b07      	ldr	r3, [pc, #28]	; (801f2e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f2c2:	626b      	str	r3, [r5, #36]	; 0x24
 801f2c4:	bd38      	pop	{r3, r4, r5, pc}
 801f2c6:	bf00      	nop
 801f2c8:	2000f474 	.word	0x2000f474
 801f2cc:	20000000 	.word	0x20000000
 801f2d0:	0801bf85 	.word	0x0801bf85
 801f2d4:	20000078 	.word	0x20000078
 801f2d8:	2000f478 	.word	0x2000f478
 801f2dc:	0801bf83 	.word	0x0801bf83
 801f2e0:	2000007c 	.word	0x2000007c

0801f2e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f2e4:	b538      	push	{r3, r4, r5, lr}
 801f2e6:	4605      	mov	r5, r0
 801f2e8:	4c13      	ldr	r4, [pc, #76]	; (801f338 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801f2ea:	e8d4 3f8f 	ldab	r3, [r4]
 801f2ee:	07da      	lsls	r2, r3, #31
 801f2f0:	d40b      	bmi.n	801f30a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801f2f2:	4620      	mov	r0, r4
 801f2f4:	f007 fde3 	bl	8026ebe <__cxa_guard_acquire>
 801f2f8:	b138      	cbz	r0, 801f30a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801f2fa:	4620      	mov	r0, r4
 801f2fc:	f007 fdeb 	bl	8026ed6 <__cxa_guard_release>
 801f300:	4a0e      	ldr	r2, [pc, #56]	; (801f33c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f302:	490f      	ldr	r1, [pc, #60]	; (801f340 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f304:	480f      	ldr	r0, [pc, #60]	; (801f344 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f306:	f007 fdd3 	bl	8026eb0 <__aeabi_atexit>
 801f30a:	4c0f      	ldr	r4, [pc, #60]	; (801f348 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f30c:	e8d4 3f8f 	ldab	r3, [r4]
 801f310:	07db      	lsls	r3, r3, #31
 801f312:	d40b      	bmi.n	801f32c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801f314:	4620      	mov	r0, r4
 801f316:	f007 fdd2 	bl	8026ebe <__cxa_guard_acquire>
 801f31a:	b138      	cbz	r0, 801f32c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801f31c:	4620      	mov	r0, r4
 801f31e:	f007 fdda 	bl	8026ed6 <__cxa_guard_release>
 801f322:	4a06      	ldr	r2, [pc, #24]	; (801f33c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f324:	4909      	ldr	r1, [pc, #36]	; (801f34c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f326:	480a      	ldr	r0, [pc, #40]	; (801f350 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f328:	f007 fdc2 	bl	8026eb0 <__aeabi_atexit>
 801f32c:	4b05      	ldr	r3, [pc, #20]	; (801f344 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f32e:	61ab      	str	r3, [r5, #24]
 801f330:	4b07      	ldr	r3, [pc, #28]	; (801f350 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f332:	61eb      	str	r3, [r5, #28]
 801f334:	bd38      	pop	{r3, r4, r5, pc}
 801f336:	bf00      	nop
 801f338:	2000f44c 	.word	0x2000f44c
 801f33c:	20000000 	.word	0x20000000
 801f340:	0801bf89 	.word	0x0801bf89
 801f344:	20000050 	.word	0x20000050
 801f348:	2000f450 	.word	0x2000f450
 801f34c:	0801bf87 	.word	0x0801bf87
 801f350:	20000054 	.word	0x20000054

0801f354 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801f354:	b510      	push	{r4, lr}
 801f356:	4604      	mov	r4, r0
 801f358:	f7ff ff8c 	bl	801f274 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f35c:	4620      	mov	r0, r4
 801f35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f362:	f7ff bfbf 	b.w	801f2e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f368 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f368:	b538      	push	{r3, r4, r5, lr}
 801f36a:	4605      	mov	r5, r0
 801f36c:	4c13      	ldr	r4, [pc, #76]	; (801f3bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801f36e:	e8d4 3f8f 	ldab	r3, [r4]
 801f372:	07da      	lsls	r2, r3, #31
 801f374:	d40b      	bmi.n	801f38e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801f376:	4620      	mov	r0, r4
 801f378:	f007 fda1 	bl	8026ebe <__cxa_guard_acquire>
 801f37c:	b138      	cbz	r0, 801f38e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801f37e:	4620      	mov	r0, r4
 801f380:	f007 fda9 	bl	8026ed6 <__cxa_guard_release>
 801f384:	4a0e      	ldr	r2, [pc, #56]	; (801f3c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f386:	490f      	ldr	r1, [pc, #60]	; (801f3c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f388:	480f      	ldr	r0, [pc, #60]	; (801f3c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f38a:	f007 fd91 	bl	8026eb0 <__aeabi_atexit>
 801f38e:	4c0f      	ldr	r4, [pc, #60]	; (801f3cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f390:	e8d4 3f8f 	ldab	r3, [r4]
 801f394:	07db      	lsls	r3, r3, #31
 801f396:	d40b      	bmi.n	801f3b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801f398:	4620      	mov	r0, r4
 801f39a:	f007 fd90 	bl	8026ebe <__cxa_guard_acquire>
 801f39e:	b138      	cbz	r0, 801f3b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801f3a0:	4620      	mov	r0, r4
 801f3a2:	f007 fd98 	bl	8026ed6 <__cxa_guard_release>
 801f3a6:	4a06      	ldr	r2, [pc, #24]	; (801f3c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f3a8:	4909      	ldr	r1, [pc, #36]	; (801f3d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f3aa:	480a      	ldr	r0, [pc, #40]	; (801f3d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f3ac:	f007 fd80 	bl	8026eb0 <__aeabi_atexit>
 801f3b0:	4b05      	ldr	r3, [pc, #20]	; (801f3c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f3b2:	632b      	str	r3, [r5, #48]	; 0x30
 801f3b4:	4b07      	ldr	r3, [pc, #28]	; (801f3d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f3b6:	636b      	str	r3, [r5, #52]	; 0x34
 801f3b8:	bd38      	pop	{r3, r4, r5, pc}
 801f3ba:	bf00      	nop
 801f3bc:	2000f484 	.word	0x2000f484
 801f3c0:	20000000 	.word	0x20000000
 801f3c4:	0801bf7d 	.word	0x0801bf7d
 801f3c8:	20000088 	.word	0x20000088
 801f3cc:	2000f488 	.word	0x2000f488
 801f3d0:	0801bf7b 	.word	0x0801bf7b
 801f3d4:	2000008c 	.word	0x2000008c

0801f3d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f3d8:	b538      	push	{r3, r4, r5, lr}
 801f3da:	4605      	mov	r5, r0
 801f3dc:	4c13      	ldr	r4, [pc, #76]	; (801f42c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801f3de:	e8d4 3f8f 	ldab	r3, [r4]
 801f3e2:	07da      	lsls	r2, r3, #31
 801f3e4:	d40b      	bmi.n	801f3fe <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801f3e6:	4620      	mov	r0, r4
 801f3e8:	f007 fd69 	bl	8026ebe <__cxa_guard_acquire>
 801f3ec:	b138      	cbz	r0, 801f3fe <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801f3ee:	4620      	mov	r0, r4
 801f3f0:	f007 fd71 	bl	8026ed6 <__cxa_guard_release>
 801f3f4:	4a0e      	ldr	r2, [pc, #56]	; (801f430 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f3f6:	490f      	ldr	r1, [pc, #60]	; (801f434 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f3f8:	480f      	ldr	r0, [pc, #60]	; (801f438 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f3fa:	f007 fd59 	bl	8026eb0 <__aeabi_atexit>
 801f3fe:	4c0f      	ldr	r4, [pc, #60]	; (801f43c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f400:	e8d4 3f8f 	ldab	r3, [r4]
 801f404:	07db      	lsls	r3, r3, #31
 801f406:	d40b      	bmi.n	801f420 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801f408:	4620      	mov	r0, r4
 801f40a:	f007 fd58 	bl	8026ebe <__cxa_guard_acquire>
 801f40e:	b138      	cbz	r0, 801f420 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801f410:	4620      	mov	r0, r4
 801f412:	f007 fd60 	bl	8026ed6 <__cxa_guard_release>
 801f416:	4a06      	ldr	r2, [pc, #24]	; (801f430 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f418:	4909      	ldr	r1, [pc, #36]	; (801f440 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f41a:	480a      	ldr	r0, [pc, #40]	; (801f444 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f41c:	f007 fd48 	bl	8026eb0 <__aeabi_atexit>
 801f420:	4b05      	ldr	r3, [pc, #20]	; (801f438 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f422:	62ab      	str	r3, [r5, #40]	; 0x28
 801f424:	4b07      	ldr	r3, [pc, #28]	; (801f444 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f426:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f428:	bd38      	pop	{r3, r4, r5, pc}
 801f42a:	bf00      	nop
 801f42c:	2000f454 	.word	0x2000f454
 801f430:	20000000 	.word	0x20000000
 801f434:	0801bf81 	.word	0x0801bf81
 801f438:	20000058 	.word	0x20000058
 801f43c:	2000f458 	.word	0x2000f458
 801f440:	0801bf7f 	.word	0x0801bf7f
 801f444:	2000005c 	.word	0x2000005c

0801f448 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f448:	b510      	push	{r4, lr}
 801f44a:	4604      	mov	r4, r0
 801f44c:	f7ff ff8c 	bl	801f368 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f450:	4620      	mov	r0, r4
 801f452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f456:	f7ff bfbf 	b.w	801f3d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f45c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801f45c:	b538      	push	{r3, r4, r5, lr}
 801f45e:	4605      	mov	r5, r0
 801f460:	4c13      	ldr	r4, [pc, #76]	; (801f4b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801f462:	e8d4 3f8f 	ldab	r3, [r4]
 801f466:	07da      	lsls	r2, r3, #31
 801f468:	d40b      	bmi.n	801f482 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801f46a:	4620      	mov	r0, r4
 801f46c:	f007 fd27 	bl	8026ebe <__cxa_guard_acquire>
 801f470:	b138      	cbz	r0, 801f482 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801f472:	4620      	mov	r0, r4
 801f474:	f007 fd2f 	bl	8026ed6 <__cxa_guard_release>
 801f478:	4a0e      	ldr	r2, [pc, #56]	; (801f4b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801f47a:	490f      	ldr	r1, [pc, #60]	; (801f4b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801f47c:	480f      	ldr	r0, [pc, #60]	; (801f4bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801f47e:	f007 fd17 	bl	8026eb0 <__aeabi_atexit>
 801f482:	4c0f      	ldr	r4, [pc, #60]	; (801f4c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801f484:	e8d4 3f8f 	ldab	r3, [r4]
 801f488:	07db      	lsls	r3, r3, #31
 801f48a:	d40b      	bmi.n	801f4a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801f48c:	4620      	mov	r0, r4
 801f48e:	f007 fd16 	bl	8026ebe <__cxa_guard_acquire>
 801f492:	b138      	cbz	r0, 801f4a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801f494:	4620      	mov	r0, r4
 801f496:	f007 fd1e 	bl	8026ed6 <__cxa_guard_release>
 801f49a:	4a06      	ldr	r2, [pc, #24]	; (801f4b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801f49c:	4909      	ldr	r1, [pc, #36]	; (801f4c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801f49e:	480a      	ldr	r0, [pc, #40]	; (801f4c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801f4a0:	f007 fd06 	bl	8026eb0 <__aeabi_atexit>
 801f4a4:	4b05      	ldr	r3, [pc, #20]	; (801f4bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801f4a6:	652b      	str	r3, [r5, #80]	; 0x50
 801f4a8:	4b07      	ldr	r3, [pc, #28]	; (801f4c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801f4aa:	656b      	str	r3, [r5, #84]	; 0x54
 801f4ac:	bd38      	pop	{r3, r4, r5, pc}
 801f4ae:	bf00      	nop
 801f4b0:	2000f48c 	.word	0x2000f48c
 801f4b4:	20000000 	.word	0x20000000
 801f4b8:	0801bf6d 	.word	0x0801bf6d
 801f4bc:	20000090 	.word	0x20000090
 801f4c0:	2000f490 	.word	0x2000f490
 801f4c4:	0801bf6b 	.word	0x0801bf6b
 801f4c8:	20000094 	.word	0x20000094

0801f4cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801f4cc:	b538      	push	{r3, r4, r5, lr}
 801f4ce:	4605      	mov	r5, r0
 801f4d0:	4c13      	ldr	r4, [pc, #76]	; (801f520 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801f4d2:	e8d4 3f8f 	ldab	r3, [r4]
 801f4d6:	07da      	lsls	r2, r3, #31
 801f4d8:	d40b      	bmi.n	801f4f2 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801f4da:	4620      	mov	r0, r4
 801f4dc:	f007 fcef 	bl	8026ebe <__cxa_guard_acquire>
 801f4e0:	b138      	cbz	r0, 801f4f2 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801f4e2:	4620      	mov	r0, r4
 801f4e4:	f007 fcf7 	bl	8026ed6 <__cxa_guard_release>
 801f4e8:	4a0e      	ldr	r2, [pc, #56]	; (801f524 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801f4ea:	490f      	ldr	r1, [pc, #60]	; (801f528 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801f4ec:	480f      	ldr	r0, [pc, #60]	; (801f52c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801f4ee:	f007 fcdf 	bl	8026eb0 <__aeabi_atexit>
 801f4f2:	4c0f      	ldr	r4, [pc, #60]	; (801f530 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801f4f4:	e8d4 3f8f 	ldab	r3, [r4]
 801f4f8:	07db      	lsls	r3, r3, #31
 801f4fa:	d40b      	bmi.n	801f514 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801f4fc:	4620      	mov	r0, r4
 801f4fe:	f007 fcde 	bl	8026ebe <__cxa_guard_acquire>
 801f502:	b138      	cbz	r0, 801f514 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801f504:	4620      	mov	r0, r4
 801f506:	f007 fce6 	bl	8026ed6 <__cxa_guard_release>
 801f50a:	4a06      	ldr	r2, [pc, #24]	; (801f524 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801f50c:	4909      	ldr	r1, [pc, #36]	; (801f534 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801f50e:	480a      	ldr	r0, [pc, #40]	; (801f538 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801f510:	f007 fcce 	bl	8026eb0 <__aeabi_atexit>
 801f514:	4b05      	ldr	r3, [pc, #20]	; (801f52c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801f516:	64ab      	str	r3, [r5, #72]	; 0x48
 801f518:	4b07      	ldr	r3, [pc, #28]	; (801f538 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801f51a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f51c:	bd38      	pop	{r3, r4, r5, pc}
 801f51e:	bf00      	nop
 801f520:	2000f494 	.word	0x2000f494
 801f524:	20000000 	.word	0x20000000
 801f528:	0801bf71 	.word	0x0801bf71
 801f52c:	20000098 	.word	0x20000098
 801f530:	2000f498 	.word	0x2000f498
 801f534:	0801bf6f 	.word	0x0801bf6f
 801f538:	2000009c 	.word	0x2000009c

0801f53c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801f53c:	b538      	push	{r3, r4, r5, lr}
 801f53e:	4605      	mov	r5, r0
 801f540:	4c13      	ldr	r4, [pc, #76]	; (801f590 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801f542:	e8d4 3f8f 	ldab	r3, [r4]
 801f546:	07da      	lsls	r2, r3, #31
 801f548:	d40b      	bmi.n	801f562 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801f54a:	4620      	mov	r0, r4
 801f54c:	f007 fcb7 	bl	8026ebe <__cxa_guard_acquire>
 801f550:	b138      	cbz	r0, 801f562 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801f552:	4620      	mov	r0, r4
 801f554:	f007 fcbf 	bl	8026ed6 <__cxa_guard_release>
 801f558:	4a0e      	ldr	r2, [pc, #56]	; (801f594 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801f55a:	490f      	ldr	r1, [pc, #60]	; (801f598 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801f55c:	480f      	ldr	r0, [pc, #60]	; (801f59c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801f55e:	f007 fca7 	bl	8026eb0 <__aeabi_atexit>
 801f562:	4c0f      	ldr	r4, [pc, #60]	; (801f5a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801f564:	e8d4 3f8f 	ldab	r3, [r4]
 801f568:	07db      	lsls	r3, r3, #31
 801f56a:	d40b      	bmi.n	801f584 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801f56c:	4620      	mov	r0, r4
 801f56e:	f007 fca6 	bl	8026ebe <__cxa_guard_acquire>
 801f572:	b138      	cbz	r0, 801f584 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801f574:	4620      	mov	r0, r4
 801f576:	f007 fcae 	bl	8026ed6 <__cxa_guard_release>
 801f57a:	4a06      	ldr	r2, [pc, #24]	; (801f594 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801f57c:	4909      	ldr	r1, [pc, #36]	; (801f5a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801f57e:	480a      	ldr	r0, [pc, #40]	; (801f5a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801f580:	f007 fc96 	bl	8026eb0 <__aeabi_atexit>
 801f584:	4b05      	ldr	r3, [pc, #20]	; (801f59c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801f586:	642b      	str	r3, [r5, #64]	; 0x40
 801f588:	4b07      	ldr	r3, [pc, #28]	; (801f5a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801f58a:	646b      	str	r3, [r5, #68]	; 0x44
 801f58c:	bd38      	pop	{r3, r4, r5, pc}
 801f58e:	bf00      	nop
 801f590:	2000f45c 	.word	0x2000f45c
 801f594:	20000000 	.word	0x20000000
 801f598:	0801bf75 	.word	0x0801bf75
 801f59c:	20000060 	.word	0x20000060
 801f5a0:	2000f460 	.word	0x2000f460
 801f5a4:	0801bf73 	.word	0x0801bf73
 801f5a8:	20000064 	.word	0x20000064

0801f5ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801f5ac:	b538      	push	{r3, r4, r5, lr}
 801f5ae:	4605      	mov	r5, r0
 801f5b0:	4c13      	ldr	r4, [pc, #76]	; (801f600 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801f5b2:	e8d4 3f8f 	ldab	r3, [r4]
 801f5b6:	07da      	lsls	r2, r3, #31
 801f5b8:	d40b      	bmi.n	801f5d2 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801f5ba:	4620      	mov	r0, r4
 801f5bc:	f007 fc7f 	bl	8026ebe <__cxa_guard_acquire>
 801f5c0:	b138      	cbz	r0, 801f5d2 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801f5c2:	4620      	mov	r0, r4
 801f5c4:	f007 fc87 	bl	8026ed6 <__cxa_guard_release>
 801f5c8:	4a0e      	ldr	r2, [pc, #56]	; (801f604 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801f5ca:	490f      	ldr	r1, [pc, #60]	; (801f608 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801f5cc:	480f      	ldr	r0, [pc, #60]	; (801f60c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801f5ce:	f007 fc6f 	bl	8026eb0 <__aeabi_atexit>
 801f5d2:	4c0f      	ldr	r4, [pc, #60]	; (801f610 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801f5d4:	e8d4 3f8f 	ldab	r3, [r4]
 801f5d8:	07db      	lsls	r3, r3, #31
 801f5da:	d40b      	bmi.n	801f5f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801f5dc:	4620      	mov	r0, r4
 801f5de:	f007 fc6e 	bl	8026ebe <__cxa_guard_acquire>
 801f5e2:	b138      	cbz	r0, 801f5f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	f007 fc76 	bl	8026ed6 <__cxa_guard_release>
 801f5ea:	4a06      	ldr	r2, [pc, #24]	; (801f604 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801f5ec:	4909      	ldr	r1, [pc, #36]	; (801f614 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801f5ee:	480a      	ldr	r0, [pc, #40]	; (801f618 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801f5f0:	f007 fc5e 	bl	8026eb0 <__aeabi_atexit>
 801f5f4:	4b05      	ldr	r3, [pc, #20]	; (801f60c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801f5f6:	63ab      	str	r3, [r5, #56]	; 0x38
 801f5f8:	4b07      	ldr	r3, [pc, #28]	; (801f618 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801f5fa:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f5fc:	bd38      	pop	{r3, r4, r5, pc}
 801f5fe:	bf00      	nop
 801f600:	2000f47c 	.word	0x2000f47c
 801f604:	20000000 	.word	0x20000000
 801f608:	0801bf79 	.word	0x0801bf79
 801f60c:	20000080 	.word	0x20000080
 801f610:	2000f480 	.word	0x2000f480
 801f614:	0801bf77 	.word	0x0801bf77
 801f618:	20000084 	.word	0x20000084

0801f61c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801f61c:	b510      	push	{r4, lr}
 801f61e:	4604      	mov	r4, r0
 801f620:	f7ff ff1c 	bl	801f45c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801f624:	4620      	mov	r0, r4
 801f626:	f7ff ff89 	bl	801f53c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801f62a:	4620      	mov	r0, r4
 801f62c:	f7ff ff4e 	bl	801f4cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801f630:	4620      	mov	r0, r4
 801f632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f636:	f7ff bfb9 	b.w	801f5ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801f63c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f63c:	b538      	push	{r3, r4, r5, lr}
 801f63e:	4605      	mov	r5, r0
 801f640:	4c13      	ldr	r4, [pc, #76]	; (801f690 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801f642:	e8d4 3f8f 	ldab	r3, [r4]
 801f646:	07da      	lsls	r2, r3, #31
 801f648:	d40b      	bmi.n	801f662 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801f64a:	4620      	mov	r0, r4
 801f64c:	f007 fc37 	bl	8026ebe <__cxa_guard_acquire>
 801f650:	b138      	cbz	r0, 801f662 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801f652:	4620      	mov	r0, r4
 801f654:	f007 fc3f 	bl	8026ed6 <__cxa_guard_release>
 801f658:	4a0e      	ldr	r2, [pc, #56]	; (801f694 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f65a:	490f      	ldr	r1, [pc, #60]	; (801f698 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f65c:	480f      	ldr	r0, [pc, #60]	; (801f69c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f65e:	f007 fc27 	bl	8026eb0 <__aeabi_atexit>
 801f662:	4c0f      	ldr	r4, [pc, #60]	; (801f6a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f664:	e8d4 3f8f 	ldab	r3, [r4]
 801f668:	07db      	lsls	r3, r3, #31
 801f66a:	d40b      	bmi.n	801f684 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801f66c:	4620      	mov	r0, r4
 801f66e:	f007 fc26 	bl	8026ebe <__cxa_guard_acquire>
 801f672:	b138      	cbz	r0, 801f684 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801f674:	4620      	mov	r0, r4
 801f676:	f007 fc2e 	bl	8026ed6 <__cxa_guard_release>
 801f67a:	4a06      	ldr	r2, [pc, #24]	; (801f694 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f67c:	4909      	ldr	r1, [pc, #36]	; (801f6a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f67e:	480a      	ldr	r0, [pc, #40]	; (801f6a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f680:	f007 fc16 	bl	8026eb0 <__aeabi_atexit>
 801f684:	4b05      	ldr	r3, [pc, #20]	; (801f69c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f686:	662b      	str	r3, [r5, #96]	; 0x60
 801f688:	4b07      	ldr	r3, [pc, #28]	; (801f6a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f68a:	666b      	str	r3, [r5, #100]	; 0x64
 801f68c:	bd38      	pop	{r3, r4, r5, pc}
 801f68e:	bf00      	nop
 801f690:	2000f464 	.word	0x2000f464
 801f694:	20000000 	.word	0x20000000
 801f698:	0801bf65 	.word	0x0801bf65
 801f69c:	20000068 	.word	0x20000068
 801f6a0:	2000f468 	.word	0x2000f468
 801f6a4:	0801bf63 	.word	0x0801bf63
 801f6a8:	2000006c 	.word	0x2000006c

0801f6ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f6ac:	b538      	push	{r3, r4, r5, lr}
 801f6ae:	4605      	mov	r5, r0
 801f6b0:	4c13      	ldr	r4, [pc, #76]	; (801f700 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801f6b2:	e8d4 3f8f 	ldab	r3, [r4]
 801f6b6:	07da      	lsls	r2, r3, #31
 801f6b8:	d40b      	bmi.n	801f6d2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801f6ba:	4620      	mov	r0, r4
 801f6bc:	f007 fbff 	bl	8026ebe <__cxa_guard_acquire>
 801f6c0:	b138      	cbz	r0, 801f6d2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801f6c2:	4620      	mov	r0, r4
 801f6c4:	f007 fc07 	bl	8026ed6 <__cxa_guard_release>
 801f6c8:	4a0e      	ldr	r2, [pc, #56]	; (801f704 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f6ca:	490f      	ldr	r1, [pc, #60]	; (801f708 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f6cc:	480f      	ldr	r0, [pc, #60]	; (801f70c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f6ce:	f007 fbef 	bl	8026eb0 <__aeabi_atexit>
 801f6d2:	4c0f      	ldr	r4, [pc, #60]	; (801f710 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f6d4:	e8d4 3f8f 	ldab	r3, [r4]
 801f6d8:	07db      	lsls	r3, r3, #31
 801f6da:	d40b      	bmi.n	801f6f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801f6dc:	4620      	mov	r0, r4
 801f6de:	f007 fbee 	bl	8026ebe <__cxa_guard_acquire>
 801f6e2:	b138      	cbz	r0, 801f6f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801f6e4:	4620      	mov	r0, r4
 801f6e6:	f007 fbf6 	bl	8026ed6 <__cxa_guard_release>
 801f6ea:	4a06      	ldr	r2, [pc, #24]	; (801f704 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f6ec:	4909      	ldr	r1, [pc, #36]	; (801f714 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f6ee:	480a      	ldr	r0, [pc, #40]	; (801f718 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f6f0:	f007 fbde 	bl	8026eb0 <__aeabi_atexit>
 801f6f4:	4b05      	ldr	r3, [pc, #20]	; (801f70c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f6f6:	65ab      	str	r3, [r5, #88]	; 0x58
 801f6f8:	4b07      	ldr	r3, [pc, #28]	; (801f718 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f6fa:	65eb      	str	r3, [r5, #92]	; 0x5c
 801f6fc:	bd38      	pop	{r3, r4, r5, pc}
 801f6fe:	bf00      	nop
 801f700:	2000f43c 	.word	0x2000f43c
 801f704:	20000000 	.word	0x20000000
 801f708:	0801bf69 	.word	0x0801bf69
 801f70c:	20000040 	.word	0x20000040
 801f710:	2000f440 	.word	0x2000f440
 801f714:	0801bf67 	.word	0x0801bf67
 801f718:	20000044 	.word	0x20000044

0801f71c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801f71c:	b510      	push	{r4, lr}
 801f71e:	4604      	mov	r4, r0
 801f720:	f7ff ff8c 	bl	801f63c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f724:	4620      	mov	r0, r4
 801f726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f72a:	f7ff bfbf 	b.w	801f6ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f730 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f730:	b538      	push	{r3, r4, r5, lr}
 801f732:	4605      	mov	r5, r0
 801f734:	4c13      	ldr	r4, [pc, #76]	; (801f784 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801f736:	e8d4 3f8f 	ldab	r3, [r4]
 801f73a:	07da      	lsls	r2, r3, #31
 801f73c:	d40b      	bmi.n	801f756 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801f73e:	4620      	mov	r0, r4
 801f740:	f007 fbbd 	bl	8026ebe <__cxa_guard_acquire>
 801f744:	b138      	cbz	r0, 801f756 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801f746:	4620      	mov	r0, r4
 801f748:	f007 fbc5 	bl	8026ed6 <__cxa_guard_release>
 801f74c:	4a0e      	ldr	r2, [pc, #56]	; (801f788 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f74e:	490f      	ldr	r1, [pc, #60]	; (801f78c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f750:	480f      	ldr	r0, [pc, #60]	; (801f790 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f752:	f007 fbad 	bl	8026eb0 <__aeabi_atexit>
 801f756:	4c0f      	ldr	r4, [pc, #60]	; (801f794 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f758:	e8d4 3f8f 	ldab	r3, [r4]
 801f75c:	07db      	lsls	r3, r3, #31
 801f75e:	d40b      	bmi.n	801f778 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801f760:	4620      	mov	r0, r4
 801f762:	f007 fbac 	bl	8026ebe <__cxa_guard_acquire>
 801f766:	b138      	cbz	r0, 801f778 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801f768:	4620      	mov	r0, r4
 801f76a:	f007 fbb4 	bl	8026ed6 <__cxa_guard_release>
 801f76e:	4a06      	ldr	r2, [pc, #24]	; (801f788 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f770:	4909      	ldr	r1, [pc, #36]	; (801f798 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f772:	480a      	ldr	r0, [pc, #40]	; (801f79c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f774:	f007 fb9c 	bl	8026eb0 <__aeabi_atexit>
 801f778:	4b05      	ldr	r3, [pc, #20]	; (801f790 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f77a:	672b      	str	r3, [r5, #112]	; 0x70
 801f77c:	4b07      	ldr	r3, [pc, #28]	; (801f79c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f77e:	676b      	str	r3, [r5, #116]	; 0x74
 801f780:	bd38      	pop	{r3, r4, r5, pc}
 801f782:	bf00      	nop
 801f784:	2000f434 	.word	0x2000f434
 801f788:	20000000 	.word	0x20000000
 801f78c:	0801bf5d 	.word	0x0801bf5d
 801f790:	20000038 	.word	0x20000038
 801f794:	2000f438 	.word	0x2000f438
 801f798:	0801bf5b 	.word	0x0801bf5b
 801f79c:	2000003c 	.word	0x2000003c

0801f7a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f7a0:	b538      	push	{r3, r4, r5, lr}
 801f7a2:	4605      	mov	r5, r0
 801f7a4:	4c13      	ldr	r4, [pc, #76]	; (801f7f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801f7a6:	e8d4 3f8f 	ldab	r3, [r4]
 801f7aa:	07da      	lsls	r2, r3, #31
 801f7ac:	d40b      	bmi.n	801f7c6 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801f7ae:	4620      	mov	r0, r4
 801f7b0:	f007 fb85 	bl	8026ebe <__cxa_guard_acquire>
 801f7b4:	b138      	cbz	r0, 801f7c6 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801f7b6:	4620      	mov	r0, r4
 801f7b8:	f007 fb8d 	bl	8026ed6 <__cxa_guard_release>
 801f7bc:	4a0e      	ldr	r2, [pc, #56]	; (801f7f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f7be:	490f      	ldr	r1, [pc, #60]	; (801f7fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f7c0:	480f      	ldr	r0, [pc, #60]	; (801f800 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f7c2:	f007 fb75 	bl	8026eb0 <__aeabi_atexit>
 801f7c6:	4c0f      	ldr	r4, [pc, #60]	; (801f804 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f7c8:	e8d4 3f8f 	ldab	r3, [r4]
 801f7cc:	07db      	lsls	r3, r3, #31
 801f7ce:	d40b      	bmi.n	801f7e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	f007 fb74 	bl	8026ebe <__cxa_guard_acquire>
 801f7d6:	b138      	cbz	r0, 801f7e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801f7d8:	4620      	mov	r0, r4
 801f7da:	f007 fb7c 	bl	8026ed6 <__cxa_guard_release>
 801f7de:	4a06      	ldr	r2, [pc, #24]	; (801f7f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f7e0:	4909      	ldr	r1, [pc, #36]	; (801f808 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f7e2:	480a      	ldr	r0, [pc, #40]	; (801f80c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f7e4:	f007 fb64 	bl	8026eb0 <__aeabi_atexit>
 801f7e8:	4b05      	ldr	r3, [pc, #20]	; (801f800 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f7ea:	66ab      	str	r3, [r5, #104]	; 0x68
 801f7ec:	4b07      	ldr	r3, [pc, #28]	; (801f80c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f7ee:	66eb      	str	r3, [r5, #108]	; 0x6c
 801f7f0:	bd38      	pop	{r3, r4, r5, pc}
 801f7f2:	bf00      	nop
 801f7f4:	2000f42c 	.word	0x2000f42c
 801f7f8:	20000000 	.word	0x20000000
 801f7fc:	0801bf61 	.word	0x0801bf61
 801f800:	20000030 	.word	0x20000030
 801f804:	2000f430 	.word	0x2000f430
 801f808:	0801bf5f 	.word	0x0801bf5f
 801f80c:	20000034 	.word	0x20000034

0801f810 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801f810:	b510      	push	{r4, lr}
 801f812:	4604      	mov	r4, r0
 801f814:	f7ff ff8c 	bl	801f730 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f818:	4620      	mov	r0, r4
 801f81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f81e:	f7ff bfbf 	b.w	801f7a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801f822 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801f822:	b510      	push	{r4, lr}
 801f824:	4604      	mov	r4, r0
 801f826:	f7ff fff3 	bl	801f810 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801f82a:	4620      	mov	r0, r4
 801f82c:	f7ff ff76 	bl	801f71c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801f830:	4620      	mov	r0, r4
 801f832:	f7ff fe09 	bl	801f448 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801f836:	4620      	mov	r0, r4
 801f838:	f7ff fd12 	bl	801f260 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801f83c:	4620      	mov	r0, r4
 801f83e:	f7ff fd89 	bl	801f354 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801f842:	4620      	mov	r0, r4
 801f844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f848:	f7ff bee8 	b.w	801f61c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801f84c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801f84c:	b538      	push	{r3, r4, r5, lr}
 801f84e:	4605      	mov	r5, r0
 801f850:	4c09      	ldr	r4, [pc, #36]	; (801f878 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 801f852:	e8d4 3f8f 	ldab	r3, [r4]
 801f856:	07db      	lsls	r3, r3, #31
 801f858:	d40b      	bmi.n	801f872 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 801f85a:	4620      	mov	r0, r4
 801f85c:	f007 fb2f 	bl	8026ebe <__cxa_guard_acquire>
 801f860:	b138      	cbz	r0, 801f872 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 801f862:	4620      	mov	r0, r4
 801f864:	f007 fb37 	bl	8026ed6 <__cxa_guard_release>
 801f868:	4a04      	ldr	r2, [pc, #16]	; (801f87c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 801f86a:	4905      	ldr	r1, [pc, #20]	; (801f880 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801f86c:	4805      	ldr	r0, [pc, #20]	; (801f884 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801f86e:	f007 fb1f 	bl	8026eb0 <__aeabi_atexit>
 801f872:	4b04      	ldr	r3, [pc, #16]	; (801f884 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801f874:	67ab      	str	r3, [r5, #120]	; 0x78
 801f876:	bd38      	pop	{r3, r4, r5, pc}
 801f878:	2000f420 	.word	0x2000f420
 801f87c:	20000000 	.word	0x20000000
 801f880:	0801bf59 	.word	0x0801bf59
 801f884:	20000028 	.word	0x20000028

0801f888 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 801f888:	b538      	push	{r3, r4, r5, lr}
 801f88a:	4605      	mov	r5, r0
 801f88c:	4c09      	ldr	r4, [pc, #36]	; (801f8b4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x2c>)
 801f88e:	e8d4 3f8f 	ldab	r3, [r4]
 801f892:	07db      	lsls	r3, r3, #31
 801f894:	d40b      	bmi.n	801f8ae <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 801f896:	4620      	mov	r0, r4
 801f898:	f007 fb11 	bl	8026ebe <__cxa_guard_acquire>
 801f89c:	b138      	cbz	r0, 801f8ae <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 801f89e:	4620      	mov	r0, r4
 801f8a0:	f007 fb19 	bl	8026ed6 <__cxa_guard_release>
 801f8a4:	4a04      	ldr	r2, [pc, #16]	; (801f8b8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 801f8a6:	4905      	ldr	r1, [pc, #20]	; (801f8bc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 801f8a8:	4805      	ldr	r0, [pc, #20]	; (801f8c0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 801f8aa:	f007 fb01 	bl	8026eb0 <__aeabi_atexit>
 801f8ae:	4b04      	ldr	r3, [pc, #16]	; (801f8c0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 801f8b0:	67eb      	str	r3, [r5, #124]	; 0x7c
 801f8b2:	bd38      	pop	{r3, r4, r5, pc}
 801f8b4:	2000f424 	.word	0x2000f424
 801f8b8:	20000000 	.word	0x20000000
 801f8bc:	0801bf57 	.word	0x0801bf57
 801f8c0:	2000002c 	.word	0x2000002c

0801f8c4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 801f8c4:	b570      	push	{r4, r5, r6, lr}
 801f8c6:	4606      	mov	r6, r0
 801f8c8:	4d0b      	ldr	r5, [pc, #44]	; (801f8f8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801f8ca:	e8d5 3f8f 	ldab	r3, [r5]
 801f8ce:	f013 0f01 	tst.w	r3, #1
 801f8d2:	4c0a      	ldr	r4, [pc, #40]	; (801f8fc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801f8d4:	d10d      	bne.n	801f8f2 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 801f8d6:	4628      	mov	r0, r5
 801f8d8:	f007 faf1 	bl	8026ebe <__cxa_guard_acquire>
 801f8dc:	b148      	cbz	r0, 801f8f2 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 801f8de:	4b08      	ldr	r3, [pc, #32]	; (801f900 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801f8e0:	4628      	mov	r0, r5
 801f8e2:	6023      	str	r3, [r4, #0]
 801f8e4:	f007 faf7 	bl	8026ed6 <__cxa_guard_release>
 801f8e8:	4a06      	ldr	r2, [pc, #24]	; (801f904 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801f8ea:	4907      	ldr	r1, [pc, #28]	; (801f908 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801f8ec:	4620      	mov	r0, r4
 801f8ee:	f007 fadf 	bl	8026eb0 <__aeabi_atexit>
 801f8f2:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 801f8f6:	bd70      	pop	{r4, r5, r6, pc}
 801f8f8:	2000f428 	.word	0x2000f428
 801f8fc:	2000f49c 	.word	0x2000f49c
 801f900:	0802a0f0 	.word	0x0802a0f0
 801f904:	20000000 	.word	0x20000000
 801f908:	0801bf55 	.word	0x0801bf55

0801f90c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 801f90c:	b510      	push	{r4, lr}
 801f90e:	4604      	mov	r4, r0
 801f910:	f7ff ff9c 	bl	801f84c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 801f914:	4620      	mov	r0, r4
 801f916:	f7ff ffb7 	bl	801f888 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 801f91a:	4620      	mov	r0, r4
 801f91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f920:	f7ff bfd0 	b.w	801f8c4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

0801f924 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801f924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f928:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801f92c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801f930:	fb05 4c0e 	mla	ip, r5, lr, r4
 801f934:	2d00      	cmp	r5, #0
 801f936:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801f93a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801f93e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801f942:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801f946:	eb02 0a0c 	add.w	sl, r2, ip
 801f94a:	8808      	ldrh	r0, [r1, #0]
 801f94c:	f2c0 80b0 	blt.w	801fab0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801f950:	45ab      	cmp	fp, r5
 801f952:	f340 80ad 	ble.w	801fab0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801f956:	2c00      	cmp	r4, #0
 801f958:	f2c0 80a8 	blt.w	801faac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f95c:	45a6      	cmp	lr, r4
 801f95e:	f340 80a5 	ble.w	801faac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f962:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f966:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801f96a:	1c62      	adds	r2, r4, #1
 801f96c:	f100 80a3 	bmi.w	801fab6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f970:	4596      	cmp	lr, r2
 801f972:	f340 80a0 	ble.w	801fab6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f976:	f1b9 0f00 	cmp.w	r9, #0
 801f97a:	f000 809c 	beq.w	801fab6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f97e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f982:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f986:	3501      	adds	r5, #1
 801f988:	f100 8099 	bmi.w	801fabe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f98c:	45ab      	cmp	fp, r5
 801f98e:	f340 8096 	ble.w	801fabe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f992:	2f00      	cmp	r7, #0
 801f994:	f000 8093 	beq.w	801fabe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f998:	2c00      	cmp	r4, #0
 801f99a:	f2c0 808e 	blt.w	801faba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801f99e:	45a6      	cmp	lr, r4
 801f9a0:	f340 808b 	ble.w	801faba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801f9a4:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801f9a8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801f9ac:	3401      	adds	r4, #1
 801f9ae:	f100 8089 	bmi.w	801fac4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f9b2:	45a6      	cmp	lr, r4
 801f9b4:	f340 8086 	ble.w	801fac4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f9b8:	f1b9 0f00 	cmp.w	r9, #0
 801f9bc:	f000 8082 	beq.w	801fac4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f9c0:	44d6      	add	lr, sl
 801f9c2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f9c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801f9ca:	fb19 fe07 	smulbb	lr, r9, r7
 801f9ce:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801f9d2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f9d6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801f9da:	ea44 0808 	orr.w	r8, r4, r8
 801f9de:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801f9e2:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801f9e6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f9ea:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f9ee:	ea44 0c0c 	orr.w	ip, r4, ip
 801f9f2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801f9f6:	fb04 f40c 	mul.w	r4, r4, ip
 801f9fa:	f1c7 0210 	rsb	r2, r7, #16
 801f9fe:	eba2 0209 	sub.w	r2, r2, r9
 801fa02:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801fa06:	fb02 4808 	mla	r8, r2, r8, r4
 801fa0a:	b2b4      	uxth	r4, r6
 801fa0c:	43f6      	mvns	r6, r6
 801fa0e:	041a      	lsls	r2, r3, #16
 801fa10:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fa14:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fa18:	4313      	orrs	r3, r2
 801fa1a:	fb0e 8303 	mla	r3, lr, r3, r8
 801fa1e:	042a      	lsls	r2, r5, #16
 801fa20:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fa24:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801fa28:	432a      	orrs	r2, r5
 801fa2a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801fa2e:	fb07 3202 	mla	r2, r7, r2, r3
 801fa32:	0d53      	lsrs	r3, r2, #21
 801fa34:	0952      	lsrs	r2, r2, #5
 801fa36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fa3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fa3e:	431a      	orrs	r2, r3
 801fa40:	b293      	uxth	r3, r2
 801fa42:	1202      	asrs	r2, r0, #8
 801fa44:	b2f6      	uxtb	r6, r6
 801fa46:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801fa4a:	fb12 f206 	smulbb	r2, r2, r6
 801fa4e:	10c7      	asrs	r7, r0, #3
 801fa50:	00c0      	lsls	r0, r0, #3
 801fa52:	b2c0      	uxtb	r0, r0
 801fa54:	121d      	asrs	r5, r3, #8
 801fa56:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fa5a:	fb10 f006 	smulbb	r0, r0, r6
 801fa5e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fa62:	fb17 f706 	smulbb	r7, r7, r6
 801fa66:	fb05 2504 	mla	r5, r5, r4, r2
 801fa6a:	10da      	asrs	r2, r3, #3
 801fa6c:	00db      	lsls	r3, r3, #3
 801fa6e:	b2db      	uxtb	r3, r3
 801fa70:	fb03 0004 	mla	r0, r3, r4, r0
 801fa74:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fa78:	fb02 7204 	mla	r2, r2, r4, r7
 801fa7c:	b2ad      	uxth	r5, r5
 801fa7e:	b280      	uxth	r0, r0
 801fa80:	1c6b      	adds	r3, r5, #1
 801fa82:	b292      	uxth	r2, r2
 801fa84:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fa88:	1c43      	adds	r3, r0, #1
 801fa8a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fa8e:	1c50      	adds	r0, r2, #1
 801fa90:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fa94:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fa98:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fa9c:	0952      	lsrs	r2, r2, #5
 801fa9e:	432b      	orrs	r3, r5
 801faa0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801faa4:	4313      	orrs	r3, r2
 801faa6:	800b      	strh	r3, [r1, #0]
 801faa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faac:	4680      	mov	r8, r0
 801faae:	e75c      	b.n	801f96a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801fab0:	4684      	mov	ip, r0
 801fab2:	4680      	mov	r8, r0
 801fab4:	e767      	b.n	801f986 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801fab6:	4684      	mov	ip, r0
 801fab8:	e765      	b.n	801f986 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801faba:	4605      	mov	r5, r0
 801fabc:	e776      	b.n	801f9ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801fabe:	4603      	mov	r3, r0
 801fac0:	4605      	mov	r5, r0
 801fac2:	e782      	b.n	801f9ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801fac4:	4603      	mov	r3, r0
 801fac6:	e780      	b.n	801f9ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801fac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801facc:	b099      	sub	sp, #100	; 0x64
 801face:	9215      	str	r2, [sp, #84]	; 0x54
 801fad0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fad2:	9016      	str	r0, [sp, #88]	; 0x58
 801fad4:	9309      	str	r3, [sp, #36]	; 0x24
 801fad6:	6850      	ldr	r0, [r2, #4]
 801fad8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801fadc:	910c      	str	r1, [sp, #48]	; 0x30
 801fade:	930d      	str	r3, [sp, #52]	; 0x34
 801fae0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801fae4:	fb00 1303 	mla	r3, r0, r3, r1
 801fae8:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801faec:	6812      	ldr	r2, [r2, #0]
 801faee:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801faf2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801faf4:	681b      	ldr	r3, [r3, #0]
 801faf6:	930b      	str	r3, [sp, #44]	; 0x2c
 801faf8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fafa:	685e      	ldr	r6, [r3, #4]
 801fafc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fafe:	3604      	adds	r6, #4
 801fb00:	43db      	mvns	r3, r3
 801fb02:	b2db      	uxtb	r3, r3
 801fb04:	930a      	str	r3, [sp, #40]	; 0x28
 801fb06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	dc03      	bgt.n	801fb14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fb0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	f340 8225 	ble.w	801ff5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801fb14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fb16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fb1e:	1e48      	subs	r0, r1, #1
 801fb20:	1e57      	subs	r7, r2, #1
 801fb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb24:	2b00      	cmp	r3, #0
 801fb26:	f340 80e3 	ble.w	801fcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801fb2a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801fb2e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801fb32:	d406      	bmi.n	801fb42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb34:	4584      	cmp	ip, r0
 801fb36:	da04      	bge.n	801fb42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	db02      	blt.n	801fb42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb3c:	42bb      	cmp	r3, r7
 801fb3e:	f2c0 80d8 	blt.w	801fcf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fb42:	f11c 0c01 	adds.w	ip, ip, #1
 801fb46:	f100 80c9 	bmi.w	801fcdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fb4a:	4561      	cmp	r1, ip
 801fb4c:	f2c0 80c6 	blt.w	801fcdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fb50:	3301      	adds	r3, #1
 801fb52:	f100 80c3 	bmi.w	801fcdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fb56:	429a      	cmp	r2, r3
 801fb58:	f2c0 80c0 	blt.w	801fcdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fb5c:	4647      	mov	r7, r8
 801fb5e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801fb62:	f1bb 0f00 	cmp.w	fp, #0
 801fb66:	f340 80e3 	ble.w	801fd30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801fb6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fb6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fb6e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801fb72:	ea5f 422a 	movs.w	r2, sl, asr #16
 801fb76:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fb7a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801fb7e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fb82:	689b      	ldr	r3, [r3, #8]
 801fb84:	f100 8121 	bmi.w	801fdca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801fb88:	f103 39ff 	add.w	r9, r3, #4294967295
 801fb8c:	454a      	cmp	r2, r9
 801fb8e:	f280 811c 	bge.w	801fdca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801fb92:	f1bc 0f00 	cmp.w	ip, #0
 801fb96:	f2c0 8118 	blt.w	801fdca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801fb9a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801fb9e:	45cc      	cmp	ip, r9
 801fba0:	f280 8113 	bge.w	801fdca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801fba4:	b21b      	sxth	r3, r3
 801fba6:	fb0c 2203 	mla	r2, ip, r3, r2
 801fbaa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fbac:	eb04 0902 	add.w	r9, r4, r2
 801fbb0:	5ca2      	ldrb	r2, [r4, r2]
 801fbb2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801fbb6:	2800      	cmp	r0, #0
 801fbb8:	f000 80fe 	beq.w	801fdb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801fbbc:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fbc0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801fbc4:	9211      	str	r2, [sp, #68]	; 0x44
 801fbc6:	b151      	cbz	r1, 801fbde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fbc8:	eb09 0203 	add.w	r2, r9, r3
 801fbcc:	f819 3003 	ldrb.w	r3, [r9, r3]
 801fbd0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fbd4:	930f      	str	r3, [sp, #60]	; 0x3c
 801fbd6:	7853      	ldrb	r3, [r2, #1]
 801fbd8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fbdc:	9312      	str	r3, [sp, #72]	; 0x48
 801fbde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fbe0:	fb10 f201 	smulbb	r2, r0, r1
 801fbe4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801fbe8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fbec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fbf0:	ea4c 0c03 	orr.w	ip, ip, r3
 801fbf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fbf6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fbf8:	041b      	lsls	r3, r3, #16
 801fbfa:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801fbfe:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fc02:	10d2      	asrs	r2, r2, #3
 801fc04:	4323      	orrs	r3, r4
 801fc06:	4353      	muls	r3, r2
 801fc08:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801fc0c:	fb09 330c 	mla	r3, r9, ip, r3
 801fc10:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801fc14:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fc18:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fc1c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801fc20:	f1c1 0c10 	rsb	ip, r1, #16
 801fc24:	ebac 0c00 	sub.w	ip, ip, r0
 801fc28:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801fc2c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801fc30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc32:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801fc36:	0418      	lsls	r0, r3, #16
 801fc38:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fc3c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fc40:	4318      	orrs	r0, r3
 801fc42:	fb02 c200 	mla	r2, r2, r0, ip
 801fc46:	8838      	ldrh	r0, [r7, #0]
 801fc48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fc4a:	0d53      	lsrs	r3, r2, #21
 801fc4c:	1201      	asrs	r1, r0, #8
 801fc4e:	0952      	lsrs	r2, r2, #5
 801fc50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fc54:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fc58:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fc5c:	431a      	orrs	r2, r3
 801fc5e:	fb11 f104 	smulbb	r1, r1, r4
 801fc62:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801fc66:	00c0      	lsls	r0, r0, #3
 801fc68:	b292      	uxth	r2, r2
 801fc6a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fc6e:	b2c0      	uxtb	r0, r0
 801fc70:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801fc74:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801fc78:	fb1e fe04 	smulbb	lr, lr, r4
 801fc7c:	fb10 f004 	smulbb	r0, r0, r4
 801fc80:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fc84:	fb0c 1c03 	mla	ip, ip, r3, r1
 801fc88:	10d1      	asrs	r1, r2, #3
 801fc8a:	00d2      	lsls	r2, r2, #3
 801fc8c:	b2d2      	uxtb	r2, r2
 801fc8e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fc92:	fb01 e103 	mla	r1, r1, r3, lr
 801fc96:	fb02 0303 	mla	r3, r2, r3, r0
 801fc9a:	fa1f fc8c 	uxth.w	ip, ip
 801fc9e:	b29a      	uxth	r2, r3
 801fca0:	f10c 0301 	add.w	r3, ip, #1
 801fca4:	b289      	uxth	r1, r1
 801fca6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fcaa:	1c53      	adds	r3, r2, #1
 801fcac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fcb0:	1c4a      	adds	r2, r1, #1
 801fcb2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fcb6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fcba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fcbe:	0949      	lsrs	r1, r1, #5
 801fcc0:	ea43 030c 	orr.w	r3, r3, ip
 801fcc4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fcc8:	430b      	orrs	r3, r1
 801fcca:	803b      	strh	r3, [r7, #0]
 801fccc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fcce:	3702      	adds	r7, #2
 801fcd0:	449a      	add	sl, r3
 801fcd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fcd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fcd8:	441d      	add	r5, r3
 801fcda:	e742      	b.n	801fb62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fcdc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fcde:	f108 0802 	add.w	r8, r8, #2
 801fce2:	449a      	add	sl, r3
 801fce4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fce6:	441d      	add	r5, r3
 801fce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcea:	3b01      	subs	r3, #1
 801fcec:	9309      	str	r3, [sp, #36]	; 0x24
 801fcee:	e718      	b.n	801fb22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fcf0:	d023      	beq.n	801fd3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcf4:	9825      	ldr	r0, [sp, #148]	; 0x94
 801fcf6:	3b01      	subs	r3, #1
 801fcf8:	fb00 a003 	mla	r0, r0, r3, sl
 801fcfc:	1400      	asrs	r0, r0, #16
 801fcfe:	f53f af2d 	bmi.w	801fb5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd02:	3901      	subs	r1, #1
 801fd04:	4288      	cmp	r0, r1
 801fd06:	f6bf af29 	bge.w	801fb5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd0a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fd0c:	fb01 5303 	mla	r3, r1, r3, r5
 801fd10:	141b      	asrs	r3, r3, #16
 801fd12:	f53f af23 	bmi.w	801fb5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd16:	3a01      	subs	r2, #1
 801fd18:	4293      	cmp	r3, r2
 801fd1a:	f6bf af1f 	bge.w	801fb5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd1e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801fd22:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801fd26:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fd2a:	f1be 0f00 	cmp.w	lr, #0
 801fd2e:	dc6c      	bgt.n	801fe0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd32:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fd36:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fd3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	f340 810e 	ble.w	801ff5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801fd42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fd46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd56:	eef0 6a62 	vmov.f32	s13, s5
 801fd5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd6e:	ee16 aa90 	vmov	sl, s13
 801fd72:	eef0 6a43 	vmov.f32	s13, s6
 801fd76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd7a:	ee12 2a90 	vmov	r2, s5
 801fd7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fd84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd88:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd8c:	ee13 2a10 	vmov	r2, s6
 801fd90:	9325      	str	r3, [sp, #148]	; 0x94
 801fd92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fd94:	ee16 5a90 	vmov	r5, s13
 801fd98:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd9c:	9326      	str	r3, [sp, #152]	; 0x98
 801fd9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fda0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fda2:	3b01      	subs	r3, #1
 801fda4:	930c      	str	r3, [sp, #48]	; 0x30
 801fda6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fda8:	bf08      	it	eq
 801fdaa:	4613      	moveq	r3, r2
 801fdac:	eeb0 3a67 	vmov.f32	s6, s15
 801fdb0:	9309      	str	r3, [sp, #36]	; 0x24
 801fdb2:	eef0 2a47 	vmov.f32	s5, s14
 801fdb6:	e6a6      	b.n	801fb06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fdb8:	2900      	cmp	r1, #0
 801fdba:	f43f af10 	beq.w	801fbde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fdbe:	f819 3003 	ldrb.w	r3, [r9, r3]
 801fdc2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fdc6:	930f      	str	r3, [sp, #60]	; 0x3c
 801fdc8:	e709      	b.n	801fbde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fdca:	f112 0901 	adds.w	r9, r2, #1
 801fdce:	f53f af7d 	bmi.w	801fccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fdd2:	454b      	cmp	r3, r9
 801fdd4:	f6ff af7a 	blt.w	801fccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fdd8:	f11c 0901 	adds.w	r9, ip, #1
 801fddc:	f53f af76 	bmi.w	801fccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fde0:	45ce      	cmp	lr, r9
 801fde2:	f6ff af73 	blt.w	801fccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fde6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fde8:	9202      	str	r2, [sp, #8]
 801fdea:	b21b      	sxth	r3, r3
 801fdec:	fa0f f28e 	sxth.w	r2, lr
 801fdf0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801fdf4:	e9cd c003 	strd	ip, r0, [sp, #12]
 801fdf8:	9201      	str	r2, [sp, #4]
 801fdfa:	9300      	str	r3, [sp, #0]
 801fdfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fdfe:	4633      	mov	r3, r6
 801fe00:	4639      	mov	r1, r7
 801fe02:	9816      	ldr	r0, [sp, #88]	; 0x58
 801fe04:	f7ff fd8e 	bl	801f924 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801fe08:	e760      	b.n	801fccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fe0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fe0c:	ea4f 422a 	mov.w	r2, sl, asr #16
 801fe10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801fe14:	1429      	asrs	r1, r5, #16
 801fe16:	fb03 2101 	mla	r1, r3, r1, r2
 801fe1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fe1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fe1e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801fe22:	440a      	add	r2, r1
 801fe24:	5c61      	ldrb	r1, [r4, r1]
 801fe26:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fe2a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801fe2e:	f1bc 0f00 	cmp.w	ip, #0
 801fe32:	f000 808c 	beq.w	801ff4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801fe36:	7857      	ldrb	r7, [r2, #1]
 801fe38:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801fe3c:	9413      	str	r4, [sp, #76]	; 0x4c
 801fe3e:	b140      	cbz	r0, 801fe52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fe40:	18d7      	adds	r7, r2, r3
 801fe42:	5cd3      	ldrb	r3, [r2, r3]
 801fe44:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fe48:	9310      	str	r3, [sp, #64]	; 0x40
 801fe4a:	787b      	ldrb	r3, [r7, #1]
 801fe4c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fe50:	9314      	str	r3, [sp, #80]	; 0x50
 801fe52:	fb1c f200 	smulbb	r2, ip, r0
 801fe56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fe58:	10d2      	asrs	r2, r2, #3
 801fe5a:	041f      	lsls	r7, r3, #16
 801fe5c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801fe60:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fe64:	431f      	orrs	r7, r3
 801fe66:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801fe6a:	9317      	str	r3, [sp, #92]	; 0x5c
 801fe6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fe6e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fe70:	041b      	lsls	r3, r3, #16
 801fe72:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801fe76:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fe7a:	ea43 030b 	orr.w	r3, r3, fp
 801fe7e:	4353      	muls	r3, r2
 801fe80:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fe82:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801fe86:	fb04 3707 	mla	r7, r4, r7, r3
 801fe8a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fe8e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801fe92:	ea43 0b01 	orr.w	fp, r3, r1
 801fe96:	f1c0 0110 	rsb	r1, r0, #16
 801fe9a:	eba1 0c0c 	sub.w	ip, r1, ip
 801fe9e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801fea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fea4:	fb0c 770b 	mla	r7, ip, fp, r7
 801fea8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801feac:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801feb0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801feb4:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801feb8:	ea4c 0c0b 	orr.w	ip, ip, fp
 801febc:	fb02 770c 	mla	r7, r2, ip, r7
 801fec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fec2:	0d79      	lsrs	r1, r7, #21
 801fec4:	8812      	ldrh	r2, [r2, #0]
 801fec6:	097f      	lsrs	r7, r7, #5
 801fec8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fecc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801fed0:	430f      	orrs	r7, r1
 801fed2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fed4:	1211      	asrs	r1, r2, #8
 801fed6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801feda:	b2bb      	uxth	r3, r7
 801fedc:	fb11 f104 	smulbb	r1, r1, r4
 801fee0:	10d7      	asrs	r7, r2, #3
 801fee2:	00d2      	lsls	r2, r2, #3
 801fee4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fee8:	b2d2      	uxtb	r2, r2
 801feea:	1218      	asrs	r0, r3, #8
 801feec:	fb17 f704 	smulbb	r7, r7, r4
 801fef0:	fb12 f204 	smulbb	r2, r2, r4
 801fef4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fef8:	fb00 1009 	mla	r0, r0, r9, r1
 801fefc:	10d9      	asrs	r1, r3, #3
 801fefe:	00db      	lsls	r3, r3, #3
 801ff00:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ff04:	b2db      	uxtb	r3, r3
 801ff06:	fb01 7109 	mla	r1, r1, r9, r7
 801ff0a:	fb03 2309 	mla	r3, r3, r9, r2
 801ff0e:	b280      	uxth	r0, r0
 801ff10:	b29b      	uxth	r3, r3
 801ff12:	b289      	uxth	r1, r1
 801ff14:	1c42      	adds	r2, r0, #1
 801ff16:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ff1a:	1c4f      	adds	r7, r1, #1
 801ff1c:	1c5a      	adds	r2, r3, #1
 801ff1e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ff22:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801ff26:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ff2a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ff2e:	0949      	lsrs	r1, r1, #5
 801ff30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff32:	4310      	orrs	r0, r2
 801ff34:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ff38:	4308      	orrs	r0, r1
 801ff3a:	f823 0b02 	strh.w	r0, [r3], #2
 801ff3e:	930e      	str	r3, [sp, #56]	; 0x38
 801ff40:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ff42:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ff46:	449a      	add	sl, r3
 801ff48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ff4a:	441d      	add	r5, r3
 801ff4c:	e6ed      	b.n	801fd2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801ff4e:	2800      	cmp	r0, #0
 801ff50:	f43f af7f 	beq.w	801fe52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ff54:	5cd3      	ldrb	r3, [r2, r3]
 801ff56:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ff5a:	9310      	str	r3, [sp, #64]	; 0x40
 801ff5c:	e779      	b.n	801fe52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ff5e:	b019      	add	sp, #100	; 0x64
 801ff60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ff64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff68:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801ff6c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801ff70:	fb08 470e 	mla	r7, r8, lr, r4
 801ff74:	f1b8 0f00 	cmp.w	r8, #0
 801ff78:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801ff7c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801ff80:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801ff84:	eb02 0907 	add.w	r9, r2, r7
 801ff88:	8808      	ldrh	r0, [r1, #0]
 801ff8a:	db67      	blt.n	802005c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801ff8c:	45c2      	cmp	sl, r8
 801ff8e:	dd65      	ble.n	802005c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801ff90:	2c00      	cmp	r4, #0
 801ff92:	db61      	blt.n	8020058 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801ff94:	45a6      	cmp	lr, r4
 801ff96:	dd5f      	ble.n	8020058 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801ff98:	5dd2      	ldrb	r2, [r2, r7]
 801ff9a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801ff9e:	1c62      	adds	r2, r4, #1
 801ffa0:	d45f      	bmi.n	8020062 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ffa2:	4596      	cmp	lr, r2
 801ffa4:	dd5d      	ble.n	8020062 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ffa6:	2d00      	cmp	r5, #0
 801ffa8:	d05b      	beq.n	8020062 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ffaa:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ffae:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801ffb2:	f118 0801 	adds.w	r8, r8, #1
 801ffb6:	d458      	bmi.n	802006a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ffb8:	45c2      	cmp	sl, r8
 801ffba:	dd56      	ble.n	802006a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ffbc:	2e00      	cmp	r6, #0
 801ffbe:	d054      	beq.n	802006a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ffc0:	2c00      	cmp	r4, #0
 801ffc2:	db50      	blt.n	8020066 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ffc4:	45a6      	cmp	lr, r4
 801ffc6:	dd4e      	ble.n	8020066 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ffc8:	f819 200e 	ldrb.w	r2, [r9, lr]
 801ffcc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801ffd0:	3401      	adds	r4, #1
 801ffd2:	d407      	bmi.n	801ffe4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ffd4:	45a6      	cmp	lr, r4
 801ffd6:	dd05      	ble.n	801ffe4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ffd8:	b125      	cbz	r5, 801ffe4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ffda:	44ce      	add	lr, r9
 801ffdc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801ffe0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ffe4:	fb15 f406 	smulbb	r4, r5, r6
 801ffe8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801ffec:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fff0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801fff4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fff8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801fffc:	ea43 0c0c 	orr.w	ip, r3, ip
 8020000:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020004:	f1c6 0310 	rsb	r3, r6, #16
 8020008:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802000c:	1b5b      	subs	r3, r3, r5
 802000e:	ea4e 0707 	orr.w	r7, lr, r7
 8020012:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8020016:	437d      	muls	r5, r7
 8020018:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802001c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8020020:	0403      	lsls	r3, r0, #16
 8020022:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020026:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802002a:	4318      	orrs	r0, r3
 802002c:	fb04 c000 	mla	r0, r4, r0, ip
 8020030:	0413      	lsls	r3, r2, #16
 8020032:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020036:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802003a:	4313      	orrs	r3, r2
 802003c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8020040:	fb06 0003 	mla	r0, r6, r3, r0
 8020044:	0d43      	lsrs	r3, r0, #21
 8020046:	0940      	lsrs	r0, r0, #5
 8020048:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802004c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020050:	4318      	orrs	r0, r3
 8020052:	8008      	strh	r0, [r1, #0]
 8020054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020058:	4684      	mov	ip, r0
 802005a:	e7a0      	b.n	801ff9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 802005c:	4607      	mov	r7, r0
 802005e:	4684      	mov	ip, r0
 8020060:	e7a7      	b.n	801ffb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8020062:	4607      	mov	r7, r0
 8020064:	e7a5      	b.n	801ffb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8020066:	4602      	mov	r2, r0
 8020068:	e7b2      	b.n	801ffd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802006a:	4602      	mov	r2, r0
 802006c:	e7ba      	b.n	801ffe4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0802006e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802006e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020076:	b093      	sub	sp, #76	; 0x4c
 8020078:	920f      	str	r2, [sp, #60]	; 0x3c
 802007a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802007c:	9010      	str	r0, [sp, #64]	; 0x40
 802007e:	6850      	ldr	r0, [r2, #4]
 8020080:	9108      	str	r1, [sp, #32]
 8020082:	9306      	str	r3, [sp, #24]
 8020084:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8020088:	fb00 1303 	mla	r3, r0, r3, r1
 802008c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8020090:	6812      	ldr	r2, [r2, #0]
 8020092:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8020096:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020098:	681b      	ldr	r3, [r3, #0]
 802009a:	9307      	str	r3, [sp, #28]
 802009c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802009e:	685f      	ldr	r7, [r3, #4]
 80200a0:	3704      	adds	r7, #4
 80200a2:	9b08      	ldr	r3, [sp, #32]
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	dc03      	bgt.n	80200b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80200a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	f340 81b2 	ble.w	8020414 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80200b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80200b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80200b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80200ba:	1e48      	subs	r0, r1, #1
 80200bc:	f102 3cff 	add.w	ip, r2, #4294967295
 80200c0:	9b06      	ldr	r3, [sp, #24]
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	f340 80a9 	ble.w	802021a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80200c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80200cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80200d0:	d406      	bmi.n	80200e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80200d2:	4586      	cmp	lr, r0
 80200d4:	da04      	bge.n	80200e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	db02      	blt.n	80200e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80200da:	4563      	cmp	r3, ip
 80200dc:	f2c0 809e 	blt.w	802021c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80200e0:	f11e 0e01 	adds.w	lr, lr, #1
 80200e4:	f100 808f 	bmi.w	8020206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80200e8:	4571      	cmp	r1, lr
 80200ea:	f2c0 808c 	blt.w	8020206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80200ee:	3301      	adds	r3, #1
 80200f0:	f100 8089 	bmi.w	8020206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80200f4:	429a      	cmp	r2, r3
 80200f6:	f2c0 8086 	blt.w	8020206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80200fa:	46c8      	mov	r8, r9
 80200fc:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020100:	f1bb 0f00 	cmp.w	fp, #0
 8020104:	f340 80a6 	ble.w	8020254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020108:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802010a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802010c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020110:	1422      	asrs	r2, r4, #16
 8020112:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020116:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802011a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802011e:	689b      	ldr	r3, [r3, #8]
 8020120:	f100 80e3 	bmi.w	80202ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020124:	f103 3aff 	add.w	sl, r3, #4294967295
 8020128:	4552      	cmp	r2, sl
 802012a:	f280 80de 	bge.w	80202ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802012e:	f1bc 0f00 	cmp.w	ip, #0
 8020132:	f2c0 80da 	blt.w	80202ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020136:	f10e 3aff 	add.w	sl, lr, #4294967295
 802013a:	45d4      	cmp	ip, sl
 802013c:	f280 80d5 	bge.w	80202ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020140:	b21b      	sxth	r3, r3
 8020142:	fb0c 2203 	mla	r2, ip, r3, r2
 8020146:	9d07      	ldr	r5, [sp, #28]
 8020148:	eb05 0a02 	add.w	sl, r5, r2
 802014c:	5caa      	ldrb	r2, [r5, r2]
 802014e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8020152:	2800      	cmp	r0, #0
 8020154:	f000 80c0 	beq.w	80202d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8020158:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802015c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8020160:	920b      	str	r2, [sp, #44]	; 0x2c
 8020162:	b151      	cbz	r1, 802017a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020164:	eb0a 0203 	add.w	r2, sl, r3
 8020168:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802016c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020170:	9309      	str	r3, [sp, #36]	; 0x24
 8020172:	7853      	ldrb	r3, [r2, #1]
 8020174:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020178:	930c      	str	r3, [sp, #48]	; 0x30
 802017a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802017c:	fb10 f201 	smulbb	r2, r0, r1
 8020180:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020184:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020188:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802018c:	ea4c 0c03 	orr.w	ip, ip, r3
 8020190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020194:	041b      	lsls	r3, r3, #16
 8020196:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802019a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802019e:	10d2      	asrs	r2, r2, #3
 80201a0:	432b      	orrs	r3, r5
 80201a2:	4353      	muls	r3, r2
 80201a4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80201a8:	fb0a 330c 	mla	r3, sl, ip, r3
 80201ac:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80201b0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80201b4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80201b8:	ea4c 0e0e 	orr.w	lr, ip, lr
 80201bc:	f1c1 0c10 	rsb	ip, r1, #16
 80201c0:	ebac 0c00 	sub.w	ip, ip, r0
 80201c4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80201c8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80201cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201ce:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80201d2:	0418      	lsls	r0, r3, #16
 80201d4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80201d8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80201dc:	4318      	orrs	r0, r3
 80201de:	fb02 c200 	mla	r2, r2, r0, ip
 80201e2:	0d53      	lsrs	r3, r2, #21
 80201e4:	0952      	lsrs	r2, r2, #5
 80201e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80201ea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80201ee:	431a      	orrs	r2, r3
 80201f0:	f8a8 2000 	strh.w	r2, [r8]
 80201f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80201f6:	f108 0802 	add.w	r8, r8, #2
 80201fa:	441c      	add	r4, r3
 80201fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80201fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020202:	441e      	add	r6, r3
 8020204:	e77c      	b.n	8020100 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020206:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020208:	f109 0902 	add.w	r9, r9, #2
 802020c:	441c      	add	r4, r3
 802020e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020210:	441e      	add	r6, r3
 8020212:	9b06      	ldr	r3, [sp, #24]
 8020214:	3b01      	subs	r3, #1
 8020216:	9306      	str	r3, [sp, #24]
 8020218:	e752      	b.n	80200c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802021a:	d020      	beq.n	802025e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802021c:	9b06      	ldr	r3, [sp, #24]
 802021e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020220:	3b01      	subs	r3, #1
 8020222:	fb00 4003 	mla	r0, r0, r3, r4
 8020226:	1400      	asrs	r0, r0, #16
 8020228:	f53f af67 	bmi.w	80200fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802022c:	3901      	subs	r1, #1
 802022e:	4288      	cmp	r0, r1
 8020230:	f6bf af63 	bge.w	80200fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020234:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020236:	fb01 6303 	mla	r3, r1, r3, r6
 802023a:	141b      	asrs	r3, r3, #16
 802023c:	f53f af5d 	bmi.w	80200fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020240:	3a01      	subs	r2, #1
 8020242:	4293      	cmp	r3, r2
 8020244:	f6bf af59 	bge.w	80200fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020248:	46ca      	mov	sl, r9
 802024a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802024e:	f1b8 0f00 	cmp.w	r8, #0
 8020252:	dc67      	bgt.n	8020324 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020254:	9b06      	ldr	r3, [sp, #24]
 8020256:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802025a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802025e:	9b08      	ldr	r3, [sp, #32]
 8020260:	2b00      	cmp	r3, #0
 8020262:	f340 80d7 	ble.w	8020414 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8020266:	ee30 0a04 	vadd.f32	s0, s0, s8
 802026a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802026e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020272:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020276:	eeb0 6a62 	vmov.f32	s12, s5
 802027a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802027e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020282:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020286:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802028a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802028e:	ee16 4a10 	vmov	r4, s12
 8020292:	eeb0 6a43 	vmov.f32	s12, s6
 8020296:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802029a:	ee12 2a90 	vmov	r2, s5
 802029e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80202ac:	ee13 2a10 	vmov	r2, s6
 80202b0:	931f      	str	r3, [sp, #124]	; 0x7c
 80202b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202b4:	ee16 6a10 	vmov	r6, s12
 80202b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80202bc:	9320      	str	r3, [sp, #128]	; 0x80
 80202be:	9b08      	ldr	r3, [sp, #32]
 80202c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80202c2:	3b01      	subs	r3, #1
 80202c4:	9308      	str	r3, [sp, #32]
 80202c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202c8:	bf08      	it	eq
 80202ca:	4613      	moveq	r3, r2
 80202cc:	eeb0 3a67 	vmov.f32	s6, s15
 80202d0:	9306      	str	r3, [sp, #24]
 80202d2:	eef0 2a47 	vmov.f32	s5, s14
 80202d6:	e6e4      	b.n	80200a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80202d8:	2900      	cmp	r1, #0
 80202da:	f43f af4e 	beq.w	802017a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80202de:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80202e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80202e6:	9309      	str	r3, [sp, #36]	; 0x24
 80202e8:	e747      	b.n	802017a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80202ea:	f112 0a01 	adds.w	sl, r2, #1
 80202ee:	d481      	bmi.n	80201f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80202f0:	4553      	cmp	r3, sl
 80202f2:	f6ff af7f 	blt.w	80201f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80202f6:	f11c 0a01 	adds.w	sl, ip, #1
 80202fa:	f53f af7b 	bmi.w	80201f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80202fe:	45d6      	cmp	lr, sl
 8020300:	f6ff af78 	blt.w	80201f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020304:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8020308:	b21b      	sxth	r3, r3
 802030a:	fa0f f28e 	sxth.w	r2, lr
 802030e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020312:	9201      	str	r2, [sp, #4]
 8020314:	9300      	str	r3, [sp, #0]
 8020316:	9a07      	ldr	r2, [sp, #28]
 8020318:	463b      	mov	r3, r7
 802031a:	4641      	mov	r1, r8
 802031c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802031e:	f7ff fe21 	bl	801ff64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8020322:	e767      	b.n	80201f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020324:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020326:	1422      	asrs	r2, r4, #16
 8020328:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802032c:	1431      	asrs	r1, r6, #16
 802032e:	fb03 2101 	mla	r1, r3, r1, r2
 8020332:	9d07      	ldr	r5, [sp, #28]
 8020334:	9a07      	ldr	r2, [sp, #28]
 8020336:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802033a:	440a      	add	r2, r1
 802033c:	5c69      	ldrb	r1, [r5, r1]
 802033e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020342:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8020346:	f1be 0f00 	cmp.w	lr, #0
 802034a:	d05c      	beq.n	8020406 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802034c:	f892 c001 	ldrb.w	ip, [r2, #1]
 8020350:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8020354:	950d      	str	r5, [sp, #52]	; 0x34
 8020356:	b150      	cbz	r0, 802036e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8020358:	eb02 0c03 	add.w	ip, r2, r3
 802035c:	5cd3      	ldrb	r3, [r2, r3]
 802035e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020362:	930a      	str	r3, [sp, #40]	; 0x28
 8020364:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020368:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802036c:	930e      	str	r3, [sp, #56]	; 0x38
 802036e:	fb1e f200 	smulbb	r2, lr, r0
 8020372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020374:	10d2      	asrs	r2, r2, #3
 8020376:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802037a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802037e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020382:	ea4c 0c03 	orr.w	ip, ip, r3
 8020386:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802038a:	9311      	str	r3, [sp, #68]	; 0x44
 802038c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802038e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020390:	041b      	lsls	r3, r3, #16
 8020392:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8020396:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802039a:	ea43 030b 	orr.w	r3, r3, fp
 802039e:	4353      	muls	r3, r2
 80203a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80203a2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80203a6:	fb05 3c0c 	mla	ip, r5, ip, r3
 80203aa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80203ae:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80203b2:	ea43 0b01 	orr.w	fp, r3, r1
 80203b6:	f1c0 0110 	rsb	r1, r0, #16
 80203ba:	eba1 0e0e 	sub.w	lr, r1, lr
 80203be:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80203c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203c4:	fb0e cc0b 	mla	ip, lr, fp, ip
 80203c8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80203cc:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80203d0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80203d4:	ea4b 0e0e 	orr.w	lr, fp, lr
 80203d8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80203dc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80203e0:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80203e4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80203e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80203ec:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80203f0:	ea43 0c0c 	orr.w	ip, r3, ip
 80203f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80203f6:	f82a cb02 	strh.w	ip, [sl], #2
 80203fa:	441c      	add	r4, r3
 80203fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80203fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8020402:	441e      	add	r6, r3
 8020404:	e723      	b.n	802024e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8020406:	2800      	cmp	r0, #0
 8020408:	d0b1      	beq.n	802036e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802040a:	5cd3      	ldrb	r3, [r2, r3]
 802040c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020410:	930a      	str	r3, [sp, #40]	; 0x28
 8020412:	e7ac      	b.n	802036e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8020414:	b013      	add	sp, #76	; 0x4c
 8020416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802041a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802041a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802041e:	880d      	ldrh	r5, [r1, #0]
 8020420:	b087      	sub	sp, #28
 8020422:	10ef      	asrs	r7, r5, #3
 8020424:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8020428:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802042c:	00ed      	lsls	r5, r5, #3
 802042e:	9701      	str	r7, [sp, #4]
 8020430:	b2ed      	uxtb	r5, r5
 8020432:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8020436:	9502      	str	r5, [sp, #8]
 8020438:	9d01      	ldr	r5, [sp, #4]
 802043a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 802043e:	fb06 0709 	mla	r7, r6, r9, r0
 8020442:	9103      	str	r1, [sp, #12]
 8020444:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8020448:	022d      	lsls	r5, r5, #8
 802044a:	9902      	ldr	r1, [sp, #8]
 802044c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8020450:	430d      	orrs	r5, r1
 8020452:	2e00      	cmp	r6, #0
 8020454:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8020458:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 802045c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8020460:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8020464:	eb02 0c07 	add.w	ip, r2, r7
 8020468:	9505      	str	r5, [sp, #20]
 802046a:	f2c0 80b6 	blt.w	80205da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802046e:	45b3      	cmp	fp, r6
 8020470:	f340 80b3 	ble.w	80205da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8020474:	2800      	cmp	r0, #0
 8020476:	f2c0 80ae 	blt.w	80205d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802047a:	4581      	cmp	r9, r0
 802047c:	f340 80ab 	ble.w	80205d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8020480:	5dd7      	ldrb	r7, [r2, r7]
 8020482:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020486:	441f      	add	r7, r3
 8020488:	1c42      	adds	r2, r0, #1
 802048a:	f100 80a9 	bmi.w	80205e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802048e:	4591      	cmp	r9, r2
 8020490:	f340 80a6 	ble.w	80205e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8020494:	2c00      	cmp	r4, #0
 8020496:	f000 80a3 	beq.w	80205e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802049a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802049e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80204a2:	441d      	add	r5, r3
 80204a4:	3601      	adds	r6, #1
 80204a6:	f100 809f 	bmi.w	80205e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80204aa:	45b3      	cmp	fp, r6
 80204ac:	f340 809c 	ble.w	80205e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80204b0:	f1be 0f00 	cmp.w	lr, #0
 80204b4:	f000 8098 	beq.w	80205e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80204b8:	2800      	cmp	r0, #0
 80204ba:	f2c0 8093 	blt.w	80205e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80204be:	4581      	cmp	r9, r0
 80204c0:	f340 8090 	ble.w	80205e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80204c4:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80204c8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80204cc:	441e      	add	r6, r3
 80204ce:	3001      	adds	r0, #1
 80204d0:	f100 808d 	bmi.w	80205ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80204d4:	4581      	cmp	r9, r0
 80204d6:	f340 808a 	ble.w	80205ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80204da:	2c00      	cmp	r4, #0
 80204dc:	f000 8087 	beq.w	80205ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80204e0:	44e1      	add	r9, ip
 80204e2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80204e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80204ea:	4413      	add	r3, r2
 80204ec:	b2a4      	uxth	r4, r4
 80204ee:	fa1f fe8e 	uxth.w	lr, lr
 80204f2:	fb04 fb0e 	mul.w	fp, r4, lr
 80204f6:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80204fa:	fa1f f08e 	uxth.w	r0, lr
 80204fe:	fa1f fe88 	uxth.w	lr, r8
 8020502:	ea6f 0808 	mvn.w	r8, r8
 8020506:	0124      	lsls	r4, r4, #4
 8020508:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802050c:	eba4 040b 	sub.w	r4, r4, fp
 8020510:	b2a2      	uxth	r2, r4
 8020512:	78ac      	ldrb	r4, [r5, #2]
 8020514:	f897 c002 	ldrb.w	ip, [r7, #2]
 8020518:	4354      	muls	r4, r2
 802051a:	eba9 0900 	sub.w	r9, r9, r0
 802051e:	fa1f f989 	uxth.w	r9, r9
 8020522:	fb09 440c 	mla	r4, r9, ip, r4
 8020526:	f896 c002 	ldrb.w	ip, [r6, #2]
 802052a:	fa5f f888 	uxtb.w	r8, r8
 802052e:	fb00 440c 	mla	r4, r0, ip, r4
 8020532:	f893 c002 	ldrb.w	ip, [r3, #2]
 8020536:	fb1a fa08 	smulbb	sl, sl, r8
 802053a:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802053e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8020542:	fb0c ac0e 	mla	ip, ip, lr, sl
 8020546:	f895 a001 	ldrb.w	sl, [r5, #1]
 802054a:	782d      	ldrb	r5, [r5, #0]
 802054c:	fb02 fa0a 	mul.w	sl, r2, sl
 8020550:	436a      	muls	r2, r5
 8020552:	787c      	ldrb	r4, [r7, #1]
 8020554:	783f      	ldrb	r7, [r7, #0]
 8020556:	fb09 aa04 	mla	sl, r9, r4, sl
 802055a:	fb09 2207 	mla	r2, r9, r7, r2
 802055e:	7874      	ldrb	r4, [r6, #1]
 8020560:	7835      	ldrb	r5, [r6, #0]
 8020562:	fb00 aa04 	mla	sl, r0, r4, sl
 8020566:	fb00 2005 	mla	r0, r0, r5, r2
 802056a:	785c      	ldrb	r4, [r3, #1]
 802056c:	781b      	ldrb	r3, [r3, #0]
 802056e:	fb0b a404 	mla	r4, fp, r4, sl
 8020572:	9901      	ldr	r1, [sp, #4]
 8020574:	fb0b 0b03 	mla	fp, fp, r3, r0
 8020578:	9b02      	ldr	r3, [sp, #8]
 802057a:	fb11 fa08 	smulbb	sl, r1, r8
 802057e:	fb13 f808 	smulbb	r8, r3, r8
 8020582:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8020586:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802058a:	fb04 a40e 	mla	r4, r4, lr, sl
 802058e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8020592:	fa1f fc8c 	uxth.w	ip, ip
 8020596:	f10c 0301 	add.w	r3, ip, #1
 802059a:	fa1f fe8e 	uxth.w	lr, lr
 802059e:	b2a4      	uxth	r4, r4
 80205a0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80205a4:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 80205a8:	f104 0a01 	add.w	sl, r4, #1
 80205ac:	f10e 0c01 	add.w	ip, lr, #1
 80205b0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80205b4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80205b8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80205bc:	0964      	lsrs	r4, r4, #5
 80205be:	ea4c 0c03 	orr.w	ip, ip, r3
 80205c2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80205c6:	9b03      	ldr	r3, [sp, #12]
 80205c8:	ea4c 0c04 	orr.w	ip, ip, r4
 80205cc:	f8a3 c000 	strh.w	ip, [r3]
 80205d0:	b007      	add	sp, #28
 80205d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205d6:	af05      	add	r7, sp, #20
 80205d8:	e756      	b.n	8020488 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80205da:	ad05      	add	r5, sp, #20
 80205dc:	462f      	mov	r7, r5
 80205de:	e761      	b.n	80204a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80205e0:	ad05      	add	r5, sp, #20
 80205e2:	e75f      	b.n	80204a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80205e4:	ae05      	add	r6, sp, #20
 80205e6:	e772      	b.n	80204ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80205e8:	ab05      	add	r3, sp, #20
 80205ea:	461e      	mov	r6, r3
 80205ec:	e77e      	b.n	80204ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80205ee:	ab05      	add	r3, sp, #20
 80205f0:	e77c      	b.n	80204ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080205f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80205f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205f6:	b095      	sub	sp, #84	; 0x54
 80205f8:	9212      	str	r2, [sp, #72]	; 0x48
 80205fa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80205fc:	9013      	str	r0, [sp, #76]	; 0x4c
 80205fe:	9309      	str	r3, [sp, #36]	; 0x24
 8020600:	6850      	ldr	r0, [r2, #4]
 8020602:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8020606:	910e      	str	r1, [sp, #56]	; 0x38
 8020608:	930f      	str	r3, [sp, #60]	; 0x3c
 802060a:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 802060e:	fb00 1303 	mla	r3, r0, r3, r1
 8020612:	6812      	ldr	r2, [r2, #0]
 8020614:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020618:	930a      	str	r3, [sp, #40]	; 0x28
 802061a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	930d      	str	r3, [sp, #52]	; 0x34
 8020620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020622:	685c      	ldr	r4, [r3, #4]
 8020624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020626:	3404      	adds	r4, #4
 8020628:	43db      	mvns	r3, r3
 802062a:	b2db      	uxtb	r3, r3
 802062c:	930b      	str	r3, [sp, #44]	; 0x2c
 802062e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020630:	2b00      	cmp	r3, #0
 8020632:	dc03      	bgt.n	802063c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020636:	2b00      	cmp	r3, #0
 8020638:	f340 8255 	ble.w	8020ae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802063c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802063e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020642:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020646:	1e48      	subs	r0, r1, #1
 8020648:	1e55      	subs	r5, r2, #1
 802064a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802064c:	2b00      	cmp	r3, #0
 802064e:	f340 80f9 	ble.w	8020844 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020652:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8020654:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020656:	1436      	asrs	r6, r6, #16
 8020658:	ea4f 4323 	mov.w	r3, r3, asr #16
 802065c:	d406      	bmi.n	802066c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802065e:	4286      	cmp	r6, r0
 8020660:	da04      	bge.n	802066c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020662:	2b00      	cmp	r3, #0
 8020664:	db02      	blt.n	802066c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020666:	42ab      	cmp	r3, r5
 8020668:	f2c0 80ed 	blt.w	8020846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802066c:	3601      	adds	r6, #1
 802066e:	f100 80da 	bmi.w	8020826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020672:	42b1      	cmp	r1, r6
 8020674:	f2c0 80d7 	blt.w	8020826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020678:	3301      	adds	r3, #1
 802067a:	f100 80d4 	bmi.w	8020826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802067e:	429a      	cmp	r2, r3
 8020680:	f2c0 80d1 	blt.w	8020826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020686:	9311      	str	r3, [sp, #68]	; 0x44
 8020688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802068a:	930c      	str	r3, [sp, #48]	; 0x30
 802068c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802068e:	2b00      	cmp	r3, #0
 8020690:	f340 80fa 	ble.w	8020888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020694:	9826      	ldr	r0, [sp, #152]	; 0x98
 8020696:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020698:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802069a:	68c6      	ldr	r6, [r0, #12]
 802069c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802069e:	141d      	asrs	r5, r3, #16
 80206a0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80206a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80206a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80206a8:	1400      	asrs	r0, r0, #16
 80206aa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80206ae:	6892      	ldr	r2, [r2, #8]
 80206b0:	f100 813e 	bmi.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80206b4:	1e57      	subs	r7, r2, #1
 80206b6:	42b8      	cmp	r0, r7
 80206b8:	f280 813a 	bge.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80206bc:	2d00      	cmp	r5, #0
 80206be:	f2c0 8137 	blt.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80206c2:	1e77      	subs	r7, r6, #1
 80206c4:	42bd      	cmp	r5, r7
 80206c6:	f280 8133 	bge.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80206ca:	b212      	sxth	r2, r2
 80206cc:	fb05 0002 	mla	r0, r5, r2, r0
 80206d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80206d2:	f815 a000 	ldrb.w	sl, [r5, r0]
 80206d6:	182e      	adds	r6, r5, r0
 80206d8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80206dc:	eb04 050a 	add.w	r5, r4, sl
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	f000 8117 	beq.w	8020914 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206e6:	f896 c001 	ldrb.w	ip, [r6, #1]
 80206ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80206ee:	44a4      	add	ip, r4
 80206f0:	2900      	cmp	r1, #0
 80206f2:	f000 8117 	beq.w	8020924 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80206f6:	18b0      	adds	r0, r6, r2
 80206f8:	7840      	ldrb	r0, [r0, #1]
 80206fa:	5cb2      	ldrb	r2, [r6, r2]
 80206fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020700:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020704:	4422      	add	r2, r4
 8020706:	4420      	add	r0, r4
 8020708:	b29b      	uxth	r3, r3
 802070a:	b289      	uxth	r1, r1
 802070c:	fb03 f901 	mul.w	r9, r3, r1
 8020710:	011b      	lsls	r3, r3, #4
 8020712:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8020716:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 802071a:	eba3 0309 	sub.w	r3, r3, r9
 802071e:	b29b      	uxth	r3, r3
 8020720:	435f      	muls	r7, r3
 8020722:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020726:	b289      	uxth	r1, r1
 8020728:	f895 b002 	ldrb.w	fp, [r5, #2]
 802072c:	eba8 0801 	sub.w	r8, r8, r1
 8020730:	fa1f f888 	uxth.w	r8, r8
 8020734:	fb08 770b 	mla	r7, r8, fp, r7
 8020738:	f892 b002 	ldrb.w	fp, [r2, #2]
 802073c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802073e:	fb01 770b 	mla	r7, r1, fp, r7
 8020742:	f8b6 e000 	ldrh.w	lr, [r6]
 8020746:	f890 b002 	ldrb.w	fp, [r0, #2]
 802074a:	9310      	str	r3, [sp, #64]	; 0x40
 802074c:	fb09 770b 	mla	r7, r9, fp, r7
 8020750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020752:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8020756:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802075a:	fb1b fb03 	smulbb	fp, fp, r3
 802075e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8020762:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020766:	fb07 b706 	mla	r7, r7, r6, fp
 802076a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802076c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8020770:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8020774:	f89c c000 	ldrb.w	ip, [ip]
 8020778:	435d      	muls	r5, r3
 802077a:	fb08 550b 	mla	r5, r8, fp, r5
 802077e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020784:	fb01 550b 	mla	r5, r1, fp, r5
 8020788:	f890 b001 	ldrb.w	fp, [r0, #1]
 802078c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8020790:	fb09 550b 	mla	r5, r9, fp, r5
 8020794:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8020798:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802079c:	fb1b fb03 	smulbb	fp, fp, r3
 80207a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80207a6:	fb03 f30c 	mul.w	r3, r3, ip
 80207aa:	fb08 330a 	mla	r3, r8, sl, r3
 80207ae:	f892 c000 	ldrb.w	ip, [r2]
 80207b2:	fa5f fe8e 	uxtb.w	lr, lr
 80207b6:	fb01 330c 	mla	r3, r1, ip, r3
 80207ba:	f890 c000 	ldrb.w	ip, [r0]
 80207be:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80207c2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80207c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80207c8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80207cc:	fb1e fe03 	smulbb	lr, lr, r3
 80207d0:	fb05 b506 	mla	r5, r5, r6, fp
 80207d4:	fb0c e606 	mla	r6, ip, r6, lr
 80207d8:	b2bf      	uxth	r7, r7
 80207da:	1c7b      	adds	r3, r7, #1
 80207dc:	b2ad      	uxth	r5, r5
 80207de:	b2b6      	uxth	r6, r6
 80207e0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80207e4:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 80207e8:	f105 0b01 	add.w	fp, r5, #1
 80207ec:	1c77      	adds	r7, r6, #1
 80207ee:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80207f2:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80207f6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80207fa:	096d      	lsrs	r5, r5, #5
 80207fc:	431f      	orrs	r7, r3
 80207fe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020804:	433d      	orrs	r5, r7
 8020806:	801d      	strh	r5, [r3, #0]
 8020808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802080a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802080c:	3302      	adds	r3, #2
 802080e:	930c      	str	r3, [sp, #48]	; 0x30
 8020810:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020812:	4413      	add	r3, r2
 8020814:	931f      	str	r3, [sp, #124]	; 0x7c
 8020816:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020818:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802081a:	4413      	add	r3, r2
 802081c:	9320      	str	r3, [sp, #128]	; 0x80
 802081e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020820:	3b01      	subs	r3, #1
 8020822:	9311      	str	r3, [sp, #68]	; 0x44
 8020824:	e732      	b.n	802068c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020826:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020828:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802082a:	4433      	add	r3, r6
 802082c:	931f      	str	r3, [sp, #124]	; 0x7c
 802082e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8020830:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020832:	4433      	add	r3, r6
 8020834:	9320      	str	r3, [sp, #128]	; 0x80
 8020836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020838:	3b01      	subs	r3, #1
 802083a:	9309      	str	r3, [sp, #36]	; 0x24
 802083c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802083e:	3302      	adds	r3, #2
 8020840:	930a      	str	r3, [sp, #40]	; 0x28
 8020842:	e702      	b.n	802064a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020844:	d027      	beq.n	8020896 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8020846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020848:	9821      	ldr	r0, [sp, #132]	; 0x84
 802084a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802084c:	3b01      	subs	r3, #1
 802084e:	fb00 5003 	mla	r0, r0, r3, r5
 8020852:	1400      	asrs	r0, r0, #16
 8020854:	f53f af16 	bmi.w	8020684 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020858:	3901      	subs	r1, #1
 802085a:	4288      	cmp	r0, r1
 802085c:	f6bf af12 	bge.w	8020684 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020860:	9922      	ldr	r1, [sp, #136]	; 0x88
 8020862:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020864:	fb01 0303 	mla	r3, r1, r3, r0
 8020868:	141b      	asrs	r3, r3, #16
 802086a:	f53f af0b 	bmi.w	8020684 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802086e:	3a01      	subs	r2, #1
 8020870:	4293      	cmp	r3, r2
 8020872:	f6bf af07 	bge.w	8020684 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020878:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 802087c:	9311      	str	r3, [sp, #68]	; 0x44
 802087e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020880:	930c      	str	r3, [sp, #48]	; 0x30
 8020882:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020884:	2b00      	cmp	r3, #0
 8020886:	dc70      	bgt.n	802096a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8020888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802088a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802088c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020890:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020894:	930a      	str	r3, [sp, #40]	; 0x28
 8020896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020898:	2b00      	cmp	r3, #0
 802089a:	f340 8124 	ble.w	8020ae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802089e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80208a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80208ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80208b2:	eef0 6a62 	vmov.f32	s13, s5
 80208b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80208ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80208be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80208c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80208ca:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80208ce:	eef0 6a43 	vmov.f32	s13, s6
 80208d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80208d6:	ee12 2a90 	vmov	r2, s5
 80208da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80208de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80208e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80208e8:	ee13 2a10 	vmov	r2, s6
 80208ec:	9321      	str	r3, [sp, #132]	; 0x84
 80208ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80208f0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80208f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80208f8:	9322      	str	r3, [sp, #136]	; 0x88
 80208fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80208fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80208fe:	3b01      	subs	r3, #1
 8020900:	930e      	str	r3, [sp, #56]	; 0x38
 8020902:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020904:	bf08      	it	eq
 8020906:	4613      	moveq	r3, r2
 8020908:	eeb0 3a67 	vmov.f32	s6, s15
 802090c:	9309      	str	r3, [sp, #36]	; 0x24
 802090e:	eef0 2a47 	vmov.f32	s5, s14
 8020912:	e68c      	b.n	802062e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020914:	b149      	cbz	r1, 802092a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8020916:	4628      	mov	r0, r5
 8020918:	5cb2      	ldrb	r2, [r6, r2]
 802091a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802091e:	4422      	add	r2, r4
 8020920:	46ac      	mov	ip, r5
 8020922:	e6f1      	b.n	8020708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020924:	4628      	mov	r0, r5
 8020926:	462a      	mov	r2, r5
 8020928:	e6ee      	b.n	8020708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802092a:	4628      	mov	r0, r5
 802092c:	462a      	mov	r2, r5
 802092e:	e7f7      	b.n	8020920 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8020930:	1c47      	adds	r7, r0, #1
 8020932:	f53f af69 	bmi.w	8020808 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020936:	42ba      	cmp	r2, r7
 8020938:	f6ff af66 	blt.w	8020808 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802093c:	1c6f      	adds	r7, r5, #1
 802093e:	f53f af63 	bmi.w	8020808 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020942:	42be      	cmp	r6, r7
 8020944:	f6ff af60 	blt.w	8020808 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020948:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802094a:	b236      	sxth	r6, r6
 802094c:	b212      	sxth	r2, r2
 802094e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8020952:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8020956:	9002      	str	r0, [sp, #8]
 8020958:	9200      	str	r2, [sp, #0]
 802095a:	9601      	str	r6, [sp, #4]
 802095c:	4623      	mov	r3, r4
 802095e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8020962:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020964:	f7ff fd59 	bl	802041a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8020968:	e74e      	b.n	8020808 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802096a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802096c:	9820      	ldr	r0, [sp, #128]	; 0x80
 802096e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020972:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020974:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8020976:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802097a:	142d      	asrs	r5, r5, #16
 802097c:	1400      	asrs	r0, r0, #16
 802097e:	fb02 5000 	mla	r0, r2, r0, r5
 8020982:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020984:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020986:	f815 9000 	ldrb.w	r9, [r5, r0]
 802098a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802098e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020992:	182e      	adds	r6, r5, r0
 8020994:	eb04 0509 	add.w	r5, r4, r9
 8020998:	2b00      	cmp	r3, #0
 802099a:	f000 8096 	beq.w	8020aca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802099e:	7877      	ldrb	r7, [r6, #1]
 80209a0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80209a4:	4427      	add	r7, r4
 80209a6:	2900      	cmp	r1, #0
 80209a8:	f000 8097 	beq.w	8020ada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 80209ac:	18b0      	adds	r0, r6, r2
 80209ae:	7840      	ldrb	r0, [r0, #1]
 80209b0:	5cb2      	ldrb	r2, [r6, r2]
 80209b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80209b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80209ba:	4422      	add	r2, r4
 80209bc:	4420      	add	r0, r4
 80209be:	b29b      	uxth	r3, r3
 80209c0:	b289      	uxth	r1, r1
 80209c2:	fb03 f801 	mul.w	r8, r3, r1
 80209c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80209c8:	011b      	lsls	r3, r3, #4
 80209ca:	f8b6 c000 	ldrh.w	ip, [r6]
 80209ce:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80209d2:	78be      	ldrb	r6, [r7, #2]
 80209d4:	eba3 0308 	sub.w	r3, r3, r8
 80209d8:	b29b      	uxth	r3, r3
 80209da:	435e      	muls	r6, r3
 80209dc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80209e0:	b289      	uxth	r1, r1
 80209e2:	f895 b002 	ldrb.w	fp, [r5, #2]
 80209e6:	ebae 0e01 	sub.w	lr, lr, r1
 80209ea:	fa1f fe8e 	uxth.w	lr, lr
 80209ee:	fb0e 660b 	mla	r6, lr, fp, r6
 80209f2:	f892 b002 	ldrb.w	fp, [r2, #2]
 80209f6:	9310      	str	r3, [sp, #64]	; 0x40
 80209f8:	fb01 660b 	mla	r6, r1, fp, r6
 80209fc:	f890 b002 	ldrb.w	fp, [r0, #2]
 8020a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a02:	fb08 660b 	mla	r6, r8, fp, r6
 8020a06:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8020a0a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8020a0e:	fb1b fb03 	smulbb	fp, fp, r3
 8020a12:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020a16:	fb06 b60a 	mla	r6, r6, sl, fp
 8020a1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a1c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8020a20:	787d      	ldrb	r5, [r7, #1]
 8020a22:	783f      	ldrb	r7, [r7, #0]
 8020a24:	435d      	muls	r5, r3
 8020a26:	fb0e 550b 	mla	r5, lr, fp, r5
 8020a2a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a30:	fb01 550b 	mla	r5, r1, fp, r5
 8020a34:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020a38:	f814 9009 	ldrb.w	r9, [r4, r9]
 8020a3c:	fb08 550b 	mla	r5, r8, fp, r5
 8020a40:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8020a44:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020a48:	fb1b fb03 	smulbb	fp, fp, r3
 8020a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a4e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020a52:	437b      	muls	r3, r7
 8020a54:	fb0e 3309 	mla	r3, lr, r9, r3
 8020a58:	7817      	ldrb	r7, [r2, #0]
 8020a5a:	fa5f fc8c 	uxtb.w	ip, ip
 8020a5e:	fb01 3307 	mla	r3, r1, r7, r3
 8020a62:	7807      	ldrb	r7, [r0, #0]
 8020a64:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020a68:	fb08 3707 	mla	r7, r8, r7, r3
 8020a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a6e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020a72:	fb1c fc03 	smulbb	ip, ip, r3
 8020a76:	fb05 b50a 	mla	r5, r5, sl, fp
 8020a7a:	fb07 c70a 	mla	r7, r7, sl, ip
 8020a7e:	b2b6      	uxth	r6, r6
 8020a80:	b2ad      	uxth	r5, r5
 8020a82:	b2bf      	uxth	r7, r7
 8020a84:	1c73      	adds	r3, r6, #1
 8020a86:	1c7a      	adds	r2, r7, #1
 8020a88:	f105 0b01 	add.w	fp, r5, #1
 8020a8c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020a90:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8020a94:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8020a98:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020a9c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020aa0:	096d      	lsrs	r5, r5, #5
 8020aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020aa4:	4316      	orrs	r6, r2
 8020aa6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020aaa:	432e      	orrs	r6, r5
 8020aac:	f823 6b02 	strh.w	r6, [r3], #2
 8020ab0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8020ab4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020ab6:	4413      	add	r3, r2
 8020ab8:	931f      	str	r3, [sp, #124]	; 0x7c
 8020aba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020abc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020abe:	4413      	add	r3, r2
 8020ac0:	9320      	str	r3, [sp, #128]	; 0x80
 8020ac2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020ac4:	3b01      	subs	r3, #1
 8020ac6:	9311      	str	r3, [sp, #68]	; 0x44
 8020ac8:	e6db      	b.n	8020882 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8020aca:	b149      	cbz	r1, 8020ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8020acc:	4628      	mov	r0, r5
 8020ace:	5cb2      	ldrb	r2, [r6, r2]
 8020ad0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020ad4:	4422      	add	r2, r4
 8020ad6:	462f      	mov	r7, r5
 8020ad8:	e771      	b.n	80209be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8020ada:	4628      	mov	r0, r5
 8020adc:	462a      	mov	r2, r5
 8020ade:	e76e      	b.n	80209be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8020ae0:	4628      	mov	r0, r5
 8020ae2:	462a      	mov	r2, r5
 8020ae4:	e7f7      	b.n	8020ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8020ae6:	b015      	add	sp, #84	; 0x54
 8020ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020aec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8020aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020af0:	880f      	ldrh	r7, [r1, #0]
 8020af2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020af6:	023c      	lsls	r4, r7, #8
 8020af8:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8020afc:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8020b00:	fb05 ca0e 	mla	sl, r5, lr, ip
 8020b04:	017c      	lsls	r4, r7, #5
 8020b06:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8020b0a:	00ff      	lsls	r7, r7, #3
 8020b0c:	ea4b 0404 	orr.w	r4, fp, r4
 8020b10:	b2ff      	uxtb	r7, r7
 8020b12:	4327      	orrs	r7, r4
 8020b14:	2d00      	cmp	r5, #0
 8020b16:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020b1a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8020b1e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020b22:	eb02 080a 	add.w	r8, r2, sl
 8020b26:	9701      	str	r7, [sp, #4]
 8020b28:	db7e      	blt.n	8020c28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020b2a:	45a9      	cmp	r9, r5
 8020b2c:	dd7c      	ble.n	8020c28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020b2e:	f1bc 0f00 	cmp.w	ip, #0
 8020b32:	db77      	blt.n	8020c24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8020b34:	45e6      	cmp	lr, ip
 8020b36:	dd75      	ble.n	8020c24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8020b38:	f812 700a 	ldrb.w	r7, [r2, sl]
 8020b3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020b40:	441f      	add	r7, r3
 8020b42:	f11c 0201 	adds.w	r2, ip, #1
 8020b46:	d472      	bmi.n	8020c2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020b48:	4596      	cmp	lr, r2
 8020b4a:	dd70      	ble.n	8020c2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020b4c:	2800      	cmp	r0, #0
 8020b4e:	d06e      	beq.n	8020c2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020b50:	f898 4001 	ldrb.w	r4, [r8, #1]
 8020b54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020b58:	441c      	add	r4, r3
 8020b5a:	3501      	adds	r5, #1
 8020b5c:	d46b      	bmi.n	8020c36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020b5e:	45a9      	cmp	r9, r5
 8020b60:	dd69      	ble.n	8020c36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020b62:	2e00      	cmp	r6, #0
 8020b64:	d067      	beq.n	8020c36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020b66:	f1bc 0f00 	cmp.w	ip, #0
 8020b6a:	db62      	blt.n	8020c32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020b6c:	45e6      	cmp	lr, ip
 8020b6e:	dd60      	ble.n	8020c32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020b70:	f818 500e 	ldrb.w	r5, [r8, lr]
 8020b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020b78:	441d      	add	r5, r3
 8020b7a:	f11c 0201 	adds.w	r2, ip, #1
 8020b7e:	d45d      	bmi.n	8020c3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020b80:	4596      	cmp	lr, r2
 8020b82:	dd5b      	ble.n	8020c3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020b84:	2800      	cmp	r0, #0
 8020b86:	d059      	beq.n	8020c3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020b88:	44c6      	add	lr, r8
 8020b8a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020b8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b92:	4413      	add	r3, r2
 8020b94:	b280      	uxth	r0, r0
 8020b96:	b2b2      	uxth	r2, r6
 8020b98:	fb00 f602 	mul.w	r6, r0, r2
 8020b9c:	0100      	lsls	r0, r0, #4
 8020b9e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8020ba2:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8020ba6:	1b80      	subs	r0, r0, r6
 8020ba8:	fa1f fc82 	uxth.w	ip, r2
 8020bac:	b282      	uxth	r2, r0
 8020bae:	78a0      	ldrb	r0, [r4, #2]
 8020bb0:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020bb4:	4350      	muls	r0, r2
 8020bb6:	eba8 080c 	sub.w	r8, r8, ip
 8020bba:	fa1f f888 	uxth.w	r8, r8
 8020bbe:	fb08 0e0e 	mla	lr, r8, lr, r0
 8020bc2:	78a8      	ldrb	r0, [r5, #2]
 8020bc4:	f897 9000 	ldrb.w	r9, [r7]
 8020bc8:	fb0c e000 	mla	r0, ip, r0, lr
 8020bcc:	f893 e002 	ldrb.w	lr, [r3, #2]
 8020bd0:	787f      	ldrb	r7, [r7, #1]
 8020bd2:	fb06 0e0e 	mla	lr, r6, lr, r0
 8020bd6:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8020bda:	f894 e000 	ldrb.w	lr, [r4]
 8020bde:	fb02 fe0e 	mul.w	lr, r2, lr
 8020be2:	fb08 e909 	mla	r9, r8, r9, lr
 8020be6:	f895 e000 	ldrb.w	lr, [r5]
 8020bea:	fb0c 990e 	mla	r9, ip, lr, r9
 8020bee:	f893 e000 	ldrb.w	lr, [r3]
 8020bf2:	785b      	ldrb	r3, [r3, #1]
 8020bf4:	fb06 9e0e 	mla	lr, r6, lr, r9
 8020bf8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020bfc:	ea4e 0e00 	orr.w	lr, lr, r0
 8020c00:	7860      	ldrb	r0, [r4, #1]
 8020c02:	4350      	muls	r0, r2
 8020c04:	fb08 0007 	mla	r0, r8, r7, r0
 8020c08:	786a      	ldrb	r2, [r5, #1]
 8020c0a:	fb0c 0202 	mla	r2, ip, r2, r0
 8020c0e:	fb06 2303 	mla	r3, r6, r3, r2
 8020c12:	095b      	lsrs	r3, r3, #5
 8020c14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020c18:	ea4e 0303 	orr.w	r3, lr, r3
 8020c1c:	800b      	strh	r3, [r1, #0]
 8020c1e:	b003      	add	sp, #12
 8020c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c24:	af01      	add	r7, sp, #4
 8020c26:	e78c      	b.n	8020b42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8020c28:	ac01      	add	r4, sp, #4
 8020c2a:	4627      	mov	r7, r4
 8020c2c:	e795      	b.n	8020b5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8020c2e:	ac01      	add	r4, sp, #4
 8020c30:	e793      	b.n	8020b5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8020c32:	ad01      	add	r5, sp, #4
 8020c34:	e7a1      	b.n	8020b7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8020c36:	ab01      	add	r3, sp, #4
 8020c38:	461d      	mov	r5, r3
 8020c3a:	e7ab      	b.n	8020b94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8020c3c:	ab01      	add	r3, sp, #4
 8020c3e:	e7a9      	b.n	8020b94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08020c40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c44:	b08f      	sub	sp, #60	; 0x3c
 8020c46:	920c      	str	r2, [sp, #48]	; 0x30
 8020c48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020c4a:	900d      	str	r0, [sp, #52]	; 0x34
 8020c4c:	6850      	ldr	r0, [r2, #4]
 8020c4e:	910a      	str	r1, [sp, #40]	; 0x28
 8020c50:	9306      	str	r3, [sp, #24]
 8020c52:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8020c56:	fb00 1303 	mla	r3, r0, r3, r1
 8020c5a:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8020c5e:	6812      	ldr	r2, [r2, #0]
 8020c60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020c64:	9307      	str	r3, [sp, #28]
 8020c66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c68:	681b      	ldr	r3, [r3, #0]
 8020c6a:	9308      	str	r3, [sp, #32]
 8020c6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c6e:	685c      	ldr	r4, [r3, #4]
 8020c70:	3404      	adds	r4, #4
 8020c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c74:	2b00      	cmp	r3, #0
 8020c76:	dc03      	bgt.n	8020c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c7a:	2b00      	cmp	r3, #0
 8020c7c:	f340 81d6 	ble.w	802102c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8020c80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020c8a:	1e48      	subs	r0, r1, #1
 8020c8c:	1e56      	subs	r6, r2, #1
 8020c8e:	9b06      	ldr	r3, [sp, #24]
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	f340 80b7 	ble.w	8020e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8020c96:	ea5f 472b 	movs.w	r7, fp, asr #16
 8020c9a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020c9e:	d406      	bmi.n	8020cae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020ca0:	4287      	cmp	r7, r0
 8020ca2:	da04      	bge.n	8020cae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	db02      	blt.n	8020cae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020ca8:	42b3      	cmp	r3, r6
 8020caa:	f2c0 80ac 	blt.w	8020e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8020cae:	3701      	adds	r7, #1
 8020cb0:	f100 809d 	bmi.w	8020dee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020cb4:	42b9      	cmp	r1, r7
 8020cb6:	f2c0 809a 	blt.w	8020dee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020cba:	3301      	adds	r3, #1
 8020cbc:	f100 8097 	bmi.w	8020dee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020cc0:	429a      	cmp	r2, r3
 8020cc2:	f2c0 8094 	blt.w	8020dee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020cc6:	9b06      	ldr	r3, [sp, #24]
 8020cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8020cca:	9b07      	ldr	r3, [sp, #28]
 8020ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8020cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	f340 80b5 	ble.w	8020e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020cd6:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020cd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020cda:	68c7      	ldr	r7, [r0, #12]
 8020cdc:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020ce0:	ea4f 4625 	mov.w	r6, r5, asr #16
 8020ce4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020ce8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020cec:	6892      	ldr	r2, [r2, #8]
 8020cee:	f100 80fb 	bmi.w	8020ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020cf2:	f102 3cff 	add.w	ip, r2, #4294967295
 8020cf6:	4560      	cmp	r0, ip
 8020cf8:	f280 80f6 	bge.w	8020ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020cfc:	2e00      	cmp	r6, #0
 8020cfe:	f2c0 80f3 	blt.w	8020ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020d02:	f107 3cff 	add.w	ip, r7, #4294967295
 8020d06:	4566      	cmp	r6, ip
 8020d08:	f280 80ee 	bge.w	8020ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020d0c:	b212      	sxth	r2, r2
 8020d0e:	fb06 0002 	mla	r0, r6, r2, r0
 8020d12:	9e08      	ldr	r6, [sp, #32]
 8020d14:	1837      	adds	r7, r6, r0
 8020d16:	5c30      	ldrb	r0, [r6, r0]
 8020d18:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8020d1c:	eb04 0c08 	add.w	ip, r4, r8
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	f000 80d3 	beq.w	8020ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8020d26:	787e      	ldrb	r6, [r7, #1]
 8020d28:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020d2c:	4426      	add	r6, r4
 8020d2e:	2900      	cmp	r1, #0
 8020d30:	f000 80d4 	beq.w	8020edc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8020d34:	18b8      	adds	r0, r7, r2
 8020d36:	7840      	ldrb	r0, [r0, #1]
 8020d38:	5cba      	ldrb	r2, [r7, r2]
 8020d3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020d3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d42:	4422      	add	r2, r4
 8020d44:	4420      	add	r0, r4
 8020d46:	b29b      	uxth	r3, r3
 8020d48:	b289      	uxth	r1, r1
 8020d4a:	fb03 f901 	mul.w	r9, r3, r1
 8020d4e:	011b      	lsls	r3, r3, #4
 8020d50:	78b7      	ldrb	r7, [r6, #2]
 8020d52:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020d56:	eba3 0309 	sub.w	r3, r3, r9
 8020d5a:	b29b      	uxth	r3, r3
 8020d5c:	435f      	muls	r7, r3
 8020d5e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020d62:	b289      	uxth	r1, r1
 8020d64:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020d68:	ebae 0e01 	sub.w	lr, lr, r1
 8020d6c:	fa1f fe8e 	uxth.w	lr, lr
 8020d70:	fb0e 770a 	mla	r7, lr, sl, r7
 8020d74:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020d78:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020d7c:	fb01 770a 	mla	r7, r1, sl, r7
 8020d80:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020d84:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020d88:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020d8c:	f896 8000 	ldrb.w	r8, [r6]
 8020d90:	7876      	ldrb	r6, [r6, #1]
 8020d92:	fb03 f808 	mul.w	r8, r3, r8
 8020d96:	fb0e 8807 	mla	r8, lr, r7, r8
 8020d9a:	7817      	ldrb	r7, [r2, #0]
 8020d9c:	4373      	muls	r3, r6
 8020d9e:	fb01 8807 	mla	r8, r1, r7, r8
 8020da2:	7807      	ldrb	r7, [r0, #0]
 8020da4:	fb0e 330c 	mla	r3, lr, ip, r3
 8020da8:	fb09 8707 	mla	r7, r9, r7, r8
 8020dac:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020db0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020db4:	ea47 070a 	orr.w	r7, r7, sl
 8020db8:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020dbc:	fb01 310a 	mla	r1, r1, sl, r3
 8020dc0:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dc6:	fb09 1a0a 	mla	sl, r9, sl, r1
 8020dca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020dce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020dd2:	ea47 070a 	orr.w	r7, r7, sl
 8020dd6:	801f      	strh	r7, [r3, #0]
 8020dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dda:	3302      	adds	r3, #2
 8020ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8020dde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020de0:	449b      	add	fp, r3
 8020de2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020de4:	441d      	add	r5, r3
 8020de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020de8:	3b01      	subs	r3, #1
 8020dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8020dec:	e76f      	b.n	8020cce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020df0:	449b      	add	fp, r3
 8020df2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020df4:	441d      	add	r5, r3
 8020df6:	9b06      	ldr	r3, [sp, #24]
 8020df8:	3b01      	subs	r3, #1
 8020dfa:	9306      	str	r3, [sp, #24]
 8020dfc:	9b07      	ldr	r3, [sp, #28]
 8020dfe:	3302      	adds	r3, #2
 8020e00:	9307      	str	r3, [sp, #28]
 8020e02:	e744      	b.n	8020c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020e04:	d023      	beq.n	8020e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8020e06:	9b06      	ldr	r3, [sp, #24]
 8020e08:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020e0a:	3b01      	subs	r3, #1
 8020e0c:	fb00 b003 	mla	r0, r0, r3, fp
 8020e10:	1400      	asrs	r0, r0, #16
 8020e12:	f53f af58 	bmi.w	8020cc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020e16:	3901      	subs	r1, #1
 8020e18:	4288      	cmp	r0, r1
 8020e1a:	f6bf af54 	bge.w	8020cc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020e1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020e20:	fb01 5303 	mla	r3, r1, r3, r5
 8020e24:	141b      	asrs	r3, r3, #16
 8020e26:	f53f af4e 	bmi.w	8020cc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020e2a:	3a01      	subs	r2, #1
 8020e2c:	4293      	cmp	r3, r2
 8020e2e:	f6bf af4a 	bge.w	8020cc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020e32:	9b06      	ldr	r3, [sp, #24]
 8020e34:	9309      	str	r3, [sp, #36]	; 0x24
 8020e36:	9b07      	ldr	r3, [sp, #28]
 8020e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	dc70      	bgt.n	8020f22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8020e40:	9b06      	ldr	r3, [sp, #24]
 8020e42:	9a07      	ldr	r2, [sp, #28]
 8020e44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020e48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020e4c:	9307      	str	r3, [sp, #28]
 8020e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	f340 80eb 	ble.w	802102c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8020e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020e5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020e66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e6a:	eef0 6a62 	vmov.f32	s13, s5
 8020e6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e82:	ee16 ba90 	vmov	fp, s13
 8020e86:	eef0 6a43 	vmov.f32	s13, s6
 8020e8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e8e:	ee12 2a90 	vmov	r2, s5
 8020e92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e96:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ea0:	ee13 2a10 	vmov	r2, s6
 8020ea4:	931b      	str	r3, [sp, #108]	; 0x6c
 8020ea6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020ea8:	ee16 5a90 	vmov	r5, s13
 8020eac:	fb92 f3f3 	sdiv	r3, r2, r3
 8020eb0:	931c      	str	r3, [sp, #112]	; 0x70
 8020eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020eb6:	3b01      	subs	r3, #1
 8020eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8020eba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020ebc:	bf08      	it	eq
 8020ebe:	4613      	moveq	r3, r2
 8020ec0:	eeb0 3a67 	vmov.f32	s6, s15
 8020ec4:	9306      	str	r3, [sp, #24]
 8020ec6:	eef0 2a47 	vmov.f32	s5, s14
 8020eca:	e6d2      	b.n	8020c72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020ecc:	b149      	cbz	r1, 8020ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020ece:	4660      	mov	r0, ip
 8020ed0:	5cba      	ldrb	r2, [r7, r2]
 8020ed2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020ed6:	4422      	add	r2, r4
 8020ed8:	4666      	mov	r6, ip
 8020eda:	e734      	b.n	8020d46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8020edc:	4660      	mov	r0, ip
 8020ede:	4662      	mov	r2, ip
 8020ee0:	e731      	b.n	8020d46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8020ee2:	4660      	mov	r0, ip
 8020ee4:	4662      	mov	r2, ip
 8020ee6:	e7f7      	b.n	8020ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8020ee8:	f110 0c01 	adds.w	ip, r0, #1
 8020eec:	f53f af74 	bmi.w	8020dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020ef0:	4562      	cmp	r2, ip
 8020ef2:	f6ff af71 	blt.w	8020dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020ef6:	f116 0c01 	adds.w	ip, r6, #1
 8020efa:	f53f af6d 	bmi.w	8020dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020efe:	4567      	cmp	r7, ip
 8020f00:	f6ff af6a 	blt.w	8020dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020f04:	b23f      	sxth	r7, r7
 8020f06:	b212      	sxth	r2, r2
 8020f08:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020f0c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8020f10:	9200      	str	r2, [sp, #0]
 8020f12:	9701      	str	r7, [sp, #4]
 8020f14:	4623      	mov	r3, r4
 8020f16:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020f1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020f1c:	f7ff fde6 	bl	8020aec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8020f20:	e75a      	b.n	8020dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020f22:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020f24:	ea4f 462b 	mov.w	r6, fp, asr #16
 8020f28:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020f2c:	1428      	asrs	r0, r5, #16
 8020f2e:	fb02 6000 	mla	r0, r2, r0, r6
 8020f32:	9e08      	ldr	r6, [sp, #32]
 8020f34:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020f38:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020f3c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020f40:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020f44:	1837      	adds	r7, r6, r0
 8020f46:	eb04 0c08 	add.w	ip, r4, r8
 8020f4a:	2b00      	cmp	r3, #0
 8020f4c:	d060      	beq.n	8021010 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8020f4e:	787e      	ldrb	r6, [r7, #1]
 8020f50:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020f54:	4426      	add	r6, r4
 8020f56:	2900      	cmp	r1, #0
 8020f58:	d062      	beq.n	8021020 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8020f5a:	18b8      	adds	r0, r7, r2
 8020f5c:	7840      	ldrb	r0, [r0, #1]
 8020f5e:	5cba      	ldrb	r2, [r7, r2]
 8020f60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020f64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f68:	4422      	add	r2, r4
 8020f6a:	4420      	add	r0, r4
 8020f6c:	b29b      	uxth	r3, r3
 8020f6e:	b289      	uxth	r1, r1
 8020f70:	fb03 f901 	mul.w	r9, r3, r1
 8020f74:	011b      	lsls	r3, r3, #4
 8020f76:	78b7      	ldrb	r7, [r6, #2]
 8020f78:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020f7c:	eba3 0309 	sub.w	r3, r3, r9
 8020f80:	b29b      	uxth	r3, r3
 8020f82:	435f      	muls	r7, r3
 8020f84:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020f88:	b289      	uxth	r1, r1
 8020f8a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020f8e:	ebae 0e01 	sub.w	lr, lr, r1
 8020f92:	fa1f fe8e 	uxth.w	lr, lr
 8020f96:	fb0e 770a 	mla	r7, lr, sl, r7
 8020f9a:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020f9e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020fa2:	fb01 770a 	mla	r7, r1, sl, r7
 8020fa6:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020faa:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020fae:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020fb2:	f896 8000 	ldrb.w	r8, [r6]
 8020fb6:	7876      	ldrb	r6, [r6, #1]
 8020fb8:	fb03 f808 	mul.w	r8, r3, r8
 8020fbc:	fb0e 8807 	mla	r8, lr, r7, r8
 8020fc0:	7817      	ldrb	r7, [r2, #0]
 8020fc2:	4373      	muls	r3, r6
 8020fc4:	fb01 8807 	mla	r8, r1, r7, r8
 8020fc8:	7807      	ldrb	r7, [r0, #0]
 8020fca:	fb0e 330c 	mla	r3, lr, ip, r3
 8020fce:	fb09 8707 	mla	r7, r9, r7, r8
 8020fd2:	7856      	ldrb	r6, [r2, #1]
 8020fd4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020fd8:	fb01 3306 	mla	r3, r1, r6, r3
 8020fdc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020fe0:	ea47 070a 	orr.w	r7, r7, sl
 8020fe4:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020fe8:	fb09 3a0a 	mla	sl, r9, sl, r3
 8020fec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ff2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020ff6:	ea47 070a 	orr.w	r7, r7, sl
 8020ffa:	f823 7b02 	strh.w	r7, [r3], #2
 8020ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8021000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021002:	449b      	add	fp, r3
 8021004:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021006:	441d      	add	r5, r3
 8021008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802100a:	3b01      	subs	r3, #1
 802100c:	9309      	str	r3, [sp, #36]	; 0x24
 802100e:	e714      	b.n	8020e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021010:	b149      	cbz	r1, 8021026 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021012:	4660      	mov	r0, ip
 8021014:	5cba      	ldrb	r2, [r7, r2]
 8021016:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802101a:	4422      	add	r2, r4
 802101c:	4666      	mov	r6, ip
 802101e:	e7a5      	b.n	8020f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021020:	4660      	mov	r0, ip
 8021022:	4662      	mov	r2, ip
 8021024:	e7a2      	b.n	8020f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021026:	4660      	mov	r0, ip
 8021028:	4662      	mov	r2, ip
 802102a:	e7f7      	b.n	802101c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 802102c:	b00f      	add	sp, #60	; 0x3c
 802102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021032 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8021032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021036:	b085      	sub	sp, #20
 8021038:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802103c:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8021040:	9102      	str	r1, [sp, #8]
 8021042:	fb04 710c 	mla	r1, r4, ip, r7
 8021046:	2c00      	cmp	r4, #0
 8021048:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802104c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8021050:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8021054:	eb02 0e01 	add.w	lr, r2, r1
 8021058:	f2c0 8122 	blt.w	80212a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802105c:	45a0      	cmp	r8, r4
 802105e:	f340 811f 	ble.w	80212a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8021062:	2f00      	cmp	r7, #0
 8021064:	f2c0 811a 	blt.w	802129c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8021068:	45bc      	cmp	ip, r7
 802106a:	f340 8117 	ble.w	802129c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802106e:	5c52      	ldrb	r2, [r2, r1]
 8021070:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8021074:	1c7a      	adds	r2, r7, #1
 8021076:	f100 8116 	bmi.w	80212a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802107a:	4594      	cmp	ip, r2
 802107c:	f340 8113 	ble.w	80212a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8021080:	2e00      	cmp	r6, #0
 8021082:	f000 8112 	beq.w	80212aa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8021086:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802108a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802108e:	3401      	adds	r4, #1
 8021090:	f100 810f 	bmi.w	80212b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8021094:	45a0      	cmp	r8, r4
 8021096:	f340 810c 	ble.w	80212b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802109a:	2800      	cmp	r0, #0
 802109c:	f000 810c 	beq.w	80212b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80210a0:	2f00      	cmp	r7, #0
 80210a2:	f2c0 8104 	blt.w	80212ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80210a6:	45bc      	cmp	ip, r7
 80210a8:	f340 8101 	ble.w	80212ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80210ac:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80210b0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80210b4:	3701      	adds	r7, #1
 80210b6:	f100 8102 	bmi.w	80212be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80210ba:	45bc      	cmp	ip, r7
 80210bc:	f340 80ff 	ble.w	80212be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80210c0:	2e00      	cmp	r6, #0
 80210c2:	f000 80fe 	beq.w	80212c2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80210c6:	44f4      	add	ip, lr
 80210c8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80210cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80210d0:	b2b6      	uxth	r6, r6
 80210d2:	b280      	uxth	r0, r0
 80210d4:	fb00 fe06 	mul.w	lr, r0, r6
 80210d8:	0136      	lsls	r6, r6, #4
 80210da:	eba6 070e 	sub.w	r7, r6, lr
 80210de:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80210e2:	b2bf      	uxth	r7, r7
 80210e4:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80210e8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80210ec:	fb0a f607 	mul.w	r6, sl, r7
 80210f0:	b280      	uxth	r0, r0
 80210f2:	1a1b      	subs	r3, r3, r0
 80210f4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80210f8:	b29b      	uxth	r3, r3
 80210fa:	fb0b 6603 	mla	r6, fp, r3, r6
 80210fe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021102:	fb00 6609 	mla	r6, r0, r9, r6
 8021106:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802110a:	fb0e 6608 	mla	r6, lr, r8, r6
 802110e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021112:	9600      	str	r6, [sp, #0]
 8021114:	2e00      	cmp	r6, #0
 8021116:	f000 80be 	beq.w	8021296 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802111a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802111e:	fb0b fc0c 	mul.w	ip, fp, ip
 8021122:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021126:	fb0b f505 	mul.w	r5, fp, r5
 802112a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802112e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021132:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021136:	44dc      	add	ip, fp
 8021138:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802113c:	9501      	str	r5, [sp, #4]
 802113e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8021142:	9503      	str	r5, [sp, #12]
 8021144:	9d01      	ldr	r5, [sp, #4]
 8021146:	9e02      	ldr	r6, [sp, #8]
 8021148:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802114c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021150:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8021154:	fb0a fc0c 	mul.w	ip, sl, ip
 8021158:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802115c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8021160:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021164:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021168:	4465      	add	r5, ip
 802116a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802116e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021172:	fb09 fc0c 	mul.w	ip, r9, ip
 8021176:	fb09 f904 	mul.w	r9, r9, r4
 802117a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802117e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021182:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021186:	fb08 f404 	mul.w	r4, r8, r4
 802118a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802118e:	fb08 f802 	mul.w	r8, r8, r2
 8021192:	0a2d      	lsrs	r5, r5, #8
 8021194:	0a22      	lsrs	r2, r4, #8
 8021196:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802119a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802119e:	437d      	muls	r5, r7
 80211a0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80211a4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80211a8:	4414      	add	r4, r2
 80211aa:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80211ae:	fb0a fa01 	mul.w	sl, sl, r1
 80211b2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80211b6:	9a03      	ldr	r2, [sp, #12]
 80211b8:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80211bc:	fb02 5503 	mla	r5, r2, r3, r5
 80211c0:	0a24      	lsrs	r4, r4, #8
 80211c2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80211c6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80211ca:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80211ce:	fb04 540e 	mla	r4, r4, lr, r5
 80211d2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80211d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80211da:	4461      	add	r1, ip
 80211dc:	0a09      	lsrs	r1, r1, #8
 80211de:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80211e2:	fb01 4100 	mla	r1, r1, r0, r4
 80211e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80211ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80211ee:	fb07 f70a 	mul.w	r7, r7, sl
 80211f2:	0a09      	lsrs	r1, r1, #8
 80211f4:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80211f8:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80211fc:	fb03 7101 	mla	r1, r3, r1, r7
 8021200:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021204:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021208:	fb0e 1e08 	mla	lr, lr, r8, r1
 802120c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021210:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8021214:	fb00 e101 	mla	r1, r0, r1, lr
 8021218:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 802121c:	9a00      	ldr	r2, [sp, #0]
 802121e:	b287      	uxth	r7, r0
 8021220:	437a      	muls	r2, r7
 8021222:	1c53      	adds	r3, r2, #1
 8021224:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021228:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802122c:	0a09      	lsrs	r1, r1, #8
 802122e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021232:	4321      	orrs	r1, r4
 8021234:	0c0a      	lsrs	r2, r1, #16
 8021236:	8836      	ldrh	r6, [r6, #0]
 8021238:	fb12 f207 	smulbb	r2, r2, r7
 802123c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8021240:	b2c8      	uxtb	r0, r1
 8021242:	1235      	asrs	r5, r6, #8
 8021244:	fb14 f407 	smulbb	r4, r4, r7
 8021248:	fb10 f007 	smulbb	r0, r0, r7
 802124c:	b2db      	uxtb	r3, r3
 802124e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021252:	fb05 2503 	mla	r5, r5, r3, r2
 8021256:	10f2      	asrs	r2, r6, #3
 8021258:	00f6      	lsls	r6, r6, #3
 802125a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802125e:	b2f6      	uxtb	r6, r6
 8021260:	fb02 4203 	mla	r2, r2, r3, r4
 8021264:	fb06 0303 	mla	r3, r6, r3, r0
 8021268:	b2ad      	uxth	r5, r5
 802126a:	b299      	uxth	r1, r3
 802126c:	b294      	uxth	r4, r2
 802126e:	1c6b      	adds	r3, r5, #1
 8021270:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021274:	1c62      	adds	r2, r4, #1
 8021276:	1c4b      	adds	r3, r1, #1
 8021278:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802127c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021280:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021284:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021288:	0952      	lsrs	r2, r2, #5
 802128a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802128e:	432b      	orrs	r3, r5
 8021290:	4313      	orrs	r3, r2
 8021292:	9a02      	ldr	r2, [sp, #8]
 8021294:	8013      	strh	r3, [r2, #0]
 8021296:	b005      	add	sp, #20
 8021298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802129c:	2500      	movs	r5, #0
 802129e:	e6e9      	b.n	8021074 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80212a0:	2100      	movs	r1, #0
 80212a2:	460d      	mov	r5, r1
 80212a4:	e6f3      	b.n	802108e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80212a6:	2100      	movs	r1, #0
 80212a8:	e6f1      	b.n	802108e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80212aa:	4631      	mov	r1, r6
 80212ac:	e6ef      	b.n	802108e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80212ae:	2400      	movs	r4, #0
 80212b0:	e700      	b.n	80210b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80212b2:	2200      	movs	r2, #0
 80212b4:	4614      	mov	r4, r2
 80212b6:	e70b      	b.n	80210d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80212b8:	4602      	mov	r2, r0
 80212ba:	4604      	mov	r4, r0
 80212bc:	e708      	b.n	80210d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80212be:	2200      	movs	r2, #0
 80212c0:	e706      	b.n	80210d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80212c2:	4632      	mov	r2, r6
 80212c4:	e704      	b.n	80210d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080212c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80212c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212ca:	b09f      	sub	sp, #124	; 0x7c
 80212cc:	921b      	str	r2, [sp, #108]	; 0x6c
 80212ce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80212d0:	901d      	str	r0, [sp, #116]	; 0x74
 80212d2:	9309      	str	r3, [sp, #36]	; 0x24
 80212d4:	6850      	ldr	r0, [r2, #4]
 80212d6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80212da:	9119      	str	r1, [sp, #100]	; 0x64
 80212dc:	931c      	str	r3, [sp, #112]	; 0x70
 80212de:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80212e2:	fb00 1303 	mla	r3, r0, r3, r1
 80212e6:	6812      	ldr	r2, [r2, #0]
 80212e8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80212ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80212ee:	930c      	str	r3, [sp, #48]	; 0x30
 80212f0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	9312      	str	r3, [sp, #72]	; 0x48
 80212f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80212f8:	685e      	ldr	r6, [r3, #4]
 80212fa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80212fe:	3604      	adds	r6, #4
 8021300:	930d      	str	r3, [sp, #52]	; 0x34
 8021302:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021304:	2b00      	cmp	r3, #0
 8021306:	dc03      	bgt.n	8021310 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021308:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802130a:	2b00      	cmp	r3, #0
 802130c:	f340 8387 	ble.w	8021a1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8021310:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021312:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021316:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802131a:	1e48      	subs	r0, r1, #1
 802131c:	1e57      	subs	r7, r2, #1
 802131e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021320:	2b00      	cmp	r3, #0
 8021322:	f340 8194 	ble.w	802164e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8021326:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8021328:	142b      	asrs	r3, r5, #16
 802132a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802132e:	d406      	bmi.n	802133e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021330:	4584      	cmp	ip, r0
 8021332:	da04      	bge.n	802133e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021334:	2b00      	cmp	r3, #0
 8021336:	db02      	blt.n	802133e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021338:	42bb      	cmp	r3, r7
 802133a:	f2c0 8189 	blt.w	8021650 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802133e:	f11c 0c01 	adds.w	ip, ip, #1
 8021342:	f100 8177 	bmi.w	8021634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021346:	4561      	cmp	r1, ip
 8021348:	f2c0 8174 	blt.w	8021634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802134c:	3301      	adds	r3, #1
 802134e:	f100 8171 	bmi.w	8021634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021352:	429a      	cmp	r2, r3
 8021354:	f2c0 816e 	blt.w	8021634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802135a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802135c:	931a      	str	r3, [sp, #104]	; 0x68
 802135e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021360:	2b00      	cmp	r3, #0
 8021362:	f340 8193 	ble.w	802168c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8021366:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021368:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802136c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021370:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021372:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021376:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802137a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802137c:	141b      	asrs	r3, r3, #16
 802137e:	f100 81d6 	bmi.w	802172e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8021382:	f100 38ff 	add.w	r8, r0, #4294967295
 8021386:	4543      	cmp	r3, r8
 8021388:	f280 81d1 	bge.w	802172e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802138c:	f1bc 0f00 	cmp.w	ip, #0
 8021390:	f2c0 81cd 	blt.w	802172e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8021394:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021398:	45c4      	cmp	ip, r8
 802139a:	f280 81c8 	bge.w	802172e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802139e:	b200      	sxth	r0, r0
 80213a0:	fb0c 3300 	mla	r3, ip, r0, r3
 80213a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80213a6:	eb04 0803 	add.w	r8, r4, r3
 80213aa:	5ce3      	ldrb	r3, [r4, r3]
 80213ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80213b0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80213b4:	2a00      	cmp	r2, #0
 80213b6:	f000 81af 	beq.w	8021718 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80213ba:	f898 c001 	ldrb.w	ip, [r8, #1]
 80213be:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80213c2:	940e      	str	r4, [sp, #56]	; 0x38
 80213c4:	0e24      	lsrs	r4, r4, #24
 80213c6:	9415      	str	r4, [sp, #84]	; 0x54
 80213c8:	b179      	cbz	r1, 80213ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80213ca:	eb08 0c00 	add.w	ip, r8, r0
 80213ce:	f818 0000 	ldrb.w	r0, [r8, r0]
 80213d2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80213d6:	900a      	str	r0, [sp, #40]	; 0x28
 80213d8:	0e00      	lsrs	r0, r0, #24
 80213da:	9013      	str	r0, [sp, #76]	; 0x4c
 80213dc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80213e0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80213e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80213e6:	0e00      	lsrs	r0, r0, #24
 80213e8:	9016      	str	r0, [sp, #88]	; 0x58
 80213ea:	b292      	uxth	r2, r2
 80213ec:	b289      	uxth	r1, r1
 80213ee:	fb02 f901 	mul.w	r9, r2, r1
 80213f2:	0112      	lsls	r2, r2, #4
 80213f4:	eba2 0809 	sub.w	r8, r2, r9
 80213f8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80213fa:	fa1f f888 	uxth.w	r8, r8
 80213fe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021402:	fb08 f000 	mul.w	r0, r8, r0
 8021406:	b289      	uxth	r1, r1
 8021408:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802140c:	1a52      	subs	r2, r2, r1
 802140e:	b292      	uxth	r2, r2
 8021410:	fb02 000e 	mla	r0, r2, lr, r0
 8021414:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021416:	fb01 0004 	mla	r0, r1, r4, r0
 802141a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802141c:	fb09 0004 	mla	r0, r9, r4, r0
 8021420:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021424:	2800      	cmp	r0, #0
 8021426:	f000 80fa 	beq.w	802161e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802142a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802142e:	d01b      	beq.n	8021468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8021430:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021434:	fb0e fa0a 	mul.w	sl, lr, sl
 8021438:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802143c:	fb0e fe03 	mul.w	lr, lr, r3
 8021440:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021444:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021448:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802144c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021450:	4453      	add	r3, sl
 8021452:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021456:	0a1b      	lsrs	r3, r3, #8
 8021458:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802145c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021460:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021464:	ea43 030c 	orr.w	r3, r3, ip
 8021468:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802146a:	2cff      	cmp	r4, #255	; 0xff
 802146c:	d021      	beq.n	80214b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802146e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021470:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021474:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021476:	fb04 fb0b 	mul.w	fp, r4, fp
 802147a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802147c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021480:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021484:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021486:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802148a:	fb04 fa0a 	mul.w	sl, r4, sl
 802148e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021492:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021496:	44de      	add	lr, fp
 8021498:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802149c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214ac:	ea4e 040a 	orr.w	r4, lr, sl
 80214b0:	940e      	str	r4, [sp, #56]	; 0x38
 80214b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80214b4:	2cff      	cmp	r4, #255	; 0xff
 80214b6:	d021      	beq.n	80214fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80214b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80214ba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80214be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80214c0:	fb04 fb0b 	mul.w	fp, r4, fp
 80214c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80214c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80214ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80214d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80214d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80214dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80214e0:	44de      	add	lr, fp
 80214e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80214e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214f6:	ea4e 040a 	orr.w	r4, lr, sl
 80214fa:	940a      	str	r4, [sp, #40]	; 0x28
 80214fc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80214fe:	2cff      	cmp	r4, #255	; 0xff
 8021500:	d021      	beq.n	8021546 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8021502:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021504:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021508:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802150a:	fb04 fb0b 	mul.w	fp, r4, fp
 802150e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021510:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021514:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021518:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802151a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802151e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021522:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021526:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802152a:	44de      	add	lr, fp
 802152c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021530:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021534:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021538:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802153c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021540:	ea4e 040a 	orr.w	r4, lr, sl
 8021544:	940f      	str	r4, [sp, #60]	; 0x3c
 8021546:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021548:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802154c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021550:	fb08 fc0c 	mul.w	ip, r8, ip
 8021554:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021558:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802155a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802155e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021562:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021566:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021568:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802156c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802156e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021572:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021576:	fb08 f80e 	mul.w	r8, r8, lr
 802157a:	fb02 8303 	mla	r3, r2, r3, r8
 802157e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021584:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021588:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802158a:	fb01 330a 	mla	r3, r1, sl, r3
 802158e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021594:	fb09 3901 	mla	r9, r9, r1, r3
 8021598:	4342      	muls	r2, r0
 802159a:	1c50      	adds	r0, r2, #1
 802159c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80215a0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80215a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80215a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215ac:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80215b0:	ea4c 0c09 	orr.w	ip, ip, r9
 80215b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80215b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80215ba:	883b      	ldrh	r3, [r7, #0]
 80215bc:	fb12 f204 	smulbb	r2, r2, r4
 80215c0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80215c4:	fa5f fc8c 	uxtb.w	ip, ip
 80215c8:	1219      	asrs	r1, r3, #8
 80215ca:	fb1c fc04 	smulbb	ip, ip, r4
 80215ce:	b2c0      	uxtb	r0, r0
 80215d0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80215d4:	fb01 2100 	mla	r1, r1, r0, r2
 80215d8:	10da      	asrs	r2, r3, #3
 80215da:	00db      	lsls	r3, r3, #3
 80215dc:	fb1e fe04 	smulbb	lr, lr, r4
 80215e0:	b2db      	uxtb	r3, r3
 80215e2:	fb03 c300 	mla	r3, r3, r0, ip
 80215e6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80215ea:	b289      	uxth	r1, r1
 80215ec:	fb02 e200 	mla	r2, r2, r0, lr
 80215f0:	fa1f fc83 	uxth.w	ip, r3
 80215f4:	1c4b      	adds	r3, r1, #1
 80215f6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80215fa:	f10c 0301 	add.w	r3, ip, #1
 80215fe:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8021602:	b292      	uxth	r2, r2
 8021604:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021608:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802160c:	430b      	orrs	r3, r1
 802160e:	1c51      	adds	r1, r2, #1
 8021610:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021614:	0952      	lsrs	r2, r2, #5
 8021616:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802161a:	4313      	orrs	r3, r2
 802161c:	803b      	strh	r3, [r7, #0]
 802161e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021620:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021622:	3702      	adds	r7, #2
 8021624:	441a      	add	r2, r3
 8021626:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021628:	9229      	str	r2, [sp, #164]	; 0xa4
 802162a:	441d      	add	r5, r3
 802162c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802162e:	3b01      	subs	r3, #1
 8021630:	931a      	str	r3, [sp, #104]	; 0x68
 8021632:	e694      	b.n	802135e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021634:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021636:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8021638:	441c      	add	r4, r3
 802163a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802163c:	9429      	str	r4, [sp, #164]	; 0xa4
 802163e:	441d      	add	r5, r3
 8021640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021642:	3b01      	subs	r3, #1
 8021644:	9309      	str	r3, [sp, #36]	; 0x24
 8021646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021648:	3302      	adds	r3, #2
 802164a:	930c      	str	r3, [sp, #48]	; 0x30
 802164c:	e667      	b.n	802131e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802164e:	d024      	beq.n	802169a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8021650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021652:	982b      	ldr	r0, [sp, #172]	; 0xac
 8021654:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8021656:	3b01      	subs	r3, #1
 8021658:	fb00 4003 	mla	r0, r0, r3, r4
 802165c:	1400      	asrs	r0, r0, #16
 802165e:	f53f ae7b 	bmi.w	8021358 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021662:	3901      	subs	r1, #1
 8021664:	4288      	cmp	r0, r1
 8021666:	f6bf ae77 	bge.w	8021358 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802166a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802166c:	fb01 5303 	mla	r3, r1, r3, r5
 8021670:	141b      	asrs	r3, r3, #16
 8021672:	f53f ae71 	bmi.w	8021358 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021676:	3a01      	subs	r2, #1
 8021678:	4293      	cmp	r3, r2
 802167a:	f6bf ae6d 	bge.w	8021358 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802167e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021682:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8021686:	f1bb 0f00 	cmp.w	fp, #0
 802168a:	dc70      	bgt.n	802176e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802168c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802168e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021694:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021698:	930c      	str	r3, [sp, #48]	; 0x30
 802169a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802169c:	2b00      	cmp	r3, #0
 802169e:	f340 81be 	ble.w	8021a1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80216a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80216a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80216aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80216ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80216b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80216b6:	eef0 6a62 	vmov.f32	s13, s5
 80216ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80216be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80216c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80216c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80216ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80216ce:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80216d2:	eef0 6a43 	vmov.f32	s13, s6
 80216d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80216da:	ee12 2a90 	vmov	r2, s5
 80216de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80216e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80216e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80216e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80216ec:	ee13 2a10 	vmov	r2, s6
 80216f0:	932b      	str	r3, [sp, #172]	; 0xac
 80216f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80216f4:	ee16 5a90 	vmov	r5, s13
 80216f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80216fc:	932c      	str	r3, [sp, #176]	; 0xb0
 80216fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021700:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021702:	3b01      	subs	r3, #1
 8021704:	9319      	str	r3, [sp, #100]	; 0x64
 8021706:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021708:	bf08      	it	eq
 802170a:	4613      	moveq	r3, r2
 802170c:	eeb0 3a67 	vmov.f32	s6, s15
 8021710:	9309      	str	r3, [sp, #36]	; 0x24
 8021712:	eef0 2a47 	vmov.f32	s5, s14
 8021716:	e5f4      	b.n	8021302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021718:	2900      	cmp	r1, #0
 802171a:	f43f ae66 	beq.w	80213ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802171e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021722:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021726:	900a      	str	r0, [sp, #40]	; 0x28
 8021728:	0e00      	lsrs	r0, r0, #24
 802172a:	9013      	str	r0, [sp, #76]	; 0x4c
 802172c:	e65d      	b.n	80213ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802172e:	f113 0801 	adds.w	r8, r3, #1
 8021732:	f53f af74 	bmi.w	802161e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021736:	4540      	cmp	r0, r8
 8021738:	f6ff af71 	blt.w	802161e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802173c:	f11c 0801 	adds.w	r8, ip, #1
 8021740:	f53f af6d 	bmi.w	802161e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021744:	45c6      	cmp	lr, r8
 8021746:	f6ff af6a 	blt.w	802161e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802174a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802174c:	9302      	str	r3, [sp, #8]
 802174e:	b200      	sxth	r0, r0
 8021750:	fa0f f38e 	sxth.w	r3, lr
 8021754:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021758:	e9cd c203 	strd	ip, r2, [sp, #12]
 802175c:	9301      	str	r3, [sp, #4]
 802175e:	9000      	str	r0, [sp, #0]
 8021760:	4633      	mov	r3, r6
 8021762:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021764:	4639      	mov	r1, r7
 8021766:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021768:	f7ff fc63 	bl	8021032 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802176c:	e757      	b.n	802161e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802176e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021770:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8021772:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021776:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021778:	1427      	asrs	r7, r4, #16
 802177a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802177e:	142b      	asrs	r3, r5, #16
 8021780:	fb01 7303 	mla	r3, r1, r3, r7
 8021784:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021786:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802178a:	18e7      	adds	r7, r4, r3
 802178c:	5ce3      	ldrb	r3, [r4, r3]
 802178e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021792:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021796:	2a00      	cmp	r2, #0
 8021798:	f000 8137 	beq.w	8021a0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 802179c:	f897 e001 	ldrb.w	lr, [r7, #1]
 80217a0:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80217a4:	9410      	str	r4, [sp, #64]	; 0x40
 80217a6:	0e24      	lsrs	r4, r4, #24
 80217a8:	9417      	str	r4, [sp, #92]	; 0x5c
 80217aa:	b170      	cbz	r0, 80217ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80217ac:	eb07 0e01 	add.w	lr, r7, r1
 80217b0:	5c79      	ldrb	r1, [r7, r1]
 80217b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80217b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80217b8:	0e09      	lsrs	r1, r1, #24
 80217ba:	9114      	str	r1, [sp, #80]	; 0x50
 80217bc:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80217c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80217c4:	9111      	str	r1, [sp, #68]	; 0x44
 80217c6:	0e09      	lsrs	r1, r1, #24
 80217c8:	9118      	str	r1, [sp, #96]	; 0x60
 80217ca:	b292      	uxth	r2, r2
 80217cc:	b280      	uxth	r0, r0
 80217ce:	fb02 f800 	mul.w	r8, r2, r0
 80217d2:	0112      	lsls	r2, r2, #4
 80217d4:	eba2 0e08 	sub.w	lr, r2, r8
 80217d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80217da:	fa1f fe8e 	uxth.w	lr, lr
 80217de:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80217e2:	fb0e f101 	mul.w	r1, lr, r1
 80217e6:	b280      	uxth	r0, r0
 80217e8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80217ec:	1a12      	subs	r2, r2, r0
 80217ee:	b292      	uxth	r2, r2
 80217f0:	fb02 110c 	mla	r1, r2, ip, r1
 80217f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80217f6:	fb00 1104 	mla	r1, r0, r4, r1
 80217fa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80217fc:	fb08 1104 	mla	r1, r8, r4, r1
 8021800:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021804:	2900      	cmp	r1, #0
 8021806:	f000 80f5 	beq.w	80219f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802180a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802180e:	d019      	beq.n	8021844 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8021810:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021814:	fb0c fa0a 	mul.w	sl, ip, sl
 8021818:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802181c:	fb0c fc03 	mul.w	ip, ip, r3
 8021820:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021824:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021828:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802182c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021830:	4453      	add	r3, sl
 8021832:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021836:	0a1b      	lsrs	r3, r3, #8
 8021838:	0a3f      	lsrs	r7, r7, #8
 802183a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802183e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021842:	433b      	orrs	r3, r7
 8021844:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021846:	2cff      	cmp	r4, #255	; 0xff
 8021848:	d020      	beq.n	802188c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 802184a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802184c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021850:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021852:	4367      	muls	r7, r4
 8021854:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021856:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802185a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802185e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021860:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021864:	fb04 fa0a 	mul.w	sl, r4, sl
 8021868:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802186c:	44bc      	add	ip, r7
 802186e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021872:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021876:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802187a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802187e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021882:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021886:	ea4c 040a 	orr.w	r4, ip, sl
 802188a:	9410      	str	r4, [sp, #64]	; 0x40
 802188c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802188e:	2cff      	cmp	r4, #255	; 0xff
 8021890:	d020      	beq.n	80218d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8021892:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021894:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021898:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802189a:	4367      	muls	r7, r4
 802189c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802189e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218a8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80218b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218b4:	44bc      	add	ip, r7
 80218b6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80218ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80218c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80218ce:	ea4c 040a 	orr.w	r4, ip, sl
 80218d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80218d4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80218d6:	2cff      	cmp	r4, #255	; 0xff
 80218d8:	d020      	beq.n	802191c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80218da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80218dc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218e0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80218e2:	4367      	muls	r7, r4
 80218e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80218e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218ee:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80218f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218f4:	fb04 fa0a 	mul.w	sl, r4, sl
 80218f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218fc:	44bc      	add	ip, r7
 80218fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021902:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021906:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802190a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802190e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021912:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021916:	ea4c 040a 	orr.w	r4, ip, sl
 802191a:	9411      	str	r4, [sp, #68]	; 0x44
 802191c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802191e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021922:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021926:	fb0e f707 	mul.w	r7, lr, r7
 802192a:	fb02 770c 	mla	r7, r2, ip, r7
 802192e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021934:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021938:	fb00 770c 	mla	r7, r0, ip, r7
 802193c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802193e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021942:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021944:	fb08 770c 	mla	r7, r8, ip, r7
 8021948:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802194c:	fb0e fe0c 	mul.w	lr, lr, ip
 8021950:	fb02 e303 	mla	r3, r2, r3, lr
 8021954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021956:	0a3f      	lsrs	r7, r7, #8
 8021958:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802195c:	fb00 330a 	mla	r3, r0, sl, r3
 8021960:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021962:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021966:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802196a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802196e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021970:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021974:	434b      	muls	r3, r1
 8021976:	1c59      	adds	r1, r3, #1
 8021978:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802197c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021980:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021984:	ea47 070c 	orr.w	r7, r7, ip
 8021988:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802198a:	0c3b      	lsrs	r3, r7, #16
 802198c:	f8b9 0000 	ldrh.w	r0, [r9]
 8021990:	fb13 f304 	smulbb	r3, r3, r4
 8021994:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8021998:	b2ff      	uxtb	r7, r7
 802199a:	1202      	asrs	r2, r0, #8
 802199c:	fb17 f704 	smulbb	r7, r7, r4
 80219a0:	b2c9      	uxtb	r1, r1
 80219a2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80219a6:	fb02 3201 	mla	r2, r2, r1, r3
 80219aa:	10c3      	asrs	r3, r0, #3
 80219ac:	00c0      	lsls	r0, r0, #3
 80219ae:	fb1c fc04 	smulbb	ip, ip, r4
 80219b2:	b2c0      	uxtb	r0, r0
 80219b4:	fb00 7001 	mla	r0, r0, r1, r7
 80219b8:	b292      	uxth	r2, r2
 80219ba:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80219be:	fb03 c301 	mla	r3, r3, r1, ip
 80219c2:	f102 0c01 	add.w	ip, r2, #1
 80219c6:	b280      	uxth	r0, r0
 80219c8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80219cc:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80219d0:	1c42      	adds	r2, r0, #1
 80219d2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80219d6:	b29b      	uxth	r3, r3
 80219d8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80219dc:	ea42 020c 	orr.w	r2, r2, ip
 80219e0:	f103 0c01 	add.w	ip, r3, #1
 80219e4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80219e8:	095b      	lsrs	r3, r3, #5
 80219ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80219ee:	431a      	orrs	r2, r3
 80219f0:	f8a9 2000 	strh.w	r2, [r9]
 80219f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80219f6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80219f8:	f109 0902 	add.w	r9, r9, #2
 80219fc:	441a      	add	r2, r3
 80219fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021a00:	9229      	str	r2, [sp, #164]	; 0xa4
 8021a02:	441d      	add	r5, r3
 8021a04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a08:	e63d      	b.n	8021686 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021a0a:	2800      	cmp	r0, #0
 8021a0c:	f43f aedd 	beq.w	80217ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8021a10:	5c79      	ldrb	r1, [r7, r1]
 8021a12:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a16:	910b      	str	r1, [sp, #44]	; 0x2c
 8021a18:	0e09      	lsrs	r1, r1, #24
 8021a1a:	9114      	str	r1, [sp, #80]	; 0x50
 8021a1c:	e6d5      	b.n	80217ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8021a1e:	b01f      	add	sp, #124	; 0x7c
 8021a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a24 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8021a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a28:	b089      	sub	sp, #36	; 0x24
 8021a2a:	9101      	str	r1, [sp, #4]
 8021a2c:	9801      	ldr	r0, [sp, #4]
 8021a2e:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8021a32:	8800      	ldrh	r0, [r0, #0]
 8021a34:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8021a38:	1206      	asrs	r6, r0, #8
 8021a3a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021a3e:	9602      	str	r6, [sp, #8]
 8021a40:	10c6      	asrs	r6, r0, #3
 8021a42:	00c0      	lsls	r0, r0, #3
 8021a44:	b2c0      	uxtb	r0, r0
 8021a46:	9004      	str	r0, [sp, #16]
 8021a48:	fb07 100c 	mla	r0, r7, ip, r1
 8021a4c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021a50:	2f00      	cmp	r7, #0
 8021a52:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8021a56:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8021a5a:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8021a5e:	9603      	str	r6, [sp, #12]
 8021a60:	eb02 0e00 	add.w	lr, r2, r0
 8021a64:	f2c0 810a 	blt.w	8021c7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8021a68:	45b8      	cmp	r8, r7
 8021a6a:	f340 8107 	ble.w	8021c7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8021a6e:	2900      	cmp	r1, #0
 8021a70:	f2c0 8102 	blt.w	8021c78 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8021a74:	458c      	cmp	ip, r1
 8021a76:	f340 80ff 	ble.w	8021c78 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8021a7a:	5c12      	ldrb	r2, [r2, r0]
 8021a7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021a80:	1c4a      	adds	r2, r1, #1
 8021a82:	f100 80fe 	bmi.w	8021c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8021a86:	4594      	cmp	ip, r2
 8021a88:	f340 80fb 	ble.w	8021c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8021a8c:	2d00      	cmp	r5, #0
 8021a8e:	f000 80fa 	beq.w	8021c86 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8021a92:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021a96:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021a9a:	3701      	adds	r7, #1
 8021a9c:	f100 80f7 	bmi.w	8021c8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8021aa0:	45b8      	cmp	r8, r7
 8021aa2:	f340 80f4 	ble.w	8021c8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8021aa6:	2c00      	cmp	r4, #0
 8021aa8:	f000 80f4 	beq.w	8021c94 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8021aac:	2900      	cmp	r1, #0
 8021aae:	eb0e 020c 	add.w	r2, lr, ip
 8021ab2:	f2c0 80ea 	blt.w	8021c8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8021ab6:	458c      	cmp	ip, r1
 8021ab8:	f340 80e7 	ble.w	8021c8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8021abc:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8021ac0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8021ac4:	3101      	adds	r1, #1
 8021ac6:	f100 80e8 	bmi.w	8021c9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8021aca:	458c      	cmp	ip, r1
 8021acc:	f340 80e5 	ble.w	8021c9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8021ad0:	2d00      	cmp	r5, #0
 8021ad2:	f000 80e4 	beq.w	8021c9e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8021ad6:	7852      	ldrb	r2, [r2, #1]
 8021ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021adc:	0e0b      	lsrs	r3, r1, #24
 8021ade:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8021ae2:	9300      	str	r3, [sp, #0]
 8021ae4:	b2a4      	uxth	r4, r4
 8021ae6:	b2ab      	uxth	r3, r5
 8021ae8:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8021aec:	fb03 f904 	mul.w	r9, r3, r4
 8021af0:	fb0a f505 	mul.w	r5, sl, r5
 8021af4:	011b      	lsls	r3, r3, #4
 8021af6:	eba3 0e09 	sub.w	lr, r3, r9
 8021afa:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8021afe:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8021b02:	0a28      	lsrs	r0, r5, #8
 8021b04:	fb0a f303 	mul.w	r3, sl, r3
 8021b08:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021b0c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8021b10:	4405      	add	r5, r0
 8021b12:	0a2d      	lsrs	r5, r5, #8
 8021b14:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8021b18:	9005      	str	r0, [sp, #20]
 8021b1a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8021b1e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021b22:	0a1b      	lsrs	r3, r3, #8
 8021b24:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021b28:	9306      	str	r3, [sp, #24]
 8021b2a:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8021b2e:	fb0b f303 	mul.w	r3, fp, r3
 8021b32:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b36:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8021b3a:	fb0b f606 	mul.w	r6, fp, r6
 8021b3e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021b42:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021b46:	fb08 f707 	mul.w	r7, r8, r7
 8021b4a:	0a1d      	lsrs	r5, r3, #8
 8021b4c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021b50:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021b54:	441d      	add	r5, r3
 8021b56:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8021b5a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021b5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021b62:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021b66:	fb08 fc0c 	mul.w	ip, r8, ip
 8021b6a:	0a1b      	lsrs	r3, r3, #8
 8021b6c:	9307      	str	r3, [sp, #28]
 8021b6e:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8021b72:	0e0b      	lsrs	r3, r1, #24
 8021b74:	0a2d      	lsrs	r5, r5, #8
 8021b76:	fa1f fe8e 	uxth.w	lr, lr
 8021b7a:	435f      	muls	r7, r3
 8021b7c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021b80:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8021b84:	fb05 f50e 	mul.w	r5, r5, lr
 8021b88:	b2a4      	uxth	r4, r4
 8021b8a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8021b8e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021b92:	4359      	muls	r1, r3
 8021b94:	1b12      	subs	r2, r2, r4
 8021b96:	9b05      	ldr	r3, [sp, #20]
 8021b98:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021b9c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021ba0:	b292      	uxth	r2, r2
 8021ba2:	4460      	add	r0, ip
 8021ba4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021ba8:	fb03 5502 	mla	r5, r3, r2, r5
 8021bac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021bb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021bb4:	44bc      	add	ip, r7
 8021bb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021bba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021bbe:	0a36      	lsrs	r6, r6, #8
 8021bc0:	fb0c 5509 	mla	r5, ip, r9, r5
 8021bc4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021bc8:	fb0e f606 	mul.w	r6, lr, r6
 8021bcc:	9b06      	ldr	r3, [sp, #24]
 8021bce:	0a00      	lsrs	r0, r0, #8
 8021bd0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021bd4:	fb00 5504 	mla	r5, r0, r4, r5
 8021bd8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021bdc:	fb02 6000 	mla	r0, r2, r0, r6
 8021be0:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8021be4:	fb0e fe0b 	mul.w	lr, lr, fp
 8021be8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021bec:	0a09      	lsrs	r1, r1, #8
 8021bee:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021bf2:	fb09 0001 	mla	r0, r9, r1, r0
 8021bf6:	fb02 e20a 	mla	r2, r2, sl, lr
 8021bfa:	9b07      	ldr	r3, [sp, #28]
 8021bfc:	0a2d      	lsrs	r5, r5, #8
 8021bfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c02:	fb04 0003 	mla	r0, r4, r3, r0
 8021c06:	fb04 2408 	mla	r4, r4, r8, r2
 8021c0a:	9b00      	ldr	r3, [sp, #0]
 8021c0c:	9a04      	ldr	r2, [sp, #16]
 8021c0e:	fb09 4903 	mla	r9, r9, r3, r4
 8021c12:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8021c16:	9b02      	ldr	r3, [sp, #8]
 8021c18:	fa5f f989 	uxtb.w	r9, r9
 8021c1c:	fb03 f109 	mul.w	r1, r3, r9
 8021c20:	9b03      	ldr	r3, [sp, #12]
 8021c22:	0a00      	lsrs	r0, r0, #8
 8021c24:	fb03 f309 	mul.w	r3, r3, r9
 8021c28:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021c2c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021c30:	4305      	orrs	r5, r0
 8021c32:	fb02 f909 	mul.w	r9, r2, r9
 8021c36:	1c58      	adds	r0, r3, #1
 8021c38:	1c4a      	adds	r2, r1, #1
 8021c3a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021c3e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021c42:	0a2b      	lsrs	r3, r5, #8
 8021c44:	0c2a      	lsrs	r2, r5, #16
 8021c46:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021c4a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021c4e:	00db      	lsls	r3, r3, #3
 8021c50:	0212      	lsls	r2, r2, #8
 8021c52:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021c56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021c5a:	4313      	orrs	r3, r2
 8021c5c:	f109 0201 	add.w	r2, r9, #1
 8021c60:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021c64:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8021c68:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021c6c:	431d      	orrs	r5, r3
 8021c6e:	9b01      	ldr	r3, [sp, #4]
 8021c70:	801d      	strh	r5, [r3, #0]
 8021c72:	b009      	add	sp, #36	; 0x24
 8021c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c78:	2000      	movs	r0, #0
 8021c7a:	e701      	b.n	8021a80 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8021c7c:	2600      	movs	r6, #0
 8021c7e:	4630      	mov	r0, r6
 8021c80:	e70b      	b.n	8021a9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021c82:	2600      	movs	r6, #0
 8021c84:	e709      	b.n	8021a9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021c86:	462e      	mov	r6, r5
 8021c88:	e707      	b.n	8021a9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021c8a:	2700      	movs	r7, #0
 8021c8c:	e71a      	b.n	8021ac4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8021c8e:	2100      	movs	r1, #0
 8021c90:	460f      	mov	r7, r1
 8021c92:	e723      	b.n	8021adc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021c94:	4621      	mov	r1, r4
 8021c96:	4627      	mov	r7, r4
 8021c98:	e720      	b.n	8021adc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021c9a:	2100      	movs	r1, #0
 8021c9c:	e71e      	b.n	8021adc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021c9e:	4629      	mov	r1, r5
 8021ca0:	e71c      	b.n	8021adc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08021ca4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ca8:	b09b      	sub	sp, #108	; 0x6c
 8021caa:	9218      	str	r2, [sp, #96]	; 0x60
 8021cac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021cae:	9019      	str	r0, [sp, #100]	; 0x64
 8021cb0:	6850      	ldr	r0, [r2, #4]
 8021cb2:	9116      	str	r1, [sp, #88]	; 0x58
 8021cb4:	9307      	str	r3, [sp, #28]
 8021cb6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021cba:	fb00 1303 	mla	r3, r0, r3, r1
 8021cbe:	6812      	ldr	r2, [r2, #0]
 8021cc0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8021cc2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8021cc8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021cca:	681b      	ldr	r3, [r3, #0]
 8021ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8021cce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021cd0:	685e      	ldr	r6, [r3, #4]
 8021cd2:	3604      	adds	r6, #4
 8021cd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	dc03      	bgt.n	8021ce2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021cda:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	f340 8373 	ble.w	80223c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8021ce2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021ce4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021ce8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021cec:	1e48      	subs	r0, r1, #1
 8021cee:	1e57      	subs	r7, r2, #1
 8021cf0:	9b07      	ldr	r3, [sp, #28]
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	f340 818f 	ble.w	8022016 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8021cf8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021cfa:	142b      	asrs	r3, r5, #16
 8021cfc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021d00:	d406      	bmi.n	8021d10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d02:	4584      	cmp	ip, r0
 8021d04:	da04      	bge.n	8021d10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	db02      	blt.n	8021d10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d0a:	42bb      	cmp	r3, r7
 8021d0c:	f2c0 8184 	blt.w	8022018 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021d10:	f11c 0c01 	adds.w	ip, ip, #1
 8021d14:	f100 8172 	bmi.w	8021ffc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021d18:	4561      	cmp	r1, ip
 8021d1a:	f2c0 816f 	blt.w	8021ffc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021d1e:	3301      	adds	r3, #1
 8021d20:	f100 816c 	bmi.w	8021ffc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021d24:	429a      	cmp	r2, r3
 8021d26:	f2c0 8169 	blt.w	8021ffc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021d2a:	9b07      	ldr	r3, [sp, #28]
 8021d2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021d2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8021d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	f340 818e 	ble.w	8022054 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8021d38:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021d3a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021d3e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021d42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d44:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021d48:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021d4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021d4e:	141b      	asrs	r3, r3, #16
 8021d50:	f100 81d1 	bmi.w	80220f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021d54:	f101 38ff 	add.w	r8, r1, #4294967295
 8021d58:	4543      	cmp	r3, r8
 8021d5a:	f280 81cc 	bge.w	80220f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021d5e:	f1bc 0f00 	cmp.w	ip, #0
 8021d62:	f2c0 81c8 	blt.w	80220f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021d66:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021d6a:	45c4      	cmp	ip, r8
 8021d6c:	f280 81c3 	bge.w	80220f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021d70:	b209      	sxth	r1, r1
 8021d72:	fb0c 3301 	mla	r3, ip, r1, r3
 8021d76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021d78:	eb04 0803 	add.w	r8, r4, r3
 8021d7c:	5ce3      	ldrb	r3, [r4, r3]
 8021d7e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021d82:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021d86:	2a00      	cmp	r2, #0
 8021d88:	f000 81aa 	beq.w	80220e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8021d8c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021d90:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021d94:	940b      	str	r4, [sp, #44]	; 0x2c
 8021d96:	0e24      	lsrs	r4, r4, #24
 8021d98:	9412      	str	r4, [sp, #72]	; 0x48
 8021d9a:	b178      	cbz	r0, 8021dbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021d9c:	eb08 0c01 	add.w	ip, r8, r1
 8021da0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021da4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021da8:	9108      	str	r1, [sp, #32]
 8021daa:	0e09      	lsrs	r1, r1, #24
 8021dac:	9110      	str	r1, [sp, #64]	; 0x40
 8021dae:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021db2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021db6:	910c      	str	r1, [sp, #48]	; 0x30
 8021db8:	0e09      	lsrs	r1, r1, #24
 8021dba:	9113      	str	r1, [sp, #76]	; 0x4c
 8021dbc:	b292      	uxth	r2, r2
 8021dbe:	b280      	uxth	r0, r0
 8021dc0:	fb02 f900 	mul.w	r9, r2, r0
 8021dc4:	0112      	lsls	r2, r2, #4
 8021dc6:	eba2 0809 	sub.w	r8, r2, r9
 8021dca:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021dcc:	fa1f f888 	uxth.w	r8, r8
 8021dd0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021dd4:	fb08 f101 	mul.w	r1, r8, r1
 8021dd8:	b280      	uxth	r0, r0
 8021dda:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021dde:	1a12      	subs	r2, r2, r0
 8021de0:	b292      	uxth	r2, r2
 8021de2:	fb02 110e 	mla	r1, r2, lr, r1
 8021de6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021de8:	fb00 1104 	mla	r1, r0, r4, r1
 8021dec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021dee:	fb09 1104 	mla	r1, r9, r4, r1
 8021df2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021df6:	2900      	cmp	r1, #0
 8021df8:	f000 80f5 	beq.w	8021fe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021dfc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021e00:	d01b      	beq.n	8021e3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8021e02:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021e06:	fb0e fa0a 	mul.w	sl, lr, sl
 8021e0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e0e:	fb0e fe03 	mul.w	lr, lr, r3
 8021e12:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e1a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e1e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021e22:	4453      	add	r3, sl
 8021e24:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021e28:	0a1b      	lsrs	r3, r3, #8
 8021e2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e32:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021e36:	ea43 030c 	orr.w	r3, r3, ip
 8021e3a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e3c:	2cff      	cmp	r4, #255	; 0xff
 8021e3e:	d021      	beq.n	8021e84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8021e40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e42:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021e46:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e48:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e4e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021e56:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e5c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e64:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021e68:	44de      	add	lr, fp
 8021e6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021e6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e7e:	ea4e 040a 	orr.w	r4, lr, sl
 8021e82:	940b      	str	r4, [sp, #44]	; 0x2c
 8021e84:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021e86:	2cff      	cmp	r4, #255	; 0xff
 8021e88:	d021      	beq.n	8021ece <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021e8a:	9c08      	ldr	r4, [sp, #32]
 8021e8c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021e90:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021e92:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e96:	9c08      	ldr	r4, [sp, #32]
 8021e98:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e9c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ea0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021ea2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ea6:	fb04 fa0a 	mul.w	sl, r4, sl
 8021eaa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021eae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021eb2:	44de      	add	lr, fp
 8021eb4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021eb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ebc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ec0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ec4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ec8:	ea4e 040a 	orr.w	r4, lr, sl
 8021ecc:	9408      	str	r4, [sp, #32]
 8021ece:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ed0:	2cff      	cmp	r4, #255	; 0xff
 8021ed2:	d021      	beq.n	8021f18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8021ed4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021ed6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021eda:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021edc:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ee0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021ee2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021ee6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021eea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021eec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ef0:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ef4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021ef8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021efc:	44de      	add	lr, fp
 8021efe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f12:	ea4e 040a 	orr.w	r4, lr, sl
 8021f16:	940c      	str	r4, [sp, #48]	; 0x30
 8021f18:	43c9      	mvns	r1, r1
 8021f1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f1c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021f20:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f24:	fb08 fc0c 	mul.w	ip, r8, ip
 8021f28:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021f2c:	9c08      	ldr	r4, [sp, #32]
 8021f2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f32:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021f36:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021f3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021f3c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021f40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f42:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021f46:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021f4a:	fb08 f80e 	mul.w	r8, r8, lr
 8021f4e:	fb02 8303 	mla	r3, r2, r3, r8
 8021f52:	9a08      	ldr	r2, [sp, #32]
 8021f54:	f8b7 8000 	ldrh.w	r8, [r7]
 8021f58:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021f5c:	fb00 330a 	mla	r3, r0, sl, r3
 8021f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021f62:	fa5f fe81 	uxtb.w	lr, r1
 8021f66:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021f6a:	fb09 3900 	mla	r9, r9, r0, r3
 8021f6e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8021f72:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021f76:	fb02 f20e 	mul.w	r2, r2, lr
 8021f7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f82:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8021f86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f8a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021f8e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021f92:	ea4c 0c09 	orr.w	ip, ip, r9
 8021f96:	fb00 f00e 	mul.w	r0, r0, lr
 8021f9a:	1c53      	adds	r3, r2, #1
 8021f9c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021fa0:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8021fa4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021fa8:	4a62      	ldr	r2, [pc, #392]	; (8022134 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8021faa:	b2db      	uxtb	r3, r3
 8021fac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021fb0:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8021fb4:	b2c9      	uxtb	r1, r1
 8021fb6:	1c43      	adds	r3, r0, #1
 8021fb8:	fb01 f10e 	mul.w	r1, r1, lr
 8021fbc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021fc0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021fc4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021fc8:	00db      	lsls	r3, r3, #3
 8021fca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021fce:	4313      	orrs	r3, r2
 8021fd0:	1c4a      	adds	r2, r1, #1
 8021fd2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021fd6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021fda:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021fde:	ea4c 0c03 	orr.w	ip, ip, r3
 8021fe2:	f8a7 c000 	strh.w	ip, [r7]
 8021fe6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021fe8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021fea:	3702      	adds	r7, #2
 8021fec:	441a      	add	r2, r3
 8021fee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ff0:	9225      	str	r2, [sp, #148]	; 0x94
 8021ff2:	441d      	add	r5, r3
 8021ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021ff6:	3b01      	subs	r3, #1
 8021ff8:	9317      	str	r3, [sp, #92]	; 0x5c
 8021ffa:	e699      	b.n	8021d30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021ffc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021ffe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8022000:	441c      	add	r4, r3
 8022002:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022004:	9425      	str	r4, [sp, #148]	; 0x94
 8022006:	441d      	add	r5, r3
 8022008:	9b07      	ldr	r3, [sp, #28]
 802200a:	3b01      	subs	r3, #1
 802200c:	9307      	str	r3, [sp, #28]
 802200e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022010:	3302      	adds	r3, #2
 8022012:	930a      	str	r3, [sp, #40]	; 0x28
 8022014:	e66c      	b.n	8021cf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022016:	d024      	beq.n	8022062 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8022018:	9b07      	ldr	r3, [sp, #28]
 802201a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802201c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802201e:	3b01      	subs	r3, #1
 8022020:	fb00 4003 	mla	r0, r0, r3, r4
 8022024:	1400      	asrs	r0, r0, #16
 8022026:	f53f ae80 	bmi.w	8021d2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802202a:	3901      	subs	r1, #1
 802202c:	4288      	cmp	r0, r1
 802202e:	f6bf ae7c 	bge.w	8021d2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022032:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022034:	fb01 5303 	mla	r3, r1, r3, r5
 8022038:	141b      	asrs	r3, r3, #16
 802203a:	f53f ae76 	bmi.w	8021d2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802203e:	3a01      	subs	r2, #1
 8022040:	4293      	cmp	r3, r2
 8022042:	f6bf ae72 	bge.w	8021d2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022046:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802204a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802204e:	f1bb 0f00 	cmp.w	fp, #0
 8022052:	dc71      	bgt.n	8022138 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8022054:	9b07      	ldr	r3, [sp, #28]
 8022056:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802205a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802205c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022060:	930a      	str	r3, [sp, #40]	; 0x28
 8022062:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022064:	2b00      	cmp	r3, #0
 8022066:	f340 81af 	ble.w	80223c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802206a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802206e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022072:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022076:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802207a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802207e:	eef0 6a62 	vmov.f32	s13, s5
 8022082:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022086:	ee77 2a62 	vsub.f32	s5, s14, s5
 802208a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802208e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022092:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022096:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802209a:	eef0 6a43 	vmov.f32	s13, s6
 802209e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80220a2:	ee12 2a90 	vmov	r2, s5
 80220a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80220aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80220ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80220b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80220b4:	ee13 2a10 	vmov	r2, s6
 80220b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80220ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80220bc:	ee16 5a90 	vmov	r5, s13
 80220c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80220c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80220c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80220c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80220ca:	3b01      	subs	r3, #1
 80220cc:	9316      	str	r3, [sp, #88]	; 0x58
 80220ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80220d0:	bf08      	it	eq
 80220d2:	4613      	moveq	r3, r2
 80220d4:	eeb0 3a67 	vmov.f32	s6, s15
 80220d8:	9307      	str	r3, [sp, #28]
 80220da:	eef0 2a47 	vmov.f32	s5, s14
 80220de:	e5f9      	b.n	8021cd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80220e0:	2800      	cmp	r0, #0
 80220e2:	f43f ae6b 	beq.w	8021dbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80220e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80220ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80220ee:	9108      	str	r1, [sp, #32]
 80220f0:	0e09      	lsrs	r1, r1, #24
 80220f2:	9110      	str	r1, [sp, #64]	; 0x40
 80220f4:	e662      	b.n	8021dbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80220f6:	f113 0801 	adds.w	r8, r3, #1
 80220fa:	f53f af74 	bmi.w	8021fe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80220fe:	4541      	cmp	r1, r8
 8022100:	f6ff af71 	blt.w	8021fe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022104:	f11c 0801 	adds.w	r8, ip, #1
 8022108:	f53f af6d 	bmi.w	8021fe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802210c:	45c6      	cmp	lr, r8
 802210e:	f6ff af6a 	blt.w	8021fe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022112:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8022116:	b209      	sxth	r1, r1
 8022118:	fa0f f38e 	sxth.w	r3, lr
 802211c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8022120:	9301      	str	r3, [sp, #4]
 8022122:	9100      	str	r1, [sp, #0]
 8022124:	4633      	mov	r3, r6
 8022126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022128:	4639      	mov	r1, r7
 802212a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802212c:	f7ff fc7a 	bl	8021a24 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8022130:	e759      	b.n	8021fe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022132:	bf00      	nop
 8022134:	fffff800 	.word	0xfffff800
 8022138:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802213a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802213c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022140:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022142:	1427      	asrs	r7, r4, #16
 8022144:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022148:	142b      	asrs	r3, r5, #16
 802214a:	fb01 7303 	mla	r3, r1, r3, r7
 802214e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022150:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022154:	18e7      	adds	r7, r4, r3
 8022156:	5ce3      	ldrb	r3, [r4, r3]
 8022158:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802215c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022160:	2a00      	cmp	r2, #0
 8022162:	f000 8127 	beq.w	80223b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022166:	f897 e001 	ldrb.w	lr, [r7, #1]
 802216a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802216e:	940d      	str	r4, [sp, #52]	; 0x34
 8022170:	0e24      	lsrs	r4, r4, #24
 8022172:	9414      	str	r4, [sp, #80]	; 0x50
 8022174:	b170      	cbz	r0, 8022194 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8022176:	eb07 0e01 	add.w	lr, r7, r1
 802217a:	5c79      	ldrb	r1, [r7, r1]
 802217c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022180:	9109      	str	r1, [sp, #36]	; 0x24
 8022182:	0e09      	lsrs	r1, r1, #24
 8022184:	9111      	str	r1, [sp, #68]	; 0x44
 8022186:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802218a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802218e:	910e      	str	r1, [sp, #56]	; 0x38
 8022190:	0e09      	lsrs	r1, r1, #24
 8022192:	9115      	str	r1, [sp, #84]	; 0x54
 8022194:	b292      	uxth	r2, r2
 8022196:	b280      	uxth	r0, r0
 8022198:	fb02 f800 	mul.w	r8, r2, r0
 802219c:	0112      	lsls	r2, r2, #4
 802219e:	eba2 0e08 	sub.w	lr, r2, r8
 80221a2:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80221a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80221a8:	fa1f fe8e 	uxth.w	lr, lr
 80221ac:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80221b0:	fb0e f202 	mul.w	r2, lr, r2
 80221b4:	b280      	uxth	r0, r0
 80221b6:	1a09      	subs	r1, r1, r0
 80221b8:	b289      	uxth	r1, r1
 80221ba:	fb01 220c 	mla	r2, r1, ip, r2
 80221be:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80221c0:	fb00 2204 	mla	r2, r0, r4, r2
 80221c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80221c6:	fb08 2204 	mla	r2, r8, r4, r2
 80221ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80221ce:	2a00      	cmp	r2, #0
 80221d0:	f000 80e5 	beq.w	802239e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80221d4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80221d8:	d019      	beq.n	802220e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80221da:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80221de:	fb0c fa0a 	mul.w	sl, ip, sl
 80221e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221e6:	fb0c fc03 	mul.w	ip, ip, r3
 80221ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80221ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80221f6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80221fa:	4453      	add	r3, sl
 80221fc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022200:	0a1b      	lsrs	r3, r3, #8
 8022202:	0a3f      	lsrs	r7, r7, #8
 8022204:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022208:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802220c:	433b      	orrs	r3, r7
 802220e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022210:	2cff      	cmp	r4, #255	; 0xff
 8022212:	d020      	beq.n	8022256 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8022214:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022216:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802221a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802221c:	4367      	muls	r7, r4
 802221e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022220:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022224:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022228:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802222a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802222e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022232:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022236:	44bc      	add	ip, r7
 8022238:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802223c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022240:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022244:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022248:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802224c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022250:	ea4c 040a 	orr.w	r4, ip, sl
 8022254:	940d      	str	r4, [sp, #52]	; 0x34
 8022256:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022258:	2cff      	cmp	r4, #255	; 0xff
 802225a:	d020      	beq.n	802229e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802225c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802225e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022262:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022264:	4367      	muls	r7, r4
 8022266:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022268:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802226c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022270:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022272:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022276:	fb04 fa0a 	mul.w	sl, r4, sl
 802227a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802227e:	44bc      	add	ip, r7
 8022280:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022284:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022288:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802228c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022290:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022294:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022298:	ea4c 040a 	orr.w	r4, ip, sl
 802229c:	9409      	str	r4, [sp, #36]	; 0x24
 802229e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80222a0:	2cff      	cmp	r4, #255	; 0xff
 80222a2:	d020      	beq.n	80222e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80222a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80222a6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80222aa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80222ac:	4367      	muls	r7, r4
 80222ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80222b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80222b4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80222ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80222be:	fb04 fa0a 	mul.w	sl, r4, sl
 80222c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222c6:	44bc      	add	ip, r7
 80222c8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80222cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80222d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80222e0:	ea4c 040a 	orr.w	r4, ip, sl
 80222e4:	940e      	str	r4, [sp, #56]	; 0x38
 80222e6:	43d2      	mvns	r2, r2
 80222e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222ea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80222ee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80222f2:	fb0e f707 	mul.w	r7, lr, r7
 80222f6:	fb01 770c 	mla	r7, r1, ip, r7
 80222fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80222fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022300:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022304:	fb00 770c 	mla	r7, r0, ip, r7
 8022308:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802230a:	b2d2      	uxtb	r2, r2
 802230c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022310:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022312:	fb08 770c 	mla	r7, r8, ip, r7
 8022316:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802231a:	fb0e fe0c 	mul.w	lr, lr, ip
 802231e:	fb01 e303 	mla	r3, r1, r3, lr
 8022322:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022324:	0a3f      	lsrs	r7, r7, #8
 8022326:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802232a:	fb00 330a 	mla	r3, r0, sl, r3
 802232e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022330:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022334:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022338:	fb08 3c0c 	mla	ip, r8, ip, r3
 802233c:	f8b9 3000 	ldrh.w	r3, [r9]
 8022340:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022344:	1218      	asrs	r0, r3, #8
 8022346:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802234a:	4350      	muls	r0, r2
 802234c:	10d9      	asrs	r1, r3, #3
 802234e:	00db      	lsls	r3, r3, #3
 8022350:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022354:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022358:	b2db      	uxtb	r3, r3
 802235a:	ea47 070c 	orr.w	r7, r7, ip
 802235e:	4351      	muls	r1, r2
 8022360:	4353      	muls	r3, r2
 8022362:	1c42      	adds	r2, r0, #1
 8022364:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022368:	0c3a      	lsrs	r2, r7, #16
 802236a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802236e:	4a18      	ldr	r2, [pc, #96]	; (80223d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8022370:	b2c0      	uxtb	r0, r0
 8022372:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8022376:	1c4a      	adds	r2, r1, #1
 8022378:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802237c:	0a3a      	lsrs	r2, r7, #8
 802237e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022382:	00c9      	lsls	r1, r1, #3
 8022384:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022388:	4301      	orrs	r1, r0
 802238a:	1c58      	adds	r0, r3, #1
 802238c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022390:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022394:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8022398:	4308      	orrs	r0, r1
 802239a:	f8a9 0000 	strh.w	r0, [r9]
 802239e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80223a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80223a2:	f109 0902 	add.w	r9, r9, #2
 80223a6:	441a      	add	r2, r3
 80223a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80223aa:	9225      	str	r2, [sp, #148]	; 0x94
 80223ac:	441d      	add	r5, r3
 80223ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80223b2:	e64c      	b.n	802204e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80223b4:	2800      	cmp	r0, #0
 80223b6:	f43f aeed 	beq.w	8022194 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80223ba:	5c79      	ldrb	r1, [r7, r1]
 80223bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80223c0:	9109      	str	r1, [sp, #36]	; 0x24
 80223c2:	0e09      	lsrs	r1, r1, #24
 80223c4:	9111      	str	r1, [sp, #68]	; 0x44
 80223c6:	e6e5      	b.n	8022194 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80223c8:	b01b      	add	sp, #108	; 0x6c
 80223ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223ce:	bf00      	nop
 80223d0:	fffff800 	.word	0xfffff800

080223d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80223d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223d8:	b085      	sub	sp, #20
 80223da:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80223de:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80223e2:	fb00 7406 	mla	r4, r0, r6, r7
 80223e6:	2800      	cmp	r0, #0
 80223e8:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80223ec:	9103      	str	r1, [sp, #12]
 80223ee:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80223f2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80223f6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80223fa:	9501      	str	r5, [sp, #4]
 80223fc:	eb03 0904 	add.w	r9, r3, r4
 8022400:	f2c0 8150 	blt.w	80226a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8022404:	4583      	cmp	fp, r0
 8022406:	f340 814d 	ble.w	80226a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802240a:	2f00      	cmp	r7, #0
 802240c:	f2c0 8146 	blt.w	802269c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8022410:	42be      	cmp	r6, r7
 8022412:	f340 8143 	ble.w	802269c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8022416:	f813 c004 	ldrb.w	ip, [r3, r4]
 802241a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802241e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8022422:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022426:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802242a:	4355      	muls	r5, r2
 802242c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022430:	fb0c f203 	mul.w	r2, ip, r3
 8022434:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8022438:	f605 0501 	addw	r5, r5, #2049	; 0x801
 802243c:	441d      	add	r5, r3
 802243e:	f102 0320 	add.w	r3, r2, #32
 8022442:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022446:	0a1b      	lsrs	r3, r3, #8
 8022448:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802244c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022450:	431c      	orrs	r4, r3
 8022452:	1c7b      	adds	r3, r7, #1
 8022454:	f100 812b 	bmi.w	80226ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8022458:	429e      	cmp	r6, r3
 802245a:	f340 8128 	ble.w	80226ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802245e:	2900      	cmp	r1, #0
 8022460:	f000 8128 	beq.w	80226b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8022464:	9a01      	ldr	r2, [sp, #4]
 8022466:	f899 3001 	ldrb.w	r3, [r9, #1]
 802246a:	8855      	ldrh	r5, [r2, #2]
 802246c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8022470:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8022474:	fb08 f802 	mul.w	r8, r8, r2
 8022478:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802247c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022480:	435d      	muls	r5, r3
 8022482:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8022486:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802248a:	44d0      	add	r8, sl
 802248c:	f105 0a20 	add.w	sl, r5, #32
 8022490:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8022494:	0a2d      	lsrs	r5, r5, #8
 8022496:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802249a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802249e:	432a      	orrs	r2, r5
 80224a0:	3001      	adds	r0, #1
 80224a2:	f100 810d 	bmi.w	80226c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80224a6:	4583      	cmp	fp, r0
 80224a8:	f340 810a 	ble.w	80226c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80224ac:	f1be 0f00 	cmp.w	lr, #0
 80224b0:	f000 810b 	beq.w	80226ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80224b4:	2f00      	cmp	r7, #0
 80224b6:	f2c0 8100 	blt.w	80226ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80224ba:	42be      	cmp	r6, r7
 80224bc:	f340 80fd 	ble.w	80226ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80224c0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80224c4:	9801      	ldr	r0, [sp, #4]
 80224c6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80224ca:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80224ce:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80224d2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80224d6:	fb0a fa00 	mul.w	sl, sl, r0
 80224da:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80224de:	fb05 f808 	mul.w	r8, r5, r8
 80224e2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80224e6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80224ea:	4482      	add	sl, r0
 80224ec:	f108 0020 	add.w	r0, r8, #32
 80224f0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80224f4:	0a00      	lsrs	r0, r0, #8
 80224f6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80224fa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224fe:	ea4b 0b00 	orr.w	fp, fp, r0
 8022502:	3701      	adds	r7, #1
 8022504:	f100 80e6 	bmi.w	80226d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8022508:	42be      	cmp	r6, r7
 802250a:	f340 80e3 	ble.w	80226d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802250e:	2900      	cmp	r1, #0
 8022510:	f000 80e3 	beq.w	80226da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8022514:	9801      	ldr	r0, [sp, #4]
 8022516:	3601      	adds	r6, #1
 8022518:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802251c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022520:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8022524:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022528:	fb07 f800 	mul.w	r8, r7, r0
 802252c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8022530:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8022534:	fb09 f906 	mul.w	r9, r9, r6
 8022538:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802253c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8022540:	44d1      	add	r9, sl
 8022542:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8022546:	f108 0020 	add.w	r0, r8, #32
 802254a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802254e:	0a00      	lsrs	r0, r0, #8
 8022550:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022554:	4330      	orrs	r0, r6
 8022556:	b28e      	uxth	r6, r1
 8022558:	fa1f f98e 	uxth.w	r9, lr
 802255c:	fb06 f809 	mul.w	r8, r6, r9
 8022560:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8022564:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022568:	0136      	lsls	r6, r6, #4
 802256a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802256e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022572:	9601      	str	r6, [sp, #4]
 8022574:	ea4a 0404 	orr.w	r4, sl, r4
 8022578:	fa1f f689 	uxth.w	r6, r9
 802257c:	9602      	str	r6, [sp, #8]
 802257e:	4626      	mov	r6, r4
 8022580:	fb11 f90e 	smulbb	r9, r1, lr
 8022584:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022588:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802258c:	f1ce 0410 	rsb	r4, lr, #16
 8022590:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022594:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022598:	1a64      	subs	r4, r4, r1
 802259a:	ea4a 0202 	orr.w	r2, sl, r2
 802259e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80225a2:	434a      	muls	r2, r1
 80225a4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80225a8:	fb04 2406 	mla	r4, r4, r6, r2
 80225ac:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80225b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80225b4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80225b8:	ea4a 0000 	orr.w	r0, sl, r0
 80225bc:	fb09 4200 	mla	r2, r9, r0, r4
 80225c0:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80225c4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80225c8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80225cc:	ea44 0b0b 	orr.w	fp, r4, fp
 80225d0:	9c01      	ldr	r4, [sp, #4]
 80225d2:	9e02      	ldr	r6, [sp, #8]
 80225d4:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80225d8:	1ba4      	subs	r4, r4, r6
 80225da:	9e01      	ldr	r6, [sp, #4]
 80225dc:	b2a4      	uxth	r4, r4
 80225de:	eba6 0608 	sub.w	r6, r6, r8
 80225e2:	b2b6      	uxth	r6, r6
 80225e4:	4373      	muls	r3, r6
 80225e6:	fb0c 3304 	mla	r3, ip, r4, r3
 80225ea:	9c02      	ldr	r4, [sp, #8]
 80225ec:	9903      	ldr	r1, [sp, #12]
 80225ee:	fb04 3505 	mla	r5, r4, r5, r3
 80225f2:	fb08 5707 	mla	r7, r8, r7, r5
 80225f6:	8808      	ldrh	r0, [r1, #0]
 80225f8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80225fc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022600:	b289      	uxth	r1, r1
 8022602:	434f      	muls	r7, r1
 8022604:	1c7b      	adds	r3, r7, #1
 8022606:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802260a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802260e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022612:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8022616:	1203      	asrs	r3, r0, #8
 8022618:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802261c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022620:	b2ff      	uxtb	r7, r7
 8022622:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022626:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802262a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802262e:	fb13 f307 	smulbb	r3, r3, r7
 8022632:	ea42 0e0e 	orr.w	lr, r2, lr
 8022636:	fa1f f28e 	uxth.w	r2, lr
 802263a:	1215      	asrs	r5, r2, #8
 802263c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022640:	fb05 3501 	mla	r5, r5, r1, r3
 8022644:	10c3      	asrs	r3, r0, #3
 8022646:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802264a:	fb13 f307 	smulbb	r3, r3, r7
 802264e:	10d4      	asrs	r4, r2, #3
 8022650:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022654:	fb04 3401 	mla	r4, r4, r1, r3
 8022658:	00c3      	lsls	r3, r0, #3
 802265a:	b2db      	uxtb	r3, r3
 802265c:	fb13 f307 	smulbb	r3, r3, r7
 8022660:	00d2      	lsls	r2, r2, #3
 8022662:	b2d2      	uxtb	r2, r2
 8022664:	fb02 3101 	mla	r1, r2, r1, r3
 8022668:	b2ad      	uxth	r5, r5
 802266a:	b289      	uxth	r1, r1
 802266c:	b2a4      	uxth	r4, r4
 802266e:	1c6b      	adds	r3, r5, #1
 8022670:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022674:	1c62      	adds	r2, r4, #1
 8022676:	1c4b      	adds	r3, r1, #1
 8022678:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802267c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8022680:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022684:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022688:	0964      	lsrs	r4, r4, #5
 802268a:	432b      	orrs	r3, r5
 802268c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022690:	9a03      	ldr	r2, [sp, #12]
 8022692:	4323      	orrs	r3, r4
 8022694:	8013      	strh	r3, [r2, #0]
 8022696:	b005      	add	sp, #20
 8022698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802269c:	f04f 0c00 	mov.w	ip, #0
 80226a0:	4664      	mov	r4, ip
 80226a2:	e6d6      	b.n	8022452 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80226a4:	2300      	movs	r3, #0
 80226a6:	469c      	mov	ip, r3
 80226a8:	461a      	mov	r2, r3
 80226aa:	461c      	mov	r4, r3
 80226ac:	e6f8      	b.n	80224a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80226ae:	2300      	movs	r3, #0
 80226b0:	461a      	mov	r2, r3
 80226b2:	e6f5      	b.n	80224a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80226b4:	460b      	mov	r3, r1
 80226b6:	460a      	mov	r2, r1
 80226b8:	e6f2      	b.n	80224a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80226ba:	2500      	movs	r5, #0
 80226bc:	46ab      	mov	fp, r5
 80226be:	e720      	b.n	8022502 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80226c0:	2700      	movs	r7, #0
 80226c2:	463d      	mov	r5, r7
 80226c4:	4638      	mov	r0, r7
 80226c6:	46bb      	mov	fp, r7
 80226c8:	e745      	b.n	8022556 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80226ca:	4677      	mov	r7, lr
 80226cc:	4675      	mov	r5, lr
 80226ce:	4670      	mov	r0, lr
 80226d0:	46f3      	mov	fp, lr
 80226d2:	e740      	b.n	8022556 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80226d4:	2700      	movs	r7, #0
 80226d6:	4638      	mov	r0, r7
 80226d8:	e73d      	b.n	8022556 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80226da:	460f      	mov	r7, r1
 80226dc:	4608      	mov	r0, r1
 80226de:	e73a      	b.n	8022556 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080226e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80226e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226e4:	b097      	sub	sp, #92	; 0x5c
 80226e6:	9214      	str	r2, [sp, #80]	; 0x50
 80226e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80226ea:	9015      	str	r0, [sp, #84]	; 0x54
 80226ec:	9308      	str	r3, [sp, #32]
 80226ee:	6850      	ldr	r0, [r2, #4]
 80226f0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80226f4:	9111      	str	r1, [sp, #68]	; 0x44
 80226f6:	9312      	str	r3, [sp, #72]	; 0x48
 80226f8:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80226fc:	fb00 1303 	mla	r3, r0, r3, r1
 8022700:	6812      	ldr	r2, [r2, #0]
 8022702:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022706:	9309      	str	r3, [sp, #36]	; 0x24
 8022708:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802270a:	681b      	ldr	r3, [r3, #0]
 802270c:	930b      	str	r3, [sp, #44]	; 0x2c
 802270e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022710:	685b      	ldr	r3, [r3, #4]
 8022712:	930c      	str	r3, [sp, #48]	; 0x30
 8022714:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022718:	930a      	str	r3, [sp, #40]	; 0x28
 802271a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802271c:	2b00      	cmp	r3, #0
 802271e:	dc03      	bgt.n	8022728 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022720:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022722:	2b00      	cmp	r3, #0
 8022724:	f340 83cb 	ble.w	8022ebe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8022728:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802272a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802272e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022732:	1e48      	subs	r0, r1, #1
 8022734:	1e55      	subs	r5, r2, #1
 8022736:	9b08      	ldr	r3, [sp, #32]
 8022738:	2b00      	cmp	r3, #0
 802273a:	f340 81a3 	ble.w	8022a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 802273e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8022740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022742:	1436      	asrs	r6, r6, #16
 8022744:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022748:	d406      	bmi.n	8022758 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802274a:	4286      	cmp	r6, r0
 802274c:	da04      	bge.n	8022758 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802274e:	2b00      	cmp	r3, #0
 8022750:	db02      	blt.n	8022758 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022752:	42ab      	cmp	r3, r5
 8022754:	f2c0 8197 	blt.w	8022a86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022758:	3601      	adds	r6, #1
 802275a:	f100 8184 	bmi.w	8022a66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802275e:	42b1      	cmp	r1, r6
 8022760:	f2c0 8181 	blt.w	8022a66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8022764:	3301      	adds	r3, #1
 8022766:	f100 817e 	bmi.w	8022a66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802276a:	429a      	cmp	r2, r3
 802276c:	f2c0 817b 	blt.w	8022a66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8022770:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022774:	9b08      	ldr	r3, [sp, #32]
 8022776:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022778:	9313      	str	r3, [sp, #76]	; 0x4c
 802277a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802277c:	2b00      	cmp	r3, #0
 802277e:	f340 81a4 	ble.w	8022aca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022784:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8022786:	1418      	asrs	r0, r3, #16
 8022788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802278a:	142d      	asrs	r5, r5, #16
 802278c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022790:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022792:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022796:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022798:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802279c:	f100 81f8 	bmi.w	8022b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80227a0:	f102 3eff 	add.w	lr, r2, #4294967295
 80227a4:	4575      	cmp	r5, lr
 80227a6:	f280 81f3 	bge.w	8022b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80227aa:	2800      	cmp	r0, #0
 80227ac:	f2c0 81f0 	blt.w	8022b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80227b0:	f103 3eff 	add.w	lr, r3, #4294967295
 80227b4:	4570      	cmp	r0, lr
 80227b6:	f280 81eb 	bge.w	8022b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80227ba:	b212      	sxth	r2, r2
 80227bc:	fb00 5002 	mla	r0, r0, r2, r5
 80227c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80227c2:	fa1f fe81 	uxth.w	lr, r1
 80227c6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80227ca:	eb03 0a00 	add.w	sl, r3, r0
 80227ce:	f813 9000 	ldrb.w	r9, [r3, r0]
 80227d2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80227d6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80227da:	b29b      	uxth	r3, r3
 80227dc:	f1bc 0f00 	cmp.w	ip, #0
 80227e0:	f000 81b9 	beq.w	8022b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80227e4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80227e8:	eb0a 0b02 	add.w	fp, sl, r2
 80227ec:	fa1f fa8c 	uxth.w	sl, ip
 80227f0:	fb0a fe0e 	mul.w	lr, sl, lr
 80227f4:	eba5 050e 	sub.w	r5, r5, lr
 80227f8:	b2ad      	uxth	r5, r5
 80227fa:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80227fe:	fb08 f505 	mul.w	r5, r8, r5
 8022802:	fa1f fa8a 	uxth.w	sl, sl
 8022806:	eba3 030a 	sub.w	r3, r3, sl
 802280a:	b29b      	uxth	r3, r3
 802280c:	940d      	str	r4, [sp, #52]	; 0x34
 802280e:	fb09 5303 	mla	r3, r9, r3, r5
 8022812:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022816:	940e      	str	r4, [sp, #56]	; 0x38
 8022818:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802281a:	fb0a 3304 	mla	r3, sl, r4, r3
 802281e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022820:	fb0e 3304 	mla	r3, lr, r4, r3
 8022824:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022828:	2b00      	cmp	r3, #0
 802282a:	f000 810f 	beq.w	8022a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802282e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022830:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022834:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022838:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802283c:	f000 8190 	beq.w	8022b60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8022840:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022844:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022848:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802284c:	fb09 f000 	mul.w	r0, r9, r0
 8022850:	fb0a fe0e 	mul.w	lr, sl, lr
 8022854:	f100 0b20 	add.w	fp, r0, #32
 8022858:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802285c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022860:	44ce      	add	lr, r9
 8022862:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022866:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802286a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802286e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022872:	ea4e 0909 	orr.w	r9, lr, r9
 8022876:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802287a:	8868      	ldrh	r0, [r5, #2]
 802287c:	d019      	beq.n	80228b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802287e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022882:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022886:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802288a:	fb08 f800 	mul.w	r8, r8, r0
 802288e:	fb0a fe0e 	mul.w	lr, sl, lr
 8022892:	f108 0b20 	add.w	fp, r8, #32
 8022896:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802289a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802289e:	4486      	add	lr, r0
 80228a0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80228a4:	0a00      	lsrs	r0, r0, #8
 80228a6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80228aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80228ae:	ea4e 0000 	orr.w	r0, lr, r0
 80228b2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80228b6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80228ba:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80228be:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80228c2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80228c6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80228ca:	ea4e 0909 	orr.w	r9, lr, r9
 80228ce:	ea4a 0000 	orr.w	r0, sl, r0
 80228d2:	f1bc 0f00 	cmp.w	ip, #0
 80228d6:	f000 8145 	beq.w	8022b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80228da:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80228de:	3a01      	subs	r2, #1
 80228e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80228e2:	0052      	lsls	r2, r2, #1
 80228e4:	3202      	adds	r2, #2
 80228e6:	2cff      	cmp	r4, #255	; 0xff
 80228e8:	eb05 0e02 	add.w	lr, r5, r2
 80228ec:	5aaa      	ldrh	r2, [r5, r2]
 80228ee:	d018      	beq.n	8022922 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80228f0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80228f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80228f8:	fb04 fa02 	mul.w	sl, r4, r2
 80228fc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022900:	fb08 f805 	mul.w	r8, r8, r5
 8022904:	f10a 0520 	add.w	r5, sl, #32
 8022908:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802290c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022910:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022914:	4442      	add	r2, r8
 8022916:	0a2d      	lsrs	r5, r5, #8
 8022918:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802291c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022920:	432a      	orrs	r2, r5
 8022922:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022924:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8022928:	2cff      	cmp	r4, #255	; 0xff
 802292a:	d01a      	beq.n	8022962 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802292c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022930:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022934:	fb04 fa05 	mul.w	sl, r4, r5
 8022938:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802293c:	fb08 f80e 	mul.w	r8, r8, lr
 8022940:	f10a 0e20 	add.w	lr, sl, #32
 8022944:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022948:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802294c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022950:	4445      	add	r5, r8
 8022952:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022956:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802295a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802295e:	ea45 050e 	orr.w	r5, r5, lr
 8022962:	fb1c fe01 	smulbb	lr, ip, r1
 8022966:	f1cc 0810 	rsb	r8, ip, #16
 802296a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802296e:	eba8 0801 	sub.w	r8, r8, r1
 8022972:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8022976:	4341      	muls	r1, r0
 8022978:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802297c:	fb09 1108 	mla	r1, r9, r8, r1
 8022980:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022984:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022988:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802298c:	ea4a 0202 	orr.w	r2, sl, r2
 8022990:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022994:	fb0c 1102 	mla	r1, ip, r2, r1
 8022998:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802299c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80229a0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80229a4:	ea4b 0505 	orr.w	r5, fp, r5
 80229a8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80229ac:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80229b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80229b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80229b8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80229bc:	ea42 0e0e 	orr.w	lr, r2, lr
 80229c0:	fa1f f28e 	uxth.w	r2, lr
 80229c4:	2bff      	cmp	r3, #255	; 0xff
 80229c6:	d103      	bne.n	80229d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80229c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80229ca:	29ff      	cmp	r1, #255	; 0xff
 80229cc:	f000 80de 	beq.w	8022b8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80229d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80229d2:	8838      	ldrh	r0, [r7, #0]
 80229d4:	434b      	muls	r3, r1
 80229d6:	f103 0c01 	add.w	ip, r3, #1
 80229da:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80229de:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80229e2:	fa5f fc83 	uxtb.w	ip, r3
 80229e6:	1203      	asrs	r3, r0, #8
 80229e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80229ec:	fb13 f30c 	smulbb	r3, r3, ip
 80229f0:	1215      	asrs	r5, r2, #8
 80229f2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80229f6:	fb05 3501 	mla	r5, r5, r1, r3
 80229fa:	10c3      	asrs	r3, r0, #3
 80229fc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8022a00:	fb13 f30c 	smulbb	r3, r3, ip
 8022a04:	10d1      	asrs	r1, r2, #3
 8022a06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022a08:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022a0c:	fb01 3104 	mla	r1, r1, r4, r3
 8022a10:	00c3      	lsls	r3, r0, #3
 8022a12:	b2db      	uxtb	r3, r3
 8022a14:	fb13 f30c 	smulbb	r3, r3, ip
 8022a18:	00d2      	lsls	r2, r2, #3
 8022a1a:	b2d2      	uxtb	r2, r2
 8022a1c:	fb02 3304 	mla	r3, r2, r4, r3
 8022a20:	b2ad      	uxth	r5, r5
 8022a22:	b29a      	uxth	r2, r3
 8022a24:	1c6b      	adds	r3, r5, #1
 8022a26:	b289      	uxth	r1, r1
 8022a28:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022a2c:	1c53      	adds	r3, r2, #1
 8022a2e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022a32:	1c4a      	adds	r2, r1, #1
 8022a34:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022a38:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022a3c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022a40:	0949      	lsrs	r1, r1, #5
 8022a42:	432b      	orrs	r3, r5
 8022a44:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022a48:	430b      	orrs	r3, r1
 8022a4a:	803b      	strh	r3, [r7, #0]
 8022a4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022a4e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022a50:	3702      	adds	r7, #2
 8022a52:	4413      	add	r3, r2
 8022a54:	9321      	str	r3, [sp, #132]	; 0x84
 8022a56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022a58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a5a:	441a      	add	r2, r3
 8022a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022a5e:	9222      	str	r2, [sp, #136]	; 0x88
 8022a60:	3b01      	subs	r3, #1
 8022a62:	9313      	str	r3, [sp, #76]	; 0x4c
 8022a64:	e689      	b.n	802277a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022a68:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8022a6a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8022a6c:	4433      	add	r3, r6
 8022a6e:	9321      	str	r3, [sp, #132]	; 0x84
 8022a70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a72:	441c      	add	r4, r3
 8022a74:	9b08      	ldr	r3, [sp, #32]
 8022a76:	9422      	str	r4, [sp, #136]	; 0x88
 8022a78:	3b01      	subs	r3, #1
 8022a7a:	9308      	str	r3, [sp, #32]
 8022a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a7e:	3302      	adds	r3, #2
 8022a80:	9309      	str	r3, [sp, #36]	; 0x24
 8022a82:	e658      	b.n	8022736 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022a84:	d028      	beq.n	8022ad8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8022a86:	9b08      	ldr	r3, [sp, #32]
 8022a88:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022a8a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8022a8c:	3b01      	subs	r3, #1
 8022a8e:	fb00 5003 	mla	r0, r0, r3, r5
 8022a92:	1400      	asrs	r0, r0, #16
 8022a94:	f53f ae6c 	bmi.w	8022770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022a98:	3901      	subs	r1, #1
 8022a9a:	4288      	cmp	r0, r1
 8022a9c:	f6bf ae68 	bge.w	8022770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022aa0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022aa2:	9822      	ldr	r0, [sp, #136]	; 0x88
 8022aa4:	fb01 0303 	mla	r3, r1, r3, r0
 8022aa8:	141b      	asrs	r3, r3, #16
 8022aaa:	f53f ae61 	bmi.w	8022770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022aae:	3a01      	subs	r2, #1
 8022ab0:	4293      	cmp	r3, r2
 8022ab2:	f6bf ae5d 	bge.w	8022770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022ab6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022aba:	9b08      	ldr	r3, [sp, #32]
 8022abc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022ac0:	9313      	str	r3, [sp, #76]	; 0x4c
 8022ac2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ac4:	2b00      	cmp	r3, #0
 8022ac6:	f300 8082 	bgt.w	8022bce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8022aca:	9b08      	ldr	r3, [sp, #32]
 8022acc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ad2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8022ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	f340 81ef 	ble.w	8022ebe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8022ae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022ae4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022ae8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022aec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022af0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022af4:	eef0 6a62 	vmov.f32	s13, s5
 8022af8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022afc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022b00:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022b04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022b08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022b0c:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8022b10:	eef0 6a43 	vmov.f32	s13, s6
 8022b14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022b18:	ee12 2a90 	vmov	r2, s5
 8022b1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022b20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8022b2a:	ee13 2a10 	vmov	r2, s6
 8022b2e:	9323      	str	r3, [sp, #140]	; 0x8c
 8022b30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b32:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8022b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8022b3a:	9324      	str	r3, [sp, #144]	; 0x90
 8022b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022b40:	3b01      	subs	r3, #1
 8022b42:	9311      	str	r3, [sp, #68]	; 0x44
 8022b44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b46:	bf08      	it	eq
 8022b48:	4613      	moveq	r3, r2
 8022b4a:	eeb0 3a67 	vmov.f32	s6, s15
 8022b4e:	9308      	str	r3, [sp, #32]
 8022b50:	eef0 2a47 	vmov.f32	s5, s14
 8022b54:	e5e1      	b.n	802271a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022b56:	fb08 f505 	mul.w	r5, r8, r5
 8022b5a:	fb09 5303 	mla	r3, r9, r3, r5
 8022b5e:	e661      	b.n	8022824 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8022b60:	4681      	mov	r9, r0
 8022b62:	e688      	b.n	8022876 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022b64:	f1c1 0210 	rsb	r2, r1, #16
 8022b68:	4341      	muls	r1, r0
 8022b6a:	fb09 1902 	mla	r9, r9, r2, r1
 8022b6e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022b72:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8022b76:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022b7a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022b7e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022b82:	ea42 0909 	orr.w	r9, r2, r9
 8022b86:	fa1f f289 	uxth.w	r2, r9
 8022b8a:	e71b      	b.n	80229c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022b8c:	803a      	strh	r2, [r7, #0]
 8022b8e:	e75d      	b.n	8022a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022b90:	f115 0e01 	adds.w	lr, r5, #1
 8022b94:	f53f af5a 	bmi.w	8022a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022b98:	4572      	cmp	r2, lr
 8022b9a:	f6ff af57 	blt.w	8022a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022b9e:	f110 0e01 	adds.w	lr, r0, #1
 8022ba2:	f53f af53 	bmi.w	8022a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022ba6:	4573      	cmp	r3, lr
 8022ba8:	f6ff af50 	blt.w	8022a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022bac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022bae:	b21b      	sxth	r3, r3
 8022bb0:	b212      	sxth	r2, r2
 8022bb2:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8022bb6:	9301      	str	r3, [sp, #4]
 8022bb8:	9200      	str	r2, [sp, #0]
 8022bba:	e9cd c405 	strd	ip, r4, [sp, #20]
 8022bbe:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8022bc2:	9502      	str	r5, [sp, #8]
 8022bc4:	4639      	mov	r1, r7
 8022bc6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022bc8:	f7ff fc04 	bl	80223d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8022bcc:	e73e      	b.n	8022a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022bd0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022bd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022bd6:	fa1f fc82 	uxth.w	ip, r2
 8022bda:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022bde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022be0:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022be4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022be8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022bea:	141f      	asrs	r7, r3, #16
 8022bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022bee:	141b      	asrs	r3, r3, #16
 8022bf0:	fb01 3707 	mla	r7, r1, r7, r3
 8022bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022bf6:	eb03 0a07 	add.w	sl, r3, r7
 8022bfa:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022bfe:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022c02:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022c06:	b29b      	uxth	r3, r3
 8022c08:	2d00      	cmp	r5, #0
 8022c0a:	f000 813d 	beq.w	8022e88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8022c0e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022c12:	eb0a 0b01 	add.w	fp, sl, r1
 8022c16:	fa1f fa85 	uxth.w	sl, r5
 8022c1a:	fb0a fc0c 	mul.w	ip, sl, ip
 8022c1e:	eba0 000c 	sub.w	r0, r0, ip
 8022c22:	b280      	uxth	r0, r0
 8022c24:	fb08 f000 	mul.w	r0, r8, r0
 8022c28:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022c2c:	fa1f fa8a 	uxth.w	sl, sl
 8022c30:	eba3 030a 	sub.w	r3, r3, sl
 8022c34:	b29b      	uxth	r3, r3
 8022c36:	fb09 0303 	mla	r3, r9, r3, r0
 8022c3a:	940f      	str	r4, [sp, #60]	; 0x3c
 8022c3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022c3e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022c42:	fb0a 3300 	mla	r3, sl, r0, r3
 8022c46:	fb0c 3304 	mla	r3, ip, r4, r3
 8022c4a:	9410      	str	r4, [sp, #64]	; 0x40
 8022c4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	f000 810b 	beq.w	8022e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8022c56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022c58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022c5a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022c5e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022c62:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022c66:	f000 8114 	beq.w	8022e92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8022c6a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022c6e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022c72:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022c76:	fb09 f707 	mul.w	r7, r9, r7
 8022c7a:	fb0a fc0c 	mul.w	ip, sl, ip
 8022c7e:	f107 0b20 	add.w	fp, r7, #32
 8022c82:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022c86:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022c8a:	44cc      	add	ip, r9
 8022c8c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022c90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022c94:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022c98:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022c9c:	ea4c 0909 	orr.w	r9, ip, r9
 8022ca0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022ca4:	8847      	ldrh	r7, [r0, #2]
 8022ca6:	d019      	beq.n	8022cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8022ca8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022cac:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022cb0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022cb4:	fb08 f807 	mul.w	r8, r8, r7
 8022cb8:	fb0a fc0c 	mul.w	ip, sl, ip
 8022cbc:	f108 0b20 	add.w	fp, r8, #32
 8022cc0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022cc4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022cc8:	44bc      	add	ip, r7
 8022cca:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022cce:	0a3f      	lsrs	r7, r7, #8
 8022cd0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022cd4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022cd8:	ea4c 0707 	orr.w	r7, ip, r7
 8022cdc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022ce0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022ce4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022ce8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022cec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022cf0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022cf4:	ea4c 0909 	orr.w	r9, ip, r9
 8022cf8:	ea4a 0707 	orr.w	r7, sl, r7
 8022cfc:	2d00      	cmp	r5, #0
 8022cfe:	f000 80ca 	beq.w	8022e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8022d02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022d06:	3901      	subs	r1, #1
 8022d08:	0049      	lsls	r1, r1, #1
 8022d0a:	3102      	adds	r1, #2
 8022d0c:	eb00 0c01 	add.w	ip, r0, r1
 8022d10:	5a41      	ldrh	r1, [r0, r1]
 8022d12:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022d14:	28ff      	cmp	r0, #255	; 0xff
 8022d16:	d019      	beq.n	8022d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8022d18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022d1a:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022d1e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022d22:	fb04 fa01 	mul.w	sl, r4, r1
 8022d26:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022d2a:	fb08 f800 	mul.w	r8, r8, r0
 8022d2e:	f10a 0020 	add.w	r0, sl, #32
 8022d32:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022d36:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022d3a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022d3e:	4441      	add	r1, r8
 8022d40:	0a00      	lsrs	r0, r0, #8
 8022d42:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022d46:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022d4a:	4301      	orrs	r1, r0
 8022d4c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022d4e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022d52:	2cff      	cmp	r4, #255	; 0xff
 8022d54:	d01a      	beq.n	8022d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8022d56:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022d5a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022d5e:	fb04 fa00 	mul.w	sl, r4, r0
 8022d62:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022d66:	fb08 f80c 	mul.w	r8, r8, ip
 8022d6a:	f10a 0c20 	add.w	ip, sl, #32
 8022d6e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022d72:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022d76:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022d7a:	4440      	add	r0, r8
 8022d7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d80:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022d84:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022d88:	ea40 000c 	orr.w	r0, r0, ip
 8022d8c:	fb15 fc02 	smulbb	ip, r5, r2
 8022d90:	f1c5 0810 	rsb	r8, r5, #16
 8022d94:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022d98:	eba8 0802 	sub.w	r8, r8, r2
 8022d9c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022da0:	437a      	muls	r2, r7
 8022da2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022da6:	fb09 2208 	mla	r2, r9, r8, r2
 8022daa:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022dae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022db2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022db6:	ea4a 0101 	orr.w	r1, sl, r1
 8022dba:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022dbe:	fb05 2201 	mla	r2, r5, r1, r2
 8022dc2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022dc6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022dca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022dce:	ea4b 0000 	orr.w	r0, fp, r0
 8022dd2:	fb0c 2200 	mla	r2, ip, r0, r2
 8022dd6:	0d57      	lsrs	r7, r2, #21
 8022dd8:	0952      	lsrs	r2, r2, #5
 8022dda:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022dde:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022de2:	433a      	orrs	r2, r7
 8022de4:	2bff      	cmp	r3, #255	; 0xff
 8022de6:	b292      	uxth	r2, r2
 8022de8:	d102      	bne.n	8022df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022dea:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022dec:	29ff      	cmp	r1, #255	; 0xff
 8022dee:	d063      	beq.n	8022eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8022df0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022df2:	f8be 1000 	ldrh.w	r1, [lr]
 8022df6:	4343      	muls	r3, r0
 8022df8:	1c58      	adds	r0, r3, #1
 8022dfa:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8022dfe:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8022e02:	1208      	asrs	r0, r1, #8
 8022e04:	b2db      	uxtb	r3, r3
 8022e06:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022e0a:	fb10 f003 	smulbb	r0, r0, r3
 8022e0e:	10cf      	asrs	r7, r1, #3
 8022e10:	00c9      	lsls	r1, r1, #3
 8022e12:	b2c9      	uxtb	r1, r1
 8022e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022e16:	1215      	asrs	r5, r2, #8
 8022e18:	fb11 f103 	smulbb	r1, r1, r3
 8022e1c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022e20:	fb05 0504 	mla	r5, r5, r4, r0
 8022e24:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022e28:	10d0      	asrs	r0, r2, #3
 8022e2a:	00d2      	lsls	r2, r2, #3
 8022e2c:	fb17 f703 	smulbb	r7, r7, r3
 8022e30:	b2d2      	uxtb	r2, r2
 8022e32:	fb02 1204 	mla	r2, r2, r4, r1
 8022e36:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022e3a:	fb00 7004 	mla	r0, r0, r4, r7
 8022e3e:	b2ad      	uxth	r5, r5
 8022e40:	b292      	uxth	r2, r2
 8022e42:	1c6b      	adds	r3, r5, #1
 8022e44:	1c57      	adds	r7, r2, #1
 8022e46:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022e4a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022e4e:	b280      	uxth	r0, r0
 8022e50:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022e54:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022e58:	433d      	orrs	r5, r7
 8022e5a:	1c47      	adds	r7, r0, #1
 8022e5c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022e60:	097f      	lsrs	r7, r7, #5
 8022e62:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022e66:	433d      	orrs	r5, r7
 8022e68:	f8ae 5000 	strh.w	r5, [lr]
 8022e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022e6e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022e70:	f10e 0e02 	add.w	lr, lr, #2
 8022e74:	4413      	add	r3, r2
 8022e76:	9321      	str	r3, [sp, #132]	; 0x84
 8022e78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022e7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022e7c:	441a      	add	r2, r3
 8022e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022e80:	9222      	str	r2, [sp, #136]	; 0x88
 8022e82:	3b01      	subs	r3, #1
 8022e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8022e86:	e61c      	b.n	8022ac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8022e88:	fb08 f000 	mul.w	r0, r8, r0
 8022e8c:	fb09 0303 	mla	r3, r9, r3, r0
 8022e90:	e6dc      	b.n	8022c4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8022e92:	46b9      	mov	r9, r7
 8022e94:	e704      	b.n	8022ca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8022e96:	f1c2 0110 	rsb	r1, r2, #16
 8022e9a:	437a      	muls	r2, r7
 8022e9c:	fb09 2901 	mla	r9, r9, r1, r2
 8022ea0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022ea4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022ea8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022eac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022eb0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022eb4:	4302      	orrs	r2, r0
 8022eb6:	e795      	b.n	8022de4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8022eb8:	f8ae 2000 	strh.w	r2, [lr]
 8022ebc:	e7d6      	b.n	8022e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8022ebe:	b017      	add	sp, #92	; 0x5c
 8022ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022ec4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ec8:	b085      	sub	sp, #20
 8022eca:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022ece:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8022ed2:	fb00 7406 	mla	r4, r0, r6, r7
 8022ed6:	2800      	cmp	r0, #0
 8022ed8:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8022edc:	9103      	str	r1, [sp, #12]
 8022ede:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8022ee2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8022ee6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022eea:	9501      	str	r5, [sp, #4]
 8022eec:	eb02 0904 	add.w	r9, r2, r4
 8022ef0:	f2c0 8141 	blt.w	8023176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022ef4:	4583      	cmp	fp, r0
 8022ef6:	f340 813e 	ble.w	8023176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022efa:	2f00      	cmp	r7, #0
 8022efc:	f2c0 8137 	blt.w	802316e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8022f00:	42be      	cmp	r6, r7
 8022f02:	f340 8134 	ble.w	802316e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8022f06:	f812 c004 	ldrb.w	ip, [r2, r4]
 8022f0a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8022f0e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8022f12:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022f16:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8022f1a:	4355      	muls	r5, r2
 8022f1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022f20:	fb0c f203 	mul.w	r2, ip, r3
 8022f24:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8022f28:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8022f2c:	441d      	add	r5, r3
 8022f2e:	f102 0320 	add.w	r3, r2, #32
 8022f32:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f36:	0a1b      	lsrs	r3, r3, #8
 8022f38:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8022f3c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022f40:	431c      	orrs	r4, r3
 8022f42:	1c7b      	adds	r3, r7, #1
 8022f44:	f100 811c 	bmi.w	8023180 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022f48:	429e      	cmp	r6, r3
 8022f4a:	f340 8119 	ble.w	8023180 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022f4e:	2900      	cmp	r1, #0
 8022f50:	f000 8119 	beq.w	8023186 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8022f54:	9a01      	ldr	r2, [sp, #4]
 8022f56:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022f5a:	8855      	ldrh	r5, [r2, #2]
 8022f5c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8022f60:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8022f64:	fb08 f802 	mul.w	r8, r8, r2
 8022f68:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022f6c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022f70:	435d      	muls	r5, r3
 8022f72:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8022f76:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022f7a:	44d0      	add	r8, sl
 8022f7c:	f105 0a20 	add.w	sl, r5, #32
 8022f80:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8022f84:	0a2d      	lsrs	r5, r5, #8
 8022f86:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022f8a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022f8e:	432a      	orrs	r2, r5
 8022f90:	3001      	adds	r0, #1
 8022f92:	f100 80fe 	bmi.w	8023192 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8022f96:	4583      	cmp	fp, r0
 8022f98:	f340 80fb 	ble.w	8023192 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8022f9c:	f1be 0f00 	cmp.w	lr, #0
 8022fa0:	f000 80fc 	beq.w	802319c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8022fa4:	2f00      	cmp	r7, #0
 8022fa6:	f2c0 80f1 	blt.w	802318c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8022faa:	42be      	cmp	r6, r7
 8022fac:	f340 80ee 	ble.w	802318c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8022fb0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022fb4:	9801      	ldr	r0, [sp, #4]
 8022fb6:	f819 5006 	ldrb.w	r5, [r9, r6]
 8022fba:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8022fbe:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022fc2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8022fc6:	fb0a fa00 	mul.w	sl, sl, r0
 8022fca:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8022fce:	fb05 f808 	mul.w	r8, r5, r8
 8022fd2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8022fd6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8022fda:	4482      	add	sl, r0
 8022fdc:	f108 0020 	add.w	r0, r8, #32
 8022fe0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022fe4:	0a00      	lsrs	r0, r0, #8
 8022fe6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8022fea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022fee:	ea4b 0b00 	orr.w	fp, fp, r0
 8022ff2:	3701      	adds	r7, #1
 8022ff4:	f100 80d7 	bmi.w	80231a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022ff8:	42be      	cmp	r6, r7
 8022ffa:	f340 80d4 	ble.w	80231a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022ffe:	2900      	cmp	r1, #0
 8023000:	f000 80d4 	beq.w	80231ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8023004:	9801      	ldr	r0, [sp, #4]
 8023006:	3601      	adds	r6, #1
 8023008:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802300c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8023010:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8023014:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023018:	fb07 f800 	mul.w	r8, r7, r0
 802301c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8023020:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8023024:	fb09 f906 	mul.w	r9, r9, r6
 8023028:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802302c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8023030:	44d1      	add	r9, sl
 8023032:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8023036:	f108 0020 	add.w	r0, r8, #32
 802303a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802303e:	0a00      	lsrs	r0, r0, #8
 8023040:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023044:	4330      	orrs	r0, r6
 8023046:	b28e      	uxth	r6, r1
 8023048:	fa1f f98e 	uxth.w	r9, lr
 802304c:	fb06 f809 	mul.w	r8, r6, r9
 8023050:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8023054:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8023058:	0136      	lsls	r6, r6, #4
 802305a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802305e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8023062:	9601      	str	r6, [sp, #4]
 8023064:	ea4a 0404 	orr.w	r4, sl, r4
 8023068:	fa1f f689 	uxth.w	r6, r9
 802306c:	9602      	str	r6, [sp, #8]
 802306e:	4626      	mov	r6, r4
 8023070:	fb11 f90e 	smulbb	r9, r1, lr
 8023074:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023078:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802307c:	f1ce 0410 	rsb	r4, lr, #16
 8023080:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023084:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023088:	1a64      	subs	r4, r4, r1
 802308a:	ea4a 0202 	orr.w	r2, sl, r2
 802308e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8023092:	434a      	muls	r2, r1
 8023094:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8023098:	fb04 2406 	mla	r4, r4, r6, r2
 802309c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80230a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80230a4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80230a8:	ea4a 0000 	orr.w	r0, sl, r0
 80230ac:	fb09 4200 	mla	r2, r9, r0, r4
 80230b0:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80230b4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80230b8:	9801      	ldr	r0, [sp, #4]
 80230ba:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80230be:	ea44 0b0b 	orr.w	fp, r4, fp
 80230c2:	9c02      	ldr	r4, [sp, #8]
 80230c4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80230c8:	1b00      	subs	r0, r0, r4
 80230ca:	9c01      	ldr	r4, [sp, #4]
 80230cc:	b280      	uxth	r0, r0
 80230ce:	eba4 0608 	sub.w	r6, r4, r8
 80230d2:	b2b6      	uxth	r6, r6
 80230d4:	4373      	muls	r3, r6
 80230d6:	fb0c 3300 	mla	r3, ip, r0, r3
 80230da:	9802      	ldr	r0, [sp, #8]
 80230dc:	9903      	ldr	r1, [sp, #12]
 80230de:	fb00 3505 	mla	r5, r0, r5, r3
 80230e2:	fb08 5707 	mla	r7, r8, r7, r5
 80230e6:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80230ea:	8809      	ldrh	r1, [r1, #0]
 80230ec:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80230f0:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80230f4:	120b      	asrs	r3, r1, #8
 80230f6:	b2ff      	uxtb	r7, r7
 80230f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80230fc:	437b      	muls	r3, r7
 80230fe:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023102:	10c8      	asrs	r0, r1, #3
 8023104:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023108:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802310c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023110:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023114:	00c9      	lsls	r1, r1, #3
 8023116:	4378      	muls	r0, r7
 8023118:	ea42 0e0e 	orr.w	lr, r2, lr
 802311c:	b2c9      	uxtb	r1, r1
 802311e:	fa1f f28e 	uxth.w	r2, lr
 8023122:	434f      	muls	r7, r1
 8023124:	1c59      	adds	r1, r3, #1
 8023126:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802312a:	1213      	asrs	r3, r2, #8
 802312c:	f023 0307 	bic.w	r3, r3, #7
 8023130:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023134:	1c41      	adds	r1, r0, #1
 8023136:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802313a:	10d1      	asrs	r1, r2, #3
 802313c:	f021 0103 	bic.w	r1, r1, #3
 8023140:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023144:	021b      	lsls	r3, r3, #8
 8023146:	00c9      	lsls	r1, r1, #3
 8023148:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802314c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023150:	430b      	orrs	r3, r1
 8023152:	1c79      	adds	r1, r7, #1
 8023154:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8023158:	00d2      	lsls	r2, r2, #3
 802315a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802315e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023162:	431a      	orrs	r2, r3
 8023164:	9b03      	ldr	r3, [sp, #12]
 8023166:	801a      	strh	r2, [r3, #0]
 8023168:	b005      	add	sp, #20
 802316a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802316e:	f04f 0c00 	mov.w	ip, #0
 8023172:	4664      	mov	r4, ip
 8023174:	e6e5      	b.n	8022f42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8023176:	2300      	movs	r3, #0
 8023178:	469c      	mov	ip, r3
 802317a:	461a      	mov	r2, r3
 802317c:	461c      	mov	r4, r3
 802317e:	e707      	b.n	8022f90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8023180:	2300      	movs	r3, #0
 8023182:	461a      	mov	r2, r3
 8023184:	e704      	b.n	8022f90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8023186:	460b      	mov	r3, r1
 8023188:	460a      	mov	r2, r1
 802318a:	e701      	b.n	8022f90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802318c:	2500      	movs	r5, #0
 802318e:	46ab      	mov	fp, r5
 8023190:	e72f      	b.n	8022ff2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8023192:	2700      	movs	r7, #0
 8023194:	463d      	mov	r5, r7
 8023196:	4638      	mov	r0, r7
 8023198:	46bb      	mov	fp, r7
 802319a:	e754      	b.n	8023046 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802319c:	4677      	mov	r7, lr
 802319e:	4675      	mov	r5, lr
 80231a0:	4670      	mov	r0, lr
 80231a2:	46f3      	mov	fp, lr
 80231a4:	e74f      	b.n	8023046 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80231a6:	2700      	movs	r7, #0
 80231a8:	4638      	mov	r0, r7
 80231aa:	e74c      	b.n	8023046 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80231ac:	460f      	mov	r7, r1
 80231ae:	4608      	mov	r0, r1
 80231b0:	e749      	b.n	8023046 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080231b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b8:	b093      	sub	sp, #76	; 0x4c
 80231ba:	9210      	str	r2, [sp, #64]	; 0x40
 80231bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80231be:	9011      	str	r0, [sp, #68]	; 0x44
 80231c0:	6850      	ldr	r0, [r2, #4]
 80231c2:	910e      	str	r1, [sp, #56]	; 0x38
 80231c4:	9306      	str	r3, [sp, #24]
 80231c6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80231ca:	fb00 1303 	mla	r3, r0, r3, r1
 80231ce:	6812      	ldr	r2, [r2, #0]
 80231d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80231d4:	9307      	str	r3, [sp, #28]
 80231d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80231d8:	681b      	ldr	r3, [r3, #0]
 80231da:	9308      	str	r3, [sp, #32]
 80231dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80231de:	685b      	ldr	r3, [r3, #4]
 80231e0:	9309      	str	r3, [sp, #36]	; 0x24
 80231e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	dc03      	bgt.n	80231f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80231e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80231ea:	2b00      	cmp	r3, #0
 80231ec:	f340 83b4 	ble.w	8023958 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80231f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80231f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80231f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80231fa:	1e48      	subs	r0, r1, #1
 80231fc:	1e55      	subs	r5, r2, #1
 80231fe:	9b06      	ldr	r3, [sp, #24]
 8023200:	2b00      	cmp	r3, #0
 8023202:	f340 8163 	ble.w	80234cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8023206:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023208:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802320a:	1436      	asrs	r6, r6, #16
 802320c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023210:	d406      	bmi.n	8023220 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023212:	4286      	cmp	r6, r0
 8023214:	da04      	bge.n	8023220 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023216:	2b00      	cmp	r3, #0
 8023218:	db02      	blt.n	8023220 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802321a:	42ab      	cmp	r3, r5
 802321c:	f2c0 8157 	blt.w	80234ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023220:	3601      	adds	r6, #1
 8023222:	f100 8144 	bmi.w	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8023226:	42b1      	cmp	r1, r6
 8023228:	f2c0 8141 	blt.w	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802322c:	3301      	adds	r3, #1
 802322e:	f100 813e 	bmi.w	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8023232:	429a      	cmp	r2, r3
 8023234:	f2c0 813b 	blt.w	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8023238:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802323c:	9b06      	ldr	r3, [sp, #24]
 802323e:	9f07      	ldr	r7, [sp, #28]
 8023240:	930f      	str	r3, [sp, #60]	; 0x3c
 8023242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023244:	2b00      	cmp	r3, #0
 8023246:	f340 8164 	ble.w	8023512 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802324a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802324c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802324e:	1418      	asrs	r0, r3, #16
 8023250:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023252:	142d      	asrs	r5, r5, #16
 8023254:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023258:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802325a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802325e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023260:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023264:	f100 81ee 	bmi.w	8023644 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023268:	f102 3eff 	add.w	lr, r2, #4294967295
 802326c:	4575      	cmp	r5, lr
 802326e:	f280 81e9 	bge.w	8023644 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023272:	2800      	cmp	r0, #0
 8023274:	f2c0 81e6 	blt.w	8023644 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023278:	f103 3eff 	add.w	lr, r3, #4294967295
 802327c:	4570      	cmp	r0, lr
 802327e:	f280 81e1 	bge.w	8023644 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023282:	b212      	sxth	r2, r2
 8023284:	fb00 5002 	mla	r0, r0, r2, r5
 8023288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802328a:	fa1f fe81 	uxth.w	lr, r1
 802328e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8023292:	eb03 0a00 	add.w	sl, r3, r0
 8023296:	f813 9000 	ldrb.w	r9, [r3, r0]
 802329a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802329e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80232a2:	b29b      	uxth	r3, r3
 80232a4:	f1bc 0f00 	cmp.w	ip, #0
 80232a8:	f000 8179 	beq.w	802359e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80232ac:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80232b0:	eb0a 0b02 	add.w	fp, sl, r2
 80232b4:	fa1f fa8c 	uxth.w	sl, ip
 80232b8:	fb0a fe0e 	mul.w	lr, sl, lr
 80232bc:	eba5 050e 	sub.w	r5, r5, lr
 80232c0:	b2ad      	uxth	r5, r5
 80232c2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80232c6:	fb08 f505 	mul.w	r5, r8, r5
 80232ca:	fa1f fa8a 	uxth.w	sl, sl
 80232ce:	eba3 030a 	sub.w	r3, r3, sl
 80232d2:	b29b      	uxth	r3, r3
 80232d4:	940a      	str	r4, [sp, #40]	; 0x28
 80232d6:	fb09 5303 	mla	r3, r9, r3, r5
 80232da:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80232de:	940b      	str	r4, [sp, #44]	; 0x2c
 80232e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80232e2:	fb0a 3304 	mla	r3, sl, r4, r3
 80232e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80232e8:	fb0e 3304 	mla	r3, lr, r4, r3
 80232ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80232f0:	2b00      	cmp	r3, #0
 80232f2:	f000 80cf 	beq.w	8023494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80232f6:	9c08      	ldr	r4, [sp, #32]
 80232f8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80232fc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8023300:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8023304:	f000 8150 	beq.w	80235a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8023308:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802330c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023310:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023314:	fb09 f000 	mul.w	r0, r9, r0
 8023318:	fb0a fe0e 	mul.w	lr, sl, lr
 802331c:	f100 0b20 	add.w	fp, r0, #32
 8023320:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8023324:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023328:	44ce      	add	lr, r9
 802332a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802332e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023332:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023336:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802333a:	ea4e 0909 	orr.w	r9, lr, r9
 802333e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023342:	8868      	ldrh	r0, [r5, #2]
 8023344:	d019      	beq.n	802337a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023346:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802334a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802334e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023352:	fb08 f800 	mul.w	r8, r8, r0
 8023356:	fb0a fe0e 	mul.w	lr, sl, lr
 802335a:	f108 0b20 	add.w	fp, r8, #32
 802335e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8023362:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023366:	4486      	add	lr, r0
 8023368:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802336c:	0a00      	lsrs	r0, r0, #8
 802336e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023372:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023376:	ea4e 0000 	orr.w	r0, lr, r0
 802337a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802337e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023382:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023386:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802338a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802338e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023392:	ea4e 0909 	orr.w	r9, lr, r9
 8023396:	ea4a 0000 	orr.w	r0, sl, r0
 802339a:	f1bc 0f00 	cmp.w	ip, #0
 802339e:	f000 8105 	beq.w	80235ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80233a2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80233a6:	3a01      	subs	r2, #1
 80233a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80233aa:	0052      	lsls	r2, r2, #1
 80233ac:	3202      	adds	r2, #2
 80233ae:	2cff      	cmp	r4, #255	; 0xff
 80233b0:	eb05 0e02 	add.w	lr, r5, r2
 80233b4:	5aaa      	ldrh	r2, [r5, r2]
 80233b6:	d018      	beq.n	80233ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80233b8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80233bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80233c0:	fb04 fa02 	mul.w	sl, r4, r2
 80233c4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80233c8:	fb08 f805 	mul.w	r8, r8, r5
 80233cc:	f10a 0520 	add.w	r5, sl, #32
 80233d0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80233d4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80233d8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80233dc:	4442      	add	r2, r8
 80233de:	0a2d      	lsrs	r5, r5, #8
 80233e0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80233e4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80233e8:	432a      	orrs	r2, r5
 80233ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80233ec:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80233f0:	2cff      	cmp	r4, #255	; 0xff
 80233f2:	d01a      	beq.n	802342a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80233f4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80233f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80233fc:	fb04 fa05 	mul.w	sl, r4, r5
 8023400:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023404:	fb08 f80e 	mul.w	r8, r8, lr
 8023408:	f10a 0e20 	add.w	lr, sl, #32
 802340c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8023410:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8023414:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023418:	4445      	add	r5, r8
 802341a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802341e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8023422:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023426:	ea45 050e 	orr.w	r5, r5, lr
 802342a:	fb1c fe01 	smulbb	lr, ip, r1
 802342e:	f1cc 0810 	rsb	r8, ip, #16
 8023432:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8023436:	eba8 0801 	sub.w	r8, r8, r1
 802343a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802343e:	4341      	muls	r1, r0
 8023440:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8023444:	fb09 1108 	mla	r1, r9, r8, r1
 8023448:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802344c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023450:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023454:	ea4a 0202 	orr.w	r2, sl, r2
 8023458:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802345c:	fb0c 1102 	mla	r1, ip, r2, r1
 8023460:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8023464:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023468:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802346c:	ea4b 0505 	orr.w	r5, fp, r5
 8023470:	fb0e 1e05 	mla	lr, lr, r5, r1
 8023474:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023478:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802347c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023480:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023484:	ea42 0e0e 	orr.w	lr, r2, lr
 8023488:	fa1f f28e 	uxth.w	r2, lr
 802348c:	2bff      	cmp	r3, #255	; 0xff
 802348e:	f040 80a1 	bne.w	80235d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023492:	803a      	strh	r2, [r7, #0]
 8023494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023496:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023498:	3702      	adds	r7, #2
 802349a:	4413      	add	r3, r2
 802349c:	931d      	str	r3, [sp, #116]	; 0x74
 802349e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80234a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80234a2:	441a      	add	r2, r3
 80234a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80234a6:	921e      	str	r2, [sp, #120]	; 0x78
 80234a8:	3b01      	subs	r3, #1
 80234aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80234ac:	e6c9      	b.n	8023242 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80234ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80234b0:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80234b2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80234b4:	4433      	add	r3, r6
 80234b6:	931d      	str	r3, [sp, #116]	; 0x74
 80234b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80234ba:	441c      	add	r4, r3
 80234bc:	9b06      	ldr	r3, [sp, #24]
 80234be:	941e      	str	r4, [sp, #120]	; 0x78
 80234c0:	3b01      	subs	r3, #1
 80234c2:	9306      	str	r3, [sp, #24]
 80234c4:	9b07      	ldr	r3, [sp, #28]
 80234c6:	3302      	adds	r3, #2
 80234c8:	9307      	str	r3, [sp, #28]
 80234ca:	e698      	b.n	80231fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80234cc:	d028      	beq.n	8023520 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80234ce:	9b06      	ldr	r3, [sp, #24]
 80234d0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80234d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80234d4:	3b01      	subs	r3, #1
 80234d6:	fb00 5003 	mla	r0, r0, r3, r5
 80234da:	1400      	asrs	r0, r0, #16
 80234dc:	f53f aeac 	bmi.w	8023238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80234e0:	3901      	subs	r1, #1
 80234e2:	4288      	cmp	r0, r1
 80234e4:	f6bf aea8 	bge.w	8023238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80234e8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80234ea:	981e      	ldr	r0, [sp, #120]	; 0x78
 80234ec:	fb01 0303 	mla	r3, r1, r3, r0
 80234f0:	141b      	asrs	r3, r3, #16
 80234f2:	f53f aea1 	bmi.w	8023238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80234f6:	3a01      	subs	r2, #1
 80234f8:	4293      	cmp	r3, r2
 80234fa:	f6bf ae9d 	bge.w	8023238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80234fe:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023502:	9b06      	ldr	r3, [sp, #24]
 8023504:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8023508:	930f      	str	r3, [sp, #60]	; 0x3c
 802350a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802350c:	2b00      	cmp	r3, #0
 802350e:	f300 80b6 	bgt.w	802367e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8023512:	9b06      	ldr	r3, [sp, #24]
 8023514:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023518:	9b07      	ldr	r3, [sp, #28]
 802351a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802351e:	9307      	str	r3, [sp, #28]
 8023520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023522:	2b00      	cmp	r3, #0
 8023524:	f340 8218 	ble.w	8023958 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8023528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802352c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023530:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023534:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023538:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802353c:	eef0 6a62 	vmov.f32	s13, s5
 8023540:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023544:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023548:	ee61 7a27 	vmul.f32	s15, s2, s15
 802354c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023550:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023554:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8023558:	eef0 6a43 	vmov.f32	s13, s6
 802355c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023560:	ee12 2a90 	vmov	r2, s5
 8023564:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023568:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802356a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802356e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023572:	ee13 2a10 	vmov	r2, s6
 8023576:	931f      	str	r3, [sp, #124]	; 0x7c
 8023578:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802357a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802357e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023582:	9320      	str	r3, [sp, #128]	; 0x80
 8023584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023586:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023588:	3b01      	subs	r3, #1
 802358a:	930e      	str	r3, [sp, #56]	; 0x38
 802358c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802358e:	bf08      	it	eq
 8023590:	4613      	moveq	r3, r2
 8023592:	eeb0 3a67 	vmov.f32	s6, s15
 8023596:	9306      	str	r3, [sp, #24]
 8023598:	eef0 2a47 	vmov.f32	s5, s14
 802359c:	e621      	b.n	80231e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802359e:	fb08 f505 	mul.w	r5, r8, r5
 80235a2:	fb09 5303 	mla	r3, r9, r3, r5
 80235a6:	e6a1      	b.n	80232ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80235a8:	4681      	mov	r9, r0
 80235aa:	e6c8      	b.n	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80235ac:	f1c1 0210 	rsb	r2, r1, #16
 80235b0:	4341      	muls	r1, r0
 80235b2:	fb09 1902 	mla	r9, r9, r2, r1
 80235b6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80235ba:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80235be:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80235c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80235c6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80235ca:	ea42 0909 	orr.w	r9, r2, r9
 80235ce:	fa1f f289 	uxth.w	r2, r9
 80235d2:	e75b      	b.n	802348c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80235d4:	43db      	mvns	r3, r3
 80235d6:	f8b7 c000 	ldrh.w	ip, [r7]
 80235da:	fa5f fe83 	uxtb.w	lr, r3
 80235de:	ea4f 202c 	mov.w	r0, ip, asr #8
 80235e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80235e6:	fb00 f00e 	mul.w	r0, r0, lr
 80235ea:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80235ee:	1c41      	adds	r1, r0, #1
 80235f0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80235f4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80235f8:	fb05 f50e 	mul.w	r5, r5, lr
 80235fc:	1211      	asrs	r1, r2, #8
 80235fe:	f021 0107 	bic.w	r1, r1, #7
 8023602:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023606:	48d6      	ldr	r0, [pc, #856]	; (8023960 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8023608:	b2c9      	uxtb	r1, r1
 802360a:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802360e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8023612:	1c69      	adds	r1, r5, #1
 8023614:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8023618:	b2db      	uxtb	r3, r3
 802361a:	10d1      	asrs	r1, r2, #3
 802361c:	fb03 f30e 	mul.w	r3, r3, lr
 8023620:	f021 0103 	bic.w	r1, r1, #3
 8023624:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8023628:	00c9      	lsls	r1, r1, #3
 802362a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802362e:	4301      	orrs	r1, r0
 8023630:	1c58      	adds	r0, r3, #1
 8023632:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023636:	00d2      	lsls	r2, r2, #3
 8023638:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802363c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023640:	430a      	orrs	r2, r1
 8023642:	e726      	b.n	8023492 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8023644:	f115 0e01 	adds.w	lr, r5, #1
 8023648:	f53f af24 	bmi.w	8023494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802364c:	4572      	cmp	r2, lr
 802364e:	f6ff af21 	blt.w	8023494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023652:	f110 0e01 	adds.w	lr, r0, #1
 8023656:	f53f af1d 	bmi.w	8023494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802365a:	4573      	cmp	r3, lr
 802365c:	f6ff af1a 	blt.w	8023494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023660:	b21b      	sxth	r3, r3
 8023662:	b212      	sxth	r2, r2
 8023664:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8023668:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802366c:	9301      	str	r3, [sp, #4]
 802366e:	9200      	str	r2, [sp, #0]
 8023670:	4639      	mov	r1, r7
 8023672:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8023676:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023678:	f7ff fc24 	bl	8022ec4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802367c:	e70a      	b.n	8023494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802367e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023680:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023684:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023686:	fa1f fc82 	uxth.w	ip, r2
 802368a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802368e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023690:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8023694:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023698:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802369a:	141f      	asrs	r7, r3, #16
 802369c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802369e:	141b      	asrs	r3, r3, #16
 80236a0:	fb01 3707 	mla	r7, r1, r7, r3
 80236a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236a6:	eb03 0a07 	add.w	sl, r3, r7
 80236aa:	f813 9007 	ldrb.w	r9, [r3, r7]
 80236ae:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80236b2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80236b6:	b29b      	uxth	r3, r3
 80236b8:	2d00      	cmp	r5, #0
 80236ba:	f000 80fe 	beq.w	80238ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80236be:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80236c2:	eb0a 0b01 	add.w	fp, sl, r1
 80236c6:	fa1f fa85 	uxth.w	sl, r5
 80236ca:	fb0a fc0c 	mul.w	ip, sl, ip
 80236ce:	eba0 000c 	sub.w	r0, r0, ip
 80236d2:	b280      	uxth	r0, r0
 80236d4:	fb08 f000 	mul.w	r0, r8, r0
 80236d8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80236dc:	fa1f fa8a 	uxth.w	sl, sl
 80236e0:	eba3 030a 	sub.w	r3, r3, sl
 80236e4:	b29b      	uxth	r3, r3
 80236e6:	fb09 0303 	mla	r3, r9, r3, r0
 80236ea:	940c      	str	r4, [sp, #48]	; 0x30
 80236ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80236ee:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80236f2:	fb0a 3300 	mla	r3, sl, r0, r3
 80236f6:	fb0c 3304 	mla	r3, ip, r4, r3
 80236fa:	940d      	str	r4, [sp, #52]	; 0x34
 80236fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023700:	2b00      	cmp	r3, #0
 8023702:	f000 80cc 	beq.w	802389e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8023706:	9808      	ldr	r0, [sp, #32]
 8023708:	9c08      	ldr	r4, [sp, #32]
 802370a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802370e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8023712:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8023716:	f000 80d5 	beq.w	80238c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802371a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802371e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023722:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023726:	fb09 f707 	mul.w	r7, r9, r7
 802372a:	fb0a fc0c 	mul.w	ip, sl, ip
 802372e:	f107 0b20 	add.w	fp, r7, #32
 8023732:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8023736:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802373a:	44cc      	add	ip, r9
 802373c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8023740:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023744:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023748:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802374c:	ea4c 0909 	orr.w	r9, ip, r9
 8023750:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023754:	8847      	ldrh	r7, [r0, #2]
 8023756:	d019      	beq.n	802378c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8023758:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802375c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023760:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023764:	fb08 f807 	mul.w	r8, r8, r7
 8023768:	fb0a fc0c 	mul.w	ip, sl, ip
 802376c:	f108 0b20 	add.w	fp, r8, #32
 8023770:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8023774:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8023778:	44bc      	add	ip, r7
 802377a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802377e:	0a3f      	lsrs	r7, r7, #8
 8023780:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023784:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023788:	ea4c 0707 	orr.w	r7, ip, r7
 802378c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8023790:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023794:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023798:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802379c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80237a0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80237a4:	ea4c 0909 	orr.w	r9, ip, r9
 80237a8:	ea4a 0707 	orr.w	r7, sl, r7
 80237ac:	2d00      	cmp	r5, #0
 80237ae:	f000 808b 	beq.w	80238c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80237b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80237b6:	3901      	subs	r1, #1
 80237b8:	0049      	lsls	r1, r1, #1
 80237ba:	3102      	adds	r1, #2
 80237bc:	eb00 0c01 	add.w	ip, r0, r1
 80237c0:	5a41      	ldrh	r1, [r0, r1]
 80237c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80237c4:	28ff      	cmp	r0, #255	; 0xff
 80237c6:	d019      	beq.n	80237fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 80237c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80237ca:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80237ce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80237d2:	fb04 fa01 	mul.w	sl, r4, r1
 80237d6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80237da:	fb08 f800 	mul.w	r8, r8, r0
 80237de:	f10a 0020 	add.w	r0, sl, #32
 80237e2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80237e6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80237ea:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80237ee:	4441      	add	r1, r8
 80237f0:	0a00      	lsrs	r0, r0, #8
 80237f2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80237f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80237fa:	4301      	orrs	r1, r0
 80237fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80237fe:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8023802:	2cff      	cmp	r4, #255	; 0xff
 8023804:	d01a      	beq.n	802383c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8023806:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802380a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802380e:	fb04 fa00 	mul.w	sl, r4, r0
 8023812:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023816:	fb08 f80c 	mul.w	r8, r8, ip
 802381a:	f10a 0c20 	add.w	ip, sl, #32
 802381e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8023822:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8023826:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802382a:	4440      	add	r0, r8
 802382c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023830:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8023834:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023838:	ea40 000c 	orr.w	r0, r0, ip
 802383c:	fb15 fc02 	smulbb	ip, r5, r2
 8023840:	f1c5 0810 	rsb	r8, r5, #16
 8023844:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8023848:	eba8 0802 	sub.w	r8, r8, r2
 802384c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8023850:	437a      	muls	r2, r7
 8023852:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8023856:	fb09 2208 	mla	r2, r9, r8, r2
 802385a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802385e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023862:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023866:	ea4a 0101 	orr.w	r1, sl, r1
 802386a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802386e:	fb05 2201 	mla	r2, r5, r1, r2
 8023872:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023876:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802387a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802387e:	ea4b 0000 	orr.w	r0, fp, r0
 8023882:	fb0c 2200 	mla	r2, ip, r0, r2
 8023886:	0d57      	lsrs	r7, r2, #21
 8023888:	0952      	lsrs	r2, r2, #5
 802388a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802388e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023892:	433a      	orrs	r2, r7
 8023894:	2bff      	cmp	r3, #255	; 0xff
 8023896:	b292      	uxth	r2, r2
 8023898:	d127      	bne.n	80238ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802389a:	f8ae 2000 	strh.w	r2, [lr]
 802389e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80238a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80238a2:	f10e 0e02 	add.w	lr, lr, #2
 80238a6:	4413      	add	r3, r2
 80238a8:	931d      	str	r3, [sp, #116]	; 0x74
 80238aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80238ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80238ae:	441a      	add	r2, r3
 80238b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80238b2:	921e      	str	r2, [sp, #120]	; 0x78
 80238b4:	3b01      	subs	r3, #1
 80238b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80238b8:	e627      	b.n	802350a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80238ba:	fb08 f000 	mul.w	r0, r8, r0
 80238be:	fb09 0303 	mla	r3, r9, r3, r0
 80238c2:	e71b      	b.n	80236fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 80238c4:	46b9      	mov	r9, r7
 80238c6:	e743      	b.n	8023750 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 80238c8:	f1c2 0110 	rsb	r1, r2, #16
 80238cc:	437a      	muls	r2, r7
 80238ce:	fb09 2901 	mla	r9, r9, r1, r2
 80238d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80238d6:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80238da:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80238de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80238e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80238e6:	4302      	orrs	r2, r0
 80238e8:	e7d4      	b.n	8023894 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80238ea:	43db      	mvns	r3, r3
 80238ec:	f8be 7000 	ldrh.w	r7, [lr]
 80238f0:	fa5f fc83 	uxtb.w	ip, r3
 80238f4:	1238      	asrs	r0, r7, #8
 80238f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80238fa:	fb00 f00c 	mul.w	r0, r0, ip
 80238fe:	10fd      	asrs	r5, r7, #3
 8023900:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023904:	fb05 f10c 	mul.w	r1, r5, ip
 8023908:	1c45      	adds	r5, r0, #1
 802390a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802390e:	1215      	asrs	r5, r2, #8
 8023910:	f025 0507 	bic.w	r5, r5, #7
 8023914:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023918:	00fb      	lsls	r3, r7, #3
 802391a:	1c4d      	adds	r5, r1, #1
 802391c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8023920:	b2db      	uxtb	r3, r3
 8023922:	10d1      	asrs	r1, r2, #3
 8023924:	fb03 f30c 	mul.w	r3, r3, ip
 8023928:	f021 0103 	bic.w	r1, r1, #3
 802392c:	4c0c      	ldr	r4, [pc, #48]	; (8023960 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802392e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8023932:	b2c0      	uxtb	r0, r0
 8023934:	00c9      	lsls	r1, r1, #3
 8023936:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802393a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802393e:	4308      	orrs	r0, r1
 8023940:	1c59      	adds	r1, r3, #1
 8023942:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023946:	00d2      	lsls	r2, r2, #3
 8023948:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802394c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8023950:	4318      	orrs	r0, r3
 8023952:	f8ae 0000 	strh.w	r0, [lr]
 8023956:	e7a2      	b.n	802389e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8023958:	b013      	add	sp, #76	; 0x4c
 802395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802395e:	bf00      	nop
 8023960:	fffff800 	.word	0xfffff800

08023964 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8023964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023968:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 802396c:	fb05 4c03 	mla	ip, r5, r3, r4
 8023970:	2d00      	cmp	r5, #0
 8023972:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8023976:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 802397a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802397e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8023982:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8023986:	8808      	ldrh	r0, [r1, #0]
 8023988:	f2c0 80a7 	blt.w	8023ada <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802398c:	45aa      	cmp	sl, r5
 802398e:	f340 80a4 	ble.w	8023ada <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8023992:	2c00      	cmp	r4, #0
 8023994:	f2c0 809f 	blt.w	8023ad6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8023998:	42a3      	cmp	r3, r4
 802399a:	f340 809c 	ble.w	8023ad6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802399e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80239a2:	1c62      	adds	r2, r4, #1
 80239a4:	f100 809c 	bmi.w	8023ae0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80239a8:	4293      	cmp	r3, r2
 80239aa:	f340 8099 	ble.w	8023ae0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80239ae:	f1b9 0f00 	cmp.w	r9, #0
 80239b2:	f000 8095 	beq.w	8023ae0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80239b6:	f8be c002 	ldrh.w	ip, [lr, #2]
 80239ba:	3501      	adds	r5, #1
 80239bc:	f100 8094 	bmi.w	8023ae8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80239c0:	45aa      	cmp	sl, r5
 80239c2:	f340 8091 	ble.w	8023ae8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80239c6:	2f00      	cmp	r7, #0
 80239c8:	f000 808e 	beq.w	8023ae8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80239cc:	2c00      	cmp	r4, #0
 80239ce:	f2c0 8089 	blt.w	8023ae4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80239d2:	42a3      	cmp	r3, r4
 80239d4:	f340 8086 	ble.w	8023ae4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80239d8:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80239dc:	3401      	adds	r4, #1
 80239de:	f100 8086 	bmi.w	8023aee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80239e2:	42a3      	cmp	r3, r4
 80239e4:	f340 8083 	ble.w	8023aee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80239e8:	f1b9 0f00 	cmp.w	r9, #0
 80239ec:	d07f      	beq.n	8023aee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80239ee:	3301      	adds	r3, #1
 80239f0:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80239f4:	fb19 fe07 	smulbb	lr, r9, r7
 80239f8:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80239fc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023a00:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8023a04:	ea44 0808 	orr.w	r8, r4, r8
 8023a08:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023a0c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023a10:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023a14:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023a18:	ea44 0c0c 	orr.w	ip, r4, ip
 8023a1c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023a20:	fb04 f40c 	mul.w	r4, r4, ip
 8023a24:	f1c7 0210 	rsb	r2, r7, #16
 8023a28:	eba2 0209 	sub.w	r2, r2, r9
 8023a2c:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023a30:	fb02 4808 	mla	r8, r2, r8, r4
 8023a34:	b2b4      	uxth	r4, r6
 8023a36:	43f6      	mvns	r6, r6
 8023a38:	041a      	lsls	r2, r3, #16
 8023a3a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023a3e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023a42:	4313      	orrs	r3, r2
 8023a44:	fb0e 8303 	mla	r3, lr, r3, r8
 8023a48:	042a      	lsls	r2, r5, #16
 8023a4a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023a4e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023a52:	432a      	orrs	r2, r5
 8023a54:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023a58:	fb07 3202 	mla	r2, r7, r2, r3
 8023a5c:	0d53      	lsrs	r3, r2, #21
 8023a5e:	0952      	lsrs	r2, r2, #5
 8023a60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a64:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023a68:	431a      	orrs	r2, r3
 8023a6a:	b293      	uxth	r3, r2
 8023a6c:	1202      	asrs	r2, r0, #8
 8023a6e:	b2f6      	uxtb	r6, r6
 8023a70:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023a74:	fb12 f206 	smulbb	r2, r2, r6
 8023a78:	10c7      	asrs	r7, r0, #3
 8023a7a:	00c0      	lsls	r0, r0, #3
 8023a7c:	b2c0      	uxtb	r0, r0
 8023a7e:	121d      	asrs	r5, r3, #8
 8023a80:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023a84:	fb10 f006 	smulbb	r0, r0, r6
 8023a88:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023a8c:	fb17 f706 	smulbb	r7, r7, r6
 8023a90:	fb05 2504 	mla	r5, r5, r4, r2
 8023a94:	10da      	asrs	r2, r3, #3
 8023a96:	00db      	lsls	r3, r3, #3
 8023a98:	b2db      	uxtb	r3, r3
 8023a9a:	fb03 0004 	mla	r0, r3, r4, r0
 8023a9e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023aa2:	fb02 7204 	mla	r2, r2, r4, r7
 8023aa6:	b2ad      	uxth	r5, r5
 8023aa8:	b280      	uxth	r0, r0
 8023aaa:	1c6b      	adds	r3, r5, #1
 8023aac:	b292      	uxth	r2, r2
 8023aae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023ab2:	1c43      	adds	r3, r0, #1
 8023ab4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023ab8:	1c50      	adds	r0, r2, #1
 8023aba:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023abe:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023ac2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023ac6:	0952      	lsrs	r2, r2, #5
 8023ac8:	432b      	orrs	r3, r5
 8023aca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ace:	4313      	orrs	r3, r2
 8023ad0:	800b      	strh	r3, [r1, #0]
 8023ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ad6:	4680      	mov	r8, r0
 8023ad8:	e763      	b.n	80239a2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8023ada:	4684      	mov	ip, r0
 8023adc:	4680      	mov	r8, r0
 8023ade:	e76c      	b.n	80239ba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8023ae0:	4684      	mov	ip, r0
 8023ae2:	e76a      	b.n	80239ba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8023ae4:	4605      	mov	r5, r0
 8023ae6:	e779      	b.n	80239dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8023ae8:	4603      	mov	r3, r0
 8023aea:	4605      	mov	r5, r0
 8023aec:	e782      	b.n	80239f4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8023aee:	4603      	mov	r3, r0
 8023af0:	e780      	b.n	80239f4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08023af2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023af2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023af6:	b093      	sub	sp, #76	; 0x4c
 8023af8:	461d      	mov	r5, r3
 8023afa:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8023afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023b00:	910a      	str	r1, [sp, #40]	; 0x28
 8023b02:	9210      	str	r2, [sp, #64]	; 0x40
 8023b04:	6859      	ldr	r1, [r3, #4]
 8023b06:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8023b0a:	681b      	ldr	r3, [r3, #0]
 8023b0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8023b0e:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8023b12:	fb01 2707 	mla	r7, r1, r7, r2
 8023b16:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8023b1a:	9307      	str	r3, [sp, #28]
 8023b1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023b1e:	9011      	str	r0, [sp, #68]	; 0x44
 8023b20:	681b      	ldr	r3, [r3, #0]
 8023b22:	9309      	str	r3, [sp, #36]	; 0x24
 8023b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b26:	43db      	mvns	r3, r3
 8023b28:	b2db      	uxtb	r3, r3
 8023b2a:	9308      	str	r3, [sp, #32]
 8023b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b2e:	2b00      	cmp	r3, #0
 8023b30:	dc03      	bgt.n	8023b3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023b32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023b34:	2b00      	cmp	r3, #0
 8023b36:	f340 8203 	ble.w	8023f40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023b3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023b3c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b40:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b44:	1e48      	subs	r0, r1, #1
 8023b46:	f102 3cff 	add.w	ip, r2, #4294967295
 8023b4a:	2d00      	cmp	r5, #0
 8023b4c:	f340 80da 	ble.w	8023d04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023b50:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023b54:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023b58:	d406      	bmi.n	8023b68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023b5a:	4586      	cmp	lr, r0
 8023b5c:	da04      	bge.n	8023b68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023b5e:	2b00      	cmp	r3, #0
 8023b60:	db02      	blt.n	8023b68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023b62:	4563      	cmp	r3, ip
 8023b64:	f2c0 80cf 	blt.w	8023d06 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023b68:	f11e 0e01 	adds.w	lr, lr, #1
 8023b6c:	f100 80c1 	bmi.w	8023cf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023b70:	4571      	cmp	r1, lr
 8023b72:	f2c0 80be 	blt.w	8023cf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023b76:	3301      	adds	r3, #1
 8023b78:	f100 80bb 	bmi.w	8023cf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023b7c:	429a      	cmp	r2, r3
 8023b7e:	f2c0 80b8 	blt.w	8023cf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023b82:	46a9      	mov	r9, r5
 8023b84:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8023b88:	f1b9 0f00 	cmp.w	r9, #0
 8023b8c:	f340 80d8 	ble.w	8023d40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023b90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023b92:	1421      	asrs	r1, r4, #16
 8023b94:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023b98:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023b9c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023ba0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023ba4:	f100 8111 	bmi.w	8023dca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023ba8:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023bac:	4551      	cmp	r1, sl
 8023bae:	f280 810c 	bge.w	8023dca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023bb2:	2800      	cmp	r0, #0
 8023bb4:	f2c0 8109 	blt.w	8023dca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023bb8:	f103 3aff 	add.w	sl, r3, #4294967295
 8023bbc:	4550      	cmp	r0, sl
 8023bbe:	f280 8104 	bge.w	8023dca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023bc2:	fa0f f38e 	sxth.w	r3, lr
 8023bc6:	fb00 1103 	mla	r1, r0, r3, r1
 8023bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023bcc:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8023bd0:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8023bd4:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8023bd8:	f1bc 0f00 	cmp.w	ip, #0
 8023bdc:	d007      	beq.n	8023bee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8023bde:	005b      	lsls	r3, r3, #1
 8023be0:	eb0a 0003 	add.w	r0, sl, r3
 8023be4:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8023be8:	930c      	str	r3, [sp, #48]	; 0x30
 8023bea:	8843      	ldrh	r3, [r0, #2]
 8023bec:	930d      	str	r3, [sp, #52]	; 0x34
 8023bee:	fb12 f30c 	smulbb	r3, r2, ip
 8023bf2:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8023bf6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023bfa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023bfe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023c02:	10db      	asrs	r3, r3, #3
 8023c04:	ea40 000e 	orr.w	r0, r0, lr
 8023c08:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023c0c:	f1cc 0e10 	rsb	lr, ip, #16
 8023c10:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023c14:	ebae 0e02 	sub.w	lr, lr, r2
 8023c18:	ea4a 0101 	orr.w	r1, sl, r1
 8023c1c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023c20:	4351      	muls	r1, r2
 8023c22:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023c26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023c28:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023c2c:	0410      	lsls	r0, r2, #16
 8023c2e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023c32:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023c36:	4310      	orrs	r0, r2
 8023c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023c3a:	fb03 e000 	mla	r0, r3, r0, lr
 8023c3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023c40:	0412      	lsls	r2, r2, #16
 8023c42:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023c46:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023c4a:	ea42 020e 	orr.w	r2, r2, lr
 8023c4e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023c52:	fb03 0302 	mla	r3, r3, r2, r0
 8023c56:	f8b8 0000 	ldrh.w	r0, [r8]
 8023c5a:	9f08      	ldr	r7, [sp, #32]
 8023c5c:	0d5a      	lsrs	r2, r3, #21
 8023c5e:	1201      	asrs	r1, r0, #8
 8023c60:	095b      	lsrs	r3, r3, #5
 8023c62:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023c66:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023c6a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023c6e:	4313      	orrs	r3, r2
 8023c70:	fb11 f107 	smulbb	r1, r1, r7
 8023c74:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023c78:	00c0      	lsls	r0, r0, #3
 8023c7a:	b29b      	uxth	r3, r3
 8023c7c:	b2c0      	uxtb	r0, r0
 8023c7e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8023c82:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023c86:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023c8a:	fb10 f007 	smulbb	r0, r0, r7
 8023c8e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023c92:	fb1e fe07 	smulbb	lr, lr, r7
 8023c96:	fb0c 1c02 	mla	ip, ip, r2, r1
 8023c9a:	10d9      	asrs	r1, r3, #3
 8023c9c:	00db      	lsls	r3, r3, #3
 8023c9e:	b2db      	uxtb	r3, r3
 8023ca0:	fb03 0302 	mla	r3, r3, r2, r0
 8023ca4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023ca8:	fb01 e102 	mla	r1, r1, r2, lr
 8023cac:	fa1f fc8c 	uxth.w	ip, ip
 8023cb0:	b29a      	uxth	r2, r3
 8023cb2:	f10c 0301 	add.w	r3, ip, #1
 8023cb6:	b289      	uxth	r1, r1
 8023cb8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023cbc:	1c53      	adds	r3, r2, #1
 8023cbe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023cc2:	1c4a      	adds	r2, r1, #1
 8023cc4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023cc8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023ccc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023cd0:	0949      	lsrs	r1, r1, #5
 8023cd2:	ea43 030c 	orr.w	r3, r3, ip
 8023cd6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023cda:	430b      	orrs	r3, r1
 8023cdc:	f8a8 3000 	strh.w	r3, [r8]
 8023ce0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023ce2:	f108 0802 	add.w	r8, r8, #2
 8023ce6:	441c      	add	r4, r3
 8023ce8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023cea:	f109 39ff 	add.w	r9, r9, #4294967295
 8023cee:	441e      	add	r6, r3
 8023cf0:	e74a      	b.n	8023b88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023cf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023cf4:	3d01      	subs	r5, #1
 8023cf6:	441c      	add	r4, r3
 8023cf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023cfa:	441e      	add	r6, r3
 8023cfc:	9b07      	ldr	r3, [sp, #28]
 8023cfe:	3302      	adds	r3, #2
 8023d00:	9307      	str	r3, [sp, #28]
 8023d02:	e722      	b.n	8023b4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023d04:	d022      	beq.n	8023d4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8023d06:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023d08:	1e6b      	subs	r3, r5, #1
 8023d0a:	fb00 4003 	mla	r0, r0, r3, r4
 8023d0e:	1400      	asrs	r0, r0, #16
 8023d10:	f53f af37 	bmi.w	8023b82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023d14:	3901      	subs	r1, #1
 8023d16:	4288      	cmp	r0, r1
 8023d18:	f6bf af33 	bge.w	8023b82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023d1c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023d1e:	fb01 6303 	mla	r3, r1, r3, r6
 8023d22:	141b      	asrs	r3, r3, #16
 8023d24:	f53f af2d 	bmi.w	8023b82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023d28:	3a01      	subs	r2, #1
 8023d2a:	4293      	cmp	r3, r2
 8023d2c:	f6bf af29 	bge.w	8023b82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023d30:	46a8      	mov	r8, r5
 8023d32:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8023d36:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8023d3a:	f1b8 0f00 	cmp.w	r8, #0
 8023d3e:	dc5e      	bgt.n	8023dfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023d40:	9b07      	ldr	r3, [sp, #28]
 8023d42:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023d46:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023d4a:	9307      	str	r3, [sp, #28]
 8023d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d4e:	2b00      	cmp	r3, #0
 8023d50:	f340 80f6 	ble.w	8023f40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d58:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023d64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023d68:	eef0 6a62 	vmov.f32	s13, s5
 8023d6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d70:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023d74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023d78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023d80:	ee16 4a90 	vmov	r4, s13
 8023d84:	eef0 6a43 	vmov.f32	s13, s6
 8023d88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d8c:	ee12 2a90 	vmov	r2, s5
 8023d90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023d94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023d96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d9e:	ee13 2a10 	vmov	r2, s6
 8023da2:	931f      	str	r3, [sp, #124]	; 0x7c
 8023da4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023da6:	ee16 6a90 	vmov	r6, s13
 8023daa:	fb92 f3f3 	sdiv	r3, r2, r3
 8023dae:	9320      	str	r3, [sp, #128]	; 0x80
 8023db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023db2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023db4:	3b01      	subs	r3, #1
 8023db6:	930a      	str	r3, [sp, #40]	; 0x28
 8023db8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023dba:	bf0c      	ite	eq
 8023dbc:	4615      	moveq	r5, r2
 8023dbe:	461d      	movne	r5, r3
 8023dc0:	eeb0 3a67 	vmov.f32	s6, s15
 8023dc4:	eef0 2a47 	vmov.f32	s5, s14
 8023dc8:	e6b0      	b.n	8023b2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023dca:	f111 0a01 	adds.w	sl, r1, #1
 8023dce:	d487      	bmi.n	8023ce0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023dd0:	45d6      	cmp	lr, sl
 8023dd2:	db85      	blt.n	8023ce0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023dd4:	f110 0a01 	adds.w	sl, r0, #1
 8023dd8:	d482      	bmi.n	8023ce0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023dda:	4553      	cmp	r3, sl
 8023ddc:	db80      	blt.n	8023ce0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023dde:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023de0:	b21b      	sxth	r3, r3
 8023de2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8023de6:	9101      	str	r1, [sp, #4]
 8023de8:	9300      	str	r3, [sp, #0]
 8023dea:	e9cd c704 	strd	ip, r7, [sp, #16]
 8023dee:	fa0f f38e 	sxth.w	r3, lr
 8023df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023df4:	4641      	mov	r1, r8
 8023df6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023df8:	f7ff fdb4 	bl	8023964 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8023dfc:	e770      	b.n	8023ce0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023dfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e00:	1430      	asrs	r0, r6, #16
 8023e02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e06:	1423      	asrs	r3, r4, #16
 8023e08:	fb01 3000 	mla	r0, r1, r0, r3
 8023e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023e10:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8023e14:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023e18:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8023e1c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023e20:	8858      	ldrh	r0, [r3, #2]
 8023e22:	f1be 0f00 	cmp.w	lr, #0
 8023e26:	d00b      	beq.n	8023e40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023e28:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023e2c:	3901      	subs	r1, #1
 8023e2e:	0049      	lsls	r1, r1, #1
 8023e30:	3102      	adds	r1, #2
 8023e32:	eb03 0b01 	add.w	fp, r3, r1
 8023e36:	5a5b      	ldrh	r3, [r3, r1]
 8023e38:	930e      	str	r3, [sp, #56]	; 0x38
 8023e3a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023e40:	fb12 f30e 	smulbb	r3, r2, lr
 8023e44:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8023e48:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023e4c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023e50:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8023e54:	10db      	asrs	r3, r3, #3
 8023e56:	ea41 010c 	orr.w	r1, r1, ip
 8023e5a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023e5e:	f1ce 0c10 	rsb	ip, lr, #16
 8023e62:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023e66:	ebac 0c02 	sub.w	ip, ip, r2
 8023e6a:	ea4b 0000 	orr.w	r0, fp, r0
 8023e6e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023e72:	4350      	muls	r0, r2
 8023e74:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023e78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023e7a:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023e7e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023e82:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023e86:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8023e8a:	ea4b 0101 	orr.w	r1, fp, r1
 8023e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023e90:	fb03 c101 	mla	r1, r3, r1, ip
 8023e94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023e96:	0412      	lsls	r2, r2, #16
 8023e98:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023e9c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023ea0:	4302      	orrs	r2, r0
 8023ea2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023ea6:	fb03 1202 	mla	r2, r3, r2, r1
 8023eaa:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8023eae:	0952      	lsrs	r2, r2, #5
 8023eb0:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8023eb4:	f8b9 2000 	ldrh.w	r2, [r9]
 8023eb8:	9f08      	ldr	r7, [sp, #32]
 8023eba:	1211      	asrs	r1, r2, #8
 8023ebc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023ec0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023ec4:	fb11 f107 	smulbb	r1, r1, r7
 8023ec8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8023ecc:	ea4b 0303 	orr.w	r3, fp, r3
 8023ed0:	00d2      	lsls	r2, r2, #3
 8023ed2:	b29b      	uxth	r3, r3
 8023ed4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023ed8:	b2d2      	uxtb	r2, r2
 8023eda:	1218      	asrs	r0, r3, #8
 8023edc:	fb1c fc07 	smulbb	ip, ip, r7
 8023ee0:	fb12 f207 	smulbb	r2, r2, r7
 8023ee4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023ee8:	fb00 100a 	mla	r0, r0, sl, r1
 8023eec:	10d9      	asrs	r1, r3, #3
 8023eee:	00db      	lsls	r3, r3, #3
 8023ef0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023ef4:	b2db      	uxtb	r3, r3
 8023ef6:	fb01 c10a 	mla	r1, r1, sl, ip
 8023efa:	fb03 230a 	mla	r3, r3, sl, r2
 8023efe:	b280      	uxth	r0, r0
 8023f00:	b29b      	uxth	r3, r3
 8023f02:	b289      	uxth	r1, r1
 8023f04:	1c42      	adds	r2, r0, #1
 8023f06:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023f0a:	f101 0c01 	add.w	ip, r1, #1
 8023f0e:	1c5a      	adds	r2, r3, #1
 8023f10:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023f14:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023f18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023f1a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023f1e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023f22:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023f26:	4310      	orrs	r0, r2
 8023f28:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023f2c:	441c      	add	r4, r3
 8023f2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023f30:	ea40 000c 	orr.w	r0, r0, ip
 8023f34:	f829 0b02 	strh.w	r0, [r9], #2
 8023f38:	441e      	add	r6, r3
 8023f3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8023f3e:	e6fc      	b.n	8023d3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023f40:	b013      	add	sp, #76	; 0x4c
 8023f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023f46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8023f46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023f4a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8023f4e:	fb0e 4703 	mla	r7, lr, r3, r4
 8023f52:	f1be 0f00 	cmp.w	lr, #0
 8023f56:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8023f5a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8023f5e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8023f62:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8023f66:	8808      	ldrh	r0, [r1, #0]
 8023f68:	db60      	blt.n	802402c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023f6a:	45f1      	cmp	r9, lr
 8023f6c:	dd5e      	ble.n	802402c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023f6e:	2c00      	cmp	r4, #0
 8023f70:	db5a      	blt.n	8024028 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8023f72:	42a3      	cmp	r3, r4
 8023f74:	dd58      	ble.n	8024028 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8023f76:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8023f7a:	1c62      	adds	r2, r4, #1
 8023f7c:	d459      	bmi.n	8024032 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023f7e:	4293      	cmp	r3, r2
 8023f80:	dd57      	ble.n	8024032 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023f82:	2d00      	cmp	r5, #0
 8023f84:	d055      	beq.n	8024032 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023f86:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8023f8a:	f11e 0e01 	adds.w	lr, lr, #1
 8023f8e:	d454      	bmi.n	802403a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023f90:	45f1      	cmp	r9, lr
 8023f92:	dd52      	ble.n	802403a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023f94:	2e00      	cmp	r6, #0
 8023f96:	d050      	beq.n	802403a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023f98:	2c00      	cmp	r4, #0
 8023f9a:	db4c      	blt.n	8024036 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023f9c:	42a3      	cmp	r3, r4
 8023f9e:	dd4a      	ble.n	8024036 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023fa0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8023fa4:	3401      	adds	r4, #1
 8023fa6:	d405      	bmi.n	8023fb4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023fa8:	42a3      	cmp	r3, r4
 8023faa:	dd03      	ble.n	8023fb4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023fac:	b115      	cbz	r5, 8023fb4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023fae:	3301      	adds	r3, #1
 8023fb0:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8023fb4:	fb15 f406 	smulbb	r4, r5, r6
 8023fb8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8023fbc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023fc0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8023fc4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023fc8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8023fcc:	ea43 0c0c 	orr.w	ip, r3, ip
 8023fd0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023fd4:	f1c6 0310 	rsb	r3, r6, #16
 8023fd8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023fdc:	1b5b      	subs	r3, r3, r5
 8023fde:	ea4e 0707 	orr.w	r7, lr, r7
 8023fe2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8023fe6:	437d      	muls	r5, r7
 8023fe8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023fec:	fb03 5c0c 	mla	ip, r3, ip, r5
 8023ff0:	0403      	lsls	r3, r0, #16
 8023ff2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023ff6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023ffa:	4318      	orrs	r0, r3
 8023ffc:	fb04 c000 	mla	r0, r4, r0, ip
 8024000:	0413      	lsls	r3, r2, #16
 8024002:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024006:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802400a:	4313      	orrs	r3, r2
 802400c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024010:	fb06 0003 	mla	r0, r6, r3, r0
 8024014:	0d43      	lsrs	r3, r0, #21
 8024016:	0940      	lsrs	r0, r0, #5
 8024018:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802401c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024020:	4318      	orrs	r0, r3
 8024022:	8008      	strh	r0, [r1, #0]
 8024024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024028:	4684      	mov	ip, r0
 802402a:	e7a6      	b.n	8023f7a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 802402c:	4607      	mov	r7, r0
 802402e:	4684      	mov	ip, r0
 8024030:	e7ab      	b.n	8023f8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8024032:	4607      	mov	r7, r0
 8024034:	e7a9      	b.n	8023f8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8024036:	4602      	mov	r2, r0
 8024038:	e7b4      	b.n	8023fa4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 802403a:	4602      	mov	r2, r0
 802403c:	e7ba      	b.n	8023fb4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802403e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802403e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024042:	b08f      	sub	sp, #60	; 0x3c
 8024044:	461d      	mov	r5, r3
 8024046:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 802404a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802404c:	9107      	str	r1, [sp, #28]
 802404e:	6859      	ldr	r1, [r3, #4]
 8024050:	920c      	str	r2, [sp, #48]	; 0x30
 8024052:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8024056:	fb01 2707 	mla	r7, r1, r7, r2
 802405a:	681b      	ldr	r3, [r3, #0]
 802405c:	900d      	str	r0, [sp, #52]	; 0x34
 802405e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8024062:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024064:	f8d3 8000 	ldr.w	r8, [r3]
 8024068:	9b07      	ldr	r3, [sp, #28]
 802406a:	2b00      	cmp	r3, #0
 802406c:	dc03      	bgt.n	8024076 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802406e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024070:	2b00      	cmp	r3, #0
 8024072:	f340 8181 	ble.w	8024378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024076:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024078:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802407c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024080:	1e48      	subs	r0, r1, #1
 8024082:	f102 3cff 	add.w	ip, r2, #4294967295
 8024086:	2d00      	cmp	r5, #0
 8024088:	f340 809b 	ble.w	80241c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802408c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024090:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024094:	d406      	bmi.n	80240a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024096:	4586      	cmp	lr, r0
 8024098:	da04      	bge.n	80240a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802409a:	2b00      	cmp	r3, #0
 802409c:	db02      	blt.n	80240a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802409e:	4563      	cmp	r3, ip
 80240a0:	f2c0 8090 	blt.w	80241c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80240a4:	f11e 0e01 	adds.w	lr, lr, #1
 80240a8:	f100 8084 	bmi.w	80241b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80240ac:	4571      	cmp	r1, lr
 80240ae:	f2c0 8081 	blt.w	80241b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80240b2:	3301      	adds	r3, #1
 80240b4:	d47e      	bmi.n	80241b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80240b6:	429a      	cmp	r2, r3
 80240b8:	db7c      	blt.n	80241b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80240ba:	46aa      	mov	sl, r5
 80240bc:	46b9      	mov	r9, r7
 80240be:	f1ba 0f00 	cmp.w	sl, #0
 80240c2:	f340 8099 	ble.w	80241f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80240c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80240c8:	1421      	asrs	r1, r4, #16
 80240ca:	ea4f 4026 	mov.w	r0, r6, asr #16
 80240ce:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80240d2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80240d6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80240da:	f100 80d0 	bmi.w	802427e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80240de:	f10e 3bff 	add.w	fp, lr, #4294967295
 80240e2:	4559      	cmp	r1, fp
 80240e4:	f280 80cb 	bge.w	802427e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80240e8:	2800      	cmp	r0, #0
 80240ea:	f2c0 80c8 	blt.w	802427e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80240ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80240f2:	4558      	cmp	r0, fp
 80240f4:	f280 80c3 	bge.w	802427e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80240f8:	fa0f fe8e 	sxth.w	lr, lr
 80240fc:	fb00 110e 	mla	r1, r0, lr, r1
 8024100:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8024104:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8024108:	8841      	ldrh	r1, [r0, #2]
 802410a:	f1bc 0f00 	cmp.w	ip, #0
 802410e:	d00b      	beq.n	8024128 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8024110:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8024114:	3b01      	subs	r3, #1
 8024116:	005b      	lsls	r3, r3, #1
 8024118:	3302      	adds	r3, #2
 802411a:	eb00 0e03 	add.w	lr, r0, r3
 802411e:	5ac3      	ldrh	r3, [r0, r3]
 8024120:	9308      	str	r3, [sp, #32]
 8024122:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8024126:	9309      	str	r3, [sp, #36]	; 0x24
 8024128:	fb12 f30c 	smulbb	r3, r2, ip
 802412c:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8024130:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024134:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024138:	ea40 000b 	orr.w	r0, r0, fp
 802413c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024140:	10db      	asrs	r3, r3, #3
 8024142:	f1cc 0e10 	rsb	lr, ip, #16
 8024146:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802414a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802414e:	ebae 0e02 	sub.w	lr, lr, r2
 8024152:	ea4b 0101 	orr.w	r1, fp, r1
 8024156:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802415a:	4351      	muls	r1, r2
 802415c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8024160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024162:	fb0e 1e00 	mla	lr, lr, r0, r1
 8024166:	0410      	lsls	r0, r2, #16
 8024168:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802416c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024170:	4310      	orrs	r0, r2
 8024172:	9a08      	ldr	r2, [sp, #32]
 8024174:	fb03 e000 	mla	r0, r3, r0, lr
 8024178:	9908      	ldr	r1, [sp, #32]
 802417a:	0412      	lsls	r2, r2, #16
 802417c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024180:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8024184:	ea42 020e 	orr.w	r2, r2, lr
 8024188:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802418c:	fb03 0302 	mla	r3, r3, r2, r0
 8024190:	0d5a      	lsrs	r2, r3, #21
 8024192:	095b      	lsrs	r3, r3, #5
 8024194:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024198:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802419c:	4313      	orrs	r3, r2
 802419e:	f8a9 3000 	strh.w	r3, [r9]
 80241a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80241a4:	f109 0902 	add.w	r9, r9, #2
 80241a8:	441c      	add	r4, r3
 80241aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80241ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80241b0:	441e      	add	r6, r3
 80241b2:	e784      	b.n	80240be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80241b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80241b6:	3d01      	subs	r5, #1
 80241b8:	441c      	add	r4, r3
 80241ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80241bc:	3702      	adds	r7, #2
 80241be:	441e      	add	r6, r3
 80241c0:	e761      	b.n	8024086 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80241c2:	d01d      	beq.n	8024200 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80241c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80241c6:	1e6b      	subs	r3, r5, #1
 80241c8:	fb00 4003 	mla	r0, r0, r3, r4
 80241cc:	1400      	asrs	r0, r0, #16
 80241ce:	f53f af74 	bmi.w	80240ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80241d2:	3901      	subs	r1, #1
 80241d4:	4288      	cmp	r0, r1
 80241d6:	f6bf af70 	bge.w	80240ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80241da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80241dc:	fb01 6303 	mla	r3, r1, r3, r6
 80241e0:	141b      	asrs	r3, r3, #16
 80241e2:	f53f af6a 	bmi.w	80240ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80241e6:	3a01      	subs	r2, #1
 80241e8:	4293      	cmp	r3, r2
 80241ea:	f6bf af66 	bge.w	80240ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80241ee:	46a9      	mov	r9, r5
 80241f0:	46ba      	mov	sl, r7
 80241f2:	f1b9 0f00 	cmp.w	r9, #0
 80241f6:	dc5a      	bgt.n	80242ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 80241f8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80241fc:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8024200:	9b07      	ldr	r3, [sp, #28]
 8024202:	2b00      	cmp	r3, #0
 8024204:	f340 80b8 	ble.w	8024378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802420c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024210:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024214:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024218:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802421c:	eef0 6a62 	vmov.f32	s13, s5
 8024220:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024224:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024228:	ee61 7a27 	vmul.f32	s15, s2, s15
 802422c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024230:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024234:	ee16 4a90 	vmov	r4, s13
 8024238:	eef0 6a43 	vmov.f32	s13, s6
 802423c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024240:	ee12 2a90 	vmov	r2, s5
 8024244:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024248:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802424a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802424e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024252:	ee13 2a10 	vmov	r2, s6
 8024256:	931b      	str	r3, [sp, #108]	; 0x6c
 8024258:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802425a:	ee16 6a90 	vmov	r6, s13
 802425e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024262:	931c      	str	r3, [sp, #112]	; 0x70
 8024264:	9b07      	ldr	r3, [sp, #28]
 8024266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024268:	3b01      	subs	r3, #1
 802426a:	9307      	str	r3, [sp, #28]
 802426c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802426e:	bf0c      	ite	eq
 8024270:	4615      	moveq	r5, r2
 8024272:	461d      	movne	r5, r3
 8024274:	eeb0 3a67 	vmov.f32	s6, s15
 8024278:	eef0 2a47 	vmov.f32	s5, s14
 802427c:	e6f4      	b.n	8024068 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802427e:	f111 0b01 	adds.w	fp, r1, #1
 8024282:	d48e      	bmi.n	80241a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024284:	45de      	cmp	lr, fp
 8024286:	db8c      	blt.n	80241a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024288:	f110 0b01 	adds.w	fp, r0, #1
 802428c:	d489      	bmi.n	80241a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802428e:	455b      	cmp	r3, fp
 8024290:	db87      	blt.n	80241a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024292:	b21b      	sxth	r3, r3
 8024294:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8024298:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802429c:	9300      	str	r3, [sp, #0]
 802429e:	4642      	mov	r2, r8
 80242a0:	fa0f f38e 	sxth.w	r3, lr
 80242a4:	4649      	mov	r1, r9
 80242a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80242a8:	f7ff fe4d 	bl	8023f46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80242ac:	e779      	b.n	80241a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80242ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80242b0:	1420      	asrs	r0, r4, #16
 80242b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80242b6:	1431      	asrs	r1, r6, #16
 80242b8:	fb03 0101 	mla	r1, r3, r1, r0
 80242bc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80242c0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80242c4:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80242c8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80242cc:	8841      	ldrh	r1, [r0, #2]
 80242ce:	f1be 0f00 	cmp.w	lr, #0
 80242d2:	d00b      	beq.n	80242ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80242d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80242d8:	3b01      	subs	r3, #1
 80242da:	005b      	lsls	r3, r3, #1
 80242dc:	3302      	adds	r3, #2
 80242de:	eb00 0b03 	add.w	fp, r0, r3
 80242e2:	5ac3      	ldrh	r3, [r0, r3]
 80242e4:	930a      	str	r3, [sp, #40]	; 0x28
 80242e6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80242ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80242ec:	fb12 f30e 	smulbb	r3, r2, lr
 80242f0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80242f4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80242f8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80242fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024300:	10db      	asrs	r3, r3, #3
 8024302:	ea40 000c 	orr.w	r0, r0, ip
 8024306:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802430a:	f1ce 0c10 	rsb	ip, lr, #16
 802430e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024312:	ebac 0c02 	sub.w	ip, ip, r2
 8024316:	ea4b 0101 	orr.w	r1, fp, r1
 802431a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802431e:	4351      	muls	r1, r2
 8024320:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8024324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024326:	fb0c 1c00 	mla	ip, ip, r0, r1
 802432a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802432e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024332:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8024336:	ea4b 0000 	orr.w	r0, fp, r0
 802433a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802433c:	fb03 c000 	mla	r0, r3, r0, ip
 8024340:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024342:	0412      	lsls	r2, r2, #16
 8024344:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024348:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802434c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8024350:	ea42 0b0b 	orr.w	fp, r2, fp
 8024354:	fb03 000b 	mla	r0, r3, fp, r0
 8024358:	0d43      	lsrs	r3, r0, #21
 802435a:	0940      	lsrs	r0, r0, #5
 802435c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024360:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024364:	4318      	orrs	r0, r3
 8024366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024368:	f82a 0b02 	strh.w	r0, [sl], #2
 802436c:	441c      	add	r4, r3
 802436e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024370:	f109 39ff 	add.w	r9, r9, #4294967295
 8024374:	441e      	add	r6, r3
 8024376:	e73c      	b.n	80241f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8024378:	b00f      	add	sp, #60	; 0x3c
 802437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802437e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802437e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024382:	b085      	sub	sp, #20
 8024384:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8024388:	9102      	str	r1, [sp, #8]
 802438a:	fb04 7103 	mla	r1, r4, r3, r7
 802438e:	2c00      	cmp	r4, #0
 8024390:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024394:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024398:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802439c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80243a0:	f2c0 811b 	blt.w	80245da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80243a4:	45a6      	cmp	lr, r4
 80243a6:	f340 8118 	ble.w	80245da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80243aa:	2f00      	cmp	r7, #0
 80243ac:	f2c0 8113 	blt.w	80245d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80243b0:	42bb      	cmp	r3, r7
 80243b2:	f340 8110 	ble.w	80245d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80243b6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80243ba:	1c7a      	adds	r2, r7, #1
 80243bc:	f100 8110 	bmi.w	80245e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80243c0:	4293      	cmp	r3, r2
 80243c2:	f340 810d 	ble.w	80245e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80243c6:	2e00      	cmp	r6, #0
 80243c8:	f000 810c 	beq.w	80245e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80243cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80243d0:	3401      	adds	r4, #1
 80243d2:	f100 810b 	bmi.w	80245ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80243d6:	45a6      	cmp	lr, r4
 80243d8:	f340 8108 	ble.w	80245ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80243dc:	2800      	cmp	r0, #0
 80243de:	f000 8108 	beq.w	80245f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80243e2:	2f00      	cmp	r7, #0
 80243e4:	f2c0 8100 	blt.w	80245e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80243e8:	42bb      	cmp	r3, r7
 80243ea:	f340 80fd 	ble.w	80245e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80243ee:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80243f2:	3701      	adds	r7, #1
 80243f4:	f100 8100 	bmi.w	80245f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80243f8:	42bb      	cmp	r3, r7
 80243fa:	f340 80fd 	ble.w	80245f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80243fe:	2e00      	cmp	r6, #0
 8024400:	f000 80fc 	beq.w	80245fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8024404:	3301      	adds	r3, #1
 8024406:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802440a:	b2b6      	uxth	r6, r6
 802440c:	b280      	uxth	r0, r0
 802440e:	fb00 fe06 	mul.w	lr, r0, r6
 8024412:	0136      	lsls	r6, r6, #4
 8024414:	eba6 070e 	sub.w	r7, r6, lr
 8024418:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802441c:	b2bf      	uxth	r7, r7
 802441e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024422:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8024426:	fb0a f607 	mul.w	r6, sl, r7
 802442a:	b280      	uxth	r0, r0
 802442c:	1a1b      	subs	r3, r3, r0
 802442e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8024432:	b29b      	uxth	r3, r3
 8024434:	fb0b 6603 	mla	r6, fp, r3, r6
 8024438:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802443c:	fb00 6609 	mla	r6, r0, r9, r6
 8024440:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024444:	fb0e 6608 	mla	r6, lr, r8, r6
 8024448:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802444c:	9600      	str	r6, [sp, #0]
 802444e:	2e00      	cmp	r6, #0
 8024450:	f000 80be 	beq.w	80245d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8024454:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024458:	fb0b fc0c 	mul.w	ip, fp, ip
 802445c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024460:	fb0b f505 	mul.w	r5, fp, r5
 8024464:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024468:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802446c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024470:	44dc      	add	ip, fp
 8024472:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024476:	9501      	str	r5, [sp, #4]
 8024478:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802447c:	9503      	str	r5, [sp, #12]
 802447e:	9d01      	ldr	r5, [sp, #4]
 8024480:	9e02      	ldr	r6, [sp, #8]
 8024482:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024486:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802448a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802448e:	fb0a fc0c 	mul.w	ip, sl, ip
 8024492:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024496:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802449a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802449e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80244a2:	4465      	add	r5, ip
 80244a4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80244a8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80244ac:	fb09 fc0c 	mul.w	ip, r9, ip
 80244b0:	fb09 f904 	mul.w	r9, r9, r4
 80244b4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80244b8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80244bc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80244c0:	fb08 f404 	mul.w	r4, r8, r4
 80244c4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80244c8:	fb08 f802 	mul.w	r8, r8, r2
 80244cc:	0a2d      	lsrs	r5, r5, #8
 80244ce:	0a22      	lsrs	r2, r4, #8
 80244d0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80244d4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80244d8:	437d      	muls	r5, r7
 80244da:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80244de:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80244e2:	4414      	add	r4, r2
 80244e4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80244e8:	fb0a fa01 	mul.w	sl, sl, r1
 80244ec:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80244f0:	9a03      	ldr	r2, [sp, #12]
 80244f2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80244f6:	fb02 5503 	mla	r5, r2, r3, r5
 80244fa:	0a24      	lsrs	r4, r4, #8
 80244fc:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8024500:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024504:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024508:	fb04 540e 	mla	r4, r4, lr, r5
 802450c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024510:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024514:	4461      	add	r1, ip
 8024516:	0a09      	lsrs	r1, r1, #8
 8024518:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802451c:	fb01 4100 	mla	r1, r1, r0, r4
 8024520:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024524:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024528:	fb07 f70a 	mul.w	r7, r7, sl
 802452c:	0a09      	lsrs	r1, r1, #8
 802452e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8024532:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8024536:	fb03 7101 	mla	r1, r3, r1, r7
 802453a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802453e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024542:	fb0e 1e08 	mla	lr, lr, r8, r1
 8024546:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802454a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802454e:	fb00 e101 	mla	r1, r0, r1, lr
 8024552:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8024556:	9a00      	ldr	r2, [sp, #0]
 8024558:	b287      	uxth	r7, r0
 802455a:	437a      	muls	r2, r7
 802455c:	1c53      	adds	r3, r2, #1
 802455e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024562:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024566:	0a09      	lsrs	r1, r1, #8
 8024568:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802456c:	4321      	orrs	r1, r4
 802456e:	0c0a      	lsrs	r2, r1, #16
 8024570:	8836      	ldrh	r6, [r6, #0]
 8024572:	fb12 f207 	smulbb	r2, r2, r7
 8024576:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802457a:	b2c8      	uxtb	r0, r1
 802457c:	1235      	asrs	r5, r6, #8
 802457e:	fb14 f407 	smulbb	r4, r4, r7
 8024582:	fb10 f007 	smulbb	r0, r0, r7
 8024586:	b2db      	uxtb	r3, r3
 8024588:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802458c:	fb05 2503 	mla	r5, r5, r3, r2
 8024590:	10f2      	asrs	r2, r6, #3
 8024592:	00f6      	lsls	r6, r6, #3
 8024594:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024598:	b2f6      	uxtb	r6, r6
 802459a:	fb02 4203 	mla	r2, r2, r3, r4
 802459e:	fb06 0303 	mla	r3, r6, r3, r0
 80245a2:	b2ad      	uxth	r5, r5
 80245a4:	b299      	uxth	r1, r3
 80245a6:	b294      	uxth	r4, r2
 80245a8:	1c6b      	adds	r3, r5, #1
 80245aa:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80245ae:	1c62      	adds	r2, r4, #1
 80245b0:	1c4b      	adds	r3, r1, #1
 80245b2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80245b6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80245ba:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80245be:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80245c2:	0952      	lsrs	r2, r2, #5
 80245c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80245c8:	432b      	orrs	r3, r5
 80245ca:	4313      	orrs	r3, r2
 80245cc:	9a02      	ldr	r2, [sp, #8]
 80245ce:	8013      	strh	r3, [r2, #0]
 80245d0:	b005      	add	sp, #20
 80245d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245d6:	2500      	movs	r5, #0
 80245d8:	e6ef      	b.n	80243ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80245da:	2100      	movs	r1, #0
 80245dc:	460d      	mov	r5, r1
 80245de:	e6f7      	b.n	80243d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80245e0:	2100      	movs	r1, #0
 80245e2:	e6f5      	b.n	80243d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80245e4:	4631      	mov	r1, r6
 80245e6:	e6f3      	b.n	80243d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80245e8:	2400      	movs	r4, #0
 80245ea:	e702      	b.n	80243f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80245ec:	2200      	movs	r2, #0
 80245ee:	4614      	mov	r4, r2
 80245f0:	e70b      	b.n	802440a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80245f2:	4602      	mov	r2, r0
 80245f4:	4604      	mov	r4, r0
 80245f6:	e708      	b.n	802440a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80245f8:	2200      	movs	r2, #0
 80245fa:	e706      	b.n	802440a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80245fc:	4632      	mov	r2, r6
 80245fe:	e704      	b.n	802440a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08024600 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024604:	b09d      	sub	sp, #116	; 0x74
 8024606:	9219      	str	r2, [sp, #100]	; 0x64
 8024608:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802460a:	901b      	str	r0, [sp, #108]	; 0x6c
 802460c:	9307      	str	r3, [sp, #28]
 802460e:	6850      	ldr	r0, [r2, #4]
 8024610:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8024614:	9117      	str	r1, [sp, #92]	; 0x5c
 8024616:	931a      	str	r3, [sp, #104]	; 0x68
 8024618:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802461c:	fb00 1303 	mla	r3, r0, r3, r1
 8024620:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8024624:	6812      	ldr	r2, [r2, #0]
 8024626:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802462a:	930a      	str	r3, [sp, #40]	; 0x28
 802462c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802462e:	681b      	ldr	r3, [r3, #0]
 8024630:	9310      	str	r3, [sp, #64]	; 0x40
 8024632:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8024636:	930b      	str	r3, [sp, #44]	; 0x2c
 8024638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802463a:	2b00      	cmp	r3, #0
 802463c:	dc03      	bgt.n	8024646 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802463e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024640:	2b00      	cmp	r3, #0
 8024642:	f340 8375 	ble.w	8024d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8024646:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024648:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802464c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024650:	1e48      	subs	r0, r1, #1
 8024652:	1e57      	subs	r7, r2, #1
 8024654:	9b07      	ldr	r3, [sp, #28]
 8024656:	2b00      	cmp	r3, #0
 8024658:	f340 818e 	ble.w	8024978 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802465c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024660:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024664:	d406      	bmi.n	8024674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8024666:	4584      	cmp	ip, r0
 8024668:	da04      	bge.n	8024674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802466a:	2b00      	cmp	r3, #0
 802466c:	db02      	blt.n	8024674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802466e:	42bb      	cmp	r3, r7
 8024670:	f2c0 8183 	blt.w	802497a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8024674:	f11c 0c01 	adds.w	ip, ip, #1
 8024678:	f100 8173 	bmi.w	8024962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802467c:	4561      	cmp	r1, ip
 802467e:	f2c0 8170 	blt.w	8024962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024682:	3301      	adds	r3, #1
 8024684:	f100 816d 	bmi.w	8024962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024688:	429a      	cmp	r2, r3
 802468a:	f2c0 816a 	blt.w	8024962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802468e:	9b07      	ldr	r3, [sp, #28]
 8024690:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024692:	9318      	str	r3, [sp, #96]	; 0x60
 8024694:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024696:	2b00      	cmp	r3, #0
 8024698:	f340 818c 	ble.w	80249b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802469c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802469e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80246a0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80246a4:	1422      	asrs	r2, r4, #16
 80246a6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80246aa:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80246ae:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80246b2:	689b      	ldr	r3, [r3, #8]
 80246b4:	f100 81cd 	bmi.w	8024a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80246b8:	f103 38ff 	add.w	r8, r3, #4294967295
 80246bc:	4542      	cmp	r2, r8
 80246be:	f280 81c8 	bge.w	8024a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80246c2:	f1bc 0f00 	cmp.w	ip, #0
 80246c6:	f2c0 81c4 	blt.w	8024a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80246ca:	f10e 38ff 	add.w	r8, lr, #4294967295
 80246ce:	45c4      	cmp	ip, r8
 80246d0:	f280 81bf 	bge.w	8024a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80246d4:	b21b      	sxth	r3, r3
 80246d6:	fb0c 2203 	mla	r2, ip, r3, r2
 80246da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80246dc:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80246e0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80246e4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80246e8:	2800      	cmp	r0, #0
 80246ea:	f000 81a9 	beq.w	8024a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80246ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80246f2:	950c      	str	r5, [sp, #48]	; 0x30
 80246f4:	0e2d      	lsrs	r5, r5, #24
 80246f6:	9513      	str	r5, [sp, #76]	; 0x4c
 80246f8:	b181      	cbz	r1, 802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80246fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80246fe:	3b01      	subs	r3, #1
 8024700:	009b      	lsls	r3, r3, #2
 8024702:	3304      	adds	r3, #4
 8024704:	eb08 0c03 	add.w	ip, r8, r3
 8024708:	f858 3003 	ldr.w	r3, [r8, r3]
 802470c:	9308      	str	r3, [sp, #32]
 802470e:	0e1b      	lsrs	r3, r3, #24
 8024710:	9311      	str	r3, [sp, #68]	; 0x44
 8024712:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024716:	930d      	str	r3, [sp, #52]	; 0x34
 8024718:	0e1b      	lsrs	r3, r3, #24
 802471a:	9314      	str	r3, [sp, #80]	; 0x50
 802471c:	b280      	uxth	r0, r0
 802471e:	b289      	uxth	r1, r1
 8024720:	fb00 f901 	mul.w	r9, r0, r1
 8024724:	0100      	lsls	r0, r0, #4
 8024726:	eba0 0809 	sub.w	r8, r0, r9
 802472a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802472e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024730:	fa1f f888 	uxth.w	r8, r8
 8024734:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024738:	fb08 f000 	mul.w	r0, r8, r0
 802473c:	b289      	uxth	r1, r1
 802473e:	1a5b      	subs	r3, r3, r1
 8024740:	b29b      	uxth	r3, r3
 8024742:	fb03 000e 	mla	r0, r3, lr, r0
 8024746:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024748:	fb01 0005 	mla	r0, r1, r5, r0
 802474c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802474e:	fb09 0005 	mla	r0, r9, r5, r0
 8024752:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024756:	2800      	cmp	r0, #0
 8024758:	f000 80fa 	beq.w	8024950 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802475c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024760:	d01b      	beq.n	802479a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024762:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8024766:	fb0e fa0a 	mul.w	sl, lr, sl
 802476a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802476e:	fb0e fe02 	mul.w	lr, lr, r2
 8024772:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024776:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802477a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802477e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024782:	4452      	add	r2, sl
 8024784:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024788:	0a12      	lsrs	r2, r2, #8
 802478a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802478e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024792:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024796:	ea42 020c 	orr.w	r2, r2, ip
 802479a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802479c:	2dff      	cmp	r5, #255	; 0xff
 802479e:	d021      	beq.n	80247e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80247a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80247a2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80247a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80247a8:	fb05 fb0b 	mul.w	fp, r5, fp
 80247ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80247ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80247b2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80247b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80247b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80247bc:	fb05 fa0a 	mul.w	sl, r5, sl
 80247c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80247c4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80247c8:	44de      	add	lr, fp
 80247ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80247ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80247d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80247d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80247da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80247de:	ea4e 050a 	orr.w	r5, lr, sl
 80247e2:	950c      	str	r5, [sp, #48]	; 0x30
 80247e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80247e6:	2dff      	cmp	r5, #255	; 0xff
 80247e8:	d021      	beq.n	802482e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80247ea:	9d08      	ldr	r5, [sp, #32]
 80247ec:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80247f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80247f2:	fb05 fb0b 	mul.w	fp, r5, fp
 80247f6:	9d08      	ldr	r5, [sp, #32]
 80247f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80247fc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024800:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024802:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024806:	fb05 fa0a 	mul.w	sl, r5, sl
 802480a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802480e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024812:	44de      	add	lr, fp
 8024814:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024818:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802481c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024820:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024824:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024828:	ea4e 050a 	orr.w	r5, lr, sl
 802482c:	9508      	str	r5, [sp, #32]
 802482e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024830:	2dff      	cmp	r5, #255	; 0xff
 8024832:	d021      	beq.n	8024878 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8024834:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024836:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802483a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802483c:	fb05 fb0b 	mul.w	fp, r5, fp
 8024840:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024842:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024846:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802484a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802484c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024850:	fb05 fa0a 	mul.w	sl, r5, sl
 8024854:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024858:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802485c:	44de      	add	lr, fp
 802485e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024862:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024866:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802486a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802486e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024872:	ea4e 050a 	orr.w	r5, lr, sl
 8024876:	950d      	str	r5, [sp, #52]	; 0x34
 8024878:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802487a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802487e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024882:	fb08 fc0c 	mul.w	ip, r8, ip
 8024886:	fb03 cc0e 	mla	ip, r3, lr, ip
 802488a:	9d08      	ldr	r5, [sp, #32]
 802488c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024890:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024894:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024898:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802489a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802489e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80248a0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80248a4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80248a8:	fb08 f80e 	mul.w	r8, r8, lr
 80248ac:	fb03 8202 	mla	r2, r3, r2, r8
 80248b0:	9b08      	ldr	r3, [sp, #32]
 80248b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248b6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80248ba:	fb01 220a 	mla	r2, r1, sl, r2
 80248be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80248c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248c4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80248c8:	fb09 2901 	mla	r9, r9, r1, r2
 80248cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80248ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80248d2:	4342      	muls	r2, r0
 80248d4:	1c50      	adds	r0, r2, #1
 80248d6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80248da:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80248de:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80248e2:	ea4c 0c09 	orr.w	ip, ip, r9
 80248e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80248e8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80248ec:	883b      	ldrh	r3, [r7, #0]
 80248ee:	fb12 f205 	smulbb	r2, r2, r5
 80248f2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80248f6:	fa5f fc8c 	uxtb.w	ip, ip
 80248fa:	1219      	asrs	r1, r3, #8
 80248fc:	fb1c fc05 	smulbb	ip, ip, r5
 8024900:	b2c0      	uxtb	r0, r0
 8024902:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024906:	fb01 2100 	mla	r1, r1, r0, r2
 802490a:	10da      	asrs	r2, r3, #3
 802490c:	00db      	lsls	r3, r3, #3
 802490e:	fb1e fe05 	smulbb	lr, lr, r5
 8024912:	b2db      	uxtb	r3, r3
 8024914:	fb03 c300 	mla	r3, r3, r0, ip
 8024918:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802491c:	b289      	uxth	r1, r1
 802491e:	fb02 e200 	mla	r2, r2, r0, lr
 8024922:	fa1f fc83 	uxth.w	ip, r3
 8024926:	1c4b      	adds	r3, r1, #1
 8024928:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802492c:	f10c 0301 	add.w	r3, ip, #1
 8024930:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024934:	b292      	uxth	r2, r2
 8024936:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802493a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802493e:	430b      	orrs	r3, r1
 8024940:	1c51      	adds	r1, r2, #1
 8024942:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024946:	0952      	lsrs	r2, r2, #5
 8024948:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802494c:	4313      	orrs	r3, r2
 802494e:	803b      	strh	r3, [r7, #0]
 8024950:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024952:	3702      	adds	r7, #2
 8024954:	441c      	add	r4, r3
 8024956:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024958:	441e      	add	r6, r3
 802495a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802495c:	3b01      	subs	r3, #1
 802495e:	9318      	str	r3, [sp, #96]	; 0x60
 8024960:	e698      	b.n	8024694 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024962:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024964:	441c      	add	r4, r3
 8024966:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024968:	441e      	add	r6, r3
 802496a:	9b07      	ldr	r3, [sp, #28]
 802496c:	3b01      	subs	r3, #1
 802496e:	9307      	str	r3, [sp, #28]
 8024970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024972:	3302      	adds	r3, #2
 8024974:	930a      	str	r3, [sp, #40]	; 0x28
 8024976:	e66d      	b.n	8024654 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8024978:	d023      	beq.n	80249c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802497a:	9b07      	ldr	r3, [sp, #28]
 802497c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802497e:	3b01      	subs	r3, #1
 8024980:	fb00 4003 	mla	r0, r0, r3, r4
 8024984:	1400      	asrs	r0, r0, #16
 8024986:	f53f ae82 	bmi.w	802468e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802498a:	3901      	subs	r1, #1
 802498c:	4288      	cmp	r0, r1
 802498e:	f6bf ae7e 	bge.w	802468e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024992:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024994:	fb01 6303 	mla	r3, r1, r3, r6
 8024998:	141b      	asrs	r3, r3, #16
 802499a:	f53f ae78 	bmi.w	802468e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802499e:	3a01      	subs	r2, #1
 80249a0:	4293      	cmp	r3, r2
 80249a2:	f6bf ae74 	bge.w	802468e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80249a6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80249aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80249ae:	f1bb 0f00 	cmp.w	fp, #0
 80249b2:	dc6c      	bgt.n	8024a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80249b4:	9b07      	ldr	r3, [sp, #28]
 80249b6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80249ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249bc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80249c0:	930a      	str	r3, [sp, #40]	; 0x28
 80249c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	f340 81b3 	ble.w	8024d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80249ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80249ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80249d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80249d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80249da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80249de:	eef0 6a62 	vmov.f32	s13, s5
 80249e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80249e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80249ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80249ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80249f6:	ee16 4a90 	vmov	r4, s13
 80249fa:	eef0 6a43 	vmov.f32	s13, s6
 80249fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024a02:	ee12 2a90 	vmov	r2, s5
 8024a06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024a0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024a0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a10:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a14:	ee13 2a10 	vmov	r2, s6
 8024a18:	9329      	str	r3, [sp, #164]	; 0xa4
 8024a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024a1c:	ee16 6a90 	vmov	r6, s13
 8024a20:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a24:	932a      	str	r3, [sp, #168]	; 0xa8
 8024a26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024a28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024a2a:	3b01      	subs	r3, #1
 8024a2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8024a2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024a30:	bf08      	it	eq
 8024a32:	4613      	moveq	r3, r2
 8024a34:	eeb0 3a67 	vmov.f32	s6, s15
 8024a38:	9307      	str	r3, [sp, #28]
 8024a3a:	eef0 2a47 	vmov.f32	s5, s14
 8024a3e:	e5fb      	b.n	8024638 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8024a40:	2900      	cmp	r1, #0
 8024a42:	f43f ae6b 	beq.w	802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024a46:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024a4a:	9308      	str	r3, [sp, #32]
 8024a4c:	0e1b      	lsrs	r3, r3, #24
 8024a4e:	9311      	str	r3, [sp, #68]	; 0x44
 8024a50:	e664      	b.n	802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024a52:	f112 0801 	adds.w	r8, r2, #1
 8024a56:	f53f af7b 	bmi.w	8024950 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024a5a:	4543      	cmp	r3, r8
 8024a5c:	f6ff af78 	blt.w	8024950 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024a60:	f11c 0801 	adds.w	r8, ip, #1
 8024a64:	f53f af74 	bmi.w	8024950 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024a68:	45c6      	cmp	lr, r8
 8024a6a:	f6ff af71 	blt.w	8024950 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024a6e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8024a70:	9201      	str	r2, [sp, #4]
 8024a72:	fa0f f28e 	sxth.w	r2, lr
 8024a76:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8024a7a:	e9cd c002 	strd	ip, r0, [sp, #8]
 8024a7e:	9200      	str	r2, [sp, #0]
 8024a80:	b21b      	sxth	r3, r3
 8024a82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024a84:	4639      	mov	r1, r7
 8024a86:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024a88:	f7ff fc79 	bl	802437e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8024a8c:	e760      	b.n	8024950 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024a8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024a90:	1427      	asrs	r7, r4, #16
 8024a92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a96:	1433      	asrs	r3, r6, #16
 8024a98:	fb01 7303 	mla	r3, r1, r3, r7
 8024a9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024a9e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024aa2:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8024aa6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8024aaa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024aae:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024ab2:	2a00      	cmp	r2, #0
 8024ab4:	f000 8133 	beq.w	8024d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8024ab8:	687d      	ldr	r5, [r7, #4]
 8024aba:	950e      	str	r5, [sp, #56]	; 0x38
 8024abc:	0e2d      	lsrs	r5, r5, #24
 8024abe:	9515      	str	r5, [sp, #84]	; 0x54
 8024ac0:	b178      	cbz	r0, 8024ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024ac2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8024ac6:	3901      	subs	r1, #1
 8024ac8:	0089      	lsls	r1, r1, #2
 8024aca:	3104      	adds	r1, #4
 8024acc:	eb07 0e01 	add.w	lr, r7, r1
 8024ad0:	5879      	ldr	r1, [r7, r1]
 8024ad2:	9109      	str	r1, [sp, #36]	; 0x24
 8024ad4:	0e09      	lsrs	r1, r1, #24
 8024ad6:	9112      	str	r1, [sp, #72]	; 0x48
 8024ad8:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024adc:	910f      	str	r1, [sp, #60]	; 0x3c
 8024ade:	0e09      	lsrs	r1, r1, #24
 8024ae0:	9116      	str	r1, [sp, #88]	; 0x58
 8024ae2:	b292      	uxth	r2, r2
 8024ae4:	b280      	uxth	r0, r0
 8024ae6:	fb02 f800 	mul.w	r8, r2, r0
 8024aea:	0112      	lsls	r2, r2, #4
 8024aec:	eba2 0e08 	sub.w	lr, r2, r8
 8024af0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024af2:	fa1f fe8e 	uxth.w	lr, lr
 8024af6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024afa:	fb0e f101 	mul.w	r1, lr, r1
 8024afe:	b280      	uxth	r0, r0
 8024b00:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024b04:	1a12      	subs	r2, r2, r0
 8024b06:	b292      	uxth	r2, r2
 8024b08:	fb02 110c 	mla	r1, r2, ip, r1
 8024b0c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024b0e:	fb00 1105 	mla	r1, r0, r5, r1
 8024b12:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024b14:	fb08 1105 	mla	r1, r8, r5, r1
 8024b18:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024b1c:	2900      	cmp	r1, #0
 8024b1e:	f000 80f5 	beq.w	8024d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8024b22:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024b26:	d019      	beq.n	8024b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8024b28:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024b2c:	fb0c fa0a 	mul.w	sl, ip, sl
 8024b30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b34:	fb0c fc03 	mul.w	ip, ip, r3
 8024b38:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024b3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b40:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024b44:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024b48:	4453      	add	r3, sl
 8024b4a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024b4e:	0a1b      	lsrs	r3, r3, #8
 8024b50:	0a3f      	lsrs	r7, r7, #8
 8024b52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b56:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024b5a:	433b      	orrs	r3, r7
 8024b5c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024b5e:	2dff      	cmp	r5, #255	; 0xff
 8024b60:	d020      	beq.n	8024ba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8024b62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024b64:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024b68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024b6a:	436f      	muls	r7, r5
 8024b6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024b6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024b72:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024b76:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024b78:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024b7c:	fb05 fa0a 	mul.w	sl, r5, sl
 8024b80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b84:	44bc      	add	ip, r7
 8024b86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024b8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024b8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b9e:	ea4c 050a 	orr.w	r5, ip, sl
 8024ba2:	950e      	str	r5, [sp, #56]	; 0x38
 8024ba4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024ba6:	2dff      	cmp	r5, #255	; 0xff
 8024ba8:	d020      	beq.n	8024bec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8024baa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024bac:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024bb0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024bb2:	436f      	muls	r7, r5
 8024bb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024bb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024bba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024bbe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024bc0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024bc4:	fb05 fa0a 	mul.w	sl, r5, sl
 8024bc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024bcc:	44bc      	add	ip, r7
 8024bce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024bd2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024bd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024bda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024bde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024be2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024be6:	ea4c 050a 	orr.w	r5, ip, sl
 8024bea:	9509      	str	r5, [sp, #36]	; 0x24
 8024bec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024bee:	2dff      	cmp	r5, #255	; 0xff
 8024bf0:	d020      	beq.n	8024c34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8024bf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024bf4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024bf8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024bfa:	436f      	muls	r7, r5
 8024bfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024bfe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c02:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024c06:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024c08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c0c:	fb05 fa0a 	mul.w	sl, r5, sl
 8024c10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c14:	44bc      	add	ip, r7
 8024c16:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c1a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c2e:	ea4c 050a 	orr.w	r5, ip, sl
 8024c32:	950f      	str	r5, [sp, #60]	; 0x3c
 8024c34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024c36:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024c3a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024c3e:	fb0e f707 	mul.w	r7, lr, r7
 8024c42:	fb02 770c 	mla	r7, r2, ip, r7
 8024c46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024c48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c4c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024c50:	fb00 770c 	mla	r7, r0, ip, r7
 8024c54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024c56:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024c5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024c5c:	fb08 770c 	mla	r7, r8, ip, r7
 8024c60:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024c64:	fb0e fe0c 	mul.w	lr, lr, ip
 8024c68:	fb02 e303 	mla	r3, r2, r3, lr
 8024c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024c6e:	0a3f      	lsrs	r7, r7, #8
 8024c70:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024c74:	fb00 330a 	mla	r3, r0, sl, r3
 8024c78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024c7a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024c7e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024c82:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024c88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c8c:	4359      	muls	r1, r3
 8024c8e:	1c4b      	adds	r3, r1, #1
 8024c90:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024c94:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024c98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024c9c:	ea47 070c 	orr.w	r7, r7, ip
 8024ca0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024ca2:	0c3b      	lsrs	r3, r7, #16
 8024ca4:	f8b9 0000 	ldrh.w	r0, [r9]
 8024ca8:	fb13 f305 	smulbb	r3, r3, r5
 8024cac:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024cb0:	b2ff      	uxtb	r7, r7
 8024cb2:	1202      	asrs	r2, r0, #8
 8024cb4:	fb17 f705 	smulbb	r7, r7, r5
 8024cb8:	b2c9      	uxtb	r1, r1
 8024cba:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024cbe:	fb02 3201 	mla	r2, r2, r1, r3
 8024cc2:	10c3      	asrs	r3, r0, #3
 8024cc4:	00c0      	lsls	r0, r0, #3
 8024cc6:	fb1c fc05 	smulbb	ip, ip, r5
 8024cca:	b2c0      	uxtb	r0, r0
 8024ccc:	fb00 7001 	mla	r0, r0, r1, r7
 8024cd0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024cd4:	fb03 c301 	mla	r3, r3, r1, ip
 8024cd8:	b292      	uxth	r2, r2
 8024cda:	b280      	uxth	r0, r0
 8024cdc:	1c51      	adds	r1, r2, #1
 8024cde:	f100 0c01 	add.w	ip, r0, #1
 8024ce2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024ce6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024cea:	b29b      	uxth	r3, r3
 8024cec:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024cf0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024cf4:	ea4c 0202 	orr.w	r2, ip, r2
 8024cf8:	f103 0c01 	add.w	ip, r3, #1
 8024cfc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024d00:	095b      	lsrs	r3, r3, #5
 8024d02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024d06:	431a      	orrs	r2, r3
 8024d08:	f8a9 2000 	strh.w	r2, [r9]
 8024d0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024d0e:	f109 0902 	add.w	r9, r9, #2
 8024d12:	441c      	add	r4, r3
 8024d14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024d1a:	441e      	add	r6, r3
 8024d1c:	e647      	b.n	80249ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024d1e:	2800      	cmp	r0, #0
 8024d20:	f43f aedf 	beq.w	8024ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024d24:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8024d28:	9109      	str	r1, [sp, #36]	; 0x24
 8024d2a:	0e09      	lsrs	r1, r1, #24
 8024d2c:	9112      	str	r1, [sp, #72]	; 0x48
 8024d2e:	e6d8      	b.n	8024ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024d30:	b01d      	add	sp, #116	; 0x74
 8024d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024d36 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8024d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d3a:	b085      	sub	sp, #20
 8024d3c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8024d40:	9102      	str	r1, [sp, #8]
 8024d42:	fb04 7103 	mla	r1, r4, r3, r7
 8024d46:	2c00      	cmp	r4, #0
 8024d48:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024d4c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024d50:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024d54:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8024d58:	f2c0 810c 	blt.w	8024f74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024d5c:	45a6      	cmp	lr, r4
 8024d5e:	f340 8109 	ble.w	8024f74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024d62:	2f00      	cmp	r7, #0
 8024d64:	f2c0 8104 	blt.w	8024f70 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024d68:	42bb      	cmp	r3, r7
 8024d6a:	f340 8101 	ble.w	8024f70 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024d6e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8024d72:	1c7a      	adds	r2, r7, #1
 8024d74:	f100 8101 	bmi.w	8024f7a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024d78:	4293      	cmp	r3, r2
 8024d7a:	f340 80fe 	ble.w	8024f7a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024d7e:	2e00      	cmp	r6, #0
 8024d80:	f000 80fd 	beq.w	8024f7e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8024d84:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8024d88:	3401      	adds	r4, #1
 8024d8a:	f100 80fc 	bmi.w	8024f86 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024d8e:	45a6      	cmp	lr, r4
 8024d90:	f340 80f9 	ble.w	8024f86 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024d94:	2800      	cmp	r0, #0
 8024d96:	f000 80f9 	beq.w	8024f8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8024d9a:	2f00      	cmp	r7, #0
 8024d9c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8024da0:	f2c0 80ef 	blt.w	8024f82 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8024da4:	42bb      	cmp	r3, r7
 8024da6:	f340 80ec 	ble.w	8024f82 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8024daa:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024dae:	3701      	adds	r7, #1
 8024db0:	f100 80ef 	bmi.w	8024f92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8024db4:	42bb      	cmp	r3, r7
 8024db6:	f340 80ec 	ble.w	8024f92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8024dba:	2e00      	cmp	r6, #0
 8024dbc:	f000 80eb 	beq.w	8024f96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8024dc0:	6852      	ldr	r2, [r2, #4]
 8024dc2:	b2b6      	uxth	r6, r6
 8024dc4:	b280      	uxth	r0, r0
 8024dc6:	fb00 fe06 	mul.w	lr, r0, r6
 8024dca:	0136      	lsls	r6, r6, #4
 8024dcc:	eba6 070e 	sub.w	r7, r6, lr
 8024dd0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8024dd4:	b2bf      	uxth	r7, r7
 8024dd6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024dda:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8024dde:	fb07 f60a 	mul.w	r6, r7, sl
 8024de2:	b280      	uxth	r0, r0
 8024de4:	1a1b      	subs	r3, r3, r0
 8024de6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8024dea:	b29b      	uxth	r3, r3
 8024dec:	fb0b 6603 	mla	r6, fp, r3, r6
 8024df0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024df4:	fb00 6609 	mla	r6, r0, r9, r6
 8024df8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024dfc:	fb0e 6608 	mla	r6, lr, r8, r6
 8024e00:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024e04:	9600      	str	r6, [sp, #0]
 8024e06:	2e00      	cmp	r6, #0
 8024e08:	f000 80af 	beq.w	8024f6a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8024e0c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024e10:	fb0b fc0c 	mul.w	ip, fp, ip
 8024e14:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024e18:	fb0b f505 	mul.w	r5, fp, r5
 8024e1c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024e20:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024e24:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024e28:	44dc      	add	ip, fp
 8024e2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e2e:	9501      	str	r5, [sp, #4]
 8024e30:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8024e34:	9503      	str	r5, [sp, #12]
 8024e36:	9d01      	ldr	r5, [sp, #4]
 8024e38:	9e02      	ldr	r6, [sp, #8]
 8024e3a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024e3e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024e42:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8024e46:	fb0a fc0c 	mul.w	ip, sl, ip
 8024e4a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024e4e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8024e52:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024e56:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024e5a:	4465      	add	r5, ip
 8024e5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024e60:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024e64:	fb09 fc0c 	mul.w	ip, r9, ip
 8024e68:	fb09 f904 	mul.w	r9, r9, r4
 8024e6c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8024e70:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024e74:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8024e78:	fb08 f404 	mul.w	r4, r8, r4
 8024e7c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024e80:	fb08 f802 	mul.w	r8, r8, r2
 8024e84:	0a2d      	lsrs	r5, r5, #8
 8024e86:	0a22      	lsrs	r2, r4, #8
 8024e88:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024e8c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024e90:	437d      	muls	r5, r7
 8024e92:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024e96:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024e9a:	4414      	add	r4, r2
 8024e9c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024ea0:	fb0a fa01 	mul.w	sl, sl, r1
 8024ea4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024ea8:	9a03      	ldr	r2, [sp, #12]
 8024eaa:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8024eae:	fb02 5503 	mla	r5, r2, r3, r5
 8024eb2:	0a24      	lsrs	r4, r4, #8
 8024eb4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8024eb8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024ebc:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024ec0:	fb04 540e 	mla	r4, r4, lr, r5
 8024ec4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024ec8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024ecc:	4461      	add	r1, ip
 8024ece:	0a09      	lsrs	r1, r1, #8
 8024ed0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024ed4:	fb01 4100 	mla	r1, r1, r0, r4
 8024ed8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024edc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ee0:	fb07 f70a 	mul.w	r7, r7, sl
 8024ee4:	0a09      	lsrs	r1, r1, #8
 8024ee6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8024eea:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8024eee:	fb03 7101 	mla	r1, r3, r1, r7
 8024ef2:	9b00      	ldr	r3, [sp, #0]
 8024ef4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024ef8:	43da      	mvns	r2, r3
 8024efa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024efe:	fb0e 1e08 	mla	lr, lr, r8, r1
 8024f02:	8836      	ldrh	r6, [r6, #0]
 8024f04:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024f08:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024f0c:	fb00 e101 	mla	r1, r0, r1, lr
 8024f10:	1233      	asrs	r3, r6, #8
 8024f12:	b2d2      	uxtb	r2, r2
 8024f14:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024f18:	4353      	muls	r3, r2
 8024f1a:	10f0      	asrs	r0, r6, #3
 8024f1c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024f20:	4350      	muls	r0, r2
 8024f22:	0a09      	lsrs	r1, r1, #8
 8024f24:	00f6      	lsls	r6, r6, #3
 8024f26:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024f2a:	b2f6      	uxtb	r6, r6
 8024f2c:	4321      	orrs	r1, r4
 8024f2e:	4356      	muls	r6, r2
 8024f30:	1c5a      	adds	r2, r3, #1
 8024f32:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024f36:	0c0b      	lsrs	r3, r1, #16
 8024f38:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024f3c:	1c42      	adds	r2, r0, #1
 8024f3e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024f42:	0a0a      	lsrs	r2, r1, #8
 8024f44:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024f48:	021b      	lsls	r3, r3, #8
 8024f4a:	00d2      	lsls	r2, r2, #3
 8024f4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024f50:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024f54:	4313      	orrs	r3, r2
 8024f56:	1c72      	adds	r2, r6, #1
 8024f58:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8024f5c:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024f60:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8024f64:	4319      	orrs	r1, r3
 8024f66:	9b02      	ldr	r3, [sp, #8]
 8024f68:	8019      	strh	r1, [r3, #0]
 8024f6a:	b005      	add	sp, #20
 8024f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f70:	2500      	movs	r5, #0
 8024f72:	e6fe      	b.n	8024d72 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8024f74:	2100      	movs	r1, #0
 8024f76:	460d      	mov	r5, r1
 8024f78:	e706      	b.n	8024d88 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024f7a:	2100      	movs	r1, #0
 8024f7c:	e704      	b.n	8024d88 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024f7e:	4631      	mov	r1, r6
 8024f80:	e702      	b.n	8024d88 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024f82:	2400      	movs	r4, #0
 8024f84:	e713      	b.n	8024dae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8024f86:	2200      	movs	r2, #0
 8024f88:	4614      	mov	r4, r2
 8024f8a:	e71a      	b.n	8024dc2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024f8c:	4602      	mov	r2, r0
 8024f8e:	4604      	mov	r4, r0
 8024f90:	e717      	b.n	8024dc2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024f92:	2200      	movs	r2, #0
 8024f94:	e715      	b.n	8024dc2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024f96:	4632      	mov	r2, r6
 8024f98:	e713      	b.n	8024dc2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08024f9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fa0:	b09b      	sub	sp, #108	; 0x6c
 8024fa2:	9218      	str	r2, [sp, #96]	; 0x60
 8024fa4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024fa6:	9019      	str	r0, [sp, #100]	; 0x64
 8024fa8:	6850      	ldr	r0, [r2, #4]
 8024faa:	9116      	str	r1, [sp, #88]	; 0x58
 8024fac:	9307      	str	r3, [sp, #28]
 8024fae:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024fb2:	fb00 1303 	mla	r3, r0, r3, r1
 8024fb6:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8024fba:	6812      	ldr	r2, [r2, #0]
 8024fbc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8024fc2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024fc4:	681b      	ldr	r3, [r3, #0]
 8024fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8024fc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024fca:	2b00      	cmp	r3, #0
 8024fcc:	dc03      	bgt.n	8024fd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024fce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024fd0:	2b00      	cmp	r3, #0
 8024fd2:	f340 8387 	ble.w	80256e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8024fd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024fd8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024fdc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024fe0:	1e48      	subs	r0, r1, #1
 8024fe2:	1e57      	subs	r7, r2, #1
 8024fe4:	9b07      	ldr	r3, [sp, #28]
 8024fe6:	2b00      	cmp	r3, #0
 8024fe8:	f340 8166 	ble.w	80252b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024fec:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024ff0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024ff4:	d406      	bmi.n	8025004 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024ff6:	4584      	cmp	ip, r0
 8024ff8:	da04      	bge.n	8025004 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	db02      	blt.n	8025004 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024ffe:	42bb      	cmp	r3, r7
 8025000:	f2c0 815b 	blt.w	80252ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025004:	f11c 0c01 	adds.w	ip, ip, #1
 8025008:	f100 814b 	bmi.w	80252a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802500c:	4561      	cmp	r1, ip
 802500e:	f2c0 8148 	blt.w	80252a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025012:	3301      	adds	r3, #1
 8025014:	f100 8145 	bmi.w	80252a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025018:	429a      	cmp	r2, r3
 802501a:	f2c0 8142 	blt.w	80252a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802501e:	9b07      	ldr	r3, [sp, #28]
 8025020:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025022:	9317      	str	r3, [sp, #92]	; 0x5c
 8025024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025026:	2b00      	cmp	r3, #0
 8025028:	f340 8165 	ble.w	80252f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802502c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802502e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025030:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025034:	1422      	asrs	r2, r4, #16
 8025036:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802503a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802503e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025042:	689b      	ldr	r3, [r3, #8]
 8025044:	f100 81d5 	bmi.w	80253f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025048:	f103 38ff 	add.w	r8, r3, #4294967295
 802504c:	4542      	cmp	r2, r8
 802504e:	f280 81d0 	bge.w	80253f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025052:	f1bc 0f00 	cmp.w	ip, #0
 8025056:	f2c0 81cc 	blt.w	80253f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802505a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802505e:	45c4      	cmp	ip, r8
 8025060:	f280 81c7 	bge.w	80253f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025064:	b21b      	sxth	r3, r3
 8025066:	fb0c 2203 	mla	r2, ip, r3, r2
 802506a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802506c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025070:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025074:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025078:	2900      	cmp	r1, #0
 802507a:	f000 8182 	beq.w	8025382 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802507e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025082:	950b      	str	r5, [sp, #44]	; 0x2c
 8025084:	0e2d      	lsrs	r5, r5, #24
 8025086:	9512      	str	r5, [sp, #72]	; 0x48
 8025088:	b180      	cbz	r0, 80250ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802508a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802508e:	3b01      	subs	r3, #1
 8025090:	009b      	lsls	r3, r3, #2
 8025092:	3304      	adds	r3, #4
 8025094:	eb08 0c03 	add.w	ip, r8, r3
 8025098:	f858 3003 	ldr.w	r3, [r8, r3]
 802509c:	9308      	str	r3, [sp, #32]
 802509e:	0e1b      	lsrs	r3, r3, #24
 80250a0:	9310      	str	r3, [sp, #64]	; 0x40
 80250a2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80250a6:	930c      	str	r3, [sp, #48]	; 0x30
 80250a8:	0e1b      	lsrs	r3, r3, #24
 80250aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80250ac:	b289      	uxth	r1, r1
 80250ae:	b280      	uxth	r0, r0
 80250b0:	fb01 f900 	mul.w	r9, r1, r0
 80250b4:	0109      	lsls	r1, r1, #4
 80250b6:	eba1 0809 	sub.w	r8, r1, r9
 80250ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80250bc:	fa1f f888 	uxth.w	r8, r8
 80250c0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80250c4:	fb08 f303 	mul.w	r3, r8, r3
 80250c8:	b280      	uxth	r0, r0
 80250ca:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80250ce:	1a09      	subs	r1, r1, r0
 80250d0:	b289      	uxth	r1, r1
 80250d2:	fb01 330e 	mla	r3, r1, lr, r3
 80250d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80250d8:	fb00 3305 	mla	r3, r0, r5, r3
 80250dc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80250de:	fb09 3305 	mla	r3, r9, r5, r3
 80250e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80250e6:	2b00      	cmp	r3, #0
 80250e8:	f000 80d2 	beq.w	8025290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80250ec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80250f0:	d01b      	beq.n	802512a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80250f2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80250f6:	fb0e fa0a 	mul.w	sl, lr, sl
 80250fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80250fe:	fb0e fe02 	mul.w	lr, lr, r2
 8025102:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025106:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802510a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802510e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025112:	4452      	add	r2, sl
 8025114:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025118:	0a12      	lsrs	r2, r2, #8
 802511a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802511e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025122:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025126:	ea42 020c 	orr.w	r2, r2, ip
 802512a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802512c:	2dff      	cmp	r5, #255	; 0xff
 802512e:	d021      	beq.n	8025174 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8025130:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025132:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025136:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025138:	fb05 fb0b 	mul.w	fp, r5, fp
 802513c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802513e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025142:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025146:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025148:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802514c:	fb05 fa0a 	mul.w	sl, r5, sl
 8025150:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025154:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025158:	44de      	add	lr, fp
 802515a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802515e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025162:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025166:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802516a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802516e:	ea4e 050a 	orr.w	r5, lr, sl
 8025172:	950b      	str	r5, [sp, #44]	; 0x2c
 8025174:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025176:	2dff      	cmp	r5, #255	; 0xff
 8025178:	d021      	beq.n	80251be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802517a:	9d08      	ldr	r5, [sp, #32]
 802517c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025180:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025182:	fb05 fb0b 	mul.w	fp, r5, fp
 8025186:	9d08      	ldr	r5, [sp, #32]
 8025188:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802518c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802518e:	fb05 fa0e 	mul.w	sl, r5, lr
 8025192:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025196:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802519a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802519e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80251a2:	44de      	add	lr, fp
 80251a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80251a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80251b8:	ea4e 050a 	orr.w	r5, lr, sl
 80251bc:	9508      	str	r5, [sp, #32]
 80251be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80251c0:	2dff      	cmp	r5, #255	; 0xff
 80251c2:	d021      	beq.n	8025208 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80251c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80251c6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80251ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80251cc:	fb05 fb0b 	mul.w	fp, r5, fp
 80251d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80251d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80251d6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80251da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80251dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251e0:	fb05 fa0a 	mul.w	sl, r5, sl
 80251e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80251e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80251ec:	44de      	add	lr, fp
 80251ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80251f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025202:	ea4e 050a 	orr.w	r5, lr, sl
 8025206:	950c      	str	r5, [sp, #48]	; 0x30
 8025208:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802520a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802520e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025212:	fb08 fc0c 	mul.w	ip, r8, ip
 8025216:	fb01 cc0e 	mla	ip, r1, lr, ip
 802521a:	9d08      	ldr	r5, [sp, #32]
 802521c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025220:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025224:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025228:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802522a:	2bff      	cmp	r3, #255	; 0xff
 802522c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025230:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025232:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025236:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802523a:	fb08 f80e 	mul.w	r8, r8, lr
 802523e:	fb01 8202 	mla	r2, r1, r2, r8
 8025242:	9908      	ldr	r1, [sp, #32]
 8025244:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025248:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802524c:	fb00 220a 	mla	r2, r0, sl, r2
 8025250:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025252:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025256:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802525a:	fb09 2900 	mla	r9, r9, r0, r2
 802525e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025262:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025266:	ea4c 0c09 	orr.w	ip, ip, r9
 802526a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802526e:	f040 8091 	bne.w	8025394 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025272:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8025276:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802527a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802527e:	f022 0207 	bic.w	r2, r2, #7
 8025282:	431a      	orrs	r2, r3
 8025284:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025288:	ea4c 0c02 	orr.w	ip, ip, r2
 802528c:	f8a7 c000 	strh.w	ip, [r7]
 8025290:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025292:	3702      	adds	r7, #2
 8025294:	441c      	add	r4, r3
 8025296:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025298:	441e      	add	r6, r3
 802529a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802529c:	3b01      	subs	r3, #1
 802529e:	9317      	str	r3, [sp, #92]	; 0x5c
 80252a0:	e6c0      	b.n	8025024 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80252a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80252a4:	441c      	add	r4, r3
 80252a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80252a8:	441e      	add	r6, r3
 80252aa:	9b07      	ldr	r3, [sp, #28]
 80252ac:	3b01      	subs	r3, #1
 80252ae:	9307      	str	r3, [sp, #28]
 80252b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252b2:	3302      	adds	r3, #2
 80252b4:	930a      	str	r3, [sp, #40]	; 0x28
 80252b6:	e695      	b.n	8024fe4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80252b8:	d024      	beq.n	8025304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80252ba:	9b07      	ldr	r3, [sp, #28]
 80252bc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80252be:	3b01      	subs	r3, #1
 80252c0:	fb00 4003 	mla	r0, r0, r3, r4
 80252c4:	1400      	asrs	r0, r0, #16
 80252c6:	f53f aeaa 	bmi.w	802501e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80252ca:	3901      	subs	r1, #1
 80252cc:	4288      	cmp	r0, r1
 80252ce:	f6bf aea6 	bge.w	802501e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80252d2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80252d4:	fb01 6303 	mla	r3, r1, r3, r6
 80252d8:	141b      	asrs	r3, r3, #16
 80252da:	f53f aea0 	bmi.w	802501e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80252de:	3a01      	subs	r2, #1
 80252e0:	4293      	cmp	r3, r2
 80252e2:	f6bf ae9c 	bge.w	802501e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80252e6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80252ea:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80252ee:	f1bb 0f00 	cmp.w	fp, #0
 80252f2:	f300 809a 	bgt.w	802542a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80252f6:	9b07      	ldr	r3, [sp, #28]
 80252f8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80252fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252fe:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025302:	930a      	str	r3, [sp, #40]	; 0x28
 8025304:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025306:	2b00      	cmp	r3, #0
 8025308:	f340 81ec 	ble.w	80256e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802530c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025310:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025314:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025318:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802531c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025320:	eef0 6a62 	vmov.f32	s13, s5
 8025324:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025328:	ee77 2a62 	vsub.f32	s5, s14, s5
 802532c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025330:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025334:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025338:	ee16 4a90 	vmov	r4, s13
 802533c:	eef0 6a43 	vmov.f32	s13, s6
 8025340:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025344:	ee12 2a90 	vmov	r2, s5
 8025348:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802534c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802534e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025352:	fb92 f3f3 	sdiv	r3, r2, r3
 8025356:	ee13 2a10 	vmov	r2, s6
 802535a:	9327      	str	r3, [sp, #156]	; 0x9c
 802535c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802535e:	ee16 6a90 	vmov	r6, s13
 8025362:	fb92 f3f3 	sdiv	r3, r2, r3
 8025366:	9328      	str	r3, [sp, #160]	; 0xa0
 8025368:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802536a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802536c:	3b01      	subs	r3, #1
 802536e:	9316      	str	r3, [sp, #88]	; 0x58
 8025370:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025372:	bf08      	it	eq
 8025374:	4613      	moveq	r3, r2
 8025376:	eeb0 3a67 	vmov.f32	s6, s15
 802537a:	9307      	str	r3, [sp, #28]
 802537c:	eef0 2a47 	vmov.f32	s5, s14
 8025380:	e622      	b.n	8024fc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8025382:	2800      	cmp	r0, #0
 8025384:	f43f ae92 	beq.w	80250ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8025388:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802538c:	9308      	str	r3, [sp, #32]
 802538e:	0e1b      	lsrs	r3, r3, #24
 8025390:	9310      	str	r3, [sp, #64]	; 0x40
 8025392:	e68b      	b.n	80250ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8025394:	43db      	mvns	r3, r3
 8025396:	8839      	ldrh	r1, [r7, #0]
 8025398:	fa5f f883 	uxtb.w	r8, r3
 802539c:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80253a0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80253a4:	fb0e fe08 	mul.w	lr, lr, r8
 80253a8:	10c8      	asrs	r0, r1, #3
 80253aa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80253ae:	fb00 f008 	mul.w	r0, r0, r8
 80253b2:	00cb      	lsls	r3, r1, #3
 80253b4:	f10e 0101 	add.w	r1, lr, #1
 80253b8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80253bc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80253c0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80253c4:	b2db      	uxtb	r3, r3
 80253c6:	f100 0e01 	add.w	lr, r0, #1
 80253ca:	fb03 f308 	mul.w	r3, r3, r8
 80253ce:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80253d2:	4dc6      	ldr	r5, [pc, #792]	; (80256ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80253d4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80253d8:	b2c9      	uxtb	r1, r1
 80253da:	00d2      	lsls	r2, r2, #3
 80253dc:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80253e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80253e4:	430a      	orrs	r2, r1
 80253e6:	1c59      	adds	r1, r3, #1
 80253e8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80253ec:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80253f0:	e748      	b.n	8025284 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80253f2:	f112 0801 	adds.w	r8, r2, #1
 80253f6:	f53f af4b 	bmi.w	8025290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80253fa:	4543      	cmp	r3, r8
 80253fc:	f6ff af48 	blt.w	8025290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025400:	f11c 0801 	adds.w	r8, ip, #1
 8025404:	f53f af44 	bmi.w	8025290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025408:	45c6      	cmp	lr, r8
 802540a:	f6ff af41 	blt.w	8025290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802540e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8025412:	fa0f f28e 	sxth.w	r2, lr
 8025416:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802541a:	9200      	str	r2, [sp, #0]
 802541c:	b21b      	sxth	r3, r3
 802541e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025420:	4639      	mov	r1, r7
 8025422:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025424:	f7ff fc87 	bl	8024d36 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8025428:	e732      	b.n	8025290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802542a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802542c:	1421      	asrs	r1, r4, #16
 802542e:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8025432:	1433      	asrs	r3, r6, #16
 8025434:	fb07 1303 	mla	r3, r7, r3, r1
 8025438:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802543a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802543c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025440:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025444:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025448:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802544c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025450:	2a00      	cmp	r2, #0
 8025452:	f000 8108 	beq.w	8025666 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8025456:	684d      	ldr	r5, [r1, #4]
 8025458:	950d      	str	r5, [sp, #52]	; 0x34
 802545a:	0e2d      	lsrs	r5, r5, #24
 802545c:	9514      	str	r5, [sp, #80]	; 0x50
 802545e:	b178      	cbz	r0, 8025480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025460:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8025464:	3f01      	subs	r7, #1
 8025466:	00bf      	lsls	r7, r7, #2
 8025468:	3704      	adds	r7, #4
 802546a:	eb01 0e07 	add.w	lr, r1, r7
 802546e:	59c9      	ldr	r1, [r1, r7]
 8025470:	9109      	str	r1, [sp, #36]	; 0x24
 8025472:	0e09      	lsrs	r1, r1, #24
 8025474:	9111      	str	r1, [sp, #68]	; 0x44
 8025476:	f8de 1004 	ldr.w	r1, [lr, #4]
 802547a:	910e      	str	r1, [sp, #56]	; 0x38
 802547c:	0e09      	lsrs	r1, r1, #24
 802547e:	9115      	str	r1, [sp, #84]	; 0x54
 8025480:	b292      	uxth	r2, r2
 8025482:	b280      	uxth	r0, r0
 8025484:	fb02 f900 	mul.w	r9, r2, r0
 8025488:	0112      	lsls	r2, r2, #4
 802548a:	eba2 0e09 	sub.w	lr, r2, r9
 802548e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025492:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025494:	fa1f fe8e 	uxth.w	lr, lr
 8025498:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802549c:	fb0e f202 	mul.w	r2, lr, r2
 80254a0:	b280      	uxth	r0, r0
 80254a2:	1a09      	subs	r1, r1, r0
 80254a4:	b289      	uxth	r1, r1
 80254a6:	fb01 220c 	mla	r2, r1, ip, r2
 80254aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80254ac:	fb00 2205 	mla	r2, r0, r5, r2
 80254b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80254b2:	fb09 2205 	mla	r2, r9, r5, r2
 80254b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80254ba:	2a00      	cmp	r2, #0
 80254bc:	f000 80ca 	beq.w	8025654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80254c0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80254c4:	d019      	beq.n	80254fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80254c6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80254ca:	fb0c fa0a 	mul.w	sl, ip, sl
 80254ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254d2:	fb0c fc03 	mul.w	ip, ip, r3
 80254d6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80254da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80254de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80254e2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80254e6:	4453      	add	r3, sl
 80254e8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80254ec:	0a1b      	lsrs	r3, r3, #8
 80254ee:	0a3f      	lsrs	r7, r7, #8
 80254f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80254f4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80254f8:	433b      	orrs	r3, r7
 80254fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80254fc:	2dff      	cmp	r5, #255	; 0xff
 80254fe:	d020      	beq.n	8025542 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8025500:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025502:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025506:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025508:	436f      	muls	r7, r5
 802550a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802550c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025510:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025514:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025516:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802551a:	fb05 fa0a 	mul.w	sl, r5, sl
 802551e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025522:	44bc      	add	ip, r7
 8025524:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025528:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802552c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025530:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025534:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025538:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802553c:	ea4c 050a 	orr.w	r5, ip, sl
 8025540:	950d      	str	r5, [sp, #52]	; 0x34
 8025542:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025544:	2dff      	cmp	r5, #255	; 0xff
 8025546:	d020      	beq.n	802558a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8025548:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802554a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802554e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025550:	436f      	muls	r7, r5
 8025552:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025554:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8025558:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802555a:	fb05 fa0c 	mul.w	sl, r5, ip
 802555e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025562:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025566:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802556a:	44bc      	add	ip, r7
 802556c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025570:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025574:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025578:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802557c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025580:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025584:	ea4c 050a 	orr.w	r5, ip, sl
 8025588:	9509      	str	r5, [sp, #36]	; 0x24
 802558a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802558c:	2dff      	cmp	r5, #255	; 0xff
 802558e:	d020      	beq.n	80255d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8025590:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025592:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025596:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025598:	436f      	muls	r7, r5
 802559a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802559c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80255a0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80255a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80255a6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80255aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80255ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80255b2:	44bc      	add	ip, r7
 80255b4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80255b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80255bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80255c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80255c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80255cc:	ea4c 050a 	orr.w	r5, ip, sl
 80255d0:	950e      	str	r5, [sp, #56]	; 0x38
 80255d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80255d4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80255d8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80255dc:	fb0e f707 	mul.w	r7, lr, r7
 80255e0:	fb01 770c 	mla	r7, r1, ip, r7
 80255e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80255e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80255ea:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80255ee:	fb00 770c 	mla	r7, r0, ip, r7
 80255f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80255f4:	2aff      	cmp	r2, #255	; 0xff
 80255f6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80255fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80255fc:	fb09 770c 	mla	r7, r9, ip, r7
 8025600:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8025604:	fb0e fe0c 	mul.w	lr, lr, ip
 8025608:	fb01 e303 	mla	r3, r1, r3, lr
 802560c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802560e:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8025612:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025616:	fb00 330a 	mla	r3, r0, sl, r3
 802561a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802561c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025620:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025624:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025628:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802562c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025630:	ea47 070c 	orr.w	r7, r7, ip
 8025634:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8025638:	d11e      	bne.n	8025678 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802563a:	097a      	lsrs	r2, r7, #5
 802563c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8025640:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025644:	f023 0307 	bic.w	r3, r3, #7
 8025648:	4313      	orrs	r3, r2
 802564a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802564e:	431f      	orrs	r7, r3
 8025650:	f8a8 7000 	strh.w	r7, [r8]
 8025654:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025656:	f108 0802 	add.w	r8, r8, #2
 802565a:	441c      	add	r4, r3
 802565c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802565e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025662:	441e      	add	r6, r3
 8025664:	e643      	b.n	80252ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8025666:	2800      	cmp	r0, #0
 8025668:	f43f af0a 	beq.w	8025480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802566c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8025670:	9109      	str	r1, [sp, #36]	; 0x24
 8025672:	0e09      	lsrs	r1, r1, #24
 8025674:	9111      	str	r1, [sp, #68]	; 0x44
 8025676:	e703      	b.n	8025480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025678:	43d2      	mvns	r2, r2
 802567a:	f8b8 1000 	ldrh.w	r1, [r8]
 802567e:	fa5f fe82 	uxtb.w	lr, r2
 8025682:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8025686:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802568a:	fb0c fc0e 	mul.w	ip, ip, lr
 802568e:	10c8      	asrs	r0, r1, #3
 8025690:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025694:	fb00 f00e 	mul.w	r0, r0, lr
 8025698:	00ca      	lsls	r2, r1, #3
 802569a:	f10c 0101 	add.w	r1, ip, #1
 802569e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80256a2:	b2d2      	uxtb	r2, r2
 80256a4:	0c39      	lsrs	r1, r7, #16
 80256a6:	fb02 f20e 	mul.w	r2, r2, lr
 80256aa:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80256ae:	490f      	ldr	r1, [pc, #60]	; (80256ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80256b0:	fa5f fc8c 	uxtb.w	ip, ip
 80256b4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80256b8:	1c41      	adds	r1, r0, #1
 80256ba:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80256be:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80256c2:	1c51      	adds	r1, r2, #1
 80256c4:	00c0      	lsls	r0, r0, #3
 80256c6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80256ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256ce:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80256d2:	ea4c 0c00 	orr.w	ip, ip, r0
 80256d6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80256da:	ea47 0c0c 	orr.w	ip, r7, ip
 80256de:	f8a8 c000 	strh.w	ip, [r8]
 80256e2:	e7b7      	b.n	8025654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80256e4:	b01b      	add	sp, #108	; 0x6c
 80256e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256ea:	bf00      	nop
 80256ec:	fffff800 	.word	0xfffff800

080256f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80256f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256f4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80256f8:	2d00      	cmp	r5, #0
 80256fa:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80256fe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025702:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8025706:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802570a:	fb05 0e03 	mla	lr, r5, r3, r0
 802570e:	f2c0 808c 	blt.w	802582a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8025712:	45a9      	cmp	r9, r5
 8025714:	f340 8089 	ble.w	802582a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8025718:	2800      	cmp	r0, #0
 802571a:	f2c0 8084 	blt.w	8025826 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802571e:	4580      	cmp	r8, r0
 8025720:	f340 8081 	ble.w	8025826 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8025724:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025728:	5d16      	ldrb	r6, [r2, r4]
 802572a:	f01e 0f01 	tst.w	lr, #1
 802572e:	bf0c      	ite	eq
 8025730:	f006 060f 	andeq.w	r6, r6, #15
 8025734:	1136      	asrne	r6, r6, #4
 8025736:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802573a:	b2f6      	uxtb	r6, r6
 802573c:	1c44      	adds	r4, r0, #1
 802573e:	d477      	bmi.n	8025830 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8025740:	45a0      	cmp	r8, r4
 8025742:	dd75      	ble.n	8025830 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8025744:	2f00      	cmp	r7, #0
 8025746:	d075      	beq.n	8025834 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8025748:	f10e 0a01 	add.w	sl, lr, #1
 802574c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8025750:	5d14      	ldrb	r4, [r2, r4]
 8025752:	f01a 0f01 	tst.w	sl, #1
 8025756:	bf0c      	ite	eq
 8025758:	f004 040f 	andeq.w	r4, r4, #15
 802575c:	1124      	asrne	r4, r4, #4
 802575e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025762:	b2e4      	uxtb	r4, r4
 8025764:	3501      	adds	r5, #1
 8025766:	d469      	bmi.n	802583c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8025768:	45a9      	cmp	r9, r5
 802576a:	dd67      	ble.n	802583c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802576c:	f1bc 0f00 	cmp.w	ip, #0
 8025770:	d067      	beq.n	8025842 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8025772:	2800      	cmp	r0, #0
 8025774:	db60      	blt.n	8025838 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8025776:	4580      	cmp	r8, r0
 8025778:	dd5e      	ble.n	8025838 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802577a:	eb03 090e 	add.w	r9, r3, lr
 802577e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8025782:	5d55      	ldrb	r5, [r2, r5]
 8025784:	f019 0f01 	tst.w	r9, #1
 8025788:	bf0c      	ite	eq
 802578a:	f005 050f 	andeq.w	r5, r5, #15
 802578e:	112d      	asrne	r5, r5, #4
 8025790:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025794:	b2ed      	uxtb	r5, r5
 8025796:	3001      	adds	r0, #1
 8025798:	d456      	bmi.n	8025848 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802579a:	4580      	cmp	r8, r0
 802579c:	dd54      	ble.n	8025848 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802579e:	2f00      	cmp	r7, #0
 80257a0:	d054      	beq.n	802584c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80257a2:	3301      	adds	r3, #1
 80257a4:	449e      	add	lr, r3
 80257a6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80257aa:	5cd0      	ldrb	r0, [r2, r3]
 80257ac:	f01e 0f01 	tst.w	lr, #1
 80257b0:	bf0c      	ite	eq
 80257b2:	f000 000f 	andeq.w	r0, r0, #15
 80257b6:	1100      	asrne	r0, r0, #4
 80257b8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80257bc:	b2c3      	uxtb	r3, r0
 80257be:	b2ba      	uxth	r2, r7
 80257c0:	fa1f fc8c 	uxth.w	ip, ip
 80257c4:	fb02 f00c 	mul.w	r0, r2, ip
 80257c8:	0112      	lsls	r2, r2, #4
 80257ca:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80257ce:	1a12      	subs	r2, r2, r0
 80257d0:	b292      	uxth	r2, r2
 80257d2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80257d6:	4362      	muls	r2, r4
 80257d8:	fa1f fc8c 	uxth.w	ip, ip
 80257dc:	eba7 070c 	sub.w	r7, r7, ip
 80257e0:	b2bf      	uxth	r7, r7
 80257e2:	fb06 2207 	mla	r2, r6, r7, r2
 80257e6:	fb0c 2505 	mla	r5, ip, r5, r2
 80257ea:	fb00 5303 	mla	r3, r0, r3, r5
 80257ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80257f2:	b1b3      	cbz	r3, 8025822 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80257f4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80257f8:	435a      	muls	r2, r3
 80257fa:	1c53      	adds	r3, r2, #1
 80257fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025800:	4a2d      	ldr	r2, [pc, #180]	; (80258b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8025802:	121b      	asrs	r3, r3, #8
 8025804:	6812      	ldr	r2, [r2, #0]
 8025806:	2bff      	cmp	r3, #255	; 0xff
 8025808:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802580c:	d120      	bne.n	8025850 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802580e:	4b2b      	ldr	r3, [pc, #172]	; (80258bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8025810:	0950      	lsrs	r0, r2, #5
 8025812:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025816:	4033      	ands	r3, r6
 8025818:	4318      	orrs	r0, r3
 802581a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802581e:	4302      	orrs	r2, r0
 8025820:	800a      	strh	r2, [r1, #0]
 8025822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025826:	2600      	movs	r6, #0
 8025828:	e788      	b.n	802573c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802582a:	2400      	movs	r4, #0
 802582c:	4626      	mov	r6, r4
 802582e:	e799      	b.n	8025764 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8025830:	2400      	movs	r4, #0
 8025832:	e797      	b.n	8025764 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8025834:	463c      	mov	r4, r7
 8025836:	e795      	b.n	8025764 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8025838:	2500      	movs	r5, #0
 802583a:	e7ac      	b.n	8025796 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802583c:	2300      	movs	r3, #0
 802583e:	461d      	mov	r5, r3
 8025840:	e7bd      	b.n	80257be <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8025842:	4663      	mov	r3, ip
 8025844:	4665      	mov	r5, ip
 8025846:	e7ba      	b.n	80257be <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8025848:	2300      	movs	r3, #0
 802584a:	e7b8      	b.n	80257be <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802584c:	463b      	mov	r3, r7
 802584e:	e7b6      	b.n	80257be <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8025850:	b29f      	uxth	r7, r3
 8025852:	43db      	mvns	r3, r3
 8025854:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8025858:	880d      	ldrh	r5, [r1, #0]
 802585a:	fb10 f007 	smulbb	r0, r0, r7
 802585e:	b2f6      	uxtb	r6, r6
 8025860:	b2d2      	uxtb	r2, r2
 8025862:	122c      	asrs	r4, r5, #8
 8025864:	fb12 f207 	smulbb	r2, r2, r7
 8025868:	fb16 f607 	smulbb	r6, r6, r7
 802586c:	b2db      	uxtb	r3, r3
 802586e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025872:	fb04 0403 	mla	r4, r4, r3, r0
 8025876:	10e8      	asrs	r0, r5, #3
 8025878:	00ed      	lsls	r5, r5, #3
 802587a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802587e:	b2ed      	uxtb	r5, r5
 8025880:	fb00 6603 	mla	r6, r0, r3, r6
 8025884:	fb05 2303 	mla	r3, r5, r3, r2
 8025888:	b2a4      	uxth	r4, r4
 802588a:	b29a      	uxth	r2, r3
 802588c:	1c63      	adds	r3, r4, #1
 802588e:	b2b0      	uxth	r0, r6
 8025890:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025894:	1c53      	adds	r3, r2, #1
 8025896:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802589a:	1c42      	adds	r2, r0, #1
 802589c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80258a0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80258a4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80258a8:	0940      	lsrs	r0, r0, #5
 80258aa:	4323      	orrs	r3, r4
 80258ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80258b0:	4303      	orrs	r3, r0
 80258b2:	800b      	strh	r3, [r1, #0]
 80258b4:	e7b5      	b.n	8025822 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80258b6:	bf00      	nop
 80258b8:	2000f39c 	.word	0x2000f39c
 80258bc:	00fff800 	.word	0x00fff800

080258c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80258c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258c4:	b097      	sub	sp, #92	; 0x5c
 80258c6:	9214      	str	r2, [sp, #80]	; 0x50
 80258c8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80258ca:	9015      	str	r0, [sp, #84]	; 0x54
 80258cc:	9309      	str	r3, [sp, #36]	; 0x24
 80258ce:	6850      	ldr	r0, [r2, #4]
 80258d0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80258d4:	910d      	str	r1, [sp, #52]	; 0x34
 80258d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80258d8:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80258dc:	fb00 1303 	mla	r3, r0, r3, r1
 80258e0:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80258e4:	6812      	ldr	r2, [r2, #0]
 80258e6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80258ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258ec:	689b      	ldr	r3, [r3, #8]
 80258ee:	3301      	adds	r3, #1
 80258f0:	f023 0301 	bic.w	r3, r3, #1
 80258f4:	930a      	str	r3, [sp, #40]	; 0x28
 80258f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258f8:	681f      	ldr	r7, [r3, #0]
 80258fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	dc03      	bgt.n	8025908 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025900:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025902:	2b00      	cmp	r3, #0
 8025904:	f340 8287 	ble.w	8025e16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025908:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802590a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802590e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025912:	1e48      	subs	r0, r1, #1
 8025914:	f102 3cff 	add.w	ip, r2, #4294967295
 8025918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802591a:	2b00      	cmp	r3, #0
 802591c:	f340 80c3 	ble.w	8025aa6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025920:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025924:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025928:	d406      	bmi.n	8025938 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802592a:	4586      	cmp	lr, r0
 802592c:	da04      	bge.n	8025938 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802592e:	2b00      	cmp	r3, #0
 8025930:	db02      	blt.n	8025938 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025932:	4563      	cmp	r3, ip
 8025934:	f2c0 80b8 	blt.w	8025aa8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025938:	f11e 0e01 	adds.w	lr, lr, #1
 802593c:	f100 80a9 	bmi.w	8025a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025940:	4571      	cmp	r1, lr
 8025942:	f2c0 80a6 	blt.w	8025a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025946:	3301      	adds	r3, #1
 8025948:	f100 80a3 	bmi.w	8025a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802594c:	429a      	cmp	r2, r3
 802594e:	f2c0 80a0 	blt.w	8025a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025952:	46c8      	mov	r8, r9
 8025954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025956:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802595a:	930e      	str	r3, [sp, #56]	; 0x38
 802595c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802595e:	2b00      	cmp	r3, #0
 8025960:	f340 80c2 	ble.w	8025ae8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8025964:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025966:	1430      	asrs	r0, r6, #16
 8025968:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802596c:	1423      	asrs	r3, r4, #16
 802596e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025972:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025976:	f100 814d 	bmi.w	8025c14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802597a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802597e:	455b      	cmp	r3, fp
 8025980:	f280 8148 	bge.w	8025c14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025984:	2800      	cmp	r0, #0
 8025986:	f2c0 8145 	blt.w	8025c14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802598a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802598e:	4558      	cmp	r0, fp
 8025990:	f280 8140 	bge.w	8025c14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025994:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025996:	fb00 3305 	mla	r3, r0, r5, r3
 802599a:	0858      	lsrs	r0, r3, #1
 802599c:	f817 c000 	ldrb.w	ip, [r7, r0]
 80259a0:	07dd      	lsls	r5, r3, #31
 80259a2:	bf54      	ite	pl
 80259a4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80259a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80259ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80259b0:	fa5f fc8c 	uxtb.w	ip, ip
 80259b4:	2a00      	cmp	r2, #0
 80259b6:	f000 80db 	beq.w	8025b70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80259ba:	1c58      	adds	r0, r3, #1
 80259bc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80259c0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80259c4:	07c0      	lsls	r0, r0, #31
 80259c6:	bf54      	ite	pl
 80259c8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80259cc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80259d0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80259d4:	fa5f f08e 	uxtb.w	r0, lr
 80259d8:	9010      	str	r0, [sp, #64]	; 0x40
 80259da:	b1c9      	cbz	r1, 8025a10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80259dc:	4453      	add	r3, sl
 80259de:	0858      	lsrs	r0, r3, #1
 80259e0:	5c38      	ldrb	r0, [r7, r0]
 80259e2:	07dd      	lsls	r5, r3, #31
 80259e4:	bf54      	ite	pl
 80259e6:	f000 000f 	andpl.w	r0, r0, #15
 80259ea:	1100      	asrmi	r0, r0, #4
 80259ec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80259f0:	3301      	adds	r3, #1
 80259f2:	b2c0      	uxtb	r0, r0
 80259f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80259f6:	0858      	lsrs	r0, r3, #1
 80259f8:	f817 e000 	ldrb.w	lr, [r7, r0]
 80259fc:	07dd      	lsls	r5, r3, #31
 80259fe:	bf54      	ite	pl
 8025a00:	f00e 030f 	andpl.w	r3, lr, #15
 8025a04:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8025a08:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025a0c:	b2db      	uxtb	r3, r3
 8025a0e:	9311      	str	r3, [sp, #68]	; 0x44
 8025a10:	b292      	uxth	r2, r2
 8025a12:	b289      	uxth	r1, r1
 8025a14:	fb02 f301 	mul.w	r3, r2, r1
 8025a18:	0112      	lsls	r2, r2, #4
 8025a1a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025a1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025a20:	1ad2      	subs	r2, r2, r3
 8025a22:	b292      	uxth	r2, r2
 8025a24:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025a28:	436a      	muls	r2, r5
 8025a2a:	b289      	uxth	r1, r1
 8025a2c:	1a40      	subs	r0, r0, r1
 8025a2e:	b280      	uxth	r0, r0
 8025a30:	fb0c 2c00 	mla	ip, ip, r0, r2
 8025a34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025a36:	fb01 c102 	mla	r1, r1, r2, ip
 8025a3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025a3c:	fb03 1302 	mla	r3, r3, r2, r1
 8025a40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025a44:	b1db      	cbz	r3, 8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025a48:	4353      	muls	r3, r2
 8025a4a:	1c5a      	adds	r2, r3, #1
 8025a4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025a50:	4ac6      	ldr	r2, [pc, #792]	; (8025d6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025a52:	121b      	asrs	r3, r3, #8
 8025a54:	6812      	ldr	r2, [r2, #0]
 8025a56:	2bff      	cmp	r3, #255	; 0xff
 8025a58:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025a5c:	f040 8099 	bne.w	8025b92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8025a60:	0953      	lsrs	r3, r2, #5
 8025a62:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025a66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a6a:	f02c 0c07 	bic.w	ip, ip, #7
 8025a6e:	ea43 0c0c 	orr.w	ip, r3, ip
 8025a72:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025a76:	ea4c 0202 	orr.w	r2, ip, r2
 8025a7a:	f8a8 2000 	strh.w	r2, [r8]
 8025a7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025a80:	f108 0802 	add.w	r8, r8, #2
 8025a84:	441c      	add	r4, r3
 8025a86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a88:	441e      	add	r6, r3
 8025a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025a8c:	3b01      	subs	r3, #1
 8025a8e:	930e      	str	r3, [sp, #56]	; 0x38
 8025a90:	e764      	b.n	802595c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025a94:	f109 0902 	add.w	r9, r9, #2
 8025a98:	441c      	add	r4, r3
 8025a9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a9c:	441e      	add	r6, r3
 8025a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025aa0:	3b01      	subs	r3, #1
 8025aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8025aa4:	e738      	b.n	8025918 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025aa6:	d024      	beq.n	8025af2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025aaa:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025aac:	3b01      	subs	r3, #1
 8025aae:	fb00 4003 	mla	r0, r0, r3, r4
 8025ab2:	1400      	asrs	r0, r0, #16
 8025ab4:	f53f af4d 	bmi.w	8025952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025ab8:	3901      	subs	r1, #1
 8025aba:	4288      	cmp	r0, r1
 8025abc:	f6bf af49 	bge.w	8025952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025ac0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025ac2:	fb01 6303 	mla	r3, r1, r3, r6
 8025ac6:	141b      	asrs	r3, r3, #16
 8025ac8:	f53f af43 	bmi.w	8025952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025acc:	3a01      	subs	r2, #1
 8025ace:	4293      	cmp	r3, r2
 8025ad0:	f6bf af3f 	bge.w	8025952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025ad4:	46c8      	mov	r8, r9
 8025ad6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8025ada:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025ade:	930e      	str	r3, [sp, #56]	; 0x38
 8025ae0:	f1bb 0f00 	cmp.w	fp, #0
 8025ae4:	f300 80b7 	bgt.w	8025c56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8025ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025aea:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025aee:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8025af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	f340 818e 	ble.w	8025e16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025afe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025b02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025b06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025b0e:	eef0 6a62 	vmov.f32	s13, s5
 8025b12:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025b16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025b1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025b1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025b26:	ee16 4a90 	vmov	r4, s13
 8025b2a:	eef0 6a43 	vmov.f32	s13, s6
 8025b2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025b32:	ee12 2a90 	vmov	r2, s5
 8025b36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025b3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b40:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b44:	ee13 2a10 	vmov	r2, s6
 8025b48:	9323      	str	r3, [sp, #140]	; 0x8c
 8025b4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b4c:	ee16 6a90 	vmov	r6, s13
 8025b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b54:	9324      	str	r3, [sp, #144]	; 0x90
 8025b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025b5a:	3b01      	subs	r3, #1
 8025b5c:	930d      	str	r3, [sp, #52]	; 0x34
 8025b5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b60:	bf08      	it	eq
 8025b62:	4613      	moveq	r3, r2
 8025b64:	eeb0 3a67 	vmov.f32	s6, s15
 8025b68:	9309      	str	r3, [sp, #36]	; 0x24
 8025b6a:	eef0 2a47 	vmov.f32	s5, s14
 8025b6e:	e6c4      	b.n	80258fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025b70:	2900      	cmp	r1, #0
 8025b72:	f43f af4d 	beq.w	8025a10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8025b76:	eb0a 0003 	add.w	r0, sl, r3
 8025b7a:	0843      	lsrs	r3, r0, #1
 8025b7c:	5cfb      	ldrb	r3, [r7, r3]
 8025b7e:	07c0      	lsls	r0, r0, #31
 8025b80:	bf54      	ite	pl
 8025b82:	f003 030f 	andpl.w	r3, r3, #15
 8025b86:	111b      	asrmi	r3, r3, #4
 8025b88:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025b8c:	b2db      	uxtb	r3, r3
 8025b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8025b90:	e73e      	b.n	8025a10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8025b92:	fa1f fb83 	uxth.w	fp, r3
 8025b96:	43db      	mvns	r3, r3
 8025b98:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025b9c:	f8b8 e000 	ldrh.w	lr, [r8]
 8025ba0:	fb11 f10b 	smulbb	r1, r1, fp
 8025ba4:	fa5f fc8c 	uxtb.w	ip, ip
 8025ba8:	b2d2      	uxtb	r2, r2
 8025baa:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025bae:	fb1c fc0b 	smulbb	ip, ip, fp
 8025bb2:	fb12 fb0b 	smulbb	fp, r2, fp
 8025bb6:	b2db      	uxtb	r3, r3
 8025bb8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025bbc:	fb00 1003 	mla	r0, r0, r3, r1
 8025bc0:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8025bc4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025bc8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025bcc:	fa5f fe8e 	uxtb.w	lr, lr
 8025bd0:	fb01 cc03 	mla	ip, r1, r3, ip
 8025bd4:	fb0e bb03 	mla	fp, lr, r3, fp
 8025bd8:	b280      	uxth	r0, r0
 8025bda:	1c43      	adds	r3, r0, #1
 8025bdc:	fa1f fc8c 	uxth.w	ip, ip
 8025be0:	fa1f fb8b 	uxth.w	fp, fp
 8025be4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025be8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8025bec:	f10c 0101 	add.w	r1, ip, #1
 8025bf0:	f10b 0001 	add.w	r0, fp, #1
 8025bf4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025bf8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025bfc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025c00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025c04:	4318      	orrs	r0, r3
 8025c06:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025c0a:	ea40 000c 	orr.w	r0, r0, ip
 8025c0e:	f8a8 0000 	strh.w	r0, [r8]
 8025c12:	e734      	b.n	8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025c14:	f113 0b01 	adds.w	fp, r3, #1
 8025c18:	f53f af31 	bmi.w	8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025c1c:	45dc      	cmp	ip, fp
 8025c1e:	f6ff af2e 	blt.w	8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025c22:	f110 0b01 	adds.w	fp, r0, #1
 8025c26:	f53f af2a 	bmi.w	8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025c2a:	45de      	cmp	lr, fp
 8025c2c:	f6ff af27 	blt.w	8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025c30:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025c32:	9302      	str	r3, [sp, #8]
 8025c34:	fa0f f38e 	sxth.w	r3, lr
 8025c38:	9301      	str	r3, [sp, #4]
 8025c3a:	fa0f f38c 	sxth.w	r3, ip
 8025c3e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025c42:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8025c46:	9300      	str	r3, [sp, #0]
 8025c48:	463a      	mov	r2, r7
 8025c4a:	4653      	mov	r3, sl
 8025c4c:	4641      	mov	r1, r8
 8025c4e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025c50:	f7ff fd4e 	bl	80256f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8025c54:	e713      	b.n	8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025c56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025c58:	1422      	asrs	r2, r4, #16
 8025c5a:	1433      	asrs	r3, r6, #16
 8025c5c:	fb05 2303 	mla	r3, r5, r3, r2
 8025c60:	085a      	lsrs	r2, r3, #1
 8025c62:	5cba      	ldrb	r2, [r7, r2]
 8025c64:	07dd      	lsls	r5, r3, #31
 8025c66:	bf54      	ite	pl
 8025c68:	f002 020f 	andpl.w	r2, r2, #15
 8025c6c:	1112      	asrmi	r2, r2, #4
 8025c6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025c72:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025c76:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025c7a:	b2d2      	uxtb	r2, r2
 8025c7c:	2900      	cmp	r1, #0
 8025c7e:	d077      	beq.n	8025d70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025c80:	f103 0e01 	add.w	lr, r3, #1
 8025c84:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025c88:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025c8c:	f01e 0f01 	tst.w	lr, #1
 8025c90:	bf0c      	ite	eq
 8025c92:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025c96:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025c9a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025c9e:	fa5f f58c 	uxtb.w	r5, ip
 8025ca2:	9512      	str	r5, [sp, #72]	; 0x48
 8025ca4:	b300      	cbz	r0, 8025ce8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8025ca6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025ca8:	442b      	add	r3, r5
 8025caa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025cae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025cb2:	07dd      	lsls	r5, r3, #31
 8025cb4:	bf54      	ite	pl
 8025cb6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025cba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025cbe:	3301      	adds	r3, #1
 8025cc0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025cc4:	fa5f f58c 	uxtb.w	r5, ip
 8025cc8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025ccc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025cd0:	950c      	str	r5, [sp, #48]	; 0x30
 8025cd2:	07dd      	lsls	r5, r3, #31
 8025cd4:	bf54      	ite	pl
 8025cd6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025cda:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025cde:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025ce2:	fa5f f38c 	uxtb.w	r3, ip
 8025ce6:	9313      	str	r3, [sp, #76]	; 0x4c
 8025ce8:	b289      	uxth	r1, r1
 8025cea:	b280      	uxth	r0, r0
 8025cec:	fb01 f300 	mul.w	r3, r1, r0
 8025cf0:	0109      	lsls	r1, r1, #4
 8025cf2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8025cf6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025cf8:	1ac9      	subs	r1, r1, r3
 8025cfa:	b289      	uxth	r1, r1
 8025cfc:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8025d00:	4369      	muls	r1, r5
 8025d02:	b280      	uxth	r0, r0
 8025d04:	ebac 0c00 	sub.w	ip, ip, r0
 8025d08:	fa1f fc8c 	uxth.w	ip, ip
 8025d0c:	fb02 120c 	mla	r2, r2, ip, r1
 8025d10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025d12:	fb00 2001 	mla	r0, r0, r1, r2
 8025d16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025d18:	fb03 0302 	mla	r3, r3, r2, r0
 8025d1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025d20:	b1d3      	cbz	r3, 8025d58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8025d22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025d24:	4353      	muls	r3, r2
 8025d26:	1c5a      	adds	r2, r3, #1
 8025d28:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025d2c:	4a0f      	ldr	r2, [pc, #60]	; (8025d6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025d2e:	121b      	asrs	r3, r3, #8
 8025d30:	6812      	ldr	r2, [r2, #0]
 8025d32:	2bff      	cmp	r3, #255	; 0xff
 8025d34:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025d38:	d12e      	bne.n	8025d98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025d3a:	0953      	lsrs	r3, r2, #5
 8025d3c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025d40:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025d44:	f02c 0c07 	bic.w	ip, ip, #7
 8025d48:	ea43 0c0c 	orr.w	ip, r3, ip
 8025d4c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025d50:	ea4c 0202 	orr.w	r2, ip, r2
 8025d54:	f8a8 2000 	strh.w	r2, [r8]
 8025d58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025d5a:	f108 0802 	add.w	r8, r8, #2
 8025d5e:	441c      	add	r4, r3
 8025d60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025d62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025d66:	441e      	add	r6, r3
 8025d68:	e6ba      	b.n	8025ae0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8025d6a:	bf00      	nop
 8025d6c:	2000f39c 	.word	0x2000f39c
 8025d70:	2800      	cmp	r0, #0
 8025d72:	d0b9      	beq.n	8025ce8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8025d74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025d76:	442b      	add	r3, r5
 8025d78:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025d7c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025d80:	07db      	lsls	r3, r3, #31
 8025d82:	bf54      	ite	pl
 8025d84:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025d88:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025d8c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d90:	fa5f f38c 	uxtb.w	r3, ip
 8025d94:	930c      	str	r3, [sp, #48]	; 0x30
 8025d96:	e7a7      	b.n	8025ce8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8025d98:	fa1f fa83 	uxth.w	sl, r3
 8025d9c:	43db      	mvns	r3, r3
 8025d9e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025da2:	f8b8 e000 	ldrh.w	lr, [r8]
 8025da6:	fb11 f10a 	smulbb	r1, r1, sl
 8025daa:	b2d2      	uxtb	r2, r2
 8025dac:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025db0:	fb12 f20a 	smulbb	r2, r2, sl
 8025db4:	b2db      	uxtb	r3, r3
 8025db6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025dba:	fb00 1003 	mla	r0, r0, r3, r1
 8025dbe:	fa5f fc8c 	uxtb.w	ip, ip
 8025dc2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8025dc6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025dca:	fb1c fc0a 	smulbb	ip, ip, sl
 8025dce:	fa5f fe8e 	uxtb.w	lr, lr
 8025dd2:	fb0e 2203 	mla	r2, lr, r3, r2
 8025dd6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025dda:	fb01 cc03 	mla	ip, r1, r3, ip
 8025dde:	b280      	uxth	r0, r0
 8025de0:	b292      	uxth	r2, r2
 8025de2:	1c43      	adds	r3, r0, #1
 8025de4:	1c51      	adds	r1, r2, #1
 8025de6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025dea:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8025dee:	fa1f fc8c 	uxth.w	ip, ip
 8025df2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8025df6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025dfa:	4308      	orrs	r0, r1
 8025dfc:	f10c 0101 	add.w	r1, ip, #1
 8025e00:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025e04:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025e08:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025e0c:	ea40 000c 	orr.w	r0, r0, ip
 8025e10:	f8a8 0000 	strh.w	r0, [r8]
 8025e14:	e7a0      	b.n	8025d58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8025e16:	b017      	add	sp, #92	; 0x5c
 8025e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025e1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8025e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025e20:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8025e24:	2d00      	cmp	r5, #0
 8025e26:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8025e2a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025e2e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8025e32:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8025e36:	fb05 0e03 	mla	lr, r5, r3, r0
 8025e3a:	f2c0 80b0 	blt.w	8025f9e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025e3e:	45a9      	cmp	r9, r5
 8025e40:	f340 80ad 	ble.w	8025f9e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025e44:	2800      	cmp	r0, #0
 8025e46:	f2c0 80a8 	blt.w	8025f9a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025e4a:	4580      	cmp	r8, r0
 8025e4c:	f340 80a5 	ble.w	8025f9a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025e50:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025e54:	5d16      	ldrb	r6, [r2, r4]
 8025e56:	f01e 0f01 	tst.w	lr, #1
 8025e5a:	bf0c      	ite	eq
 8025e5c:	f006 060f 	andeq.w	r6, r6, #15
 8025e60:	1136      	asrne	r6, r6, #4
 8025e62:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025e66:	b2f6      	uxtb	r6, r6
 8025e68:	1c44      	adds	r4, r0, #1
 8025e6a:	f100 809b 	bmi.w	8025fa4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025e6e:	45a0      	cmp	r8, r4
 8025e70:	f340 8098 	ble.w	8025fa4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025e74:	2f00      	cmp	r7, #0
 8025e76:	f000 8097 	beq.w	8025fa8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8025e7a:	f10e 0a01 	add.w	sl, lr, #1
 8025e7e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8025e82:	5d14      	ldrb	r4, [r2, r4]
 8025e84:	f01a 0f01 	tst.w	sl, #1
 8025e88:	bf0c      	ite	eq
 8025e8a:	f004 040f 	andeq.w	r4, r4, #15
 8025e8e:	1124      	asrne	r4, r4, #4
 8025e90:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025e94:	b2e4      	uxtb	r4, r4
 8025e96:	3501      	adds	r5, #1
 8025e98:	f100 808a 	bmi.w	8025fb0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025e9c:	45a9      	cmp	r9, r5
 8025e9e:	f340 8087 	ble.w	8025fb0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025ea2:	f1bc 0f00 	cmp.w	ip, #0
 8025ea6:	f000 8086 	beq.w	8025fb6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8025eaa:	2800      	cmp	r0, #0
 8025eac:	db7e      	blt.n	8025fac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025eae:	4580      	cmp	r8, r0
 8025eb0:	dd7c      	ble.n	8025fac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025eb2:	eb03 090e 	add.w	r9, r3, lr
 8025eb6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8025eba:	5d55      	ldrb	r5, [r2, r5]
 8025ebc:	f019 0f01 	tst.w	r9, #1
 8025ec0:	bf0c      	ite	eq
 8025ec2:	f005 050f 	andeq.w	r5, r5, #15
 8025ec6:	112d      	asrne	r5, r5, #4
 8025ec8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025ecc:	b2ed      	uxtb	r5, r5
 8025ece:	3001      	adds	r0, #1
 8025ed0:	d474      	bmi.n	8025fbc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8025ed2:	4580      	cmp	r8, r0
 8025ed4:	dd72      	ble.n	8025fbc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8025ed6:	2f00      	cmp	r7, #0
 8025ed8:	d072      	beq.n	8025fc0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8025eda:	3301      	adds	r3, #1
 8025edc:	449e      	add	lr, r3
 8025ede:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025ee2:	5cd0      	ldrb	r0, [r2, r3]
 8025ee4:	f01e 0f01 	tst.w	lr, #1
 8025ee8:	bf0c      	ite	eq
 8025eea:	f000 000f 	andeq.w	r0, r0, #15
 8025eee:	1100      	asrne	r0, r0, #4
 8025ef0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025ef4:	b2c3      	uxtb	r3, r0
 8025ef6:	b2ba      	uxth	r2, r7
 8025ef8:	fa1f fc8c 	uxth.w	ip, ip
 8025efc:	fb02 f00c 	mul.w	r0, r2, ip
 8025f00:	0112      	lsls	r2, r2, #4
 8025f02:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025f06:	1a12      	subs	r2, r2, r0
 8025f08:	b292      	uxth	r2, r2
 8025f0a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8025f0e:	4362      	muls	r2, r4
 8025f10:	fa1f fc8c 	uxth.w	ip, ip
 8025f14:	eba7 070c 	sub.w	r7, r7, ip
 8025f18:	b2bf      	uxth	r7, r7
 8025f1a:	fb06 2207 	mla	r2, r6, r7, r2
 8025f1e:	fb0c 2505 	mla	r5, ip, r5, r2
 8025f22:	fb00 5303 	mla	r3, r0, r3, r5
 8025f26:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025f2a:	b3a3      	cbz	r3, 8025f96 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8025f2c:	4a25      	ldr	r2, [pc, #148]	; (8025fc4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8025f2e:	880e      	ldrh	r6, [r1, #0]
 8025f30:	6815      	ldr	r5, [r2, #0]
 8025f32:	b29a      	uxth	r2, r3
 8025f34:	43db      	mvns	r3, r3
 8025f36:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8025f3a:	fb10 f002 	smulbb	r0, r0, r2
 8025f3e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8025f42:	b2ed      	uxtb	r5, r5
 8025f44:	1234      	asrs	r4, r6, #8
 8025f46:	fb17 f702 	smulbb	r7, r7, r2
 8025f4a:	fb15 f202 	smulbb	r2, r5, r2
 8025f4e:	b2db      	uxtb	r3, r3
 8025f50:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025f54:	fb04 0403 	mla	r4, r4, r3, r0
 8025f58:	10f0      	asrs	r0, r6, #3
 8025f5a:	00f6      	lsls	r6, r6, #3
 8025f5c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025f60:	b2f6      	uxtb	r6, r6
 8025f62:	fb00 7003 	mla	r0, r0, r3, r7
 8025f66:	fb06 2303 	mla	r3, r6, r3, r2
 8025f6a:	b2a4      	uxth	r4, r4
 8025f6c:	b29a      	uxth	r2, r3
 8025f6e:	1c63      	adds	r3, r4, #1
 8025f70:	b280      	uxth	r0, r0
 8025f72:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025f76:	1c53      	adds	r3, r2, #1
 8025f78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025f7c:	1c42      	adds	r2, r0, #1
 8025f7e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025f82:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025f86:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025f8a:	0940      	lsrs	r0, r0, #5
 8025f8c:	4323      	orrs	r3, r4
 8025f8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025f92:	4303      	orrs	r3, r0
 8025f94:	800b      	strh	r3, [r1, #0]
 8025f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025f9a:	2600      	movs	r6, #0
 8025f9c:	e764      	b.n	8025e68 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8025f9e:	2400      	movs	r4, #0
 8025fa0:	4626      	mov	r6, r4
 8025fa2:	e778      	b.n	8025e96 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025fa4:	2400      	movs	r4, #0
 8025fa6:	e776      	b.n	8025e96 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025fa8:	463c      	mov	r4, r7
 8025faa:	e774      	b.n	8025e96 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025fac:	2500      	movs	r5, #0
 8025fae:	e78e      	b.n	8025ece <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8025fb0:	2300      	movs	r3, #0
 8025fb2:	461d      	mov	r5, r3
 8025fb4:	e79f      	b.n	8025ef6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025fb6:	4663      	mov	r3, ip
 8025fb8:	4665      	mov	r5, ip
 8025fba:	e79c      	b.n	8025ef6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025fbc:	2300      	movs	r3, #0
 8025fbe:	e79a      	b.n	8025ef6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025fc0:	463b      	mov	r3, r7
 8025fc2:	e798      	b.n	8025ef6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025fc4:	2000f39c 	.word	0x2000f39c

08025fc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fcc:	b093      	sub	sp, #76	; 0x4c
 8025fce:	920c      	str	r2, [sp, #48]	; 0x30
 8025fd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025fd2:	9011      	str	r0, [sp, #68]	; 0x44
 8025fd4:	6850      	ldr	r0, [r2, #4]
 8025fd6:	9107      	str	r1, [sp, #28]
 8025fd8:	461d      	mov	r5, r3
 8025fda:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025fde:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8025fe2:	fb00 1303 	mla	r3, r0, r3, r1
 8025fe6:	6812      	ldr	r2, [r2, #0]
 8025fe8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025fec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025fee:	689b      	ldr	r3, [r3, #8]
 8025ff0:	3301      	adds	r3, #1
 8025ff2:	f023 0301 	bic.w	r3, r3, #1
 8025ff6:	9306      	str	r3, [sp, #24]
 8025ff8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ffa:	681f      	ldr	r7, [r3, #0]
 8025ffc:	9b07      	ldr	r3, [sp, #28]
 8025ffe:	2b00      	cmp	r3, #0
 8026000:	dc03      	bgt.n	802600a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8026002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026004:	2b00      	cmp	r3, #0
 8026006:	f340 8265 	ble.w	80264d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802600a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802600c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026010:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026014:	1e48      	subs	r0, r1, #1
 8026016:	f102 3cff 	add.w	ip, r2, #4294967295
 802601a:	2d00      	cmp	r5, #0
 802601c:	f340 80b7 	ble.w	802618e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026020:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026024:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026028:	d406      	bmi.n	8026038 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802602a:	4586      	cmp	lr, r0
 802602c:	da04      	bge.n	8026038 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802602e:	2b00      	cmp	r3, #0
 8026030:	db02      	blt.n	8026038 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026032:	4563      	cmp	r3, ip
 8026034:	f2c0 80ac 	blt.w	8026190 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8026038:	f11e 0e01 	adds.w	lr, lr, #1
 802603c:	f100 809f 	bmi.w	802617e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8026040:	4571      	cmp	r1, lr
 8026042:	f2c0 809c 	blt.w	802617e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8026046:	3301      	adds	r3, #1
 8026048:	f100 8099 	bmi.w	802617e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802604c:	429a      	cmp	r2, r3
 802604e:	f2c0 8096 	blt.w	802617e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8026052:	46c8      	mov	r8, r9
 8026054:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8026058:	9509      	str	r5, [sp, #36]	; 0x24
 802605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802605c:	2b00      	cmp	r3, #0
 802605e:	f340 80b5 	ble.w	80261cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026062:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8026066:	9308      	str	r3, [sp, #32]
 8026068:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802606a:	1430      	asrs	r0, r6, #16
 802606c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026070:	1423      	asrs	r3, r4, #16
 8026072:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026076:	f100 813e 	bmi.w	80262f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802607a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802607e:	455b      	cmp	r3, fp
 8026080:	f280 8139 	bge.w	80262f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026084:	2800      	cmp	r0, #0
 8026086:	f2c0 8136 	blt.w	80262f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802608a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802608e:	4558      	cmp	r0, fp
 8026090:	f280 8131 	bge.w	80262f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026094:	9a06      	ldr	r2, [sp, #24]
 8026096:	fb00 3302 	mla	r3, r0, r2, r3
 802609a:	0858      	lsrs	r0, r3, #1
 802609c:	f817 c000 	ldrb.w	ip, [r7, r0]
 80260a0:	07da      	lsls	r2, r3, #31
 80260a2:	bf54      	ite	pl
 80260a4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80260a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80260ac:	9a08      	ldr	r2, [sp, #32]
 80260ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80260b2:	fa5f fc8c 	uxtb.w	ip, ip
 80260b6:	2a00      	cmp	r2, #0
 80260b8:	f000 80cb 	beq.w	8026252 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80260bc:	1c58      	adds	r0, r3, #1
 80260be:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80260c2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80260c6:	07c0      	lsls	r0, r0, #31
 80260c8:	bf54      	ite	pl
 80260ca:	f00e 0e0f 	andpl.w	lr, lr, #15
 80260ce:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80260d2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80260d6:	fa5f fe8e 	uxtb.w	lr, lr
 80260da:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80260de:	b1b9      	cbz	r1, 8026110 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80260e0:	4453      	add	r3, sl
 80260e2:	0858      	lsrs	r0, r3, #1
 80260e4:	5c38      	ldrb	r0, [r7, r0]
 80260e6:	07da      	lsls	r2, r3, #31
 80260e8:	bf54      	ite	pl
 80260ea:	f000 000f 	andpl.w	r0, r0, #15
 80260ee:	1100      	asrmi	r0, r0, #4
 80260f0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80260f4:	b2c0      	uxtb	r0, r0
 80260f6:	900a      	str	r0, [sp, #40]	; 0x28
 80260f8:	1c58      	adds	r0, r3, #1
 80260fa:	0843      	lsrs	r3, r0, #1
 80260fc:	5cfb      	ldrb	r3, [r7, r3]
 80260fe:	07c2      	lsls	r2, r0, #31
 8026100:	bf54      	ite	pl
 8026102:	f003 030f 	andpl.w	r3, r3, #15
 8026106:	111b      	asrmi	r3, r3, #4
 8026108:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802610c:	b2db      	uxtb	r3, r3
 802610e:	930e      	str	r3, [sp, #56]	; 0x38
 8026110:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8026114:	b289      	uxth	r1, r1
 8026116:	fb02 f301 	mul.w	r3, r2, r1
 802611a:	0112      	lsls	r2, r2, #4
 802611c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026120:	b289      	uxth	r1, r1
 8026122:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8026126:	1a40      	subs	r0, r0, r1
 8026128:	fa1f fe80 	uxth.w	lr, r0
 802612c:	1ad2      	subs	r2, r2, r3
 802612e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026130:	b292      	uxth	r2, r2
 8026132:	4342      	muls	r2, r0
 8026134:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8026138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802613a:	fb01 c102 	mla	r1, r1, r2, ip
 802613e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026140:	fb03 1302 	mla	r3, r3, r2, r1
 8026144:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026148:	2bff      	cmp	r3, #255	; 0xff
 802614a:	f040 8093 	bne.w	8026274 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802614e:	4bbe      	ldr	r3, [pc, #760]	; (8026448 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8026150:	681a      	ldr	r2, [r3, #0]
 8026152:	4bbe      	ldr	r3, [pc, #760]	; (802644c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8026154:	0951      	lsrs	r1, r2, #5
 8026156:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802615a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802615e:	430b      	orrs	r3, r1
 8026160:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026164:	4313      	orrs	r3, r2
 8026166:	f8a8 3000 	strh.w	r3, [r8]
 802616a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802616c:	f108 0802 	add.w	r8, r8, #2
 8026170:	441c      	add	r4, r3
 8026172:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026174:	441e      	add	r6, r3
 8026176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026178:	3b01      	subs	r3, #1
 802617a:	9309      	str	r3, [sp, #36]	; 0x24
 802617c:	e76d      	b.n	802605a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802617e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026180:	3d01      	subs	r5, #1
 8026182:	441c      	add	r4, r3
 8026184:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026186:	f109 0902 	add.w	r9, r9, #2
 802618a:	441e      	add	r6, r3
 802618c:	e745      	b.n	802601a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802618e:	d021      	beq.n	80261d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8026190:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026192:	1e6b      	subs	r3, r5, #1
 8026194:	fb00 4003 	mla	r0, r0, r3, r4
 8026198:	1400      	asrs	r0, r0, #16
 802619a:	f53f af5a 	bmi.w	8026052 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802619e:	3901      	subs	r1, #1
 80261a0:	4288      	cmp	r0, r1
 80261a2:	f6bf af56 	bge.w	8026052 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80261a6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80261a8:	fb01 6303 	mla	r3, r1, r3, r6
 80261ac:	141b      	asrs	r3, r3, #16
 80261ae:	f53f af50 	bmi.w	8026052 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80261b2:	3a01      	subs	r2, #1
 80261b4:	4293      	cmp	r3, r2
 80261b6:	f6bf af4c 	bge.w	8026052 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80261ba:	46a8      	mov	r8, r5
 80261bc:	46ce      	mov	lr, r9
 80261be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80261c2:	9308      	str	r3, [sp, #32]
 80261c4:	f1b8 0f00 	cmp.w	r8, #0
 80261c8:	f300 80b5 	bgt.w	8026336 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80261cc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80261d0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80261d4:	9b07      	ldr	r3, [sp, #28]
 80261d6:	2b00      	cmp	r3, #0
 80261d8:	f340 817c 	ble.w	80264d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80261dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80261e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80261e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80261e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80261ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80261f0:	eef0 6a62 	vmov.f32	s13, s5
 80261f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80261f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80261fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026200:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026204:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026208:	ee16 4a90 	vmov	r4, s13
 802620c:	eef0 6a43 	vmov.f32	s13, s6
 8026210:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026214:	ee12 2a90 	vmov	r2, s5
 8026218:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802621c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802621e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026222:	fb92 f3f3 	sdiv	r3, r2, r3
 8026226:	ee13 2a10 	vmov	r2, s6
 802622a:	931f      	str	r3, [sp, #124]	; 0x7c
 802622c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802622e:	ee16 6a90 	vmov	r6, s13
 8026232:	fb92 f3f3 	sdiv	r3, r2, r3
 8026236:	9320      	str	r3, [sp, #128]	; 0x80
 8026238:	9b07      	ldr	r3, [sp, #28]
 802623a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802623c:	3b01      	subs	r3, #1
 802623e:	9307      	str	r3, [sp, #28]
 8026240:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026242:	bf0c      	ite	eq
 8026244:	4615      	moveq	r5, r2
 8026246:	461d      	movne	r5, r3
 8026248:	eeb0 3a67 	vmov.f32	s6, s15
 802624c:	eef0 2a47 	vmov.f32	s5, s14
 8026250:	e6d4      	b.n	8025ffc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8026252:	2900      	cmp	r1, #0
 8026254:	f43f af5c 	beq.w	8026110 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8026258:	eb0a 0003 	add.w	r0, sl, r3
 802625c:	0843      	lsrs	r3, r0, #1
 802625e:	5cfb      	ldrb	r3, [r7, r3]
 8026260:	07c0      	lsls	r0, r0, #31
 8026262:	bf54      	ite	pl
 8026264:	f003 030f 	andpl.w	r3, r3, #15
 8026268:	111b      	asrmi	r3, r3, #4
 802626a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802626e:	b2db      	uxtb	r3, r3
 8026270:	930a      	str	r3, [sp, #40]	; 0x28
 8026272:	e74d      	b.n	8026110 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8026274:	2b00      	cmp	r3, #0
 8026276:	f43f af78 	beq.w	802616a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802627a:	fa1f fe83 	uxth.w	lr, r3
 802627e:	43db      	mvns	r3, r3
 8026280:	4a71      	ldr	r2, [pc, #452]	; (8026448 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8026282:	f8b8 c000 	ldrh.w	ip, [r8]
 8026286:	6810      	ldr	r0, [r2, #0]
 8026288:	ea4f 212c 	mov.w	r1, ip, asr #8
 802628c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8026290:	fb12 f20e 	smulbb	r2, r2, lr
 8026294:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8026298:	b2c0      	uxtb	r0, r0
 802629a:	fb1b fb0e 	smulbb	fp, fp, lr
 802629e:	fb10 fe0e 	smulbb	lr, r0, lr
 80262a2:	b2db      	uxtb	r3, r3
 80262a4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80262a8:	fb01 2103 	mla	r1, r1, r3, r2
 80262ac:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80262b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80262b4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80262b8:	fa5f fc8c 	uxtb.w	ip, ip
 80262bc:	fb02 b203 	mla	r2, r2, r3, fp
 80262c0:	fb0c e303 	mla	r3, ip, r3, lr
 80262c4:	b289      	uxth	r1, r1
 80262c6:	1c48      	adds	r0, r1, #1
 80262c8:	b292      	uxth	r2, r2
 80262ca:	b29b      	uxth	r3, r3
 80262cc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80262d0:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80262d4:	f102 0b01 	add.w	fp, r2, #1
 80262d8:	1c59      	adds	r1, r3, #1
 80262da:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80262de:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80262e2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80262e6:	0952      	lsrs	r2, r2, #5
 80262e8:	4301      	orrs	r1, r0
 80262ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80262ee:	4311      	orrs	r1, r2
 80262f0:	f8a8 1000 	strh.w	r1, [r8]
 80262f4:	e739      	b.n	802616a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80262f6:	f113 0b01 	adds.w	fp, r3, #1
 80262fa:	f53f af36 	bmi.w	802616a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80262fe:	45dc      	cmp	ip, fp
 8026300:	f6ff af33 	blt.w	802616a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026304:	f110 0b01 	adds.w	fp, r0, #1
 8026308:	f53f af2f 	bmi.w	802616a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802630c:	45de      	cmp	lr, fp
 802630e:	f6ff af2c 	blt.w	802616a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026312:	9a08      	ldr	r2, [sp, #32]
 8026314:	9302      	str	r3, [sp, #8]
 8026316:	fa0f f38e 	sxth.w	r3, lr
 802631a:	9301      	str	r3, [sp, #4]
 802631c:	fa0f f38c 	sxth.w	r3, ip
 8026320:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026324:	9105      	str	r1, [sp, #20]
 8026326:	9300      	str	r3, [sp, #0]
 8026328:	463a      	mov	r2, r7
 802632a:	4653      	mov	r3, sl
 802632c:	4641      	mov	r1, r8
 802632e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026330:	f7ff fd74 	bl	8025e1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8026334:	e719      	b.n	802616a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026336:	9906      	ldr	r1, [sp, #24]
 8026338:	1422      	asrs	r2, r4, #16
 802633a:	1433      	asrs	r3, r6, #16
 802633c:	fb01 2303 	mla	r3, r1, r3, r2
 8026340:	085a      	lsrs	r2, r3, #1
 8026342:	5cba      	ldrb	r2, [r7, r2]
 8026344:	07d9      	lsls	r1, r3, #31
 8026346:	bf54      	ite	pl
 8026348:	f002 020f 	andpl.w	r2, r2, #15
 802634c:	1112      	asrmi	r2, r2, #4
 802634e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026352:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026356:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802635a:	b2d2      	uxtb	r2, r2
 802635c:	2800      	cmp	r0, #0
 802635e:	d062      	beq.n	8026426 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026360:	f103 0a01 	add.w	sl, r3, #1
 8026364:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8026368:	5c79      	ldrb	r1, [r7, r1]
 802636a:	f01a 0f01 	tst.w	sl, #1
 802636e:	bf0c      	ite	eq
 8026370:	f001 010f 	andeq.w	r1, r1, #15
 8026374:	1109      	asrne	r1, r1, #4
 8026376:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802637a:	b2c9      	uxtb	r1, r1
 802637c:	910f      	str	r1, [sp, #60]	; 0x3c
 802637e:	f1bc 0f00 	cmp.w	ip, #0
 8026382:	d019      	beq.n	80263b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8026384:	9908      	ldr	r1, [sp, #32]
 8026386:	440b      	add	r3, r1
 8026388:	0859      	lsrs	r1, r3, #1
 802638a:	5c79      	ldrb	r1, [r7, r1]
 802638c:	f013 0f01 	tst.w	r3, #1
 8026390:	bf0c      	ite	eq
 8026392:	f001 010f 	andeq.w	r1, r1, #15
 8026396:	1109      	asrne	r1, r1, #4
 8026398:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802639c:	b2c9      	uxtb	r1, r1
 802639e:	3301      	adds	r3, #1
 80263a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80263a2:	0859      	lsrs	r1, r3, #1
 80263a4:	5c79      	ldrb	r1, [r7, r1]
 80263a6:	07db      	lsls	r3, r3, #31
 80263a8:	bf54      	ite	pl
 80263aa:	f001 010f 	andpl.w	r1, r1, #15
 80263ae:	1109      	asrmi	r1, r1, #4
 80263b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80263b4:	b2c9      	uxtb	r1, r1
 80263b6:	9110      	str	r1, [sp, #64]	; 0x40
 80263b8:	b280      	uxth	r0, r0
 80263ba:	fa1f fc8c 	uxth.w	ip, ip
 80263be:	fb00 f30c 	mul.w	r3, r0, ip
 80263c2:	0100      	lsls	r0, r0, #4
 80263c4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80263c8:	fa1f fc8c 	uxth.w	ip, ip
 80263cc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80263d0:	eba1 010c 	sub.w	r1, r1, ip
 80263d4:	fa1f fa81 	uxth.w	sl, r1
 80263d8:	1ac0      	subs	r0, r0, r3
 80263da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80263dc:	b280      	uxth	r0, r0
 80263de:	4348      	muls	r0, r1
 80263e0:	fb02 020a 	mla	r2, r2, sl, r0
 80263e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80263e6:	fb0c 2c01 	mla	ip, ip, r1, r2
 80263ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80263ec:	fb03 c302 	mla	r3, r3, r2, ip
 80263f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80263f4:	2bff      	cmp	r3, #255	; 0xff
 80263f6:	d12b      	bne.n	8026450 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80263f8:	4b13      	ldr	r3, [pc, #76]	; (8026448 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 80263fa:	681a      	ldr	r2, [r3, #0]
 80263fc:	4b13      	ldr	r3, [pc, #76]	; (802644c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80263fe:	0951      	lsrs	r1, r2, #5
 8026400:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8026404:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026408:	430b      	orrs	r3, r1
 802640a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802640e:	4313      	orrs	r3, r2
 8026410:	f8ae 3000 	strh.w	r3, [lr]
 8026414:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026416:	f10e 0e02 	add.w	lr, lr, #2
 802641a:	441c      	add	r4, r3
 802641c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802641e:	f108 38ff 	add.w	r8, r8, #4294967295
 8026422:	441e      	add	r6, r3
 8026424:	e6ce      	b.n	80261c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8026426:	f1bc 0f00 	cmp.w	ip, #0
 802642a:	d0c5      	beq.n	80263b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802642c:	9908      	ldr	r1, [sp, #32]
 802642e:	440b      	add	r3, r1
 8026430:	0859      	lsrs	r1, r3, #1
 8026432:	5c79      	ldrb	r1, [r7, r1]
 8026434:	07db      	lsls	r3, r3, #31
 8026436:	bf54      	ite	pl
 8026438:	f001 010f 	andpl.w	r1, r1, #15
 802643c:	1109      	asrmi	r1, r1, #4
 802643e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026442:	b2c9      	uxtb	r1, r1
 8026444:	910b      	str	r1, [sp, #44]	; 0x2c
 8026446:	e7b7      	b.n	80263b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8026448:	2000f39c 	.word	0x2000f39c
 802644c:	fffff800 	.word	0xfffff800
 8026450:	2b00      	cmp	r3, #0
 8026452:	d0df      	beq.n	8026414 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026454:	fa1f fa83 	uxth.w	sl, r3
 8026458:	43db      	mvns	r3, r3
 802645a:	4a20      	ldr	r2, [pc, #128]	; (80264dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802645c:	f8be c000 	ldrh.w	ip, [lr]
 8026460:	6810      	ldr	r0, [r2, #0]
 8026462:	ea4f 212c 	mov.w	r1, ip, asr #8
 8026466:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802646a:	fb12 f20a 	smulbb	r2, r2, sl
 802646e:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8026472:	b2c0      	uxtb	r0, r0
 8026474:	fb10 f00a 	smulbb	r0, r0, sl
 8026478:	b2db      	uxtb	r3, r3
 802647a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802647e:	fb01 2103 	mla	r1, r1, r3, r2
 8026482:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026486:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802648a:	fb1b fb0a 	smulbb	fp, fp, sl
 802648e:	fa5f fc8c 	uxtb.w	ip, ip
 8026492:	fb0c 0003 	mla	r0, ip, r3, r0
 8026496:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802649a:	fb02 b203 	mla	r2, r2, r3, fp
 802649e:	b289      	uxth	r1, r1
 80264a0:	b280      	uxth	r0, r0
 80264a2:	1c4b      	adds	r3, r1, #1
 80264a4:	f100 0b01 	add.w	fp, r0, #1
 80264a8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80264ac:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80264b0:	b292      	uxth	r2, r2
 80264b2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80264b6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80264ba:	ea4b 0101 	orr.w	r1, fp, r1
 80264be:	f102 0b01 	add.w	fp, r2, #1
 80264c2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80264c6:	0952      	lsrs	r2, r2, #5
 80264c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80264cc:	4311      	orrs	r1, r2
 80264ce:	f8ae 1000 	strh.w	r1, [lr]
 80264d2:	e79f      	b.n	8026414 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80264d4:	b013      	add	sp, #76	; 0x4c
 80264d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264da:	bf00      	nop
 80264dc:	2000f39c 	.word	0x2000f39c

080264e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 80264e0:	b570      	push	{r4, r5, r6, lr}
 80264e2:	1208      	asrs	r0, r1, #8
 80264e4:	b29e      	uxth	r6, r3
 80264e6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80264ea:	1213      	asrs	r3, r2, #8
 80264ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80264f0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80264f4:	fb13 f305 	smulbb	r3, r3, r5
 80264f8:	fb10 f006 	smulbb	r0, r0, r6
 80264fc:	10cc      	asrs	r4, r1, #3
 80264fe:	4418      	add	r0, r3
 8026500:	10d3      	asrs	r3, r2, #3
 8026502:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8026506:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802650a:	fb13 f305 	smulbb	r3, r3, r5
 802650e:	fb14 f406 	smulbb	r4, r4, r6
 8026512:	00c9      	lsls	r1, r1, #3
 8026514:	00d2      	lsls	r2, r2, #3
 8026516:	441c      	add	r4, r3
 8026518:	b2d2      	uxtb	r2, r2
 802651a:	b2cb      	uxtb	r3, r1
 802651c:	fb12 f205 	smulbb	r2, r2, r5
 8026520:	fb13 f306 	smulbb	r3, r3, r6
 8026524:	b280      	uxth	r0, r0
 8026526:	4413      	add	r3, r2
 8026528:	1c42      	adds	r2, r0, #1
 802652a:	b29b      	uxth	r3, r3
 802652c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026530:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 8026534:	1c58      	adds	r0, r3, #1
 8026536:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802653a:	b2a4      	uxth	r4, r4
 802653c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026540:	4310      	orrs	r0, r2
 8026542:	1c62      	adds	r2, r4, #1
 8026544:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026548:	0964      	lsrs	r4, r4, #5
 802654a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802654e:	4320      	orrs	r0, r4
 8026550:	bd70      	pop	{r4, r5, r6, pc}
	...

08026554 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8026554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026558:	b08f      	sub	sp, #60	; 0x3c
 802655a:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 802655e:	461c      	mov	r4, r3
 8026560:	9004      	str	r0, [sp, #16]
 8026562:	460d      	mov	r5, r1
 8026564:	4616      	mov	r6, r2
 8026566:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026568:	2f00      	cmp	r7, #0
 802656a:	f000 80f5 	beq.w	8026758 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 802656e:	f04f 0802 	mov.w	r8, #2
 8026572:	6820      	ldr	r0, [r4, #0]
 8026574:	6861      	ldr	r1, [r4, #4]
 8026576:	aa0a      	add	r2, sp, #40	; 0x28
 8026578:	c203      	stmia	r2!, {r0, r1}
 802657a:	6818      	ldr	r0, [r3, #0]
 802657c:	6859      	ldr	r1, [r3, #4]
 802657e:	aa0c      	add	r2, sp, #48	; 0x30
 8026580:	c203      	stmia	r2!, {r0, r1}
 8026582:	a80a      	add	r0, sp, #40	; 0x28
 8026584:	f7f0 fa3c 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026588:	4621      	mov	r1, r4
 802658a:	a80c      	add	r0, sp, #48	; 0x30
 802658c:	f7f0 fa60 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026590:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8026594:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8026598:	f002 0301 	and.w	r3, r2, #1
 802659c:	9306      	str	r3, [sp, #24]
 802659e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80265a2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80265a6:	f003 0101 	and.w	r1, r3, #1
 80265aa:	9105      	str	r1, [sp, #20]
 80265ac:	9805      	ldr	r0, [sp, #20]
 80265ae:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 80265b2:	4403      	add	r3, r0
 80265b4:	fb01 2303 	mla	r3, r1, r3, r2
 80265b8:	fb93 f3f8 	sdiv	r3, r3, r8
 80265bc:	441d      	add	r5, r3
 80265be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80265c2:	3604      	adds	r6, #4
 80265c4:	441a      	add	r2, r3
 80265c6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80265ca:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80265ce:	4419      	add	r1, r3
 80265d0:	4b63      	ldr	r3, [pc, #396]	; (8026760 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80265d2:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 80265d6:	6818      	ldr	r0, [r3, #0]
 80265d8:	6803      	ldr	r3, [r0, #0]
 80265da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80265dc:	4798      	blx	r3
 80265de:	4a61      	ldr	r2, [pc, #388]	; (8026764 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 80265e0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 80265e4:	8813      	ldrh	r3, [r2, #0]
 80265e6:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 80265ea:	2fff      	cmp	r7, #255	; 0xff
 80265ec:	fb03 a404 	mla	r4, r3, r4, sl
 80265f0:	4611      	mov	r1, r2
 80265f2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80265f6:	fb03 fb0b 	mul.w	fp, r3, fp
 80265fa:	d06b      	beq.n	80266d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 80265fc:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8026600:	9303      	str	r3, [sp, #12]
 8026602:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8026606:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802660a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802660e:	9b07      	ldr	r3, [sp, #28]
 8026610:	42a3      	cmp	r3, r4
 8026612:	f240 809c 	bls.w	802674e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 8026616:	9b06      	ldr	r3, [sp, #24]
 8026618:	2b00      	cmp	r3, #0
 802661a:	d039      	beq.n	8026690 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802661c:	782b      	ldrb	r3, [r5, #0]
 802661e:	8822      	ldrh	r2, [r4, #0]
 8026620:	f003 030f 	and.w	r3, r3, #15
 8026624:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8026628:	9b03      	ldr	r3, [sp, #12]
 802662a:	9804      	ldr	r0, [sp, #16]
 802662c:	9300      	str	r3, [sp, #0]
 802662e:	463b      	mov	r3, r7
 8026630:	f7ff ff56 	bl	80264e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8026634:	f105 0801 	add.w	r8, r5, #1
 8026638:	f824 0b02 	strh.w	r0, [r4], #2
 802663c:	f109 3bff 	add.w	fp, r9, #4294967295
 8026640:	f1bb 0f01 	cmp.w	fp, #1
 8026644:	46a2      	mov	sl, r4
 8026646:	f104 0404 	add.w	r4, r4, #4
 802664a:	dd24      	ble.n	8026696 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802664c:	f898 3000 	ldrb.w	r3, [r8]
 8026650:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8026654:	091b      	lsrs	r3, r3, #4
 8026656:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802665a:	9b03      	ldr	r3, [sp, #12]
 802665c:	9804      	ldr	r0, [sp, #16]
 802665e:	9300      	str	r3, [sp, #0]
 8026660:	463b      	mov	r3, r7
 8026662:	f7ff ff3d 	bl	80264e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8026666:	f824 0c04 	strh.w	r0, [r4, #-4]
 802666a:	f818 3b01 	ldrb.w	r3, [r8], #1
 802666e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8026672:	f003 030f 	and.w	r3, r3, #15
 8026676:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802667a:	9b03      	ldr	r3, [sp, #12]
 802667c:	9804      	ldr	r0, [sp, #16]
 802667e:	9300      	str	r3, [sp, #0]
 8026680:	463b      	mov	r3, r7
 8026682:	f7ff ff2d 	bl	80264e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8026686:	f1ab 0b02 	sub.w	fp, fp, #2
 802668a:	f824 0c02 	strh.w	r0, [r4, #-2]
 802668e:	e7d7      	b.n	8026640 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8026690:	46a8      	mov	r8, r5
 8026692:	46cb      	mov	fp, r9
 8026694:	e7d4      	b.n	8026640 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8026696:	d10e      	bne.n	80266b6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8026698:	f898 3000 	ldrb.w	r3, [r8]
 802669c:	f8ba 2000 	ldrh.w	r2, [sl]
 80266a0:	091b      	lsrs	r3, r3, #4
 80266a2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80266a6:	9b03      	ldr	r3, [sp, #12]
 80266a8:	9804      	ldr	r0, [sp, #16]
 80266aa:	9300      	str	r3, [sp, #0]
 80266ac:	463b      	mov	r3, r7
 80266ae:	f7ff ff17 	bl	80264e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80266b2:	f82a 0b02 	strh.w	r0, [sl], #2
 80266b6:	9b08      	ldr	r3, [sp, #32]
 80266b8:	9a05      	ldr	r2, [sp, #20]
 80266ba:	881c      	ldrh	r4, [r3, #0]
 80266bc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80266c0:	eba4 0409 	sub.w	r4, r4, r9
 80266c4:	4413      	add	r3, r2
 80266c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80266c8:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 80266cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80266d0:	441d      	add	r5, r3
 80266d2:	e79c      	b.n	802660e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 80266d4:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 80266d8:	45a3      	cmp	fp, r4
 80266da:	d938      	bls.n	802674e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 80266dc:	9b06      	ldr	r3, [sp, #24]
 80266de:	b1f3      	cbz	r3, 802671e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 80266e0:	782b      	ldrb	r3, [r5, #0]
 80266e2:	1c6a      	adds	r2, r5, #1
 80266e4:	f003 030f 	and.w	r3, r3, #15
 80266e8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80266ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80266f0:	8023      	strh	r3, [r4, #0]
 80266f2:	3402      	adds	r4, #2
 80266f4:	2801      	cmp	r0, #1
 80266f6:	4623      	mov	r3, r4
 80266f8:	f104 0404 	add.w	r4, r4, #4
 80266fc:	dd12      	ble.n	8026724 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 80266fe:	7813      	ldrb	r3, [r2, #0]
 8026700:	3802      	subs	r0, #2
 8026702:	091b      	lsrs	r3, r3, #4
 8026704:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8026708:	f824 3c04 	strh.w	r3, [r4, #-4]
 802670c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8026710:	f003 030f 	and.w	r3, r3, #15
 8026714:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8026718:	f824 3c02 	strh.w	r3, [r4, #-2]
 802671c:	e7ea      	b.n	80266f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802671e:	462a      	mov	r2, r5
 8026720:	4648      	mov	r0, r9
 8026722:	e7e7      	b.n	80266f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 8026724:	d106      	bne.n	8026734 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 8026726:	7812      	ldrb	r2, [r2, #0]
 8026728:	3302      	adds	r3, #2
 802672a:	0912      	lsrs	r2, r2, #4
 802672c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8026730:	f823 2c02 	strh.w	r2, [r3, #-2]
 8026734:	880c      	ldrh	r4, [r1, #0]
 8026736:	9a05      	ldr	r2, [sp, #20]
 8026738:	eba4 0409 	sub.w	r4, r4, r9
 802673c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8026740:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8026744:	4413      	add	r3, r2
 8026746:	fb93 f3f8 	sdiv	r3, r3, r8
 802674a:	441d      	add	r5, r3
 802674c:	e7c4      	b.n	80266d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802674e:	4b04      	ldr	r3, [pc, #16]	; (8026760 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8026750:	6818      	ldr	r0, [r3, #0]
 8026752:	6803      	ldr	r3, [r0, #0]
 8026754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026756:	4798      	blx	r3
 8026758:	b00f      	add	sp, #60	; 0x3c
 802675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802675e:	bf00      	nop
 8026760:	2000f394 	.word	0x2000f394
 8026764:	2000f38e 	.word	0x2000f38e

08026768 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8026768:	b5f0      	push	{r4, r5, r6, r7, lr}
 802676a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802676e:	0a0f      	lsrs	r7, r1, #8
 8026770:	2dff      	cmp	r5, #255	; 0xff
 8026772:	d10c      	bne.n	802678e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8026774:	2bff      	cmp	r3, #255	; 0xff
 8026776:	d10a      	bne.n	802678e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8026778:	4b25      	ldr	r3, [pc, #148]	; (8026810 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802677a:	0948      	lsrs	r0, r1, #5
 802677c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026780:	403b      	ands	r3, r7
 8026782:	4318      	orrs	r0, r3
 8026784:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8026788:	4308      	orrs	r0, r1
 802678a:	b280      	uxth	r0, r0
 802678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802678e:	fb15 f503 	smulbb	r5, r5, r3
 8026792:	b2ab      	uxth	r3, r5
 8026794:	1c5d      	adds	r5, r3, #1
 8026796:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802679a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802679e:	fa1f fc85 	uxth.w	ip, r5
 80267a2:	43ed      	mvns	r5, r5
 80267a4:	1214      	asrs	r4, r2, #8
 80267a6:	10d6      	asrs	r6, r2, #3
 80267a8:	00d0      	lsls	r0, r2, #3
 80267aa:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80267ae:	fb12 f20c 	smulbb	r2, r2, ip
 80267b2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80267b6:	b2eb      	uxtb	r3, r5
 80267b8:	b2c0      	uxtb	r0, r0
 80267ba:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80267be:	fb04 2403 	mla	r4, r4, r3, r2
 80267c2:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 80267c6:	b2c8      	uxtb	r0, r1
 80267c8:	b2fd      	uxtb	r5, r7
 80267ca:	fb10 f00c 	smulbb	r0, r0, ip
 80267ce:	fb15 f50c 	smulbb	r5, r5, ip
 80267d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80267d6:	fb02 0003 	mla	r0, r2, r3, r0
 80267da:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80267de:	fb06 5503 	mla	r5, r6, r3, r5
 80267e2:	b2a4      	uxth	r4, r4
 80267e4:	b283      	uxth	r3, r0
 80267e6:	1c60      	adds	r0, r4, #1
 80267e8:	b2ad      	uxth	r5, r5
 80267ea:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80267ee:	1c58      	adds	r0, r3, #1
 80267f0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80267f4:	1c6b      	adds	r3, r5, #1
 80267f6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80267fa:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80267fe:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026802:	096d      	lsrs	r5, r5, #5
 8026804:	4320      	orrs	r0, r4
 8026806:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802680a:	4328      	orrs	r0, r5
 802680c:	e7be      	b.n	802678c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802680e:	bf00      	nop
 8026810:	00fff800 	.word	0x00fff800

08026814 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8026814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026818:	461c      	mov	r4, r3
 802681a:	f04f 0a02 	mov.w	sl, #2
 802681e:	b08d      	sub	sp, #52	; 0x34
 8026820:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026822:	460d      	mov	r5, r1
 8026824:	4680      	mov	r8, r0
 8026826:	6861      	ldr	r1, [r4, #4]
 8026828:	6820      	ldr	r0, [r4, #0]
 802682a:	4616      	mov	r6, r2
 802682c:	aa08      	add	r2, sp, #32
 802682e:	c203      	stmia	r2!, {r0, r1}
 8026830:	6818      	ldr	r0, [r3, #0]
 8026832:	6859      	ldr	r1, [r3, #4]
 8026834:	aa0a      	add	r2, sp, #40	; 0x28
 8026836:	c203      	stmia	r2!, {r0, r1}
 8026838:	a808      	add	r0, sp, #32
 802683a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 802683e:	f7f0 f8df 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026842:	4621      	mov	r1, r4
 8026844:	a80a      	add	r0, sp, #40	; 0x28
 8026846:	f7f0 f903 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802684a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802684e:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8026852:	f002 0301 	and.w	r3, r2, #1
 8026856:	9303      	str	r3, [sp, #12]
 8026858:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802685c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8026860:	f003 0101 	and.w	r1, r3, #1
 8026864:	9102      	str	r1, [sp, #8]
 8026866:	9802      	ldr	r0, [sp, #8]
 8026868:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802686c:	4403      	add	r3, r0
 802686e:	fb01 2303 	mla	r3, r1, r3, r2
 8026872:	fb93 f3fa 	sdiv	r3, r3, sl
 8026876:	441d      	add	r5, r3
 8026878:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802687c:	3604      	adds	r6, #4
 802687e:	441a      	add	r2, r3
 8026880:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8026884:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8026888:	4a3e      	ldr	r2, [pc, #248]	; (8026984 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802688a:	4419      	add	r1, r3
 802688c:	6810      	ldr	r0, [r2, #0]
 802688e:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8026892:	6803      	ldr	r3, [r0, #0]
 8026894:	9205      	str	r2, [sp, #20]
 8026896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026898:	4798      	blx	r3
 802689a:	4b3b      	ldr	r3, [pc, #236]	; (8026988 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802689c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 80268a0:	8819      	ldrh	r1, [r3, #0]
 80268a2:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 80268a6:	434f      	muls	r7, r1
 80268a8:	fb01 c404 	mla	r4, r1, r4, ip
 80268ac:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 80268b0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80268b4:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 80268b8:	9204      	str	r2, [sp, #16]
 80268ba:	9b04      	ldr	r3, [sp, #16]
 80268bc:	429c      	cmp	r4, r3
 80268be:	d258      	bcs.n	8026972 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 80268c0:	9b03      	ldr	r3, [sp, #12]
 80268c2:	2b00      	cmp	r3, #0
 80268c4:	d034      	beq.n	8026930 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80268c6:	782b      	ldrb	r3, [r5, #0]
 80268c8:	1c6f      	adds	r7, r5, #1
 80268ca:	f003 030f 	and.w	r3, r3, #15
 80268ce:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80268d2:	0e0b      	lsrs	r3, r1, #24
 80268d4:	d006      	beq.n	80268e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 80268d6:	8822      	ldrh	r2, [r4, #0]
 80268d8:	4640      	mov	r0, r8
 80268da:	9300      	str	r3, [sp, #0]
 80268dc:	464b      	mov	r3, r9
 80268de:	f7ff ff43 	bl	8026768 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80268e2:	8020      	strh	r0, [r4, #0]
 80268e4:	3402      	adds	r4, #2
 80268e6:	f10b 3aff 	add.w	sl, fp, #4294967295
 80268ea:	f1ba 0f01 	cmp.w	sl, #1
 80268ee:	dd22      	ble.n	8026936 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80268f0:	783b      	ldrb	r3, [r7, #0]
 80268f2:	091b      	lsrs	r3, r3, #4
 80268f4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80268f8:	0e0b      	lsrs	r3, r1, #24
 80268fa:	d006      	beq.n	802690a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 80268fc:	8822      	ldrh	r2, [r4, #0]
 80268fe:	4640      	mov	r0, r8
 8026900:	9300      	str	r3, [sp, #0]
 8026902:	464b      	mov	r3, r9
 8026904:	f7ff ff30 	bl	8026768 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8026908:	8020      	strh	r0, [r4, #0]
 802690a:	f817 3b01 	ldrb.w	r3, [r7], #1
 802690e:	f003 030f 	and.w	r3, r3, #15
 8026912:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8026916:	0e0b      	lsrs	r3, r1, #24
 8026918:	d006      	beq.n	8026928 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802691a:	8862      	ldrh	r2, [r4, #2]
 802691c:	4640      	mov	r0, r8
 802691e:	9300      	str	r3, [sp, #0]
 8026920:	464b      	mov	r3, r9
 8026922:	f7ff ff21 	bl	8026768 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8026926:	8060      	strh	r0, [r4, #2]
 8026928:	3404      	adds	r4, #4
 802692a:	f1aa 0a02 	sub.w	sl, sl, #2
 802692e:	e7dc      	b.n	80268ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8026930:	462f      	mov	r7, r5
 8026932:	46da      	mov	sl, fp
 8026934:	e7d9      	b.n	80268ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8026936:	d10d      	bne.n	8026954 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8026938:	783b      	ldrb	r3, [r7, #0]
 802693a:	091b      	lsrs	r3, r3, #4
 802693c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8026940:	0e0b      	lsrs	r3, r1, #24
 8026942:	d006      	beq.n	8026952 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8026944:	8822      	ldrh	r2, [r4, #0]
 8026946:	4640      	mov	r0, r8
 8026948:	9300      	str	r3, [sp, #0]
 802694a:	464b      	mov	r3, r9
 802694c:	f7ff ff0c 	bl	8026768 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8026950:	8020      	strh	r0, [r4, #0]
 8026952:	3402      	adds	r4, #2
 8026954:	9b06      	ldr	r3, [sp, #24]
 8026956:	9a02      	ldr	r2, [sp, #8]
 8026958:	881b      	ldrh	r3, [r3, #0]
 802695a:	eba3 030b 	sub.w	r3, r3, fp
 802695e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8026962:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8026966:	4413      	add	r3, r2
 8026968:	9a07      	ldr	r2, [sp, #28]
 802696a:	fb93 f3f2 	sdiv	r3, r3, r2
 802696e:	441d      	add	r5, r3
 8026970:	e7a3      	b.n	80268ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8026972:	9b05      	ldr	r3, [sp, #20]
 8026974:	6818      	ldr	r0, [r3, #0]
 8026976:	6803      	ldr	r3, [r0, #0]
 8026978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802697a:	4798      	blx	r3
 802697c:	b00d      	add	sp, #52	; 0x34
 802697e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026982:	bf00      	nop
 8026984:	2000f394 	.word	0x2000f394
 8026988:	2000f38e 	.word	0x2000f38e

0802698c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802698c:	b570      	push	{r4, r5, r6, lr}
 802698e:	788d      	ldrb	r5, [r1, #2]
 8026990:	1214      	asrs	r4, r2, #8
 8026992:	fb15 f503 	smulbb	r5, r5, r3
 8026996:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802699a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802699e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80269a2:	fb04 5506 	mla	r5, r4, r6, r5
 80269a6:	784c      	ldrb	r4, [r1, #1]
 80269a8:	7809      	ldrb	r1, [r1, #0]
 80269aa:	fb14 f403 	smulbb	r4, r4, r3
 80269ae:	fb11 f303 	smulbb	r3, r1, r3
 80269b2:	10d0      	asrs	r0, r2, #3
 80269b4:	00d2      	lsls	r2, r2, #3
 80269b6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80269ba:	b2d2      	uxtb	r2, r2
 80269bc:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80269c0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80269c4:	fb00 4406 	mla	r4, r0, r6, r4
 80269c8:	fb02 3306 	mla	r3, r2, r6, r3
 80269cc:	b2ad      	uxth	r5, r5
 80269ce:	b29b      	uxth	r3, r3
 80269d0:	b2a4      	uxth	r4, r4
 80269d2:	1c68      	adds	r0, r5, #1
 80269d4:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 80269d8:	1c62      	adds	r2, r4, #1
 80269da:	1c58      	adds	r0, r3, #1
 80269dc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80269e0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80269e4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80269e8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80269ec:	0964      	lsrs	r4, r4, #5
 80269ee:	4328      	orrs	r0, r5
 80269f0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80269f4:	4320      	orrs	r0, r4
 80269f6:	bd70      	pop	{r4, r5, r6, pc}

080269f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80269f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269fc:	b08f      	sub	sp, #60	; 0x3c
 80269fe:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8026a02:	461c      	mov	r4, r3
 8026a04:	4682      	mov	sl, r0
 8026a06:	460e      	mov	r6, r1
 8026a08:	4615      	mov	r5, r2
 8026a0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026a0c:	2f00      	cmp	r7, #0
 8026a0e:	f000 8141 	beq.w	8026c94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 8026a12:	f04f 0802 	mov.w	r8, #2
 8026a16:	6820      	ldr	r0, [r4, #0]
 8026a18:	6861      	ldr	r1, [r4, #4]
 8026a1a:	aa0a      	add	r2, sp, #40	; 0x28
 8026a1c:	c203      	stmia	r2!, {r0, r1}
 8026a1e:	6818      	ldr	r0, [r3, #0]
 8026a20:	6859      	ldr	r1, [r3, #4]
 8026a22:	aa0c      	add	r2, sp, #48	; 0x30
 8026a24:	c203      	stmia	r2!, {r0, r1}
 8026a26:	a80a      	add	r0, sp, #40	; 0x28
 8026a28:	f7ef ffea 	bl	8016a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026a2c:	4621      	mov	r1, r4
 8026a2e:	a80c      	add	r0, sp, #48	; 0x30
 8026a30:	f7f0 f80e 	bl	8016a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026a34:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8026a38:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8026a3c:	f002 0301 	and.w	r3, r2, #1
 8026a40:	9306      	str	r3, [sp, #24]
 8026a42:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8026a46:	3504      	adds	r5, #4
 8026a48:	f003 0101 	and.w	r1, r3, #1
 8026a4c:	9105      	str	r1, [sp, #20]
 8026a4e:	9805      	ldr	r0, [sp, #20]
 8026a50:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8026a54:	4403      	add	r3, r0
 8026a56:	fb01 2303 	mla	r3, r1, r3, r2
 8026a5a:	fb93 f3f8 	sdiv	r3, r3, r8
 8026a5e:	441e      	add	r6, r3
 8026a60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8026a64:	441a      	add	r2, r3
 8026a66:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8026a6a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8026a6e:	4419      	add	r1, r3
 8026a70:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8026a74:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8026a78:	9303      	str	r3, [sp, #12]
 8026a7a:	4b88      	ldr	r3, [pc, #544]	; (8026c9c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8026a7c:	6818      	ldr	r0, [r3, #0]
 8026a7e:	6803      	ldr	r3, [r0, #0]
 8026a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026a82:	4798      	blx	r3
 8026a84:	4a86      	ldr	r2, [pc, #536]	; (8026ca0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8026a86:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8026a8a:	8813      	ldrh	r3, [r2, #0]
 8026a8c:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8026a90:	2fff      	cmp	r7, #255	; 0xff
 8026a92:	fb03 9404 	mla	r4, r3, r4, r9
 8026a96:	4694      	mov	ip, r2
 8026a98:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8026a9c:	fb03 f30b 	mul.w	r3, r3, fp
 8026aa0:	d071      	beq.n	8026b86 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8026aa2:	43f9      	mvns	r1, r7
 8026aa4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026aa8:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8026aac:	b2c9      	uxtb	r1, r1
 8026aae:	9104      	str	r1, [sp, #16]
 8026ab0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8026ab4:	9b07      	ldr	r3, [sp, #28]
 8026ab6:	42a3      	cmp	r3, r4
 8026ab8:	f240 80e7 	bls.w	8026c8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8026abc:	9b06      	ldr	r3, [sp, #24]
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d03d      	beq.n	8026b3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8026ac2:	7831      	ldrb	r1, [r6, #0]
 8026ac4:	9b04      	ldr	r3, [sp, #16]
 8026ac6:	f001 010f 	and.w	r1, r1, #15
 8026aca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026ace:	8822      	ldrh	r2, [r4, #0]
 8026ad0:	4429      	add	r1, r5
 8026ad2:	9300      	str	r3, [sp, #0]
 8026ad4:	4650      	mov	r0, sl
 8026ad6:	463b      	mov	r3, r7
 8026ad8:	f7ff ff58 	bl	802698c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8026adc:	9b03      	ldr	r3, [sp, #12]
 8026ade:	f106 0801 	add.w	r8, r6, #1
 8026ae2:	f824 0b02 	strh.w	r0, [r4], #2
 8026ae6:	f103 3bff 	add.w	fp, r3, #4294967295
 8026aea:	f1bb 0f01 	cmp.w	fp, #1
 8026aee:	46a1      	mov	r9, r4
 8026af0:	f104 0404 	add.w	r4, r4, #4
 8026af4:	dd27      	ble.n	8026b46 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 8026af6:	f898 1000 	ldrb.w	r1, [r8]
 8026afa:	9b04      	ldr	r3, [sp, #16]
 8026afc:	0909      	lsrs	r1, r1, #4
 8026afe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026b02:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8026b06:	4429      	add	r1, r5
 8026b08:	9300      	str	r3, [sp, #0]
 8026b0a:	4650      	mov	r0, sl
 8026b0c:	463b      	mov	r3, r7
 8026b0e:	f7ff ff3d 	bl	802698c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8026b12:	f824 0c04 	strh.w	r0, [r4, #-4]
 8026b16:	f818 1b01 	ldrb.w	r1, [r8], #1
 8026b1a:	9b04      	ldr	r3, [sp, #16]
 8026b1c:	f001 010f 	and.w	r1, r1, #15
 8026b20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026b24:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8026b28:	4429      	add	r1, r5
 8026b2a:	9300      	str	r3, [sp, #0]
 8026b2c:	4650      	mov	r0, sl
 8026b2e:	463b      	mov	r3, r7
 8026b30:	f7ff ff2c 	bl	802698c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8026b34:	f1ab 0b02 	sub.w	fp, fp, #2
 8026b38:	f824 0c02 	strh.w	r0, [r4, #-2]
 8026b3c:	e7d5      	b.n	8026aea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8026b3e:	46b0      	mov	r8, r6
 8026b40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8026b44:	e7d1      	b.n	8026aea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8026b46:	d10f      	bne.n	8026b68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8026b48:	f898 1000 	ldrb.w	r1, [r8]
 8026b4c:	9b04      	ldr	r3, [sp, #16]
 8026b4e:	0909      	lsrs	r1, r1, #4
 8026b50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026b54:	f8b9 2000 	ldrh.w	r2, [r9]
 8026b58:	4429      	add	r1, r5
 8026b5a:	9300      	str	r3, [sp, #0]
 8026b5c:	4650      	mov	r0, sl
 8026b5e:	463b      	mov	r3, r7
 8026b60:	f7ff ff14 	bl	802698c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8026b64:	f829 0b02 	strh.w	r0, [r9], #2
 8026b68:	9b08      	ldr	r3, [sp, #32]
 8026b6a:	9a05      	ldr	r2, [sp, #20]
 8026b6c:	881c      	ldrh	r4, [r3, #0]
 8026b6e:	9b03      	ldr	r3, [sp, #12]
 8026b70:	1ae4      	subs	r4, r4, r3
 8026b72:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8026b76:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026b7a:	4413      	add	r3, r2
 8026b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8026b82:	441e      	add	r6, r3
 8026b84:	e796      	b.n	8026ab4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8026b86:	4f47      	ldr	r7, [pc, #284]	; (8026ca4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8026b88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026b8c:	42a3      	cmp	r3, r4
 8026b8e:	d97c      	bls.n	8026c8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8026b90:	9a06      	ldr	r2, [sp, #24]
 8026b92:	2a00      	cmp	r2, #0
 8026b94:	d054      	beq.n	8026c40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8026b96:	7830      	ldrb	r0, [r6, #0]
 8026b98:	1c71      	adds	r1, r6, #1
 8026b9a:	f000 000f 	and.w	r0, r0, #15
 8026b9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026ba2:	eb05 0e00 	add.w	lr, r5, r0
 8026ba6:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8026baa:	f89e e001 	ldrb.w	lr, [lr, #1]
 8026bae:	5c28      	ldrb	r0, [r5, r0]
 8026bb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026bb4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026bb8:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8026bbc:	ea42 020e 	orr.w	r2, r2, lr
 8026bc0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8026bc4:	f824 2b02 	strh.w	r2, [r4], #2
 8026bc8:	9a03      	ldr	r2, [sp, #12]
 8026bca:	f102 3eff 	add.w	lr, r2, #4294967295
 8026bce:	f1be 0f01 	cmp.w	lr, #1
 8026bd2:	4620      	mov	r0, r4
 8026bd4:	f104 0404 	add.w	r4, r4, #4
 8026bd8:	dd36      	ble.n	8026c48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8026bda:	7808      	ldrb	r0, [r1, #0]
 8026bdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8026be0:	0900      	lsrs	r0, r0, #4
 8026be2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026be6:	eb05 0a00 	add.w	sl, r5, r0
 8026bea:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8026bee:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8026bf2:	00d2      	lsls	r2, r2, #3
 8026bf4:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8026bf8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026bfc:	ea49 0202 	orr.w	r2, r9, r2
 8026c00:	f815 9000 	ldrb.w	r9, [r5, r0]
 8026c04:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8026c08:	f824 2c04 	strh.w	r2, [r4, #-4]
 8026c0c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8026c10:	f000 000f 	and.w	r0, r0, #15
 8026c14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026c18:	eb05 0a00 	add.w	sl, r5, r0
 8026c1c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8026c20:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8026c24:	00d2      	lsls	r2, r2, #3
 8026c26:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8026c2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c2e:	ea49 0202 	orr.w	r2, r9, r2
 8026c32:	f815 9000 	ldrb.w	r9, [r5, r0]
 8026c36:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8026c3a:	f824 2c02 	strh.w	r2, [r4, #-2]
 8026c3e:	e7c6      	b.n	8026bce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8026c40:	4631      	mov	r1, r6
 8026c42:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8026c46:	e7c2      	b.n	8026bce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8026c48:	d111      	bne.n	8026c6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8026c4a:	7809      	ldrb	r1, [r1, #0]
 8026c4c:	0909      	lsrs	r1, r1, #4
 8026c4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026c52:	186c      	adds	r4, r5, r1
 8026c54:	78a2      	ldrb	r2, [r4, #2]
 8026c56:	7864      	ldrb	r4, [r4, #1]
 8026c58:	5c69      	ldrb	r1, [r5, r1]
 8026c5a:	00e4      	lsls	r4, r4, #3
 8026c5c:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8026c60:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8026c64:	4322      	orrs	r2, r4
 8026c66:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8026c6a:	f820 2b02 	strh.w	r2, [r0], #2
 8026c6e:	9a03      	ldr	r2, [sp, #12]
 8026c70:	f8bc 4000 	ldrh.w	r4, [ip]
 8026c74:	9905      	ldr	r1, [sp, #20]
 8026c76:	1aa4      	subs	r4, r4, r2
 8026c78:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8026c7c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8026c80:	440a      	add	r2, r1
 8026c82:	fb92 f2f8 	sdiv	r2, r2, r8
 8026c86:	4416      	add	r6, r2
 8026c88:	e780      	b.n	8026b8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8026c8a:	4b04      	ldr	r3, [pc, #16]	; (8026c9c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8026c8c:	6818      	ldr	r0, [r3, #0]
 8026c8e:	6803      	ldr	r3, [r0, #0]
 8026c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026c92:	4798      	blx	r3
 8026c94:	b00f      	add	sp, #60	; 0x3c
 8026c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c9a:	bf00      	nop
 8026c9c:	2000f394 	.word	0x2000f394
 8026ca0:	2000f38e 	.word	0x2000f38e
 8026ca4:	fffff800 	.word	0xfffff800

08026ca8 <CRC_Lock>:
 8026ca8:	b530      	push	{r4, r5, lr}
 8026caa:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8026cae:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026cb2:	4a1e      	ldr	r2, [pc, #120]	; (8026d2c <CRC_Lock+0x84>)
 8026cb4:	6813      	ldr	r3, [r2, #0]
 8026cb6:	f023 0301 	bic.w	r3, r3, #1
 8026cba:	6013      	str	r3, [r2, #0]
 8026cbc:	4b1c      	ldr	r3, [pc, #112]	; (8026d30 <CRC_Lock+0x88>)
 8026cbe:	681a      	ldr	r2, [r3, #0]
 8026cc0:	4022      	ands	r2, r4
 8026cc2:	42aa      	cmp	r2, r5
 8026cc4:	d005      	beq.n	8026cd2 <CRC_Lock+0x2a>
 8026cc6:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026cca:	681b      	ldr	r3, [r3, #0]
 8026ccc:	4023      	ands	r3, r4
 8026cce:	4293      	cmp	r3, r2
 8026cd0:	d124      	bne.n	8026d1c <CRC_Lock+0x74>
 8026cd2:	4b18      	ldr	r3, [pc, #96]	; (8026d34 <CRC_Lock+0x8c>)
 8026cd4:	681b      	ldr	r3, [r3, #0]
 8026cd6:	bb0b      	cbnz	r3, 8026d1c <CRC_Lock+0x74>
 8026cd8:	4b17      	ldr	r3, [pc, #92]	; (8026d38 <CRC_Lock+0x90>)
 8026cda:	681a      	ldr	r2, [r3, #0]
 8026cdc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8026ce0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8026ce4:	d00d      	beq.n	8026d02 <CRC_Lock+0x5a>
 8026ce6:	f240 4483 	movw	r4, #1155	; 0x483
 8026cea:	681a      	ldr	r2, [r3, #0]
 8026cec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8026cf0:	42a2      	cmp	r2, r4
 8026cf2:	d006      	beq.n	8026d02 <CRC_Lock+0x5a>
 8026cf4:	f240 4285 	movw	r2, #1157	; 0x485
 8026cf8:	681b      	ldr	r3, [r3, #0]
 8026cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026cfe:	4293      	cmp	r3, r2
 8026d00:	d10c      	bne.n	8026d1c <CRC_Lock+0x74>
 8026d02:	2201      	movs	r2, #1
 8026d04:	4b0d      	ldr	r3, [pc, #52]	; (8026d3c <CRC_Lock+0x94>)
 8026d06:	601a      	str	r2, [r3, #0]
 8026d08:	681a      	ldr	r2, [r3, #0]
 8026d0a:	2a00      	cmp	r2, #0
 8026d0c:	d1fc      	bne.n	8026d08 <CRC_Lock+0x60>
 8026d0e:	4b0c      	ldr	r3, [pc, #48]	; (8026d40 <CRC_Lock+0x98>)
 8026d10:	6018      	str	r0, [r3, #0]
 8026d12:	6818      	ldr	r0, [r3, #0]
 8026d14:	1a43      	subs	r3, r0, r1
 8026d16:	4258      	negs	r0, r3
 8026d18:	4158      	adcs	r0, r3
 8026d1a:	bd30      	pop	{r4, r5, pc}
 8026d1c:	2201      	movs	r2, #1
 8026d1e:	4b09      	ldr	r3, [pc, #36]	; (8026d44 <CRC_Lock+0x9c>)
 8026d20:	601a      	str	r2, [r3, #0]
 8026d22:	681a      	ldr	r2, [r3, #0]
 8026d24:	2a00      	cmp	r2, #0
 8026d26:	d1fc      	bne.n	8026d22 <CRC_Lock+0x7a>
 8026d28:	4b07      	ldr	r3, [pc, #28]	; (8026d48 <CRC_Lock+0xa0>)
 8026d2a:	e7f1      	b.n	8026d10 <CRC_Lock+0x68>
 8026d2c:	e0002000 	.word	0xe0002000
 8026d30:	e000ed00 	.word	0xe000ed00
 8026d34:	e0042000 	.word	0xe0042000
 8026d38:	5c001000 	.word	0x5c001000
 8026d3c:	58024c08 	.word	0x58024c08
 8026d40:	58024c00 	.word	0x58024c00
 8026d44:	40023008 	.word	0x40023008
 8026d48:	40023000 	.word	0x40023000

08026d4c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026d4c:	6101      	str	r1, [r0, #16]
 8026d4e:	4770      	bx	lr

08026d50 <_ZN8touchgfx8Gestures4tickEv>:
 8026d50:	7b83      	ldrb	r3, [r0, #14]
 8026d52:	b14b      	cbz	r3, 8026d68 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026d54:	8903      	ldrh	r3, [r0, #8]
 8026d56:	3301      	adds	r3, #1
 8026d58:	b29b      	uxth	r3, r3
 8026d5a:	2b07      	cmp	r3, #7
 8026d5c:	8103      	strh	r3, [r0, #8]
 8026d5e:	bf81      	itttt	hi
 8026d60:	2300      	movhi	r3, #0
 8026d62:	8143      	strhhi	r3, [r0, #10]
 8026d64:	8183      	strhhi	r3, [r0, #12]
 8026d66:	7383      	strbhi	r3, [r0, #14]
 8026d68:	4770      	bx	lr
	...

08026d6c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026d6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026d70:	4698      	mov	r8, r3
 8026d72:	4604      	mov	r4, r0
 8026d74:	8883      	ldrh	r3, [r0, #4]
 8026d76:	460e      	mov	r6, r1
 8026d78:	88c1      	ldrh	r1, [r0, #6]
 8026d7a:	2000      	movs	r0, #0
 8026d7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026d80:	eba8 0303 	sub.w	r3, r8, r3
 8026d84:	b21b      	sxth	r3, r3
 8026d86:	4617      	mov	r7, r2
 8026d88:	4a17      	ldr	r2, [pc, #92]	; (8026de8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8026d8a:	2b00      	cmp	r3, #0
 8026d8c:	bfb8      	it	lt
 8026d8e:	425b      	neglt	r3, r3
 8026d90:	9200      	str	r2, [sp, #0]
 8026d92:	8aa2      	ldrh	r2, [r4, #20]
 8026d94:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026d98:	b21b      	sxth	r3, r3
 8026d9a:	4293      	cmp	r3, r2
 8026d9c:	f88d 0004 	strb.w	r0, [sp, #4]
 8026da0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8026da4:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026da8:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026dac:	dc07      	bgt.n	8026dbe <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8026dae:	1a69      	subs	r1, r5, r1
 8026db0:	b209      	sxth	r1, r1
 8026db2:	2900      	cmp	r1, #0
 8026db4:	bfb8      	it	lt
 8026db6:	4249      	neglt	r1, r1
 8026db8:	b209      	sxth	r1, r1
 8026dba:	428a      	cmp	r2, r1
 8026dbc:	da10      	bge.n	8026de0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8026dbe:	6920      	ldr	r0, [r4, #16]
 8026dc0:	4669      	mov	r1, sp
 8026dc2:	6803      	ldr	r3, [r0, #0]
 8026dc4:	eba8 0606 	sub.w	r6, r8, r6
 8026dc8:	685b      	ldr	r3, [r3, #4]
 8026dca:	4798      	blx	r3
 8026dcc:	2300      	movs	r3, #0
 8026dce:	2001      	movs	r0, #1
 8026dd0:	1bef      	subs	r7, r5, r7
 8026dd2:	8123      	strh	r3, [r4, #8]
 8026dd4:	8166      	strh	r6, [r4, #10]
 8026dd6:	81a7      	strh	r7, [r4, #12]
 8026dd8:	f8a4 8004 	strh.w	r8, [r4, #4]
 8026ddc:	80e5      	strh	r5, [r4, #6]
 8026dde:	73a0      	strb	r0, [r4, #14]
 8026de0:	b004      	add	sp, #16
 8026de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026de6:	bf00      	nop
 8026de8:	0802a05c 	.word	0x0802a05c

08026dec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026dee:	461e      	mov	r6, r3
 8026df0:	1e4b      	subs	r3, r1, #1
 8026df2:	2b01      	cmp	r3, #1
 8026df4:	b085      	sub	sp, #20
 8026df6:	4604      	mov	r4, r0
 8026df8:	460d      	mov	r5, r1
 8026dfa:	4617      	mov	r7, r2
 8026dfc:	d84b      	bhi.n	8026e96 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026dfe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8026e02:	1cd3      	adds	r3, r2, #3
 8026e04:	b29b      	uxth	r3, r3
 8026e06:	2b06      	cmp	r3, #6
 8026e08:	d916      	bls.n	8026e38 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026e0a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8026eac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026e0e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026e12:	f8cd c004 	str.w	ip, [sp, #4]
 8026e16:	f04f 0c00 	mov.w	ip, #0
 8026e1a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026e1e:	6900      	ldr	r0, [r0, #16]
 8026e20:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026e24:	f88d c008 	strb.w	ip, [sp, #8]
 8026e28:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026e2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026e30:	6803      	ldr	r3, [r0, #0]
 8026e32:	a901      	add	r1, sp, #4
 8026e34:	689b      	ldr	r3, [r3, #8]
 8026e36:	4798      	blx	r3
 8026e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026e3c:	1cd3      	adds	r3, r2, #3
 8026e3e:	b29b      	uxth	r3, r3
 8026e40:	2b06      	cmp	r3, #6
 8026e42:	d916      	bls.n	8026e72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026e44:	f8df c064 	ldr.w	ip, [pc, #100]	; 8026eac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026e48:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026e4c:	f8cd c004 	str.w	ip, [sp, #4]
 8026e50:	f04f 0c01 	mov.w	ip, #1
 8026e54:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026e58:	6920      	ldr	r0, [r4, #16]
 8026e5a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026e5e:	f88d c008 	strb.w	ip, [sp, #8]
 8026e62:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026e66:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026e6a:	6803      	ldr	r3, [r0, #0]
 8026e6c:	a901      	add	r1, sp, #4
 8026e6e:	689b      	ldr	r3, [r3, #8]
 8026e70:	4798      	blx	r3
 8026e72:	4b0d      	ldr	r3, [pc, #52]	; (8026ea8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8026e74:	6920      	ldr	r0, [r4, #16]
 8026e76:	9301      	str	r3, [sp, #4]
 8026e78:	2300      	movs	r3, #0
 8026e7a:	f88d 5008 	strb.w	r5, [sp, #8]
 8026e7e:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026e82:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026e86:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026e8a:	6803      	ldr	r3, [r0, #0]
 8026e8c:	a901      	add	r1, sp, #4
 8026e8e:	681b      	ldr	r3, [r3, #0]
 8026e90:	4798      	blx	r3
 8026e92:	b005      	add	sp, #20
 8026e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026e96:	2900      	cmp	r1, #0
 8026e98:	d1eb      	bne.n	8026e72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026e9a:	80a2      	strh	r2, [r4, #4]
 8026e9c:	80c6      	strh	r6, [r0, #6]
 8026e9e:	60a1      	str	r1, [r4, #8]
 8026ea0:	81a1      	strh	r1, [r4, #12]
 8026ea2:	73a1      	strb	r1, [r4, #14]
 8026ea4:	e7e5      	b.n	8026e72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026ea6:	bf00      	nop
 8026ea8:	0802a048 	.word	0x0802a048
 8026eac:	0802a070 	.word	0x0802a070

08026eb0 <__aeabi_atexit>:
 8026eb0:	460b      	mov	r3, r1
 8026eb2:	4601      	mov	r1, r0
 8026eb4:	4618      	mov	r0, r3
 8026eb6:	f000 b90d 	b.w	80270d4 <__cxa_atexit>

08026eba <_ZdlPvj>:
 8026eba:	f000 b812 	b.w	8026ee2 <_ZdlPv>

08026ebe <__cxa_guard_acquire>:
 8026ebe:	6803      	ldr	r3, [r0, #0]
 8026ec0:	07db      	lsls	r3, r3, #31
 8026ec2:	d406      	bmi.n	8026ed2 <__cxa_guard_acquire+0x14>
 8026ec4:	7843      	ldrb	r3, [r0, #1]
 8026ec6:	b103      	cbz	r3, 8026eca <__cxa_guard_acquire+0xc>
 8026ec8:	deff      	udf	#255	; 0xff
 8026eca:	2301      	movs	r3, #1
 8026ecc:	7043      	strb	r3, [r0, #1]
 8026ece:	4618      	mov	r0, r3
 8026ed0:	4770      	bx	lr
 8026ed2:	2000      	movs	r0, #0
 8026ed4:	4770      	bx	lr

08026ed6 <__cxa_guard_release>:
 8026ed6:	2301      	movs	r3, #1
 8026ed8:	6003      	str	r3, [r0, #0]
 8026eda:	4770      	bx	lr

08026edc <__cxa_pure_virtual>:
 8026edc:	b508      	push	{r3, lr}
 8026ede:	f000 f80d 	bl	8026efc <_ZSt9terminatev>

08026ee2 <_ZdlPv>:
 8026ee2:	f000 b843 	b.w	8026f6c <free>

08026ee6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026ee6:	b508      	push	{r3, lr}
 8026ee8:	4780      	blx	r0
 8026eea:	f000 f80c 	bl	8026f06 <abort>
	...

08026ef0 <_ZSt13get_terminatev>:
 8026ef0:	4b01      	ldr	r3, [pc, #4]	; (8026ef8 <_ZSt13get_terminatev+0x8>)
 8026ef2:	e8d3 0faf 	lda	r0, [r3]
 8026ef6:	4770      	bx	lr
 8026ef8:	200000a0 	.word	0x200000a0

08026efc <_ZSt9terminatev>:
 8026efc:	b508      	push	{r3, lr}
 8026efe:	f7ff fff7 	bl	8026ef0 <_ZSt13get_terminatev>
 8026f02:	f7ff fff0 	bl	8026ee6 <_ZN10__cxxabiv111__terminateEPFvvE>

08026f06 <abort>:
 8026f06:	2006      	movs	r0, #6
 8026f08:	b508      	push	{r3, lr}
 8026f0a:	f000 fa39 	bl	8027380 <raise>
 8026f0e:	2001      	movs	r0, #1
 8026f10:	f7da fb2c 	bl	800156c <_exit>

08026f14 <__assert_func>:
 8026f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026f16:	4614      	mov	r4, r2
 8026f18:	461a      	mov	r2, r3
 8026f1a:	4b09      	ldr	r3, [pc, #36]	; (8026f40 <__assert_func+0x2c>)
 8026f1c:	4605      	mov	r5, r0
 8026f1e:	681b      	ldr	r3, [r3, #0]
 8026f20:	68d8      	ldr	r0, [r3, #12]
 8026f22:	b14c      	cbz	r4, 8026f38 <__assert_func+0x24>
 8026f24:	4b07      	ldr	r3, [pc, #28]	; (8026f44 <__assert_func+0x30>)
 8026f26:	9100      	str	r1, [sp, #0]
 8026f28:	4907      	ldr	r1, [pc, #28]	; (8026f48 <__assert_func+0x34>)
 8026f2a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026f2e:	462b      	mov	r3, r5
 8026f30:	f000 f982 	bl	8027238 <fiprintf>
 8026f34:	f7ff ffe7 	bl	8026f06 <abort>
 8026f38:	4b04      	ldr	r3, [pc, #16]	; (8026f4c <__assert_func+0x38>)
 8026f3a:	461c      	mov	r4, r3
 8026f3c:	e7f3      	b.n	8026f26 <__assert_func+0x12>
 8026f3e:	bf00      	nop
 8026f40:	200000fc 	.word	0x200000fc
 8026f44:	0802a38c 	.word	0x0802a38c
 8026f48:	0802a399 	.word	0x0802a399
 8026f4c:	0802a3c7 	.word	0x0802a3c7

08026f50 <atexit>:
 8026f50:	2300      	movs	r3, #0
 8026f52:	4601      	mov	r1, r0
 8026f54:	461a      	mov	r2, r3
 8026f56:	4618      	mov	r0, r3
 8026f58:	f000 bb14 	b.w	8027584 <__register_exitproc>

08026f5c <malloc>:
 8026f5c:	4b02      	ldr	r3, [pc, #8]	; (8026f68 <malloc+0xc>)
 8026f5e:	4601      	mov	r1, r0
 8026f60:	6818      	ldr	r0, [r3, #0]
 8026f62:	f000 b82b 	b.w	8026fbc <_malloc_r>
 8026f66:	bf00      	nop
 8026f68:	200000fc 	.word	0x200000fc

08026f6c <free>:
 8026f6c:	4b02      	ldr	r3, [pc, #8]	; (8026f78 <free+0xc>)
 8026f6e:	4601      	mov	r1, r0
 8026f70:	6818      	ldr	r0, [r3, #0]
 8026f72:	f000 bb67 	b.w	8027644 <_free_r>
 8026f76:	bf00      	nop
 8026f78:	200000fc 	.word	0x200000fc

08026f7c <sbrk_aligned>:
 8026f7c:	b570      	push	{r4, r5, r6, lr}
 8026f7e:	4e0e      	ldr	r6, [pc, #56]	; (8026fb8 <sbrk_aligned+0x3c>)
 8026f80:	460c      	mov	r4, r1
 8026f82:	4605      	mov	r5, r0
 8026f84:	6831      	ldr	r1, [r6, #0]
 8026f86:	b911      	cbnz	r1, 8026f8e <sbrk_aligned+0x12>
 8026f88:	f000 faa0 	bl	80274cc <_sbrk_r>
 8026f8c:	6030      	str	r0, [r6, #0]
 8026f8e:	4621      	mov	r1, r4
 8026f90:	4628      	mov	r0, r5
 8026f92:	f000 fa9b 	bl	80274cc <_sbrk_r>
 8026f96:	1c43      	adds	r3, r0, #1
 8026f98:	d00a      	beq.n	8026fb0 <sbrk_aligned+0x34>
 8026f9a:	1cc4      	adds	r4, r0, #3
 8026f9c:	f024 0403 	bic.w	r4, r4, #3
 8026fa0:	42a0      	cmp	r0, r4
 8026fa2:	d007      	beq.n	8026fb4 <sbrk_aligned+0x38>
 8026fa4:	1a21      	subs	r1, r4, r0
 8026fa6:	4628      	mov	r0, r5
 8026fa8:	f000 fa90 	bl	80274cc <_sbrk_r>
 8026fac:	3001      	adds	r0, #1
 8026fae:	d101      	bne.n	8026fb4 <sbrk_aligned+0x38>
 8026fb0:	f04f 34ff 	mov.w	r4, #4294967295
 8026fb4:	4620      	mov	r0, r4
 8026fb6:	bd70      	pop	{r4, r5, r6, pc}
 8026fb8:	2000fce4 	.word	0x2000fce4

08026fbc <_malloc_r>:
 8026fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026fc0:	1ccd      	adds	r5, r1, #3
 8026fc2:	4607      	mov	r7, r0
 8026fc4:	f025 0503 	bic.w	r5, r5, #3
 8026fc8:	3508      	adds	r5, #8
 8026fca:	2d0c      	cmp	r5, #12
 8026fcc:	bf38      	it	cc
 8026fce:	250c      	movcc	r5, #12
 8026fd0:	2d00      	cmp	r5, #0
 8026fd2:	db01      	blt.n	8026fd8 <_malloc_r+0x1c>
 8026fd4:	42a9      	cmp	r1, r5
 8026fd6:	d905      	bls.n	8026fe4 <_malloc_r+0x28>
 8026fd8:	230c      	movs	r3, #12
 8026fda:	2600      	movs	r6, #0
 8026fdc:	603b      	str	r3, [r7, #0]
 8026fde:	4630      	mov	r0, r6
 8026fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026fe4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80270b8 <_malloc_r+0xfc>
 8026fe8:	f000 f868 	bl	80270bc <__malloc_lock>
 8026fec:	f8d8 3000 	ldr.w	r3, [r8]
 8026ff0:	461c      	mov	r4, r3
 8026ff2:	bb5c      	cbnz	r4, 802704c <_malloc_r+0x90>
 8026ff4:	4629      	mov	r1, r5
 8026ff6:	4638      	mov	r0, r7
 8026ff8:	f7ff ffc0 	bl	8026f7c <sbrk_aligned>
 8026ffc:	1c43      	adds	r3, r0, #1
 8026ffe:	4604      	mov	r4, r0
 8027000:	d155      	bne.n	80270ae <_malloc_r+0xf2>
 8027002:	f8d8 4000 	ldr.w	r4, [r8]
 8027006:	4626      	mov	r6, r4
 8027008:	2e00      	cmp	r6, #0
 802700a:	d145      	bne.n	8027098 <_malloc_r+0xdc>
 802700c:	2c00      	cmp	r4, #0
 802700e:	d048      	beq.n	80270a2 <_malloc_r+0xe6>
 8027010:	6823      	ldr	r3, [r4, #0]
 8027012:	4631      	mov	r1, r6
 8027014:	4638      	mov	r0, r7
 8027016:	eb04 0903 	add.w	r9, r4, r3
 802701a:	f000 fa57 	bl	80274cc <_sbrk_r>
 802701e:	4581      	cmp	r9, r0
 8027020:	d13f      	bne.n	80270a2 <_malloc_r+0xe6>
 8027022:	6821      	ldr	r1, [r4, #0]
 8027024:	4638      	mov	r0, r7
 8027026:	1a6d      	subs	r5, r5, r1
 8027028:	4629      	mov	r1, r5
 802702a:	f7ff ffa7 	bl	8026f7c <sbrk_aligned>
 802702e:	3001      	adds	r0, #1
 8027030:	d037      	beq.n	80270a2 <_malloc_r+0xe6>
 8027032:	6823      	ldr	r3, [r4, #0]
 8027034:	442b      	add	r3, r5
 8027036:	6023      	str	r3, [r4, #0]
 8027038:	f8d8 3000 	ldr.w	r3, [r8]
 802703c:	2b00      	cmp	r3, #0
 802703e:	d038      	beq.n	80270b2 <_malloc_r+0xf6>
 8027040:	685a      	ldr	r2, [r3, #4]
 8027042:	42a2      	cmp	r2, r4
 8027044:	d12b      	bne.n	802709e <_malloc_r+0xe2>
 8027046:	2200      	movs	r2, #0
 8027048:	605a      	str	r2, [r3, #4]
 802704a:	e00f      	b.n	802706c <_malloc_r+0xb0>
 802704c:	6822      	ldr	r2, [r4, #0]
 802704e:	1b52      	subs	r2, r2, r5
 8027050:	d41f      	bmi.n	8027092 <_malloc_r+0xd6>
 8027052:	2a0b      	cmp	r2, #11
 8027054:	d917      	bls.n	8027086 <_malloc_r+0xca>
 8027056:	1961      	adds	r1, r4, r5
 8027058:	42a3      	cmp	r3, r4
 802705a:	6025      	str	r5, [r4, #0]
 802705c:	bf18      	it	ne
 802705e:	6059      	strne	r1, [r3, #4]
 8027060:	6863      	ldr	r3, [r4, #4]
 8027062:	bf08      	it	eq
 8027064:	f8c8 1000 	streq.w	r1, [r8]
 8027068:	5162      	str	r2, [r4, r5]
 802706a:	604b      	str	r3, [r1, #4]
 802706c:	f104 060b 	add.w	r6, r4, #11
 8027070:	4638      	mov	r0, r7
 8027072:	f000 f829 	bl	80270c8 <__malloc_unlock>
 8027076:	1d23      	adds	r3, r4, #4
 8027078:	f026 0607 	bic.w	r6, r6, #7
 802707c:	1af2      	subs	r2, r6, r3
 802707e:	d0ae      	beq.n	8026fde <_malloc_r+0x22>
 8027080:	1b9b      	subs	r3, r3, r6
 8027082:	50a3      	str	r3, [r4, r2]
 8027084:	e7ab      	b.n	8026fde <_malloc_r+0x22>
 8027086:	42a3      	cmp	r3, r4
 8027088:	6862      	ldr	r2, [r4, #4]
 802708a:	d1dd      	bne.n	8027048 <_malloc_r+0x8c>
 802708c:	f8c8 2000 	str.w	r2, [r8]
 8027090:	e7ec      	b.n	802706c <_malloc_r+0xb0>
 8027092:	4623      	mov	r3, r4
 8027094:	6864      	ldr	r4, [r4, #4]
 8027096:	e7ac      	b.n	8026ff2 <_malloc_r+0x36>
 8027098:	4634      	mov	r4, r6
 802709a:	6876      	ldr	r6, [r6, #4]
 802709c:	e7b4      	b.n	8027008 <_malloc_r+0x4c>
 802709e:	4613      	mov	r3, r2
 80270a0:	e7cc      	b.n	802703c <_malloc_r+0x80>
 80270a2:	230c      	movs	r3, #12
 80270a4:	4638      	mov	r0, r7
 80270a6:	603b      	str	r3, [r7, #0]
 80270a8:	f000 f80e 	bl	80270c8 <__malloc_unlock>
 80270ac:	e797      	b.n	8026fde <_malloc_r+0x22>
 80270ae:	6025      	str	r5, [r4, #0]
 80270b0:	e7dc      	b.n	802706c <_malloc_r+0xb0>
 80270b2:	605b      	str	r3, [r3, #4]
 80270b4:	deff      	udf	#255	; 0xff
 80270b6:	bf00      	nop
 80270b8:	2000fce0 	.word	0x2000fce0

080270bc <__malloc_lock>:
 80270bc:	4801      	ldr	r0, [pc, #4]	; (80270c4 <__malloc_lock+0x8>)
 80270be:	f000 ba52 	b.w	8027566 <__retarget_lock_acquire_recursive>
 80270c2:	bf00      	nop
 80270c4:	2000fe29 	.word	0x2000fe29

080270c8 <__malloc_unlock>:
 80270c8:	4801      	ldr	r0, [pc, #4]	; (80270d0 <__malloc_unlock+0x8>)
 80270ca:	f000 ba4d 	b.w	8027568 <__retarget_lock_release_recursive>
 80270ce:	bf00      	nop
 80270d0:	2000fe29 	.word	0x2000fe29

080270d4 <__cxa_atexit>:
 80270d4:	b510      	push	{r4, lr}
 80270d6:	4c05      	ldr	r4, [pc, #20]	; (80270ec <__cxa_atexit+0x18>)
 80270d8:	4613      	mov	r3, r2
 80270da:	b12c      	cbz	r4, 80270e8 <__cxa_atexit+0x14>
 80270dc:	460a      	mov	r2, r1
 80270de:	4601      	mov	r1, r0
 80270e0:	2002      	movs	r0, #2
 80270e2:	f000 fa4f 	bl	8027584 <__register_exitproc>
 80270e6:	bd10      	pop	{r4, pc}
 80270e8:	4620      	mov	r0, r4
 80270ea:	e7fc      	b.n	80270e6 <__cxa_atexit+0x12>
 80270ec:	08027585 	.word	0x08027585

080270f0 <std>:
 80270f0:	2300      	movs	r3, #0
 80270f2:	b510      	push	{r4, lr}
 80270f4:	4604      	mov	r4, r0
 80270f6:	6083      	str	r3, [r0, #8]
 80270f8:	8181      	strh	r1, [r0, #12]
 80270fa:	4619      	mov	r1, r3
 80270fc:	6643      	str	r3, [r0, #100]	; 0x64
 80270fe:	81c2      	strh	r2, [r0, #14]
 8027100:	2208      	movs	r2, #8
 8027102:	6183      	str	r3, [r0, #24]
 8027104:	e9c0 3300 	strd	r3, r3, [r0]
 8027108:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802710c:	305c      	adds	r0, #92	; 0x5c
 802710e:	f000 f906 	bl	802731e <memset>
 8027112:	4b0d      	ldr	r3, [pc, #52]	; (8027148 <std+0x58>)
 8027114:	6224      	str	r4, [r4, #32]
 8027116:	6263      	str	r3, [r4, #36]	; 0x24
 8027118:	4b0c      	ldr	r3, [pc, #48]	; (802714c <std+0x5c>)
 802711a:	62a3      	str	r3, [r4, #40]	; 0x28
 802711c:	4b0c      	ldr	r3, [pc, #48]	; (8027150 <std+0x60>)
 802711e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027120:	4b0c      	ldr	r3, [pc, #48]	; (8027154 <std+0x64>)
 8027122:	6323      	str	r3, [r4, #48]	; 0x30
 8027124:	4b0c      	ldr	r3, [pc, #48]	; (8027158 <std+0x68>)
 8027126:	429c      	cmp	r4, r3
 8027128:	d006      	beq.n	8027138 <std+0x48>
 802712a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802712e:	4294      	cmp	r4, r2
 8027130:	d002      	beq.n	8027138 <std+0x48>
 8027132:	33d0      	adds	r3, #208	; 0xd0
 8027134:	429c      	cmp	r4, r3
 8027136:	d105      	bne.n	8027144 <std+0x54>
 8027138:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802713c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027140:	f000 ba10 	b.w	8027564 <__retarget_lock_init_recursive>
 8027144:	bd10      	pop	{r4, pc}
 8027146:	bf00      	nop
 8027148:	08027299 	.word	0x08027299
 802714c:	080272bb 	.word	0x080272bb
 8027150:	080272f3 	.word	0x080272f3
 8027154:	08027317 	.word	0x08027317
 8027158:	2000fce8 	.word	0x2000fce8

0802715c <stdio_exit_handler>:
 802715c:	4a02      	ldr	r2, [pc, #8]	; (8027168 <stdio_exit_handler+0xc>)
 802715e:	4903      	ldr	r1, [pc, #12]	; (802716c <stdio_exit_handler+0x10>)
 8027160:	4803      	ldr	r0, [pc, #12]	; (8027170 <stdio_exit_handler+0x14>)
 8027162:	f000 b87b 	b.w	802725c <_fwalk_sglue>
 8027166:	bf00      	nop
 8027168:	200000a4 	.word	0x200000a4
 802716c:	08027d91 	.word	0x08027d91
 8027170:	200000b0 	.word	0x200000b0

08027174 <cleanup_stdio>:
 8027174:	6841      	ldr	r1, [r0, #4]
 8027176:	4b0c      	ldr	r3, [pc, #48]	; (80271a8 <cleanup_stdio+0x34>)
 8027178:	4299      	cmp	r1, r3
 802717a:	b510      	push	{r4, lr}
 802717c:	4604      	mov	r4, r0
 802717e:	d001      	beq.n	8027184 <cleanup_stdio+0x10>
 8027180:	f000 fe06 	bl	8027d90 <_fflush_r>
 8027184:	68a1      	ldr	r1, [r4, #8]
 8027186:	4b09      	ldr	r3, [pc, #36]	; (80271ac <cleanup_stdio+0x38>)
 8027188:	4299      	cmp	r1, r3
 802718a:	d002      	beq.n	8027192 <cleanup_stdio+0x1e>
 802718c:	4620      	mov	r0, r4
 802718e:	f000 fdff 	bl	8027d90 <_fflush_r>
 8027192:	68e1      	ldr	r1, [r4, #12]
 8027194:	4b06      	ldr	r3, [pc, #24]	; (80271b0 <cleanup_stdio+0x3c>)
 8027196:	4299      	cmp	r1, r3
 8027198:	d004      	beq.n	80271a4 <cleanup_stdio+0x30>
 802719a:	4620      	mov	r0, r4
 802719c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80271a0:	f000 bdf6 	b.w	8027d90 <_fflush_r>
 80271a4:	bd10      	pop	{r4, pc}
 80271a6:	bf00      	nop
 80271a8:	2000fce8 	.word	0x2000fce8
 80271ac:	2000fd50 	.word	0x2000fd50
 80271b0:	2000fdb8 	.word	0x2000fdb8

080271b4 <global_stdio_init.part.0>:
 80271b4:	b510      	push	{r4, lr}
 80271b6:	4b0b      	ldr	r3, [pc, #44]	; (80271e4 <global_stdio_init.part.0+0x30>)
 80271b8:	2104      	movs	r1, #4
 80271ba:	4c0b      	ldr	r4, [pc, #44]	; (80271e8 <global_stdio_init.part.0+0x34>)
 80271bc:	4a0b      	ldr	r2, [pc, #44]	; (80271ec <global_stdio_init.part.0+0x38>)
 80271be:	4620      	mov	r0, r4
 80271c0:	601a      	str	r2, [r3, #0]
 80271c2:	2200      	movs	r2, #0
 80271c4:	f7ff ff94 	bl	80270f0 <std>
 80271c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80271cc:	2201      	movs	r2, #1
 80271ce:	2109      	movs	r1, #9
 80271d0:	f7ff ff8e 	bl	80270f0 <std>
 80271d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80271d8:	2202      	movs	r2, #2
 80271da:	2112      	movs	r1, #18
 80271dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80271e0:	f7ff bf86 	b.w	80270f0 <std>
 80271e4:	2000fe20 	.word	0x2000fe20
 80271e8:	2000fce8 	.word	0x2000fce8
 80271ec:	0802715d 	.word	0x0802715d

080271f0 <__sfp_lock_acquire>:
 80271f0:	4801      	ldr	r0, [pc, #4]	; (80271f8 <__sfp_lock_acquire+0x8>)
 80271f2:	f000 b9b8 	b.w	8027566 <__retarget_lock_acquire_recursive>
 80271f6:	bf00      	nop
 80271f8:	2000fe2a 	.word	0x2000fe2a

080271fc <__sfp_lock_release>:
 80271fc:	4801      	ldr	r0, [pc, #4]	; (8027204 <__sfp_lock_release+0x8>)
 80271fe:	f000 b9b3 	b.w	8027568 <__retarget_lock_release_recursive>
 8027202:	bf00      	nop
 8027204:	2000fe2a 	.word	0x2000fe2a

08027208 <__sinit>:
 8027208:	b510      	push	{r4, lr}
 802720a:	4604      	mov	r4, r0
 802720c:	f7ff fff0 	bl	80271f0 <__sfp_lock_acquire>
 8027210:	6a23      	ldr	r3, [r4, #32]
 8027212:	b11b      	cbz	r3, 802721c <__sinit+0x14>
 8027214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027218:	f7ff bff0 	b.w	80271fc <__sfp_lock_release>
 802721c:	4b04      	ldr	r3, [pc, #16]	; (8027230 <__sinit+0x28>)
 802721e:	6223      	str	r3, [r4, #32]
 8027220:	4b04      	ldr	r3, [pc, #16]	; (8027234 <__sinit+0x2c>)
 8027222:	681b      	ldr	r3, [r3, #0]
 8027224:	2b00      	cmp	r3, #0
 8027226:	d1f5      	bne.n	8027214 <__sinit+0xc>
 8027228:	f7ff ffc4 	bl	80271b4 <global_stdio_init.part.0>
 802722c:	e7f2      	b.n	8027214 <__sinit+0xc>
 802722e:	bf00      	nop
 8027230:	08027175 	.word	0x08027175
 8027234:	2000fe20 	.word	0x2000fe20

08027238 <fiprintf>:
 8027238:	b40e      	push	{r1, r2, r3}
 802723a:	b503      	push	{r0, r1, lr}
 802723c:	ab03      	add	r3, sp, #12
 802723e:	4601      	mov	r1, r0
 8027240:	4805      	ldr	r0, [pc, #20]	; (8027258 <fiprintf+0x20>)
 8027242:	f853 2b04 	ldr.w	r2, [r3], #4
 8027246:	6800      	ldr	r0, [r0, #0]
 8027248:	9301      	str	r3, [sp, #4]
 802724a:	f000 fa71 	bl	8027730 <_vfiprintf_r>
 802724e:	b002      	add	sp, #8
 8027250:	f85d eb04 	ldr.w	lr, [sp], #4
 8027254:	b003      	add	sp, #12
 8027256:	4770      	bx	lr
 8027258:	200000fc 	.word	0x200000fc

0802725c <_fwalk_sglue>:
 802725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027260:	4607      	mov	r7, r0
 8027262:	4688      	mov	r8, r1
 8027264:	4614      	mov	r4, r2
 8027266:	2600      	movs	r6, #0
 8027268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802726c:	f1b9 0901 	subs.w	r9, r9, #1
 8027270:	d505      	bpl.n	802727e <_fwalk_sglue+0x22>
 8027272:	6824      	ldr	r4, [r4, #0]
 8027274:	2c00      	cmp	r4, #0
 8027276:	d1f7      	bne.n	8027268 <_fwalk_sglue+0xc>
 8027278:	4630      	mov	r0, r6
 802727a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802727e:	89ab      	ldrh	r3, [r5, #12]
 8027280:	2b01      	cmp	r3, #1
 8027282:	d907      	bls.n	8027294 <_fwalk_sglue+0x38>
 8027284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027288:	3301      	adds	r3, #1
 802728a:	d003      	beq.n	8027294 <_fwalk_sglue+0x38>
 802728c:	4629      	mov	r1, r5
 802728e:	4638      	mov	r0, r7
 8027290:	47c0      	blx	r8
 8027292:	4306      	orrs	r6, r0
 8027294:	3568      	adds	r5, #104	; 0x68
 8027296:	e7e9      	b.n	802726c <_fwalk_sglue+0x10>

08027298 <__sread>:
 8027298:	b510      	push	{r4, lr}
 802729a:	460c      	mov	r4, r1
 802729c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80272a0:	f000 f8ee 	bl	8027480 <_read_r>
 80272a4:	2800      	cmp	r0, #0
 80272a6:	bfab      	itete	ge
 80272a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80272aa:	89a3      	ldrhlt	r3, [r4, #12]
 80272ac:	181b      	addge	r3, r3, r0
 80272ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80272b2:	bfac      	ite	ge
 80272b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80272b6:	81a3      	strhlt	r3, [r4, #12]
 80272b8:	bd10      	pop	{r4, pc}

080272ba <__swrite>:
 80272ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80272be:	461f      	mov	r7, r3
 80272c0:	898b      	ldrh	r3, [r1, #12]
 80272c2:	4605      	mov	r5, r0
 80272c4:	460c      	mov	r4, r1
 80272c6:	05db      	lsls	r3, r3, #23
 80272c8:	4616      	mov	r6, r2
 80272ca:	d505      	bpl.n	80272d8 <__swrite+0x1e>
 80272cc:	2302      	movs	r3, #2
 80272ce:	2200      	movs	r2, #0
 80272d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80272d4:	f000 f8c2 	bl	802745c <_lseek_r>
 80272d8:	89a3      	ldrh	r3, [r4, #12]
 80272da:	4632      	mov	r2, r6
 80272dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80272e0:	4628      	mov	r0, r5
 80272e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80272e6:	81a3      	strh	r3, [r4, #12]
 80272e8:	463b      	mov	r3, r7
 80272ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80272ee:	f000 b8fd 	b.w	80274ec <_write_r>

080272f2 <__sseek>:
 80272f2:	b510      	push	{r4, lr}
 80272f4:	460c      	mov	r4, r1
 80272f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80272fa:	f000 f8af 	bl	802745c <_lseek_r>
 80272fe:	1c43      	adds	r3, r0, #1
 8027300:	89a3      	ldrh	r3, [r4, #12]
 8027302:	bf15      	itete	ne
 8027304:	6560      	strne	r0, [r4, #84]	; 0x54
 8027306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802730a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802730e:	81a3      	strheq	r3, [r4, #12]
 8027310:	bf18      	it	ne
 8027312:	81a3      	strhne	r3, [r4, #12]
 8027314:	bd10      	pop	{r4, pc}

08027316 <__sclose>:
 8027316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802731a:	f000 b839 	b.w	8027390 <_close_r>

0802731e <memset>:
 802731e:	4402      	add	r2, r0
 8027320:	4603      	mov	r3, r0
 8027322:	4293      	cmp	r3, r2
 8027324:	d100      	bne.n	8027328 <memset+0xa>
 8027326:	4770      	bx	lr
 8027328:	f803 1b01 	strb.w	r1, [r3], #1
 802732c:	e7f9      	b.n	8027322 <memset+0x4>

0802732e <_raise_r>:
 802732e:	291f      	cmp	r1, #31
 8027330:	b538      	push	{r3, r4, r5, lr}
 8027332:	4604      	mov	r4, r0
 8027334:	460d      	mov	r5, r1
 8027336:	d904      	bls.n	8027342 <_raise_r+0x14>
 8027338:	2316      	movs	r3, #22
 802733a:	6003      	str	r3, [r0, #0]
 802733c:	f04f 30ff 	mov.w	r0, #4294967295
 8027340:	bd38      	pop	{r3, r4, r5, pc}
 8027342:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8027344:	b112      	cbz	r2, 802734c <_raise_r+0x1e>
 8027346:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802734a:	b94b      	cbnz	r3, 8027360 <_raise_r+0x32>
 802734c:	4620      	mov	r0, r4
 802734e:	f000 f8bb 	bl	80274c8 <_getpid_r>
 8027352:	462a      	mov	r2, r5
 8027354:	4601      	mov	r1, r0
 8027356:	4620      	mov	r0, r4
 8027358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802735c:	f000 b8a2 	b.w	80274a4 <_kill_r>
 8027360:	2b01      	cmp	r3, #1
 8027362:	d00a      	beq.n	802737a <_raise_r+0x4c>
 8027364:	1c59      	adds	r1, r3, #1
 8027366:	d103      	bne.n	8027370 <_raise_r+0x42>
 8027368:	2316      	movs	r3, #22
 802736a:	6003      	str	r3, [r0, #0]
 802736c:	2001      	movs	r0, #1
 802736e:	e7e7      	b.n	8027340 <_raise_r+0x12>
 8027370:	2400      	movs	r4, #0
 8027372:	4628      	mov	r0, r5
 8027374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027378:	4798      	blx	r3
 802737a:	2000      	movs	r0, #0
 802737c:	e7e0      	b.n	8027340 <_raise_r+0x12>
	...

08027380 <raise>:
 8027380:	4b02      	ldr	r3, [pc, #8]	; (802738c <raise+0xc>)
 8027382:	4601      	mov	r1, r0
 8027384:	6818      	ldr	r0, [r3, #0]
 8027386:	f7ff bfd2 	b.w	802732e <_raise_r>
 802738a:	bf00      	nop
 802738c:	200000fc 	.word	0x200000fc

08027390 <_close_r>:
 8027390:	b538      	push	{r3, r4, r5, lr}
 8027392:	2300      	movs	r3, #0
 8027394:	4d05      	ldr	r5, [pc, #20]	; (80273ac <_close_r+0x1c>)
 8027396:	4604      	mov	r4, r0
 8027398:	4608      	mov	r0, r1
 802739a:	602b      	str	r3, [r5, #0]
 802739c:	f7da f929 	bl	80015f2 <_close>
 80273a0:	1c43      	adds	r3, r0, #1
 80273a2:	d102      	bne.n	80273aa <_close_r+0x1a>
 80273a4:	682b      	ldr	r3, [r5, #0]
 80273a6:	b103      	cbz	r3, 80273aa <_close_r+0x1a>
 80273a8:	6023      	str	r3, [r4, #0]
 80273aa:	bd38      	pop	{r3, r4, r5, pc}
 80273ac:	2000fe24 	.word	0x2000fe24

080273b0 <_reclaim_reent>:
 80273b0:	4b29      	ldr	r3, [pc, #164]	; (8027458 <_reclaim_reent+0xa8>)
 80273b2:	681b      	ldr	r3, [r3, #0]
 80273b4:	4283      	cmp	r3, r0
 80273b6:	b570      	push	{r4, r5, r6, lr}
 80273b8:	4604      	mov	r4, r0
 80273ba:	d04b      	beq.n	8027454 <_reclaim_reent+0xa4>
 80273bc:	69c3      	ldr	r3, [r0, #28]
 80273be:	b143      	cbz	r3, 80273d2 <_reclaim_reent+0x22>
 80273c0:	68db      	ldr	r3, [r3, #12]
 80273c2:	2b00      	cmp	r3, #0
 80273c4:	d144      	bne.n	8027450 <_reclaim_reent+0xa0>
 80273c6:	69e3      	ldr	r3, [r4, #28]
 80273c8:	6819      	ldr	r1, [r3, #0]
 80273ca:	b111      	cbz	r1, 80273d2 <_reclaim_reent+0x22>
 80273cc:	4620      	mov	r0, r4
 80273ce:	f000 f939 	bl	8027644 <_free_r>
 80273d2:	6961      	ldr	r1, [r4, #20]
 80273d4:	b111      	cbz	r1, 80273dc <_reclaim_reent+0x2c>
 80273d6:	4620      	mov	r0, r4
 80273d8:	f000 f934 	bl	8027644 <_free_r>
 80273dc:	69e1      	ldr	r1, [r4, #28]
 80273de:	b111      	cbz	r1, 80273e6 <_reclaim_reent+0x36>
 80273e0:	4620      	mov	r0, r4
 80273e2:	f000 f92f 	bl	8027644 <_free_r>
 80273e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80273e8:	b111      	cbz	r1, 80273f0 <_reclaim_reent+0x40>
 80273ea:	4620      	mov	r0, r4
 80273ec:	f000 f92a 	bl	8027644 <_free_r>
 80273f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80273f2:	b111      	cbz	r1, 80273fa <_reclaim_reent+0x4a>
 80273f4:	4620      	mov	r0, r4
 80273f6:	f000 f925 	bl	8027644 <_free_r>
 80273fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80273fc:	b111      	cbz	r1, 8027404 <_reclaim_reent+0x54>
 80273fe:	4620      	mov	r0, r4
 8027400:	f000 f920 	bl	8027644 <_free_r>
 8027404:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8027406:	b111      	cbz	r1, 802740e <_reclaim_reent+0x5e>
 8027408:	4620      	mov	r0, r4
 802740a:	f000 f91b 	bl	8027644 <_free_r>
 802740e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8027410:	b111      	cbz	r1, 8027418 <_reclaim_reent+0x68>
 8027412:	4620      	mov	r0, r4
 8027414:	f000 f916 	bl	8027644 <_free_r>
 8027418:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802741a:	b111      	cbz	r1, 8027422 <_reclaim_reent+0x72>
 802741c:	4620      	mov	r0, r4
 802741e:	f000 f911 	bl	8027644 <_free_r>
 8027422:	6a23      	ldr	r3, [r4, #32]
 8027424:	b1b3      	cbz	r3, 8027454 <_reclaim_reent+0xa4>
 8027426:	4620      	mov	r0, r4
 8027428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802742c:	4718      	bx	r3
 802742e:	5949      	ldr	r1, [r1, r5]
 8027430:	b941      	cbnz	r1, 8027444 <_reclaim_reent+0x94>
 8027432:	3504      	adds	r5, #4
 8027434:	69e3      	ldr	r3, [r4, #28]
 8027436:	2d80      	cmp	r5, #128	; 0x80
 8027438:	68d9      	ldr	r1, [r3, #12]
 802743a:	d1f8      	bne.n	802742e <_reclaim_reent+0x7e>
 802743c:	4620      	mov	r0, r4
 802743e:	f000 f901 	bl	8027644 <_free_r>
 8027442:	e7c0      	b.n	80273c6 <_reclaim_reent+0x16>
 8027444:	680e      	ldr	r6, [r1, #0]
 8027446:	4620      	mov	r0, r4
 8027448:	f000 f8fc 	bl	8027644 <_free_r>
 802744c:	4631      	mov	r1, r6
 802744e:	e7ef      	b.n	8027430 <_reclaim_reent+0x80>
 8027450:	2500      	movs	r5, #0
 8027452:	e7ef      	b.n	8027434 <_reclaim_reent+0x84>
 8027454:	bd70      	pop	{r4, r5, r6, pc}
 8027456:	bf00      	nop
 8027458:	200000fc 	.word	0x200000fc

0802745c <_lseek_r>:
 802745c:	b538      	push	{r3, r4, r5, lr}
 802745e:	4604      	mov	r4, r0
 8027460:	4d06      	ldr	r5, [pc, #24]	; (802747c <_lseek_r+0x20>)
 8027462:	4608      	mov	r0, r1
 8027464:	4611      	mov	r1, r2
 8027466:	2200      	movs	r2, #0
 8027468:	602a      	str	r2, [r5, #0]
 802746a:	461a      	mov	r2, r3
 802746c:	f7da f8e8 	bl	8001640 <_lseek>
 8027470:	1c43      	adds	r3, r0, #1
 8027472:	d102      	bne.n	802747a <_lseek_r+0x1e>
 8027474:	682b      	ldr	r3, [r5, #0]
 8027476:	b103      	cbz	r3, 802747a <_lseek_r+0x1e>
 8027478:	6023      	str	r3, [r4, #0]
 802747a:	bd38      	pop	{r3, r4, r5, pc}
 802747c:	2000fe24 	.word	0x2000fe24

08027480 <_read_r>:
 8027480:	b538      	push	{r3, r4, r5, lr}
 8027482:	4604      	mov	r4, r0
 8027484:	4d06      	ldr	r5, [pc, #24]	; (80274a0 <_read_r+0x20>)
 8027486:	4608      	mov	r0, r1
 8027488:	4611      	mov	r1, r2
 802748a:	2200      	movs	r2, #0
 802748c:	602a      	str	r2, [r5, #0]
 802748e:	461a      	mov	r2, r3
 8027490:	f7da f876 	bl	8001580 <_read>
 8027494:	1c43      	adds	r3, r0, #1
 8027496:	d102      	bne.n	802749e <_read_r+0x1e>
 8027498:	682b      	ldr	r3, [r5, #0]
 802749a:	b103      	cbz	r3, 802749e <_read_r+0x1e>
 802749c:	6023      	str	r3, [r4, #0]
 802749e:	bd38      	pop	{r3, r4, r5, pc}
 80274a0:	2000fe24 	.word	0x2000fe24

080274a4 <_kill_r>:
 80274a4:	b538      	push	{r3, r4, r5, lr}
 80274a6:	2300      	movs	r3, #0
 80274a8:	4d06      	ldr	r5, [pc, #24]	; (80274c4 <_kill_r+0x20>)
 80274aa:	4604      	mov	r4, r0
 80274ac:	4608      	mov	r0, r1
 80274ae:	4611      	mov	r1, r2
 80274b0:	602b      	str	r3, [r5, #0]
 80274b2:	f7da f84b 	bl	800154c <_kill>
 80274b6:	1c43      	adds	r3, r0, #1
 80274b8:	d102      	bne.n	80274c0 <_kill_r+0x1c>
 80274ba:	682b      	ldr	r3, [r5, #0]
 80274bc:	b103      	cbz	r3, 80274c0 <_kill_r+0x1c>
 80274be:	6023      	str	r3, [r4, #0]
 80274c0:	bd38      	pop	{r3, r4, r5, pc}
 80274c2:	bf00      	nop
 80274c4:	2000fe24 	.word	0x2000fe24

080274c8 <_getpid_r>:
 80274c8:	f7da b838 	b.w	800153c <_getpid>

080274cc <_sbrk_r>:
 80274cc:	b538      	push	{r3, r4, r5, lr}
 80274ce:	2300      	movs	r3, #0
 80274d0:	4d05      	ldr	r5, [pc, #20]	; (80274e8 <_sbrk_r+0x1c>)
 80274d2:	4604      	mov	r4, r0
 80274d4:	4608      	mov	r0, r1
 80274d6:	602b      	str	r3, [r5, #0]
 80274d8:	f7da f8c0 	bl	800165c <_sbrk>
 80274dc:	1c43      	adds	r3, r0, #1
 80274de:	d102      	bne.n	80274e6 <_sbrk_r+0x1a>
 80274e0:	682b      	ldr	r3, [r5, #0]
 80274e2:	b103      	cbz	r3, 80274e6 <_sbrk_r+0x1a>
 80274e4:	6023      	str	r3, [r4, #0]
 80274e6:	bd38      	pop	{r3, r4, r5, pc}
 80274e8:	2000fe24 	.word	0x2000fe24

080274ec <_write_r>:
 80274ec:	b538      	push	{r3, r4, r5, lr}
 80274ee:	4604      	mov	r4, r0
 80274f0:	4d06      	ldr	r5, [pc, #24]	; (802750c <_write_r+0x20>)
 80274f2:	4608      	mov	r0, r1
 80274f4:	4611      	mov	r1, r2
 80274f6:	2200      	movs	r2, #0
 80274f8:	602a      	str	r2, [r5, #0]
 80274fa:	461a      	mov	r2, r3
 80274fc:	f7da f85d 	bl	80015ba <_write>
 8027500:	1c43      	adds	r3, r0, #1
 8027502:	d102      	bne.n	802750a <_write_r+0x1e>
 8027504:	682b      	ldr	r3, [r5, #0]
 8027506:	b103      	cbz	r3, 802750a <_write_r+0x1e>
 8027508:	6023      	str	r3, [r4, #0]
 802750a:	bd38      	pop	{r3, r4, r5, pc}
 802750c:	2000fe24 	.word	0x2000fe24

08027510 <__errno>:
 8027510:	4b01      	ldr	r3, [pc, #4]	; (8027518 <__errno+0x8>)
 8027512:	6818      	ldr	r0, [r3, #0]
 8027514:	4770      	bx	lr
 8027516:	bf00      	nop
 8027518:	200000fc 	.word	0x200000fc

0802751c <__libc_init_array>:
 802751c:	b570      	push	{r4, r5, r6, lr}
 802751e:	4d0d      	ldr	r5, [pc, #52]	; (8027554 <__libc_init_array+0x38>)
 8027520:	2600      	movs	r6, #0
 8027522:	4c0d      	ldr	r4, [pc, #52]	; (8027558 <__libc_init_array+0x3c>)
 8027524:	1b64      	subs	r4, r4, r5
 8027526:	10a4      	asrs	r4, r4, #2
 8027528:	42a6      	cmp	r6, r4
 802752a:	d109      	bne.n	8027540 <__libc_init_array+0x24>
 802752c:	4d0b      	ldr	r5, [pc, #44]	; (802755c <__libc_init_array+0x40>)
 802752e:	2600      	movs	r6, #0
 8027530:	4c0b      	ldr	r4, [pc, #44]	; (8027560 <__libc_init_array+0x44>)
 8027532:	f000 fd7d 	bl	8028030 <_init>
 8027536:	1b64      	subs	r4, r4, r5
 8027538:	10a4      	asrs	r4, r4, #2
 802753a:	42a6      	cmp	r6, r4
 802753c:	d105      	bne.n	802754a <__libc_init_array+0x2e>
 802753e:	bd70      	pop	{r4, r5, r6, pc}
 8027540:	f855 3b04 	ldr.w	r3, [r5], #4
 8027544:	3601      	adds	r6, #1
 8027546:	4798      	blx	r3
 8027548:	e7ee      	b.n	8027528 <__libc_init_array+0xc>
 802754a:	f855 3b04 	ldr.w	r3, [r5], #4
 802754e:	3601      	adds	r6, #1
 8027550:	4798      	blx	r3
 8027552:	e7f2      	b.n	802753a <__libc_init_array+0x1e>
 8027554:	0804200c 	.word	0x0804200c
 8027558:	0804200c 	.word	0x0804200c
 802755c:	0804200c 	.word	0x0804200c
 8027560:	08042024 	.word	0x08042024

08027564 <__retarget_lock_init_recursive>:
 8027564:	4770      	bx	lr

08027566 <__retarget_lock_acquire_recursive>:
 8027566:	4770      	bx	lr

08027568 <__retarget_lock_release_recursive>:
 8027568:	4770      	bx	lr

0802756a <memcpy>:
 802756a:	440a      	add	r2, r1
 802756c:	1e43      	subs	r3, r0, #1
 802756e:	4291      	cmp	r1, r2
 8027570:	d100      	bne.n	8027574 <memcpy+0xa>
 8027572:	4770      	bx	lr
 8027574:	b510      	push	{r4, lr}
 8027576:	f811 4b01 	ldrb.w	r4, [r1], #1
 802757a:	4291      	cmp	r1, r2
 802757c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027580:	d1f9      	bne.n	8027576 <memcpy+0xc>
 8027582:	bd10      	pop	{r4, pc}

08027584 <__register_exitproc>:
 8027584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027588:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8027640 <__register_exitproc+0xbc>
 802758c:	4606      	mov	r6, r0
 802758e:	461f      	mov	r7, r3
 8027590:	460d      	mov	r5, r1
 8027592:	f8d8 0000 	ldr.w	r0, [r8]
 8027596:	4691      	mov	r9, r2
 8027598:	f7ff ffe5 	bl	8027566 <__retarget_lock_acquire_recursive>
 802759c:	4b24      	ldr	r3, [pc, #144]	; (8027630 <__register_exitproc+0xac>)
 802759e:	681c      	ldr	r4, [r3, #0]
 80275a0:	b934      	cbnz	r4, 80275b0 <__register_exitproc+0x2c>
 80275a2:	4c24      	ldr	r4, [pc, #144]	; (8027634 <__register_exitproc+0xb0>)
 80275a4:	601c      	str	r4, [r3, #0]
 80275a6:	4b24      	ldr	r3, [pc, #144]	; (8027638 <__register_exitproc+0xb4>)
 80275a8:	b113      	cbz	r3, 80275b0 <__register_exitproc+0x2c>
 80275aa:	681b      	ldr	r3, [r3, #0]
 80275ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80275b0:	6863      	ldr	r3, [r4, #4]
 80275b2:	2b1f      	cmp	r3, #31
 80275b4:	dd07      	ble.n	80275c6 <__register_exitproc+0x42>
 80275b6:	f8d8 0000 	ldr.w	r0, [r8]
 80275ba:	f7ff ffd5 	bl	8027568 <__retarget_lock_release_recursive>
 80275be:	f04f 30ff 	mov.w	r0, #4294967295
 80275c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80275c6:	b33e      	cbz	r6, 8027618 <__register_exitproc+0x94>
 80275c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80275cc:	b968      	cbnz	r0, 80275ea <__register_exitproc+0x66>
 80275ce:	4b1b      	ldr	r3, [pc, #108]	; (802763c <__register_exitproc+0xb8>)
 80275d0:	2b00      	cmp	r3, #0
 80275d2:	d0f0      	beq.n	80275b6 <__register_exitproc+0x32>
 80275d4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80275d8:	f7ff fcc0 	bl	8026f5c <malloc>
 80275dc:	2800      	cmp	r0, #0
 80275de:	d0ea      	beq.n	80275b6 <__register_exitproc+0x32>
 80275e0:	2300      	movs	r3, #0
 80275e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80275e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80275ea:	6863      	ldr	r3, [r4, #4]
 80275ec:	2201      	movs	r2, #1
 80275ee:	2e02      	cmp	r6, #2
 80275f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80275f4:	fa02 f203 	lsl.w	r2, r2, r3
 80275f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80275fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027600:	ea43 0302 	orr.w	r3, r3, r2
 8027604:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8027608:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802760c:	bf02      	ittt	eq
 802760e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8027612:	4313      	orreq	r3, r2
 8027614:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8027618:	6863      	ldr	r3, [r4, #4]
 802761a:	f8d8 0000 	ldr.w	r0, [r8]
 802761e:	1c5a      	adds	r2, r3, #1
 8027620:	3302      	adds	r3, #2
 8027622:	6062      	str	r2, [r4, #4]
 8027624:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8027628:	f7ff ff9e 	bl	8027568 <__retarget_lock_release_recursive>
 802762c:	2000      	movs	r0, #0
 802762e:	e7c8      	b.n	80275c2 <__register_exitproc+0x3e>
 8027630:	2000feb8 	.word	0x2000feb8
 8027634:	2000fe2c 	.word	0x2000fe2c
 8027638:	0802a3c8 	.word	0x0802a3c8
 802763c:	08026f5d 	.word	0x08026f5d
 8027640:	20000100 	.word	0x20000100

08027644 <_free_r>:
 8027644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027646:	2900      	cmp	r1, #0
 8027648:	d043      	beq.n	80276d2 <_free_r+0x8e>
 802764a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802764e:	1f0c      	subs	r4, r1, #4
 8027650:	9001      	str	r0, [sp, #4]
 8027652:	2b00      	cmp	r3, #0
 8027654:	bfb8      	it	lt
 8027656:	18e4      	addlt	r4, r4, r3
 8027658:	f7ff fd30 	bl	80270bc <__malloc_lock>
 802765c:	4a1e      	ldr	r2, [pc, #120]	; (80276d8 <_free_r+0x94>)
 802765e:	9801      	ldr	r0, [sp, #4]
 8027660:	6813      	ldr	r3, [r2, #0]
 8027662:	b933      	cbnz	r3, 8027672 <_free_r+0x2e>
 8027664:	6063      	str	r3, [r4, #4]
 8027666:	6014      	str	r4, [r2, #0]
 8027668:	b003      	add	sp, #12
 802766a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802766e:	f7ff bd2b 	b.w	80270c8 <__malloc_unlock>
 8027672:	42a3      	cmp	r3, r4
 8027674:	d908      	bls.n	8027688 <_free_r+0x44>
 8027676:	6825      	ldr	r5, [r4, #0]
 8027678:	1961      	adds	r1, r4, r5
 802767a:	428b      	cmp	r3, r1
 802767c:	bf01      	itttt	eq
 802767e:	6819      	ldreq	r1, [r3, #0]
 8027680:	685b      	ldreq	r3, [r3, #4]
 8027682:	1949      	addeq	r1, r1, r5
 8027684:	6021      	streq	r1, [r4, #0]
 8027686:	e7ed      	b.n	8027664 <_free_r+0x20>
 8027688:	461a      	mov	r2, r3
 802768a:	685b      	ldr	r3, [r3, #4]
 802768c:	b10b      	cbz	r3, 8027692 <_free_r+0x4e>
 802768e:	42a3      	cmp	r3, r4
 8027690:	d9fa      	bls.n	8027688 <_free_r+0x44>
 8027692:	6811      	ldr	r1, [r2, #0]
 8027694:	1855      	adds	r5, r2, r1
 8027696:	42a5      	cmp	r5, r4
 8027698:	d10b      	bne.n	80276b2 <_free_r+0x6e>
 802769a:	6824      	ldr	r4, [r4, #0]
 802769c:	4421      	add	r1, r4
 802769e:	1854      	adds	r4, r2, r1
 80276a0:	6011      	str	r1, [r2, #0]
 80276a2:	42a3      	cmp	r3, r4
 80276a4:	d1e0      	bne.n	8027668 <_free_r+0x24>
 80276a6:	681c      	ldr	r4, [r3, #0]
 80276a8:	685b      	ldr	r3, [r3, #4]
 80276aa:	440c      	add	r4, r1
 80276ac:	6053      	str	r3, [r2, #4]
 80276ae:	6014      	str	r4, [r2, #0]
 80276b0:	e7da      	b.n	8027668 <_free_r+0x24>
 80276b2:	d902      	bls.n	80276ba <_free_r+0x76>
 80276b4:	230c      	movs	r3, #12
 80276b6:	6003      	str	r3, [r0, #0]
 80276b8:	e7d6      	b.n	8027668 <_free_r+0x24>
 80276ba:	6825      	ldr	r5, [r4, #0]
 80276bc:	1961      	adds	r1, r4, r5
 80276be:	428b      	cmp	r3, r1
 80276c0:	bf02      	ittt	eq
 80276c2:	6819      	ldreq	r1, [r3, #0]
 80276c4:	685b      	ldreq	r3, [r3, #4]
 80276c6:	1949      	addeq	r1, r1, r5
 80276c8:	6063      	str	r3, [r4, #4]
 80276ca:	bf08      	it	eq
 80276cc:	6021      	streq	r1, [r4, #0]
 80276ce:	6054      	str	r4, [r2, #4]
 80276d0:	e7ca      	b.n	8027668 <_free_r+0x24>
 80276d2:	b003      	add	sp, #12
 80276d4:	bd30      	pop	{r4, r5, pc}
 80276d6:	bf00      	nop
 80276d8:	2000fce0 	.word	0x2000fce0

080276dc <__sfputc_r>:
 80276dc:	6893      	ldr	r3, [r2, #8]
 80276de:	3b01      	subs	r3, #1
 80276e0:	2b00      	cmp	r3, #0
 80276e2:	6093      	str	r3, [r2, #8]
 80276e4:	b410      	push	{r4}
 80276e6:	da08      	bge.n	80276fa <__sfputc_r+0x1e>
 80276e8:	6994      	ldr	r4, [r2, #24]
 80276ea:	42a3      	cmp	r3, r4
 80276ec:	db01      	blt.n	80276f2 <__sfputc_r+0x16>
 80276ee:	290a      	cmp	r1, #10
 80276f0:	d103      	bne.n	80276fa <__sfputc_r+0x1e>
 80276f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80276f6:	f000 bb73 	b.w	8027de0 <__swbuf_r>
 80276fa:	6813      	ldr	r3, [r2, #0]
 80276fc:	1c58      	adds	r0, r3, #1
 80276fe:	6010      	str	r0, [r2, #0]
 8027700:	4608      	mov	r0, r1
 8027702:	7019      	strb	r1, [r3, #0]
 8027704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027708:	4770      	bx	lr

0802770a <__sfputs_r>:
 802770a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802770c:	4606      	mov	r6, r0
 802770e:	460f      	mov	r7, r1
 8027710:	4614      	mov	r4, r2
 8027712:	18d5      	adds	r5, r2, r3
 8027714:	42ac      	cmp	r4, r5
 8027716:	d101      	bne.n	802771c <__sfputs_r+0x12>
 8027718:	2000      	movs	r0, #0
 802771a:	e007      	b.n	802772c <__sfputs_r+0x22>
 802771c:	463a      	mov	r2, r7
 802771e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027722:	4630      	mov	r0, r6
 8027724:	f7ff ffda 	bl	80276dc <__sfputc_r>
 8027728:	1c43      	adds	r3, r0, #1
 802772a:	d1f3      	bne.n	8027714 <__sfputs_r+0xa>
 802772c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027730 <_vfiprintf_r>:
 8027730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027734:	460d      	mov	r5, r1
 8027736:	b09d      	sub	sp, #116	; 0x74
 8027738:	4614      	mov	r4, r2
 802773a:	4698      	mov	r8, r3
 802773c:	4606      	mov	r6, r0
 802773e:	b118      	cbz	r0, 8027748 <_vfiprintf_r+0x18>
 8027740:	6a03      	ldr	r3, [r0, #32]
 8027742:	b90b      	cbnz	r3, 8027748 <_vfiprintf_r+0x18>
 8027744:	f7ff fd60 	bl	8027208 <__sinit>
 8027748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802774a:	07d9      	lsls	r1, r3, #31
 802774c:	d405      	bmi.n	802775a <_vfiprintf_r+0x2a>
 802774e:	89ab      	ldrh	r3, [r5, #12]
 8027750:	059a      	lsls	r2, r3, #22
 8027752:	d402      	bmi.n	802775a <_vfiprintf_r+0x2a>
 8027754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027756:	f7ff ff06 	bl	8027566 <__retarget_lock_acquire_recursive>
 802775a:	89ab      	ldrh	r3, [r5, #12]
 802775c:	071b      	lsls	r3, r3, #28
 802775e:	d501      	bpl.n	8027764 <_vfiprintf_r+0x34>
 8027760:	692b      	ldr	r3, [r5, #16]
 8027762:	b99b      	cbnz	r3, 802778c <_vfiprintf_r+0x5c>
 8027764:	4629      	mov	r1, r5
 8027766:	4630      	mov	r0, r6
 8027768:	f000 fb78 	bl	8027e5c <__swsetup_r>
 802776c:	b170      	cbz	r0, 802778c <_vfiprintf_r+0x5c>
 802776e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027770:	07dc      	lsls	r4, r3, #31
 8027772:	d504      	bpl.n	802777e <_vfiprintf_r+0x4e>
 8027774:	f04f 30ff 	mov.w	r0, #4294967295
 8027778:	b01d      	add	sp, #116	; 0x74
 802777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802777e:	89ab      	ldrh	r3, [r5, #12]
 8027780:	0598      	lsls	r0, r3, #22
 8027782:	d4f7      	bmi.n	8027774 <_vfiprintf_r+0x44>
 8027784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027786:	f7ff feef 	bl	8027568 <__retarget_lock_release_recursive>
 802778a:	e7f3      	b.n	8027774 <_vfiprintf_r+0x44>
 802778c:	2300      	movs	r3, #0
 802778e:	f8cd 800c 	str.w	r8, [sp, #12]
 8027792:	f04f 0901 	mov.w	r9, #1
 8027796:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8027950 <_vfiprintf_r+0x220>
 802779a:	9309      	str	r3, [sp, #36]	; 0x24
 802779c:	2320      	movs	r3, #32
 802779e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80277a2:	2330      	movs	r3, #48	; 0x30
 80277a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80277a8:	4623      	mov	r3, r4
 80277aa:	469a      	mov	sl, r3
 80277ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80277b0:	b10a      	cbz	r2, 80277b6 <_vfiprintf_r+0x86>
 80277b2:	2a25      	cmp	r2, #37	; 0x25
 80277b4:	d1f9      	bne.n	80277aa <_vfiprintf_r+0x7a>
 80277b6:	ebba 0b04 	subs.w	fp, sl, r4
 80277ba:	d00b      	beq.n	80277d4 <_vfiprintf_r+0xa4>
 80277bc:	465b      	mov	r3, fp
 80277be:	4622      	mov	r2, r4
 80277c0:	4629      	mov	r1, r5
 80277c2:	4630      	mov	r0, r6
 80277c4:	f7ff ffa1 	bl	802770a <__sfputs_r>
 80277c8:	3001      	adds	r0, #1
 80277ca:	f000 80a9 	beq.w	8027920 <_vfiprintf_r+0x1f0>
 80277ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80277d0:	445a      	add	r2, fp
 80277d2:	9209      	str	r2, [sp, #36]	; 0x24
 80277d4:	f89a 3000 	ldrb.w	r3, [sl]
 80277d8:	2b00      	cmp	r3, #0
 80277da:	f000 80a1 	beq.w	8027920 <_vfiprintf_r+0x1f0>
 80277de:	2300      	movs	r3, #0
 80277e0:	f04f 32ff 	mov.w	r2, #4294967295
 80277e4:	f10a 0a01 	add.w	sl, sl, #1
 80277e8:	9304      	str	r3, [sp, #16]
 80277ea:	9307      	str	r3, [sp, #28]
 80277ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80277f0:	931a      	str	r3, [sp, #104]	; 0x68
 80277f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80277f6:	4654      	mov	r4, sl
 80277f8:	2205      	movs	r2, #5
 80277fa:	4855      	ldr	r0, [pc, #340]	; (8027950 <_vfiprintf_r+0x220>)
 80277fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027800:	f000 fb84 	bl	8027f0c <memchr>
 8027804:	9a04      	ldr	r2, [sp, #16]
 8027806:	b9d8      	cbnz	r0, 8027840 <_vfiprintf_r+0x110>
 8027808:	06d1      	lsls	r1, r2, #27
 802780a:	bf44      	itt	mi
 802780c:	2320      	movmi	r3, #32
 802780e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027812:	0713      	lsls	r3, r2, #28
 8027814:	bf44      	itt	mi
 8027816:	232b      	movmi	r3, #43	; 0x2b
 8027818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802781c:	f89a 3000 	ldrb.w	r3, [sl]
 8027820:	2b2a      	cmp	r3, #42	; 0x2a
 8027822:	d015      	beq.n	8027850 <_vfiprintf_r+0x120>
 8027824:	9a07      	ldr	r2, [sp, #28]
 8027826:	4654      	mov	r4, sl
 8027828:	2000      	movs	r0, #0
 802782a:	f04f 0c0a 	mov.w	ip, #10
 802782e:	4621      	mov	r1, r4
 8027830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027834:	3b30      	subs	r3, #48	; 0x30
 8027836:	2b09      	cmp	r3, #9
 8027838:	d94d      	bls.n	80278d6 <_vfiprintf_r+0x1a6>
 802783a:	b1b0      	cbz	r0, 802786a <_vfiprintf_r+0x13a>
 802783c:	9207      	str	r2, [sp, #28]
 802783e:	e014      	b.n	802786a <_vfiprintf_r+0x13a>
 8027840:	eba0 0308 	sub.w	r3, r0, r8
 8027844:	46a2      	mov	sl, r4
 8027846:	fa09 f303 	lsl.w	r3, r9, r3
 802784a:	4313      	orrs	r3, r2
 802784c:	9304      	str	r3, [sp, #16]
 802784e:	e7d2      	b.n	80277f6 <_vfiprintf_r+0xc6>
 8027850:	9b03      	ldr	r3, [sp, #12]
 8027852:	1d19      	adds	r1, r3, #4
 8027854:	681b      	ldr	r3, [r3, #0]
 8027856:	2b00      	cmp	r3, #0
 8027858:	9103      	str	r1, [sp, #12]
 802785a:	bfbb      	ittet	lt
 802785c:	425b      	neglt	r3, r3
 802785e:	f042 0202 	orrlt.w	r2, r2, #2
 8027862:	9307      	strge	r3, [sp, #28]
 8027864:	9307      	strlt	r3, [sp, #28]
 8027866:	bfb8      	it	lt
 8027868:	9204      	strlt	r2, [sp, #16]
 802786a:	7823      	ldrb	r3, [r4, #0]
 802786c:	2b2e      	cmp	r3, #46	; 0x2e
 802786e:	d10c      	bne.n	802788a <_vfiprintf_r+0x15a>
 8027870:	7863      	ldrb	r3, [r4, #1]
 8027872:	2b2a      	cmp	r3, #42	; 0x2a
 8027874:	d134      	bne.n	80278e0 <_vfiprintf_r+0x1b0>
 8027876:	9b03      	ldr	r3, [sp, #12]
 8027878:	3402      	adds	r4, #2
 802787a:	1d1a      	adds	r2, r3, #4
 802787c:	681b      	ldr	r3, [r3, #0]
 802787e:	2b00      	cmp	r3, #0
 8027880:	9203      	str	r2, [sp, #12]
 8027882:	bfb8      	it	lt
 8027884:	f04f 33ff 	movlt.w	r3, #4294967295
 8027888:	9305      	str	r3, [sp, #20]
 802788a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8027960 <_vfiprintf_r+0x230>
 802788e:	2203      	movs	r2, #3
 8027890:	7821      	ldrb	r1, [r4, #0]
 8027892:	4650      	mov	r0, sl
 8027894:	f000 fb3a 	bl	8027f0c <memchr>
 8027898:	b138      	cbz	r0, 80278aa <_vfiprintf_r+0x17a>
 802789a:	eba0 000a 	sub.w	r0, r0, sl
 802789e:	2240      	movs	r2, #64	; 0x40
 80278a0:	9b04      	ldr	r3, [sp, #16]
 80278a2:	3401      	adds	r4, #1
 80278a4:	4082      	lsls	r2, r0
 80278a6:	4313      	orrs	r3, r2
 80278a8:	9304      	str	r3, [sp, #16]
 80278aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80278ae:	2206      	movs	r2, #6
 80278b0:	4828      	ldr	r0, [pc, #160]	; (8027954 <_vfiprintf_r+0x224>)
 80278b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80278b6:	f000 fb29 	bl	8027f0c <memchr>
 80278ba:	2800      	cmp	r0, #0
 80278bc:	d03f      	beq.n	802793e <_vfiprintf_r+0x20e>
 80278be:	4b26      	ldr	r3, [pc, #152]	; (8027958 <_vfiprintf_r+0x228>)
 80278c0:	bb1b      	cbnz	r3, 802790a <_vfiprintf_r+0x1da>
 80278c2:	9b03      	ldr	r3, [sp, #12]
 80278c4:	3307      	adds	r3, #7
 80278c6:	f023 0307 	bic.w	r3, r3, #7
 80278ca:	3308      	adds	r3, #8
 80278cc:	9303      	str	r3, [sp, #12]
 80278ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80278d0:	443b      	add	r3, r7
 80278d2:	9309      	str	r3, [sp, #36]	; 0x24
 80278d4:	e768      	b.n	80277a8 <_vfiprintf_r+0x78>
 80278d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80278da:	460c      	mov	r4, r1
 80278dc:	2001      	movs	r0, #1
 80278de:	e7a6      	b.n	802782e <_vfiprintf_r+0xfe>
 80278e0:	2300      	movs	r3, #0
 80278e2:	3401      	adds	r4, #1
 80278e4:	f04f 0c0a 	mov.w	ip, #10
 80278e8:	4619      	mov	r1, r3
 80278ea:	9305      	str	r3, [sp, #20]
 80278ec:	4620      	mov	r0, r4
 80278ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80278f2:	3a30      	subs	r2, #48	; 0x30
 80278f4:	2a09      	cmp	r2, #9
 80278f6:	d903      	bls.n	8027900 <_vfiprintf_r+0x1d0>
 80278f8:	2b00      	cmp	r3, #0
 80278fa:	d0c6      	beq.n	802788a <_vfiprintf_r+0x15a>
 80278fc:	9105      	str	r1, [sp, #20]
 80278fe:	e7c4      	b.n	802788a <_vfiprintf_r+0x15a>
 8027900:	fb0c 2101 	mla	r1, ip, r1, r2
 8027904:	4604      	mov	r4, r0
 8027906:	2301      	movs	r3, #1
 8027908:	e7f0      	b.n	80278ec <_vfiprintf_r+0x1bc>
 802790a:	ab03      	add	r3, sp, #12
 802790c:	462a      	mov	r2, r5
 802790e:	a904      	add	r1, sp, #16
 8027910:	4630      	mov	r0, r6
 8027912:	9300      	str	r3, [sp, #0]
 8027914:	4b11      	ldr	r3, [pc, #68]	; (802795c <_vfiprintf_r+0x22c>)
 8027916:	f3af 8000 	nop.w
 802791a:	4607      	mov	r7, r0
 802791c:	1c78      	adds	r0, r7, #1
 802791e:	d1d6      	bne.n	80278ce <_vfiprintf_r+0x19e>
 8027920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027922:	07d9      	lsls	r1, r3, #31
 8027924:	d405      	bmi.n	8027932 <_vfiprintf_r+0x202>
 8027926:	89ab      	ldrh	r3, [r5, #12]
 8027928:	059a      	lsls	r2, r3, #22
 802792a:	d402      	bmi.n	8027932 <_vfiprintf_r+0x202>
 802792c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802792e:	f7ff fe1b 	bl	8027568 <__retarget_lock_release_recursive>
 8027932:	89ab      	ldrh	r3, [r5, #12]
 8027934:	065b      	lsls	r3, r3, #25
 8027936:	f53f af1d 	bmi.w	8027774 <_vfiprintf_r+0x44>
 802793a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802793c:	e71c      	b.n	8027778 <_vfiprintf_r+0x48>
 802793e:	ab03      	add	r3, sp, #12
 8027940:	462a      	mov	r2, r5
 8027942:	a904      	add	r1, sp, #16
 8027944:	4630      	mov	r0, r6
 8027946:	9300      	str	r3, [sp, #0]
 8027948:	4b04      	ldr	r3, [pc, #16]	; (802795c <_vfiprintf_r+0x22c>)
 802794a:	f000 f87d 	bl	8027a48 <_printf_i>
 802794e:	e7e4      	b.n	802791a <_vfiprintf_r+0x1ea>
 8027950:	0802a3cc 	.word	0x0802a3cc
 8027954:	0802a3d6 	.word	0x0802a3d6
 8027958:	00000000 	.word	0x00000000
 802795c:	0802770b 	.word	0x0802770b
 8027960:	0802a3d2 	.word	0x0802a3d2

08027964 <_printf_common>:
 8027964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027968:	4616      	mov	r6, r2
 802796a:	4699      	mov	r9, r3
 802796c:	688a      	ldr	r2, [r1, #8]
 802796e:	4607      	mov	r7, r0
 8027970:	690b      	ldr	r3, [r1, #16]
 8027972:	460c      	mov	r4, r1
 8027974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027978:	4293      	cmp	r3, r2
 802797a:	bfb8      	it	lt
 802797c:	4613      	movlt	r3, r2
 802797e:	6033      	str	r3, [r6, #0]
 8027980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027984:	b10a      	cbz	r2, 802798a <_printf_common+0x26>
 8027986:	3301      	adds	r3, #1
 8027988:	6033      	str	r3, [r6, #0]
 802798a:	6823      	ldr	r3, [r4, #0]
 802798c:	0699      	lsls	r1, r3, #26
 802798e:	bf42      	ittt	mi
 8027990:	6833      	ldrmi	r3, [r6, #0]
 8027992:	3302      	addmi	r3, #2
 8027994:	6033      	strmi	r3, [r6, #0]
 8027996:	6825      	ldr	r5, [r4, #0]
 8027998:	f015 0506 	ands.w	r5, r5, #6
 802799c:	d106      	bne.n	80279ac <_printf_common+0x48>
 802799e:	f104 0a19 	add.w	sl, r4, #25
 80279a2:	68e3      	ldr	r3, [r4, #12]
 80279a4:	6832      	ldr	r2, [r6, #0]
 80279a6:	1a9b      	subs	r3, r3, r2
 80279a8:	42ab      	cmp	r3, r5
 80279aa:	dc2b      	bgt.n	8027a04 <_printf_common+0xa0>
 80279ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80279b0:	1e13      	subs	r3, r2, #0
 80279b2:	6822      	ldr	r2, [r4, #0]
 80279b4:	bf18      	it	ne
 80279b6:	2301      	movne	r3, #1
 80279b8:	0692      	lsls	r2, r2, #26
 80279ba:	d430      	bmi.n	8027a1e <_printf_common+0xba>
 80279bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80279c0:	4649      	mov	r1, r9
 80279c2:	4638      	mov	r0, r7
 80279c4:	47c0      	blx	r8
 80279c6:	3001      	adds	r0, #1
 80279c8:	d023      	beq.n	8027a12 <_printf_common+0xae>
 80279ca:	6823      	ldr	r3, [r4, #0]
 80279cc:	341a      	adds	r4, #26
 80279ce:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80279d2:	f003 0306 	and.w	r3, r3, #6
 80279d6:	2b04      	cmp	r3, #4
 80279d8:	bf0a      	itet	eq
 80279da:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80279de:	2500      	movne	r5, #0
 80279e0:	6833      	ldreq	r3, [r6, #0]
 80279e2:	f04f 0600 	mov.w	r6, #0
 80279e6:	bf08      	it	eq
 80279e8:	1aed      	subeq	r5, r5, r3
 80279ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80279ee:	bf08      	it	eq
 80279f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80279f4:	4293      	cmp	r3, r2
 80279f6:	bfc4      	itt	gt
 80279f8:	1a9b      	subgt	r3, r3, r2
 80279fa:	18ed      	addgt	r5, r5, r3
 80279fc:	42b5      	cmp	r5, r6
 80279fe:	d11a      	bne.n	8027a36 <_printf_common+0xd2>
 8027a00:	2000      	movs	r0, #0
 8027a02:	e008      	b.n	8027a16 <_printf_common+0xb2>
 8027a04:	2301      	movs	r3, #1
 8027a06:	4652      	mov	r2, sl
 8027a08:	4649      	mov	r1, r9
 8027a0a:	4638      	mov	r0, r7
 8027a0c:	47c0      	blx	r8
 8027a0e:	3001      	adds	r0, #1
 8027a10:	d103      	bne.n	8027a1a <_printf_common+0xb6>
 8027a12:	f04f 30ff 	mov.w	r0, #4294967295
 8027a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027a1a:	3501      	adds	r5, #1
 8027a1c:	e7c1      	b.n	80279a2 <_printf_common+0x3e>
 8027a1e:	18e1      	adds	r1, r4, r3
 8027a20:	1c5a      	adds	r2, r3, #1
 8027a22:	2030      	movs	r0, #48	; 0x30
 8027a24:	3302      	adds	r3, #2
 8027a26:	4422      	add	r2, r4
 8027a28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027a34:	e7c2      	b.n	80279bc <_printf_common+0x58>
 8027a36:	2301      	movs	r3, #1
 8027a38:	4622      	mov	r2, r4
 8027a3a:	4649      	mov	r1, r9
 8027a3c:	4638      	mov	r0, r7
 8027a3e:	47c0      	blx	r8
 8027a40:	3001      	adds	r0, #1
 8027a42:	d0e6      	beq.n	8027a12 <_printf_common+0xae>
 8027a44:	3601      	adds	r6, #1
 8027a46:	e7d9      	b.n	80279fc <_printf_common+0x98>

08027a48 <_printf_i>:
 8027a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027a4c:	7e0f      	ldrb	r7, [r1, #24]
 8027a4e:	4691      	mov	r9, r2
 8027a50:	4680      	mov	r8, r0
 8027a52:	460c      	mov	r4, r1
 8027a54:	2f78      	cmp	r7, #120	; 0x78
 8027a56:	469a      	mov	sl, r3
 8027a58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8027a5e:	d807      	bhi.n	8027a70 <_printf_i+0x28>
 8027a60:	2f62      	cmp	r7, #98	; 0x62
 8027a62:	d80a      	bhi.n	8027a7a <_printf_i+0x32>
 8027a64:	2f00      	cmp	r7, #0
 8027a66:	f000 80d3 	beq.w	8027c10 <_printf_i+0x1c8>
 8027a6a:	2f58      	cmp	r7, #88	; 0x58
 8027a6c:	f000 80bf 	beq.w	8027bee <_printf_i+0x1a6>
 8027a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027a78:	e03a      	b.n	8027af0 <_printf_i+0xa8>
 8027a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027a7e:	2b15      	cmp	r3, #21
 8027a80:	d8f6      	bhi.n	8027a70 <_printf_i+0x28>
 8027a82:	a101      	add	r1, pc, #4	; (adr r1, 8027a88 <_printf_i+0x40>)
 8027a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027a88:	08027ae1 	.word	0x08027ae1
 8027a8c:	08027af5 	.word	0x08027af5
 8027a90:	08027a71 	.word	0x08027a71
 8027a94:	08027a71 	.word	0x08027a71
 8027a98:	08027a71 	.word	0x08027a71
 8027a9c:	08027a71 	.word	0x08027a71
 8027aa0:	08027af5 	.word	0x08027af5
 8027aa4:	08027a71 	.word	0x08027a71
 8027aa8:	08027a71 	.word	0x08027a71
 8027aac:	08027a71 	.word	0x08027a71
 8027ab0:	08027a71 	.word	0x08027a71
 8027ab4:	08027bf7 	.word	0x08027bf7
 8027ab8:	08027b21 	.word	0x08027b21
 8027abc:	08027bb3 	.word	0x08027bb3
 8027ac0:	08027a71 	.word	0x08027a71
 8027ac4:	08027a71 	.word	0x08027a71
 8027ac8:	08027c19 	.word	0x08027c19
 8027acc:	08027a71 	.word	0x08027a71
 8027ad0:	08027b21 	.word	0x08027b21
 8027ad4:	08027a71 	.word	0x08027a71
 8027ad8:	08027a71 	.word	0x08027a71
 8027adc:	08027bbb 	.word	0x08027bbb
 8027ae0:	682b      	ldr	r3, [r5, #0]
 8027ae2:	1d1a      	adds	r2, r3, #4
 8027ae4:	681b      	ldr	r3, [r3, #0]
 8027ae6:	602a      	str	r2, [r5, #0]
 8027ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027af0:	2301      	movs	r3, #1
 8027af2:	e09e      	b.n	8027c32 <_printf_i+0x1ea>
 8027af4:	6820      	ldr	r0, [r4, #0]
 8027af6:	682b      	ldr	r3, [r5, #0]
 8027af8:	0607      	lsls	r7, r0, #24
 8027afa:	f103 0104 	add.w	r1, r3, #4
 8027afe:	6029      	str	r1, [r5, #0]
 8027b00:	d501      	bpl.n	8027b06 <_printf_i+0xbe>
 8027b02:	681e      	ldr	r6, [r3, #0]
 8027b04:	e003      	b.n	8027b0e <_printf_i+0xc6>
 8027b06:	0646      	lsls	r6, r0, #25
 8027b08:	d5fb      	bpl.n	8027b02 <_printf_i+0xba>
 8027b0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8027b0e:	2e00      	cmp	r6, #0
 8027b10:	da03      	bge.n	8027b1a <_printf_i+0xd2>
 8027b12:	232d      	movs	r3, #45	; 0x2d
 8027b14:	4276      	negs	r6, r6
 8027b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027b1a:	4859      	ldr	r0, [pc, #356]	; (8027c80 <_printf_i+0x238>)
 8027b1c:	230a      	movs	r3, #10
 8027b1e:	e012      	b.n	8027b46 <_printf_i+0xfe>
 8027b20:	682b      	ldr	r3, [r5, #0]
 8027b22:	6820      	ldr	r0, [r4, #0]
 8027b24:	1d19      	adds	r1, r3, #4
 8027b26:	6029      	str	r1, [r5, #0]
 8027b28:	0605      	lsls	r5, r0, #24
 8027b2a:	d501      	bpl.n	8027b30 <_printf_i+0xe8>
 8027b2c:	681e      	ldr	r6, [r3, #0]
 8027b2e:	e002      	b.n	8027b36 <_printf_i+0xee>
 8027b30:	0641      	lsls	r1, r0, #25
 8027b32:	d5fb      	bpl.n	8027b2c <_printf_i+0xe4>
 8027b34:	881e      	ldrh	r6, [r3, #0]
 8027b36:	2f6f      	cmp	r7, #111	; 0x6f
 8027b38:	4851      	ldr	r0, [pc, #324]	; (8027c80 <_printf_i+0x238>)
 8027b3a:	bf0c      	ite	eq
 8027b3c:	2308      	moveq	r3, #8
 8027b3e:	230a      	movne	r3, #10
 8027b40:	2100      	movs	r1, #0
 8027b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027b46:	6865      	ldr	r5, [r4, #4]
 8027b48:	2d00      	cmp	r5, #0
 8027b4a:	60a5      	str	r5, [r4, #8]
 8027b4c:	bfa2      	ittt	ge
 8027b4e:	6821      	ldrge	r1, [r4, #0]
 8027b50:	f021 0104 	bicge.w	r1, r1, #4
 8027b54:	6021      	strge	r1, [r4, #0]
 8027b56:	b90e      	cbnz	r6, 8027b5c <_printf_i+0x114>
 8027b58:	2d00      	cmp	r5, #0
 8027b5a:	d04a      	beq.n	8027bf2 <_printf_i+0x1aa>
 8027b5c:	4615      	mov	r5, r2
 8027b5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8027b62:	fb03 6711 	mls	r7, r3, r1, r6
 8027b66:	5dc7      	ldrb	r7, [r0, r7]
 8027b68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027b6c:	4637      	mov	r7, r6
 8027b6e:	460e      	mov	r6, r1
 8027b70:	42bb      	cmp	r3, r7
 8027b72:	d9f4      	bls.n	8027b5e <_printf_i+0x116>
 8027b74:	2b08      	cmp	r3, #8
 8027b76:	d10b      	bne.n	8027b90 <_printf_i+0x148>
 8027b78:	6823      	ldr	r3, [r4, #0]
 8027b7a:	07de      	lsls	r6, r3, #31
 8027b7c:	d508      	bpl.n	8027b90 <_printf_i+0x148>
 8027b7e:	6923      	ldr	r3, [r4, #16]
 8027b80:	6861      	ldr	r1, [r4, #4]
 8027b82:	4299      	cmp	r1, r3
 8027b84:	bfde      	ittt	le
 8027b86:	2330      	movle	r3, #48	; 0x30
 8027b88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027b8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027b90:	1b52      	subs	r2, r2, r5
 8027b92:	6122      	str	r2, [r4, #16]
 8027b94:	464b      	mov	r3, r9
 8027b96:	aa03      	add	r2, sp, #12
 8027b98:	4621      	mov	r1, r4
 8027b9a:	4640      	mov	r0, r8
 8027b9c:	f8cd a000 	str.w	sl, [sp]
 8027ba0:	f7ff fee0 	bl	8027964 <_printf_common>
 8027ba4:	3001      	adds	r0, #1
 8027ba6:	d149      	bne.n	8027c3c <_printf_i+0x1f4>
 8027ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8027bac:	b004      	add	sp, #16
 8027bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027bb2:	6823      	ldr	r3, [r4, #0]
 8027bb4:	f043 0320 	orr.w	r3, r3, #32
 8027bb8:	6023      	str	r3, [r4, #0]
 8027bba:	2778      	movs	r7, #120	; 0x78
 8027bbc:	4831      	ldr	r0, [pc, #196]	; (8027c84 <_printf_i+0x23c>)
 8027bbe:	6823      	ldr	r3, [r4, #0]
 8027bc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8027bc4:	061f      	lsls	r7, r3, #24
 8027bc6:	6829      	ldr	r1, [r5, #0]
 8027bc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8027bcc:	d402      	bmi.n	8027bd4 <_printf_i+0x18c>
 8027bce:	065f      	lsls	r7, r3, #25
 8027bd0:	bf48      	it	mi
 8027bd2:	b2b6      	uxthmi	r6, r6
 8027bd4:	07df      	lsls	r7, r3, #31
 8027bd6:	6029      	str	r1, [r5, #0]
 8027bd8:	bf44      	itt	mi
 8027bda:	f043 0320 	orrmi.w	r3, r3, #32
 8027bde:	6023      	strmi	r3, [r4, #0]
 8027be0:	b91e      	cbnz	r6, 8027bea <_printf_i+0x1a2>
 8027be2:	6823      	ldr	r3, [r4, #0]
 8027be4:	f023 0320 	bic.w	r3, r3, #32
 8027be8:	6023      	str	r3, [r4, #0]
 8027bea:	2310      	movs	r3, #16
 8027bec:	e7a8      	b.n	8027b40 <_printf_i+0xf8>
 8027bee:	4824      	ldr	r0, [pc, #144]	; (8027c80 <_printf_i+0x238>)
 8027bf0:	e7e5      	b.n	8027bbe <_printf_i+0x176>
 8027bf2:	4615      	mov	r5, r2
 8027bf4:	e7be      	b.n	8027b74 <_printf_i+0x12c>
 8027bf6:	682b      	ldr	r3, [r5, #0]
 8027bf8:	6826      	ldr	r6, [r4, #0]
 8027bfa:	1d18      	adds	r0, r3, #4
 8027bfc:	6961      	ldr	r1, [r4, #20]
 8027bfe:	6028      	str	r0, [r5, #0]
 8027c00:	0635      	lsls	r5, r6, #24
 8027c02:	681b      	ldr	r3, [r3, #0]
 8027c04:	d501      	bpl.n	8027c0a <_printf_i+0x1c2>
 8027c06:	6019      	str	r1, [r3, #0]
 8027c08:	e002      	b.n	8027c10 <_printf_i+0x1c8>
 8027c0a:	0670      	lsls	r0, r6, #25
 8027c0c:	d5fb      	bpl.n	8027c06 <_printf_i+0x1be>
 8027c0e:	8019      	strh	r1, [r3, #0]
 8027c10:	2300      	movs	r3, #0
 8027c12:	4615      	mov	r5, r2
 8027c14:	6123      	str	r3, [r4, #16]
 8027c16:	e7bd      	b.n	8027b94 <_printf_i+0x14c>
 8027c18:	682b      	ldr	r3, [r5, #0]
 8027c1a:	2100      	movs	r1, #0
 8027c1c:	1d1a      	adds	r2, r3, #4
 8027c1e:	602a      	str	r2, [r5, #0]
 8027c20:	681d      	ldr	r5, [r3, #0]
 8027c22:	6862      	ldr	r2, [r4, #4]
 8027c24:	4628      	mov	r0, r5
 8027c26:	f000 f971 	bl	8027f0c <memchr>
 8027c2a:	b108      	cbz	r0, 8027c30 <_printf_i+0x1e8>
 8027c2c:	1b40      	subs	r0, r0, r5
 8027c2e:	6060      	str	r0, [r4, #4]
 8027c30:	6863      	ldr	r3, [r4, #4]
 8027c32:	6123      	str	r3, [r4, #16]
 8027c34:	2300      	movs	r3, #0
 8027c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027c3a:	e7ab      	b.n	8027b94 <_printf_i+0x14c>
 8027c3c:	6923      	ldr	r3, [r4, #16]
 8027c3e:	462a      	mov	r2, r5
 8027c40:	4649      	mov	r1, r9
 8027c42:	4640      	mov	r0, r8
 8027c44:	47d0      	blx	sl
 8027c46:	3001      	adds	r0, #1
 8027c48:	d0ae      	beq.n	8027ba8 <_printf_i+0x160>
 8027c4a:	6823      	ldr	r3, [r4, #0]
 8027c4c:	079b      	lsls	r3, r3, #30
 8027c4e:	d413      	bmi.n	8027c78 <_printf_i+0x230>
 8027c50:	68e0      	ldr	r0, [r4, #12]
 8027c52:	9b03      	ldr	r3, [sp, #12]
 8027c54:	4298      	cmp	r0, r3
 8027c56:	bfb8      	it	lt
 8027c58:	4618      	movlt	r0, r3
 8027c5a:	e7a7      	b.n	8027bac <_printf_i+0x164>
 8027c5c:	2301      	movs	r3, #1
 8027c5e:	4632      	mov	r2, r6
 8027c60:	4649      	mov	r1, r9
 8027c62:	4640      	mov	r0, r8
 8027c64:	47d0      	blx	sl
 8027c66:	3001      	adds	r0, #1
 8027c68:	d09e      	beq.n	8027ba8 <_printf_i+0x160>
 8027c6a:	3501      	adds	r5, #1
 8027c6c:	68e3      	ldr	r3, [r4, #12]
 8027c6e:	9903      	ldr	r1, [sp, #12]
 8027c70:	1a5b      	subs	r3, r3, r1
 8027c72:	42ab      	cmp	r3, r5
 8027c74:	dcf2      	bgt.n	8027c5c <_printf_i+0x214>
 8027c76:	e7eb      	b.n	8027c50 <_printf_i+0x208>
 8027c78:	2500      	movs	r5, #0
 8027c7a:	f104 0619 	add.w	r6, r4, #25
 8027c7e:	e7f5      	b.n	8027c6c <_printf_i+0x224>
 8027c80:	0802a3dd 	.word	0x0802a3dd
 8027c84:	0802a3ee 	.word	0x0802a3ee

08027c88 <__sflush_r>:
 8027c88:	898a      	ldrh	r2, [r1, #12]
 8027c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027c8e:	4605      	mov	r5, r0
 8027c90:	0710      	lsls	r0, r2, #28
 8027c92:	460c      	mov	r4, r1
 8027c94:	d458      	bmi.n	8027d48 <__sflush_r+0xc0>
 8027c96:	684b      	ldr	r3, [r1, #4]
 8027c98:	2b00      	cmp	r3, #0
 8027c9a:	dc05      	bgt.n	8027ca8 <__sflush_r+0x20>
 8027c9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027c9e:	2b00      	cmp	r3, #0
 8027ca0:	dc02      	bgt.n	8027ca8 <__sflush_r+0x20>
 8027ca2:	2000      	movs	r0, #0
 8027ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027caa:	2e00      	cmp	r6, #0
 8027cac:	d0f9      	beq.n	8027ca2 <__sflush_r+0x1a>
 8027cae:	2300      	movs	r3, #0
 8027cb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027cb4:	682f      	ldr	r7, [r5, #0]
 8027cb6:	6a21      	ldr	r1, [r4, #32]
 8027cb8:	602b      	str	r3, [r5, #0]
 8027cba:	d032      	beq.n	8027d22 <__sflush_r+0x9a>
 8027cbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027cbe:	89a3      	ldrh	r3, [r4, #12]
 8027cc0:	075a      	lsls	r2, r3, #29
 8027cc2:	d505      	bpl.n	8027cd0 <__sflush_r+0x48>
 8027cc4:	6863      	ldr	r3, [r4, #4]
 8027cc6:	1ac0      	subs	r0, r0, r3
 8027cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027cca:	b10b      	cbz	r3, 8027cd0 <__sflush_r+0x48>
 8027ccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027cce:	1ac0      	subs	r0, r0, r3
 8027cd0:	2300      	movs	r3, #0
 8027cd2:	4602      	mov	r2, r0
 8027cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027cd6:	4628      	mov	r0, r5
 8027cd8:	6a21      	ldr	r1, [r4, #32]
 8027cda:	47b0      	blx	r6
 8027cdc:	1c43      	adds	r3, r0, #1
 8027cde:	89a3      	ldrh	r3, [r4, #12]
 8027ce0:	d106      	bne.n	8027cf0 <__sflush_r+0x68>
 8027ce2:	6829      	ldr	r1, [r5, #0]
 8027ce4:	291d      	cmp	r1, #29
 8027ce6:	d82b      	bhi.n	8027d40 <__sflush_r+0xb8>
 8027ce8:	4a28      	ldr	r2, [pc, #160]	; (8027d8c <__sflush_r+0x104>)
 8027cea:	410a      	asrs	r2, r1
 8027cec:	07d6      	lsls	r6, r2, #31
 8027cee:	d427      	bmi.n	8027d40 <__sflush_r+0xb8>
 8027cf0:	2200      	movs	r2, #0
 8027cf2:	04d9      	lsls	r1, r3, #19
 8027cf4:	6062      	str	r2, [r4, #4]
 8027cf6:	6922      	ldr	r2, [r4, #16]
 8027cf8:	6022      	str	r2, [r4, #0]
 8027cfa:	d504      	bpl.n	8027d06 <__sflush_r+0x7e>
 8027cfc:	1c42      	adds	r2, r0, #1
 8027cfe:	d101      	bne.n	8027d04 <__sflush_r+0x7c>
 8027d00:	682b      	ldr	r3, [r5, #0]
 8027d02:	b903      	cbnz	r3, 8027d06 <__sflush_r+0x7e>
 8027d04:	6560      	str	r0, [r4, #84]	; 0x54
 8027d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027d08:	602f      	str	r7, [r5, #0]
 8027d0a:	2900      	cmp	r1, #0
 8027d0c:	d0c9      	beq.n	8027ca2 <__sflush_r+0x1a>
 8027d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027d12:	4299      	cmp	r1, r3
 8027d14:	d002      	beq.n	8027d1c <__sflush_r+0x94>
 8027d16:	4628      	mov	r0, r5
 8027d18:	f7ff fc94 	bl	8027644 <_free_r>
 8027d1c:	2000      	movs	r0, #0
 8027d1e:	6360      	str	r0, [r4, #52]	; 0x34
 8027d20:	e7c0      	b.n	8027ca4 <__sflush_r+0x1c>
 8027d22:	2301      	movs	r3, #1
 8027d24:	4628      	mov	r0, r5
 8027d26:	47b0      	blx	r6
 8027d28:	1c41      	adds	r1, r0, #1
 8027d2a:	d1c8      	bne.n	8027cbe <__sflush_r+0x36>
 8027d2c:	682b      	ldr	r3, [r5, #0]
 8027d2e:	2b00      	cmp	r3, #0
 8027d30:	d0c5      	beq.n	8027cbe <__sflush_r+0x36>
 8027d32:	2b1d      	cmp	r3, #29
 8027d34:	d001      	beq.n	8027d3a <__sflush_r+0xb2>
 8027d36:	2b16      	cmp	r3, #22
 8027d38:	d101      	bne.n	8027d3e <__sflush_r+0xb6>
 8027d3a:	602f      	str	r7, [r5, #0]
 8027d3c:	e7b1      	b.n	8027ca2 <__sflush_r+0x1a>
 8027d3e:	89a3      	ldrh	r3, [r4, #12]
 8027d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027d44:	81a3      	strh	r3, [r4, #12]
 8027d46:	e7ad      	b.n	8027ca4 <__sflush_r+0x1c>
 8027d48:	690f      	ldr	r7, [r1, #16]
 8027d4a:	2f00      	cmp	r7, #0
 8027d4c:	d0a9      	beq.n	8027ca2 <__sflush_r+0x1a>
 8027d4e:	0793      	lsls	r3, r2, #30
 8027d50:	680e      	ldr	r6, [r1, #0]
 8027d52:	600f      	str	r7, [r1, #0]
 8027d54:	bf0c      	ite	eq
 8027d56:	694b      	ldreq	r3, [r1, #20]
 8027d58:	2300      	movne	r3, #0
 8027d5a:	eba6 0807 	sub.w	r8, r6, r7
 8027d5e:	608b      	str	r3, [r1, #8]
 8027d60:	f1b8 0f00 	cmp.w	r8, #0
 8027d64:	dd9d      	ble.n	8027ca2 <__sflush_r+0x1a>
 8027d66:	4643      	mov	r3, r8
 8027d68:	463a      	mov	r2, r7
 8027d6a:	6a21      	ldr	r1, [r4, #32]
 8027d6c:	4628      	mov	r0, r5
 8027d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027d70:	47b0      	blx	r6
 8027d72:	2800      	cmp	r0, #0
 8027d74:	dc06      	bgt.n	8027d84 <__sflush_r+0xfc>
 8027d76:	89a3      	ldrh	r3, [r4, #12]
 8027d78:	f04f 30ff 	mov.w	r0, #4294967295
 8027d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027d80:	81a3      	strh	r3, [r4, #12]
 8027d82:	e78f      	b.n	8027ca4 <__sflush_r+0x1c>
 8027d84:	4407      	add	r7, r0
 8027d86:	eba8 0800 	sub.w	r8, r8, r0
 8027d8a:	e7e9      	b.n	8027d60 <__sflush_r+0xd8>
 8027d8c:	dfbffffe 	.word	0xdfbffffe

08027d90 <_fflush_r>:
 8027d90:	b538      	push	{r3, r4, r5, lr}
 8027d92:	690b      	ldr	r3, [r1, #16]
 8027d94:	4605      	mov	r5, r0
 8027d96:	460c      	mov	r4, r1
 8027d98:	b913      	cbnz	r3, 8027da0 <_fflush_r+0x10>
 8027d9a:	2500      	movs	r5, #0
 8027d9c:	4628      	mov	r0, r5
 8027d9e:	bd38      	pop	{r3, r4, r5, pc}
 8027da0:	b118      	cbz	r0, 8027daa <_fflush_r+0x1a>
 8027da2:	6a03      	ldr	r3, [r0, #32]
 8027da4:	b90b      	cbnz	r3, 8027daa <_fflush_r+0x1a>
 8027da6:	f7ff fa2f 	bl	8027208 <__sinit>
 8027daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027dae:	2b00      	cmp	r3, #0
 8027db0:	d0f3      	beq.n	8027d9a <_fflush_r+0xa>
 8027db2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027db4:	07d0      	lsls	r0, r2, #31
 8027db6:	d404      	bmi.n	8027dc2 <_fflush_r+0x32>
 8027db8:	0599      	lsls	r1, r3, #22
 8027dba:	d402      	bmi.n	8027dc2 <_fflush_r+0x32>
 8027dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027dbe:	f7ff fbd2 	bl	8027566 <__retarget_lock_acquire_recursive>
 8027dc2:	4628      	mov	r0, r5
 8027dc4:	4621      	mov	r1, r4
 8027dc6:	f7ff ff5f 	bl	8027c88 <__sflush_r>
 8027dca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027dcc:	4605      	mov	r5, r0
 8027dce:	07da      	lsls	r2, r3, #31
 8027dd0:	d4e4      	bmi.n	8027d9c <_fflush_r+0xc>
 8027dd2:	89a3      	ldrh	r3, [r4, #12]
 8027dd4:	059b      	lsls	r3, r3, #22
 8027dd6:	d4e1      	bmi.n	8027d9c <_fflush_r+0xc>
 8027dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027dda:	f7ff fbc5 	bl	8027568 <__retarget_lock_release_recursive>
 8027dde:	e7dd      	b.n	8027d9c <_fflush_r+0xc>

08027de0 <__swbuf_r>:
 8027de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027de2:	460e      	mov	r6, r1
 8027de4:	4614      	mov	r4, r2
 8027de6:	4605      	mov	r5, r0
 8027de8:	b118      	cbz	r0, 8027df2 <__swbuf_r+0x12>
 8027dea:	6a03      	ldr	r3, [r0, #32]
 8027dec:	b90b      	cbnz	r3, 8027df2 <__swbuf_r+0x12>
 8027dee:	f7ff fa0b 	bl	8027208 <__sinit>
 8027df2:	69a3      	ldr	r3, [r4, #24]
 8027df4:	60a3      	str	r3, [r4, #8]
 8027df6:	89a3      	ldrh	r3, [r4, #12]
 8027df8:	071a      	lsls	r2, r3, #28
 8027dfa:	d525      	bpl.n	8027e48 <__swbuf_r+0x68>
 8027dfc:	6923      	ldr	r3, [r4, #16]
 8027dfe:	b31b      	cbz	r3, 8027e48 <__swbuf_r+0x68>
 8027e00:	6823      	ldr	r3, [r4, #0]
 8027e02:	b2f6      	uxtb	r6, r6
 8027e04:	6922      	ldr	r2, [r4, #16]
 8027e06:	4637      	mov	r7, r6
 8027e08:	1a98      	subs	r0, r3, r2
 8027e0a:	6963      	ldr	r3, [r4, #20]
 8027e0c:	4283      	cmp	r3, r0
 8027e0e:	dc04      	bgt.n	8027e1a <__swbuf_r+0x3a>
 8027e10:	4621      	mov	r1, r4
 8027e12:	4628      	mov	r0, r5
 8027e14:	f7ff ffbc 	bl	8027d90 <_fflush_r>
 8027e18:	b9e0      	cbnz	r0, 8027e54 <__swbuf_r+0x74>
 8027e1a:	68a3      	ldr	r3, [r4, #8]
 8027e1c:	3b01      	subs	r3, #1
 8027e1e:	60a3      	str	r3, [r4, #8]
 8027e20:	6823      	ldr	r3, [r4, #0]
 8027e22:	1c5a      	adds	r2, r3, #1
 8027e24:	6022      	str	r2, [r4, #0]
 8027e26:	701e      	strb	r6, [r3, #0]
 8027e28:	1c43      	adds	r3, r0, #1
 8027e2a:	6962      	ldr	r2, [r4, #20]
 8027e2c:	429a      	cmp	r2, r3
 8027e2e:	d004      	beq.n	8027e3a <__swbuf_r+0x5a>
 8027e30:	89a3      	ldrh	r3, [r4, #12]
 8027e32:	07db      	lsls	r3, r3, #31
 8027e34:	d506      	bpl.n	8027e44 <__swbuf_r+0x64>
 8027e36:	2e0a      	cmp	r6, #10
 8027e38:	d104      	bne.n	8027e44 <__swbuf_r+0x64>
 8027e3a:	4621      	mov	r1, r4
 8027e3c:	4628      	mov	r0, r5
 8027e3e:	f7ff ffa7 	bl	8027d90 <_fflush_r>
 8027e42:	b938      	cbnz	r0, 8027e54 <__swbuf_r+0x74>
 8027e44:	4638      	mov	r0, r7
 8027e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027e48:	4621      	mov	r1, r4
 8027e4a:	4628      	mov	r0, r5
 8027e4c:	f000 f806 	bl	8027e5c <__swsetup_r>
 8027e50:	2800      	cmp	r0, #0
 8027e52:	d0d5      	beq.n	8027e00 <__swbuf_r+0x20>
 8027e54:	f04f 37ff 	mov.w	r7, #4294967295
 8027e58:	e7f4      	b.n	8027e44 <__swbuf_r+0x64>
	...

08027e5c <__swsetup_r>:
 8027e5c:	b538      	push	{r3, r4, r5, lr}
 8027e5e:	4b2a      	ldr	r3, [pc, #168]	; (8027f08 <__swsetup_r+0xac>)
 8027e60:	4605      	mov	r5, r0
 8027e62:	460c      	mov	r4, r1
 8027e64:	6818      	ldr	r0, [r3, #0]
 8027e66:	b118      	cbz	r0, 8027e70 <__swsetup_r+0x14>
 8027e68:	6a03      	ldr	r3, [r0, #32]
 8027e6a:	b90b      	cbnz	r3, 8027e70 <__swsetup_r+0x14>
 8027e6c:	f7ff f9cc 	bl	8027208 <__sinit>
 8027e70:	89a3      	ldrh	r3, [r4, #12]
 8027e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027e76:	0718      	lsls	r0, r3, #28
 8027e78:	d422      	bmi.n	8027ec0 <__swsetup_r+0x64>
 8027e7a:	06d9      	lsls	r1, r3, #27
 8027e7c:	d407      	bmi.n	8027e8e <__swsetup_r+0x32>
 8027e7e:	2309      	movs	r3, #9
 8027e80:	602b      	str	r3, [r5, #0]
 8027e82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027e86:	f04f 30ff 	mov.w	r0, #4294967295
 8027e8a:	81a3      	strh	r3, [r4, #12]
 8027e8c:	e034      	b.n	8027ef8 <__swsetup_r+0x9c>
 8027e8e:	0758      	lsls	r0, r3, #29
 8027e90:	d512      	bpl.n	8027eb8 <__swsetup_r+0x5c>
 8027e92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027e94:	b141      	cbz	r1, 8027ea8 <__swsetup_r+0x4c>
 8027e96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027e9a:	4299      	cmp	r1, r3
 8027e9c:	d002      	beq.n	8027ea4 <__swsetup_r+0x48>
 8027e9e:	4628      	mov	r0, r5
 8027ea0:	f7ff fbd0 	bl	8027644 <_free_r>
 8027ea4:	2300      	movs	r3, #0
 8027ea6:	6363      	str	r3, [r4, #52]	; 0x34
 8027ea8:	89a3      	ldrh	r3, [r4, #12]
 8027eaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027eae:	81a3      	strh	r3, [r4, #12]
 8027eb0:	2300      	movs	r3, #0
 8027eb2:	6063      	str	r3, [r4, #4]
 8027eb4:	6923      	ldr	r3, [r4, #16]
 8027eb6:	6023      	str	r3, [r4, #0]
 8027eb8:	89a3      	ldrh	r3, [r4, #12]
 8027eba:	f043 0308 	orr.w	r3, r3, #8
 8027ebe:	81a3      	strh	r3, [r4, #12]
 8027ec0:	6923      	ldr	r3, [r4, #16]
 8027ec2:	b94b      	cbnz	r3, 8027ed8 <__swsetup_r+0x7c>
 8027ec4:	89a3      	ldrh	r3, [r4, #12]
 8027ec6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027ece:	d003      	beq.n	8027ed8 <__swsetup_r+0x7c>
 8027ed0:	4621      	mov	r1, r4
 8027ed2:	4628      	mov	r0, r5
 8027ed4:	f000 f84d 	bl	8027f72 <__smakebuf_r>
 8027ed8:	89a0      	ldrh	r0, [r4, #12]
 8027eda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027ede:	f010 0301 	ands.w	r3, r0, #1
 8027ee2:	d00a      	beq.n	8027efa <__swsetup_r+0x9e>
 8027ee4:	2300      	movs	r3, #0
 8027ee6:	60a3      	str	r3, [r4, #8]
 8027ee8:	6963      	ldr	r3, [r4, #20]
 8027eea:	425b      	negs	r3, r3
 8027eec:	61a3      	str	r3, [r4, #24]
 8027eee:	6923      	ldr	r3, [r4, #16]
 8027ef0:	b943      	cbnz	r3, 8027f04 <__swsetup_r+0xa8>
 8027ef2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027ef6:	d1c4      	bne.n	8027e82 <__swsetup_r+0x26>
 8027ef8:	bd38      	pop	{r3, r4, r5, pc}
 8027efa:	0781      	lsls	r1, r0, #30
 8027efc:	bf58      	it	pl
 8027efe:	6963      	ldrpl	r3, [r4, #20]
 8027f00:	60a3      	str	r3, [r4, #8]
 8027f02:	e7f4      	b.n	8027eee <__swsetup_r+0x92>
 8027f04:	2000      	movs	r0, #0
 8027f06:	e7f7      	b.n	8027ef8 <__swsetup_r+0x9c>
 8027f08:	200000fc 	.word	0x200000fc

08027f0c <memchr>:
 8027f0c:	b2c9      	uxtb	r1, r1
 8027f0e:	4402      	add	r2, r0
 8027f10:	b510      	push	{r4, lr}
 8027f12:	4290      	cmp	r0, r2
 8027f14:	4603      	mov	r3, r0
 8027f16:	d101      	bne.n	8027f1c <memchr+0x10>
 8027f18:	2300      	movs	r3, #0
 8027f1a:	e003      	b.n	8027f24 <memchr+0x18>
 8027f1c:	781c      	ldrb	r4, [r3, #0]
 8027f1e:	3001      	adds	r0, #1
 8027f20:	428c      	cmp	r4, r1
 8027f22:	d1f6      	bne.n	8027f12 <memchr+0x6>
 8027f24:	4618      	mov	r0, r3
 8027f26:	bd10      	pop	{r4, pc}

08027f28 <__swhatbuf_r>:
 8027f28:	b570      	push	{r4, r5, r6, lr}
 8027f2a:	460c      	mov	r4, r1
 8027f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f30:	b096      	sub	sp, #88	; 0x58
 8027f32:	4615      	mov	r5, r2
 8027f34:	2900      	cmp	r1, #0
 8027f36:	461e      	mov	r6, r3
 8027f38:	da0c      	bge.n	8027f54 <__swhatbuf_r+0x2c>
 8027f3a:	89a3      	ldrh	r3, [r4, #12]
 8027f3c:	2100      	movs	r1, #0
 8027f3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8027f42:	bf0c      	ite	eq
 8027f44:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8027f48:	2340      	movne	r3, #64	; 0x40
 8027f4a:	2000      	movs	r0, #0
 8027f4c:	6031      	str	r1, [r6, #0]
 8027f4e:	602b      	str	r3, [r5, #0]
 8027f50:	b016      	add	sp, #88	; 0x58
 8027f52:	bd70      	pop	{r4, r5, r6, pc}
 8027f54:	466a      	mov	r2, sp
 8027f56:	f000 f849 	bl	8027fec <_fstat_r>
 8027f5a:	2800      	cmp	r0, #0
 8027f5c:	dbed      	blt.n	8027f3a <__swhatbuf_r+0x12>
 8027f5e:	9901      	ldr	r1, [sp, #4]
 8027f60:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8027f64:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8027f68:	4259      	negs	r1, r3
 8027f6a:	4159      	adcs	r1, r3
 8027f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027f70:	e7eb      	b.n	8027f4a <__swhatbuf_r+0x22>

08027f72 <__smakebuf_r>:
 8027f72:	898b      	ldrh	r3, [r1, #12]
 8027f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027f76:	079d      	lsls	r5, r3, #30
 8027f78:	4606      	mov	r6, r0
 8027f7a:	460c      	mov	r4, r1
 8027f7c:	d507      	bpl.n	8027f8e <__smakebuf_r+0x1c>
 8027f7e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027f82:	6023      	str	r3, [r4, #0]
 8027f84:	6123      	str	r3, [r4, #16]
 8027f86:	2301      	movs	r3, #1
 8027f88:	6163      	str	r3, [r4, #20]
 8027f8a:	b002      	add	sp, #8
 8027f8c:	bd70      	pop	{r4, r5, r6, pc}
 8027f8e:	ab01      	add	r3, sp, #4
 8027f90:	466a      	mov	r2, sp
 8027f92:	f7ff ffc9 	bl	8027f28 <__swhatbuf_r>
 8027f96:	9900      	ldr	r1, [sp, #0]
 8027f98:	4605      	mov	r5, r0
 8027f9a:	4630      	mov	r0, r6
 8027f9c:	f7ff f80e 	bl	8026fbc <_malloc_r>
 8027fa0:	b948      	cbnz	r0, 8027fb6 <__smakebuf_r+0x44>
 8027fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027fa6:	059a      	lsls	r2, r3, #22
 8027fa8:	d4ef      	bmi.n	8027f8a <__smakebuf_r+0x18>
 8027faa:	f023 0303 	bic.w	r3, r3, #3
 8027fae:	f043 0302 	orr.w	r3, r3, #2
 8027fb2:	81a3      	strh	r3, [r4, #12]
 8027fb4:	e7e3      	b.n	8027f7e <__smakebuf_r+0xc>
 8027fb6:	89a3      	ldrh	r3, [r4, #12]
 8027fb8:	6020      	str	r0, [r4, #0]
 8027fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027fbe:	6120      	str	r0, [r4, #16]
 8027fc0:	81a3      	strh	r3, [r4, #12]
 8027fc2:	9b00      	ldr	r3, [sp, #0]
 8027fc4:	6163      	str	r3, [r4, #20]
 8027fc6:	9b01      	ldr	r3, [sp, #4]
 8027fc8:	b15b      	cbz	r3, 8027fe2 <__smakebuf_r+0x70>
 8027fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027fce:	4630      	mov	r0, r6
 8027fd0:	f000 f81e 	bl	8028010 <_isatty_r>
 8027fd4:	b128      	cbz	r0, 8027fe2 <__smakebuf_r+0x70>
 8027fd6:	89a3      	ldrh	r3, [r4, #12]
 8027fd8:	f023 0303 	bic.w	r3, r3, #3
 8027fdc:	f043 0301 	orr.w	r3, r3, #1
 8027fe0:	81a3      	strh	r3, [r4, #12]
 8027fe2:	89a3      	ldrh	r3, [r4, #12]
 8027fe4:	431d      	orrs	r5, r3
 8027fe6:	81a5      	strh	r5, [r4, #12]
 8027fe8:	e7cf      	b.n	8027f8a <__smakebuf_r+0x18>
	...

08027fec <_fstat_r>:
 8027fec:	b538      	push	{r3, r4, r5, lr}
 8027fee:	2300      	movs	r3, #0
 8027ff0:	4d06      	ldr	r5, [pc, #24]	; (802800c <_fstat_r+0x20>)
 8027ff2:	4604      	mov	r4, r0
 8027ff4:	4608      	mov	r0, r1
 8027ff6:	4611      	mov	r1, r2
 8027ff8:	602b      	str	r3, [r5, #0]
 8027ffa:	f7d9 fb06 	bl	800160a <_fstat>
 8027ffe:	1c43      	adds	r3, r0, #1
 8028000:	d102      	bne.n	8028008 <_fstat_r+0x1c>
 8028002:	682b      	ldr	r3, [r5, #0]
 8028004:	b103      	cbz	r3, 8028008 <_fstat_r+0x1c>
 8028006:	6023      	str	r3, [r4, #0]
 8028008:	bd38      	pop	{r3, r4, r5, pc}
 802800a:	bf00      	nop
 802800c:	2000fe24 	.word	0x2000fe24

08028010 <_isatty_r>:
 8028010:	b538      	push	{r3, r4, r5, lr}
 8028012:	2300      	movs	r3, #0
 8028014:	4d05      	ldr	r5, [pc, #20]	; (802802c <_isatty_r+0x1c>)
 8028016:	4604      	mov	r4, r0
 8028018:	4608      	mov	r0, r1
 802801a:	602b      	str	r3, [r5, #0]
 802801c:	f7d9 fb05 	bl	800162a <_isatty>
 8028020:	1c43      	adds	r3, r0, #1
 8028022:	d102      	bne.n	802802a <_isatty_r+0x1a>
 8028024:	682b      	ldr	r3, [r5, #0]
 8028026:	b103      	cbz	r3, 802802a <_isatty_r+0x1a>
 8028028:	6023      	str	r3, [r4, #0]
 802802a:	bd38      	pop	{r3, r4, r5, pc}
 802802c:	2000fe24 	.word	0x2000fe24

08028030 <_init>:
 8028030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028032:	bf00      	nop
 8028034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028036:	bc08      	pop	{r3}
 8028038:	469e      	mov	lr, r3
 802803a:	4770      	bx	lr

0802803c <_fini>:
 802803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802803e:	bf00      	nop
 8028040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028042:	bc08      	pop	{r3}
 8028044:	469e      	mov	lr, r3
 8028046:	4770      	bx	lr
